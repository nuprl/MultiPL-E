language: sh
name: HumanEval_148_bf
results:
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planets=(\"Mercury\" \"\
    Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n  \
    \  planet1=$1\n    planet2=$2\n    if [[ \"$planet1\" != \"Mercury\" && \"$planet1\"\
    \ != \"Venus\" && \"$planet1\" != \"Earth\" && \"$planet1\" != \"Mars\" && \"\
    $planet1\" != \"Jupiter\" && \"$planet1\" != \"Saturn\" && \"$planet1\" != \"\
    Uranus\" && \"$planet1\" != \"Neptune\" ]]; then\n        echo \"Planet $planet1\
    \ not found\"\n        return 1\n    fi\n    if [[ \"$planet2\" != \"Mercury\"\
    \ && \"$planet2\" != \"Venus\" && \"$planet2\" != \"Earth\" && \"$planet2\" !=\
    \ \"Mars\" && \"$planet2\" != \"Jupiter\" && \"$planet2\" != \"Saturn\" && \"\
    $planet2\" != \"Uranus\" && \"$planet2\" != \"Neptune\" ]]; then\n        echo\
    \ \"Planet $planet2 not found\"\n        return 1\n    fi\n    if [[ \"$planet1\"\
    \ == \"$planet2\" ]]; then\n        echo \"Planet $planet1 and $planet2 are the\
    \ same\"\n        return 1\n    fi\n    p1_position=0\n    p2_position=0\n   \
    \ for p in \"${planets[@]}\"; do\n        if [[ \"$p\" == \"$planet1\" ]]; then\n\
    \            p1_position=$i\n        fi\n        if [[ \"$p\" == \"$planet2\"\
    \ ]]; then\n            p2_position=$i\n        fi\n        i=$((i+1))\n    done\n\
    \    if [[ $p1_position -lt $p2_position ]]; then\n        planets=(${planets[@]:$p1_position:$p2_position})\n\
    \    else\n        planets=(${planets[@]:$p2_position:$p1_position})\n    fi\n\
    \    planets=(${planets[@]})\n    echo ${planets[@]}\n}\n\ncandidate() {\n   \
    \ bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020679
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planets=(\"Mercury\" \"\
    Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n  \
    \  pos1=-1\n    pos2=-1\n    for i in \"${!planets[@]}\"; do\n        if [[ \"\
    ${planets[$i]}\" == \"$1\" ]]; then\n            pos1=$i\n        fi\n       \
    \ if [[ \"${planets[$i]}\" == \"$2\" ]]; then\n            pos2=$i\n        fi\n\
    \    done\n    if [ $pos1 -eq -1 ] || [ $pos2 -eq -1 ]; then\n        echo \"\
    []\"\n    else\n        if [ $pos1 -le $pos2 ]; then\n            IFS=$'\\n'\n\
    \            echo \"[\\\"${planets[@]:$pos1+1:$pos2-$pos1}\\\"]\"\n        else\n\
    \            IFS=$'\\n'\n            echo \"[\\\"${planets[@]:$pos2+1:$pos1-$pos2}\\\
    \"]\"\n        fi\n    fi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[\
    \ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\"\
    \ \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"\
    Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tP1=\"$1\"\n\tP2=\"$2\"\n\t\
    \n\t# The function should return an empty list if planet1 or planet2\n\t# are\
    \ not correct planet names.\n\tif [[ \"$P1\" == \"Mercury\" || \"$P1\" == \"Venus\"\
    \ || \"$P1\" == \"Earth\" || \n\t\t\"$P1\" == \"Mars\" || \"$P1\" == \"Jupiter\"\
    \ || \"$P1\" == \"Saturn\" || \n\t\t\"$P1\" == \"Uranus\" || \"$P1\" == \"Neptune\"\
    \ ]]; then\n\t\tif [[ \"$P2\" == \"Mercury\" || \"$P2\" == \"Venus\" || \"$P2\"\
    \ == \"Earth\" || \n\t\t\t\"$P2\" == \"Mars\" || \"$P2\" == \"Jupiter\" || \"\
    $P2\" == \"Saturn\" || \n\t\t\t\"$P2\" == \"Uranus\" || \"$P2\" == \"Neptune\"\
    \ ]]; then\n\t\t\t# The function should return a list containing all planets whose\
    \ \n\t\t\t# orbits are located between the orbit of planet1 and the orbit of \n\
    \t\t\t# planet2, sorted by the proximity to the sun.\n\t\t\tif [[ \"$P1\" == \"\
    Mercury\" && \"$P2\" == \"Venus\" ]]; then\n\t\t\t\techo \"Earth\"\n\t\t\telif\
    \ [[ \"$P1\" == \"Venus\" && \"$P2\" == \"Earth\" ]]; then\n\t\t\t\techo \"Mars\"\
    \n\t\t\telif [[ \"$P1\" == \"Earth\" && \"$P2\" == \"Mars\" ]]; then\n\t\t\t\t\
    echo \"Jupiter\"\n\t\t\telif [[ \"$P1\" == \"Mars\" && \"$P2\" == \"Jupiter\"\
    \ ]]; then\n\t\t\t\techo \"Saturn\"\n\t\t\telif [[ \"$P1\" == \"Jupiter\" && \"\
    $P2\" == \"Saturn\" ]]; then\n\t\t\t\techo \"Uranus\"\n\t\t\telif [[ \"$P1\" ==\
    \ \"Saturn\" && \"$P2\" == \"Uranus\" ]]; then\n\t\t\t\n}\n\ncandidate() {\n \
    \   bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0zk1p8ay.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmp0zk1p8ay.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1660020679
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [ -z \"$1\" ] || [ -z\
    \ \"$2\" ]; then\n        echo \"Usage: $0 planet1 planet2\"\n        return\n\
    \    fi\n    local planets=(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune)\n\
    \    local start=$(indexof \"$1\" \"${planets[@]}\")\n    local end=$(indexof\
    \ \"$2\" \"${planets[@]}\")\n    if [ -z \"$start\" ] || [ -z \"$end\" ]; then\n\
    \        echo \"Invalid planet\"\n        return\n    fi\n    if [ $start -eq\
    \ $end ]; then\n        echo \"No planets in between\"\n        return\n    fi\n\
    \    if [ $start -gt $end ]; then\n        local index=$start\n        start=$end\n\
    \        end=$index\n    fi\n    local i=$start\n    while [ $i -lt $end ]; do\n\
    \        echo -n \"\\\"${planets[$i]}\\\" \"\n        i=$(($i+1))\n    done\n\
    \    echo \"\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpio20l0s2.sh: line 27: indexof: command not found

    /tmp/tmpio20l0s2.sh: line 28: indexof: command not found

    '
  stdout: ''
  timestamp: 1660020679
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # Complete the body of\
    \ the function below.\n    # You may create other functions if needed.\n    #\n\
    \    # The output should be a string, or a list (array) of strings.\n    #\n \
    \   # Your code starts here\n    declare -a Planet=(\"Mercury\" \"Venus\" \"Earth\"\
    \ \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n    declare -a PlanetIndex=(\"\
    0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\")\n    declare -a AllPlanetIndex=(\"\
    0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\")\n    declare -a Res\n\n    for\
    \ (( i=0; i<${#Planet[@]}; i++ ))\n    do\n        if [ \"${Planet[$i]}\" = \"\
    $1\" ]\n        then\n            planet1=${PlanetIndex[$i]}\n        fi\n   \
    \     if [ \"${Planet[$i]}\" = \"$2\" ]\n        then\n            planet2=${PlanetIndex[$i]}\n\
    \        fi\n    done\n\n    if [ \"$1\" = \"Neptune\" ]\n    then\n        planet1=7\n\
    \    fi\n    if [ \"$2\" = \"Mercury\" ]\n    then\n        planet2=0\n    fi\n\
    \n    if [ -z \"$planet1\" ] || [ -z \"$planet2\" ]\n    then\n        echo \"\
    []\"\n    else\n        for (( i=0; i<${#AllPlanetIndex[@]}; i++ ))\n        do\n\
    \            if [ \"${AllPlanetIndex[$i]}\" -ge \"$planet1\" ] && [ \"${AllPlanetIndex[$i]}\"\
    \ -le \"$planet2\" ]\n            then\n                Res+=(\"${Planet[$i]}\"\
    )\n            fi\n        done\n        echo \"[\\\"${Res[*]}\\\"]\"\n    fi\n\
    }\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020679
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  # create a custom array (for\
    \ fun)\n  declare -a planets=(\n    \"Mercury\"\n    \"Venus\"\n    \"Earth\"\n\
    \    \"Mars\"\n    \"Jupiter\"\n    \"Saturn\"\n    \"Uranus\"\n    \"Neptune\"\
    \n  )\n  # create an empty array to store the output\n  res=()\n  # TODO: fix\
    \ this method\n  for planet in \"${planets[@]}\"; do\n    # I could use bc to\
    \ compare float number\n    if [[ $planet =~ $1 ]]; then\n      continue\n   \
    \ fi\n    if [[ $planet =~ $2 ]]; then\n      break\n    fi\n    res+=(\"$planet\"\
    )\n  done\n  echo $res\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[\
    \ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\"\
    \ \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"\
    Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020679
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  if [[ ${1} =~ ^(Mercury|Venus|Earth|Mars|Jupiter|Saturn|Uranus|Neptune)$\
    \ ]] &&\n     [[ ${2} =~ ^(Mercury|Venus|Earth|Mars|Jupiter|Saturn|Uranus|Neptune)$\
    \ ]]; then\n     \n    planet1_index=0\n    planet2_index=0\n    for i in 0 1\
    \ 2 3 4 5 6 7; do\n      if [[ \"${planet_name[$i]}\" == \"${1}\" ]]; then\n \
    \       planet1_index=${i}\n      fi\n      if [[ \"${planet_name[$i]}\" == \"\
    ${2}\" ]]; then\n        planet2_index=${i}\n      fi\n    done\n    [[ ${planet1_index}\
    \ -lt ${planet2_index} ]] && awk -v low=${planet1_index} -v high=${planet2_index}\
    \ '{if (NR>low && NR<high) {print $0}}' planet_distance.txt\n    [[ ${planet1_index}\
    \ -gt ${planet2_index} ]] && awk -v low=${planet2_index} -v high=${planet1_index}\
    \ '{if (NR>low && NR<high) {print $0}}' planet_distance.txt\n  fi\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # Check the input parameters\n\
    \    if ! [ \"$1\" ] || ! [ \"$2\" ]; then\n        echo \"usage: $(basename $0)\
    \ first_planet second_planet\"\n        return 1\n    fi\n    local first=\"$1\"\
    \n    local second=\"$2\"\n    # Order the planets in terms of proximity to the\
    \ sun\n    local planets=(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune)\n\
    \    # Build the list of planets to output\n    local to_output\n    local found_one=false\n\
    \    local found_two=false\n    local index=0\n    for planet in \"${planets[@]}\"\
    ; do\n        if [ \"$planet\" == \"$first\" ]; then\n            found_one=true\n\
    \        fi\n        if [ \"$planet\" == \"$second\" ]; then\n            found_two=true\n\
    \        fi\n        if [ \"$found_one\" == true ] && [ \"$found_two\" == false\
    \ ]; then\n            to_output=\"$to_output $planet\"\n        fi\n        index=$(($index\
    \ + 1))\n    done\n    # Check if the planets were found\n    if [ \"$found_one\"\
    \ == false ] || [ \"$found_two\" == false ]; then\n        echo \"usage: $(basename\
    \ $0) first_planet second_planet\"\n        return 1\n    fi\n    # Output the\
    \ planets\n    echo $to_output\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [[ $1 == \"Mercury\"\
    \ ]]; then\n        start=0\n    elif [[ $1 == \"Venus\" ]]; then\n        start=1\n\
    \    elif [[ $1 == \"Earth\" ]]; then\n        start=2\n    elif [[ $1 == \"Mars\"\
    \ ]]; then\n        start=3\n    elif [[ $1 == \"Jupiter\" ]]; then\n        start=4\n\
    \    elif [[ $1 == \"Saturn\" ]]; then\n        start=5\n    elif [[ $1 == \"\
    Uranus\" ]]; then\n        start=6\n    elif [[ $1 == \"Neptune\" ]]; then\n \
    \       start=7\n    else\n        echo \"\"\n        return\n    fi\n    if [[\
    \ $2 == \"Mercury\" ]]; then\n        end=0\n    elif [[ $2 == \"Venus\" ]]; then\n\
    \        end=1\n    elif [[ $2 == \"Earth\" ]]; then\n        end=2\n    elif\
    \ [[ $2 == \"Mars\" ]]; then\n        end=3\n    elif [[ $2 == \"Jupiter\" ]];\
    \ then\n        end=4\n    elif [[ $2 == \"Saturn\" ]]; then\n        end=5\n\
    \    elif [[ $2 == \"Uranus\" ]]; then\n        end=6\n    elif [[ $2 == \"Neptune\"\
    \ ]]; then\n        end=7\n    else\n        echo \"\"\n        return\n    fi\n\
    \    planets=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"\
    \ \"Uranus\" \"Neptune\")\n    if [[ $start > $end ]]; then\n        echo \"[\"\
    \n        while [[ $start -gt $end ]]; do\n            echo \\\"${planets[$start]}\\\
    \"\n            ((start-=1))\n        done\n        echo \"]\"\n    else\n   \
    \     echo \"[\"\n        while [[ $start -lt $end ]]; do\n            echo \\\
    \"${planets[$start]}\\\"\n            ((start+=1))\n        done\n        echo\
    \ \"]\"\n    fi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tlist=(\"Mercury\" \"Venus\"\
    \ \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\tfirst=0\n\
    \tend=0\n\tfor i in $(seq 0 7); do\n\t\tif [ \"${list[$i]}\" = \"$1\" ]; then\n\
    \t\t\tfirst=$i\n\t\tfi\n\t\tif [ \"${list[$i]}\" = \"$2\" ]; then\n\t\t\tend=$i\n\
    \t\tfi\n\tdone\n\tif [ $first -lt $end ]; then\n\t\tfor i in $(seq $first $end);\
    \ do\n\t\t\techo ${list[$i]}\n\t\tdone\n\telse\n\t\tfor i in $(seq $end $first);\
    \ do\n\t\t\techo ${list[$i]}\n\t\tdone\n\tfi\n}\n\ncandidate() {\n    bf \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"\
    Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n\
    \    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\"\
    \ ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\")\
    \ = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  local planets\n  planets=(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune)\n  local planets_small\n  local\
    \ planets_big\n  local planets_out\n  local i\n  i=0\n  while [ ${planets[$i]}\
    \ != $1 ] && [ $i -lt 8 ]; do\n    ((i++))\n  done\n  if [ $i -lt 8 ]; then\n\
    \    planets_small=$i\n  else\n    echo \"[]\"\n    return\n  fi\n  i=0\n  while\
    \ [ ${planets[$i]} != $2 ] && [ $i -lt 8 ]; do\n    ((i++))\n  done\n  if [ $i\
    \ -lt 8 ]; then\n    planets_big=$i\n  else\n    echo \"[]\"\n    return\n  fi\n\
    \  if [ $planets_small -gt $planets_big ]; then\n    i=$planets_small\n    planets_small=$planets_big\n\
    \    planets_big=$i\n  fi\n  planets_out=\"[\"\n  i=$planets_small\n  while [\
    \ $i -lt $planets_big ]; do\n    ((i++))\n    planets_out=\"$planets_out\\\"${planets[$i]}\\\
    \",\"\n  done\n  echo \"${planets_out%?}]\"\n}\n\ncandidate() {\n    bf \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"\
    Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n\
    \    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\"\
    \ ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\")\
    \ = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: -1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    printf \"\\\"$1\\\"\\n\"\
    \ | bf - \n    printf \"\\\"$2\\\"\\n\" | bf - \n}\n\ncandidate() {\n    bf \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") =\
    \ \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=12 encoding='utf-8'>
  timestamp: 1660020685
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planets=(\"Mercury\" \"\
    Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n  \
    \  # Write your code here\n    p1=0\n    p2=0\n    num1=0\n    num2=0\n    for\
    \ ((i=0;i<8;i++))\n    do\n        if [ \"${planets[$i]}\" = \"$1\" ]\n      \
    \  then\n            p1=${planets[$i]}\n            num1=$i\n        fi\n    \
    \    if [ \"${planets[$i]}\" = \"$2\" ]\n        then\n            p2=${planets[$i]}\n\
    \            num2=$i\n        fi\n    done\n    if [ $p1 = 0 ] || [ $p2 = 0 ]\n\
    \    then\n        echo \"[]\"\n    else\n        if [ $num1 -gt $num2 ]\n   \
    \     then\n            echo \"[]\"\n        else\n            cnt=0\n       \
    \     for ((i=$num1+1;i<$num2;i++))\n            do\n                array[$cnt]=${planets[$i]}\n\
    \                cnt=$(($cnt+1))\n            done\n            echo $cnt\n  \
    \          # if [ $cnt -lt 1 ]\n            # then\n            #     echo \"\
    []\"\n            # else\n            #     echo \"['\"$array\"']\"\n        \
    \    # fi\n        fi\n    fi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n   # Fill in here with the\
    \ name of each planet\n   # Use a case insentive match\n   case $1 in\n      Mercury|Venus|Earth|Mars|Jupiter|Saturn|Uranus|Neptune)\n\
    \         a=$1\n         ;;\n      *)\n         a=\n         ;;\n   esac\n   case\
    \ $2 in\n      Mercury|Venus|Earth|Mars|Jupiter|Saturn|Uranus|Neptune)\n     \
    \    b=$2\n         ;;\n      *)\n         b=\n         ;;\n   esac\n   # check\
    \ that both a and b are set, otherwise return\n   [ -z \"$a\" -o -z \"$b\" ] &&\
    \ return\n   # Fill in here with the order of planets from closest to the Sun\
    \ to \n   # farthest\n   planets=(Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune)\n   # return the list of planets between $a and $b\n   planets=(`echo\
    \ ${planets[@]} | sed -E \"s/.*$a.*$b.*|.*$b.*$a.*//g\"`)\n   if [ -z \"$planets\"\
    \ ]; then\n      echo \"[]\"\n   else\n      echo ${planets[@]} | sed 's/ /\"\
    , \"/g' | sed 's/^/[\\\"/' | sed 's/$/\\\"]/'\n   fi\n}\n\ncandidate() {\n   \
    \ bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  if [[ $1 == \"Mercury\" &&\
    \ $2 == \"Venus\" ]]; then echo \"Earth\";\n  elif [[ $1 == \"Venus\" && $2 ==\
    \ \"Earth\" ]]; then echo \"Mercury\";\n  elif [[ $1 == \"Earth\" && $2 == \"\
    Mercury\" ]]; then echo \"Venus\";\n  elif [[ $1 == \"Mercury\" && $2 == \"Earth\"\
    \ ]]; then echo \"Venus\";\n  elif [[ $1 == \"Venus\" && $2 == \"Mercury\" ]];\
    \ then echo \"Earth\";\n  elif [[ $1 == \"Earth\" && $2 == \"Venus\" ]]; then\
    \ echo \"Mercury\";\n  elif [[ $1 == \"Venus\" && $2 == \"Mars\" ]]; then echo\
    \ \"Earth\";\n  elif [[ $1 == \"Mars\" && $2 == \"Venus\" ]]; then echo \"Earth\"\
    ;\n  elif [[ $1 == \"Earth\" && $2 == \"Mars\" ]]; then echo \"Venus\";\n  elif\
    \ [[ $1 == \"Mars\" && $2 == \"Earth\" ]]; then echo \"Venus\";\n  elif [[ $1\
    \ == \"Venus\" && $2 == \"Jupiter\" ]]; then echo \"Earth Mars\";\n  elif [[ $1\
    \ == \"Jupiter\" && $2 == \"Venus\" ]]; then echo \"Earth Mars\";\n  elif [[ $1\
    \ == \"Earth\" && $2 == \"Jupiter\" ]]; then echo \"Venus Mars\";\n  elif [[ $1\
    \ == \"Jupiter\" && $2 == \"Earth\" ]]; then echo \"Venus Mars\";\n  elif [[ $1\
    \ == \"Mars\" && $2 == \"Jupiter\" ]]; then echo \"Earth Venus\";\n  elif [[ $1\
    \ == \"Jupiter\" && $2 == \"Mars\" ]]; then echo \"Earth Venus\";\n  elif [[ $1\
    \ == \"Venus\" && $2 == \"Saturn\" ]]; then echo \"Earth Mars Jupiter\";\n  elif\
    \ [[ $1 == \"Saturn\" && $2 == \"Venus\" ]]; then echo \"Earth Mars Jupiter\"\
    ;\n  elif [[ $1 == \"Earth\" && $2 == \"Saturn\" ]]; then echo\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcpesebaa.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmpcpesebaa.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [[ $1 =~ \"Mercury\"\
    \ ]]; then\n        if [[ $2 =~ \"Mercury\" ]]; then\n            :\n        elif\
    \ [[ $2 =~ \"Venus\" ]]; then\n            echo '\"Venus\"'\n        elif [[ $2\
    \ =~ \"Earth\" ]]; then\n            echo '\"Venus\"'\n            echo '\"Earth\"\
    '\n        elif [[ $2 =~ \"Mars\" ]]; then\n            echo '\"Venus\"'\n   \
    \         echo '\"Earth\"'\n            echo '\"Mars\"'\n        elif [[ $2 =~\
    \ \"Jupiter\" ]]; then\n            echo '\"Venus\"'\n            echo '\"Earth\"\
    '\n            echo '\"Mars\"'\n            echo '\"Jupiter\"'\n        elif [[\
    \ $2 =~ \"Saturn\" ]]; then\n            echo '\"Venus\"'\n            echo '\"\
    Earth\"'\n            echo '\"Mars\"'\n            echo '\"Jupiter\"'\n      \
    \      echo '\"Saturn\"'\n        elif [[ $2 =~ \"Uranus\" ]]; then\n        \
    \    echo '\"Venus\"'\n            echo '\"Earth\"'\n            echo '\"Mars\"\
    '\n            echo '\"Jupiter\"'\n            echo '\"Saturn\"'\n           \
    \ echo '\"Uranus\"'\n        elif [[ $2 =~ \"Neptune\" ]]; then\n            echo\
    \ '\"Venus\"'\n            echo '\"Earth\"'\n            echo '\"Mars\"'\n   \
    \         echo '\"Jupiter\"'\n            echo '\"Saturn\"'\n            echo\
    \ '\"Uranus\"'\n            echo '\"Neptune\"'\n        else\n            :\n\
    \        fi\n    elif [[ $1 =~ \"Venus\" ]]; then\n        if [[ $2 =~ \"Mercury\"\
    \ ]]; then\n            :\n        elif [[ $2 =~ \"Venus\" ]]; then\n        \
    \    :\n        elif [[ $2 =~ \"Earth\" ]]; then\n            echo '\"Earth\"\
    '\n        elif [[ $2 =~ \"Mars\" ]]; then\n            echo '\"Earth\"'\n   \
    \         echo '\"Mars\"'\n        elif [[ $2 =~ \"Jupiter\" ]]; then\n      \
    \      echo '\"Earth\"'\n            echo '\"Mars\"'\n            echo '\"Jupiter\"\
    '\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpno4vcc1i.sh: line 77: syntax error near unexpected token `}''

    /tmp/tmpno4vcc1i.sh: line 77: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # implement the function\n\
    \    if [[ \"$1\" == \"Mercury\" ]]; then\n        if [[ \"$2\" == \"Mercury\"\
    \ ]]; then\n            echo \"Mercury\"\n        elif [[ \"$2\" == \"Venus\"\
    \ ]]; then\n            echo \"[\\\"Venus\\\"]\"\n        elif [[ \"$2\" == \"\
    Earth\" ]]; then\n            echo \"[\\\"Venus\\\", \\\"Earth\\\"]\"\n      \
    \  elif [[ \"$2\" == \"Mars\" ]]; then\n            echo \"[\\\"Venus\\\", \\\"\
    Earth\\\", \\\"Mars\\\"]\"\n        elif [[ \"$2\" == \"Jupiter\" ]]; then\n \
    \           echo \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\"\
    ]\"\n        elif [[ \"$2\" == \"Saturn\" ]]; then\n            echo \"[\\\"Venus\\\
    \", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\"]\"\n        elif\
    \ [[ \"$2\" == \"Uranus\" ]]; then\n            echo \"[\\\"Venus\\\", \\\"Earth\\\
    \", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\"]\"\n       \
    \ elif [[ \"$2\" == \"Neptune\" ]]; then\n            echo \"[\\\"Venus\\\", \\\
    \"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\", \\\
    \"Neptune\\\"]\"\n        fi\n    elif [[ \"$1\" == \"Venus\" ]]; then\n     \
    \   if [[ \"$2\" == \"Venus\" ]]; then\n            echo \"Venus\"\n        elif\
    \ [[ \"$2\" == \"Earth\" ]]; then\n            echo \"[\\\"Earth\\\"]\"\n    \
    \    elif [[ \"$2\" == \"Mars\" ]]; then\n            echo \"[\\\"Earth\\\", \\\
    \"Mars\\\"]\"\n        elif [[ \"$2\" == \"Jupiter\" ]]; then\n            echo\
    \ \"[\\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\"]\"\n        elif [[ \"$2\" ==\
    \ \"Saturn\" ]]; then\n            echo \"[\\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\
    \", \\\"Saturn\\\"]\"\n        elif [[ \"$2\" == \"Uranus\" ]]; then\n       \
    \     echo \"[\\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\
    \"Uranus\\\"]\"\n        elif [[ \"$2\" == \"Neptune\" ]]; then\n            echo\
    \ \"[\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph1gnmfrq.sh: line 70: unexpected EOF while looking for matching
    `"''

    /tmp/tmph1gnmfrq.sh: line 74: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planets_string=(\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\
    \    index1=0\n    index2=0\n    min_value=$1\n    max_value=$2\n    if [ \"${min_value}\"\
    \ == \"${max_value}\" ]; then\n        echo \"please input two different planet\
    \ name\"\n        return 1\n    fi\n    for ((i=0; i<${#planets_string[@]}; i++));\
    \ do\n        if [ \"${min_value}\" == \"${planets_string[i]}\" ]; then\n    \
    \        index1=$i\n        fi\n        if [ \"${max_value}\" == \"${planets_string[i]}\"\
    \ ]; then\n            index2=$i\n        fi\n    done\n    if [ $index1 -gt $index2\
    \ ]; then\n        return 1\n    fi\n    for ((j=$index1+1; j<$index2; j++));\
    \ do\n        echo '\"'${planets_string[j]}'\"'\n    done\n}\n\ncandidate() {\n\
    \    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    case $1 in\n        \"\
    Mercury\")\n            case $2 in\n                \"Mercury\") echo \"[]\";;\n\
    \                \"Venus\") echo \"[]\";;\n                \"Earth\") echo \"\\\
    \"Venus\\\"\";;\n                \"Mars\") echo \"[\\\"Venus\\\", \\\"Earth\\\"\
    ]\";;\n                \"Jupiter\") echo \"[\\\"Venus\\\", \\\"Earth\\\", \\\"\
    Mars\\\"]\";;\n                \"Saturn\") echo \"[\\\"Venus\\\", \\\"Earth\\\"\
    , \\\"Mars\\\", \\\"Jupiter\\\"]\";;\n                \"Uranus\") echo \"[\\\"\
    Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\"]\";;\n\
    \                \"Neptune\") echo \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\
    \", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\"]\";;\n                *) echo\
    \ \"Error, $2 is not a planet.\"\n            esac\n            ;;\n        \"\
    Venus\")\n            case $2 in\n                \"Mercury\") echo \"[]\";;\n\
    \                \"Venus\") echo \"[]\";;\n                \"Earth\") echo \"\
    []\";;\n                \"Mars\") echo \"\\\"Earth\\\"\";;\n                \"\
    Jupiter\") echo \"[\\\"Earth\\\", \\\"Mars\\\"]\";;\n                \"Saturn\"\
    ) echo \"[\\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\"]\";;\n                \"\
    Uranus\") echo \"[\\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\"\
    ]\";;\n                \"Neptune\") echo \"[\\\"Earth\\\", \\\"Mars\\\", \\\"\
    Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\"]\";;\n                *) echo \"Error,\
    \ $2 is not a planet.\"\n            esac\n            ;;\n        \"Earth\")\n\
    \            case $2 in\n                \"Mercury\") echo \"\\\"Venus\\\"\";;\n\
    \                \"Venus\") echo \"[]\";;\n                \"Earth\") echo \"\
    []\";;\n                \"Mars\") echo \"[]\";;\n                \"Jupiter\")\
    \ echo \"\\\"Mars\\\"\";;\n                \"Saturn\") echo \"[\\\"Mars\\\", \\\
    \"Jupiter\\\"]\";;\n                \"Uranus\") echo \"[\\\"Mars\\\", \\\"Jupiter\\\
    \", \\\"Saturn\\\"]\";;\n                \"Neptune\") echo \"[\\\"Mars\\\", \\\
    \"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\"]\";;\n                *) echo \"\
    Error, $2 is not a planet.\"\n            esac\n           \n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3028qwog.sh: line 62: syntax error near unexpected token `}''

    /tmp/tmp3028qwog.sh: line 62: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# If planet $1 and planet\
    \ $2 are not the same planet, \n\t# then print planet $1 and planet $2\n\tif [\
    \ \"$1\" != \"$2\" ]; then\n\t\techo \"$1\" \"$2\"\n\tfi\n}\n\ncandidate() {\n\
    \    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    echo '\"'$1'\"'\n    exit\
    \ 0\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planets=(\"Mercury\" \"\
    Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n  \
    \  if [ $# -eq 2 ]; then\n        planet1=\"$1\"\n        planet2=\"$2\"\n   \
    \     v1=$(printf '%s\\n' \"${planets[@]}\" | grep -n \"${planet1}\" | cut -d:\
    \ -f1)\n        v2=$(printf '%s\\n' \"${planets[@]}\" | grep -n \"${planet2}\"\
    \ | cut -d: -f1)\n        if [ -z $v1 ]; then\n            v1=-1\n        fi\n\
    \        if [ -z $v2 ]; then\n            v2=-1\n        fi\n        if [ $v1\
    \ -gt $v2 ]; then\n            echo \"[]\"\n        else\n            temp=${planets[@]:$v1:1}\n\
    \            for i in $(seq $v1 $(($v2-1))); do\n                temp=${temp},${planets[$i]}\n\
    \            done\n            echo $temp\n        fi\n    else\n        echo\
    \ \"[]\"\n    fi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tdeclare -a k=(\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\
    \techo \"${k[@]}\" | awk -v k1=\"$1\" -v k2=\"$2\" 'BEGIN{\n\t\tfor(i=1;i<=8;i++){\n\
    \t\t\tif(k1==$i){\n\t\t\t\td1=i;\n\t\t\t}\n\t\t\tif(k2==$i){\n\t\t\t\td2=i;\n\t\
    \t\t}\n\t\t}\n\t}{\n\t\tif(d1>d2){\n\t\t\tfor(i=d2;i<=d1;i++){\n\t\t\t\tif(i!=d1){\n\
    \t\t\t\t\tprint $i\",\";\n\t\t\t\t}else{\n\t\t\t\t\tprint $i;\n\t\t\t\t}\n\t\t\
    \t}\n\t\t}else{\n\t\t\tfor(i=d1;i<=d2;i++){\n\t\t\t\tif(i!=d2){\n\t\t\t\t\tprint\
    \ $i\",\";\n\t\t\t\t}else{\n\t\t\t\t\tprint $i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    }'\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    ORBITS=(Mercury Venus Earth\
    \ Mars Jupiter Saturn Uranus Neptune)\n    PLANET1=$1\n    PLANET2=$2\n    ORBIT1=$(echo\
    \ ${ORBITS[@]} | tr \" \" \"\\n\" | cat -n | grep \"${PLANET1}\" | cut -f1)\n\
    \    ORBIT2=$(echo ${ORBITS[@]} | tr \" \" \"\\n\" | cat -n | grep \"${PLANET2}\"\
    \ | cut -f1)\n    if [ -z ${ORBIT1} ] || [ -z ${ORBIT2} ]; then\n        echo\
    \ -e \"[]\"\n    else\n        if [ ${ORBIT1} -gt ${ORBIT2} ]; then\n        \
    \    tmp=${ORBIT1}\n            ORBIT1=${ORBIT2}\n            ORBIT2=${tmp}\n\
    \        fi\n        echo -e \"[$(echo ${ORBITS[@]} | tr \" \" \"\\n\" | cat -n\
    \ | awk -v start=${ORBIT1} -v end=${ORBIT2} '$1>=start && $1<=end {print}' | cut\
    \ -f2 | cut -d ' ' -f2- | tr \"\\n\" \",\" | sed 's/,$//')]\"\n    fi\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: fatal: cannot open file `-v'' for reading (No such file or directory)

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  planets=(\"Mercury\" \"Venus\"\
    \ \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n  if [[ !\
    \ \"${planets[@]}\" =~ \"$1\" ]] || [[ ! \"${planets[@]}\" =~ \"$2\" ]]; then\n\
    \    echo \"()\"\n    return 0\n  fi\n  # find the location of $1\n  for (( i=0;\
    \ i<${#planets[@]}; i++ )); do\n    if [[ \"${planets[$i]}\" == \"$1\" ]]; then\n\
    \      start=$i\n    fi\n  done\n  # find the location of $2\n  for (( i=0; i<${#planets[@]};\
    \ i++ )); do\n    if [[ \"${planets[$i]}\" == \"$2\" ]]; then\n      end=$i\n\
    \    fi\n  done\n  if (( \"$start\" <= \"$end\" )); then\n    # order is correct\
    \ (ascending order)\n    while (( \"$start\" <= \"$end\" )); do\n      echo -n\
    \ \"\\\"${planets[$start]}\\\" \"\n      (( start++ ))\n    done\n  else\n   \
    \ # reverse order\n    while (( \"$start\" >= \"$end\" )); do\n      echo -n \"\
    \\\"${planets[$start]}\\\" \"\n      (( start-- ))\n    done\n  fi\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # Write your solution here\n\
    \    list=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"\
    Uranus\" \"Neptune\")\n    begin=0\n    end=0\n    for (( i=0; i<8; i++ )); do\n\
    \        if [ \"$1\" == \"${list[$i]}\" ]; then\n            begin=$i\n      \
    \  fi\n        if [ \"$2\" == \"${list[$i]}\" ]; then\n            end=$i\n  \
    \      fi\n    done\n    if [ $begin -gt $end ]; then\n        echo '[]'\n   \
    \ else\n        echo '['\n        for (( i=$begin+1; i<$end; i++ )); do\n    \
    \        echo '\"'${list[$i]}'\"'\",\"\n        done\n        echo '\"'${list[$end]}'\"\
    '\n        echo ']'\n    fi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [ \"$1\" == \"Mercury\"\
    \ ] && [ \"$2\" == \"Neptune\" ]; then\n        echo '[\"Venus\"', '\"Earth\"\
    ', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"', '\"Uranus\"']\n    elif [ \"$1\" ==\
    \ \"Jupiter\" ] && [ \"$2\" == \"Neptune\" ]; then\n        echo '[\"Saturn\"\
    ', '\"Uranus\"']\n    elif [ \"$1\" == \"Mercury\" ] && [ \"$2\" == \"Earth\"\
    \ ]; then\n        echo '\"Venus\"'\n    elif [ \"$1\" == \"Earth\" ] && [ \"\
    $2\" == \"Mercury\" ]; then\n        echo '\"Venus\"'\n    elif [ \"$1\" == \"\
    Mercury\" ] && [ \"$2\" == \"Uranus\" ]; then\n        echo '[\"Venus\"', '\"\
    Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"']\n    elif [ \"$1\" == \"Earth\"\
    \ ] && [ \"$2\" == \"Uranus\" ]; then\n        echo '[\"Mars\"', '\"Jupiter\"\
    ', '\"Saturn\"']\n    elif [ \"$1\" == \"Mars\" ] && [ \"$2\" == \"Uranus\" ];\
    \ then\n        echo '[\"Jupiter\"', '\"Saturn\"']\n    elif [ \"$1\" == \"Jupiter\"\
    \ ] && [ \"$2\" == \"Uranus\" ]; then\n        echo '[\"Saturn\"']\n    elif [\
    \ \"$1\" == \"Saturn\" ] && [ \"$2\" == \"Uranus\" ]; then\n        echo \"[]\"\
    \n    elif [ \"$1\" == \"Mercury\" ] && [ \"$2\" == \"Mars\" ]; then\n       \
    \ echo '[\"Venus\"', '\"Earth\"']\n    elif [ \"$1\" == \"Mercury\" ] && [ \"\
    $2\" == \"Jupiter\" ]; then\n        echo '[\"Venus\"', '\"Earth\"', '\"Mars\"\
    ']\n    elif [ \"$1\" == \"Mercury\" ] && [ \"$2\" == \"Saturn\" ]; then\n   \
    \     echo '[\"Venus\"', '\"Earth\"', '\"\n}\n\ncandidate() {\n    bf \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[\
    \ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n\
    \    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"\
    Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\
    \" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp02epq0et.sh: line 45: unexpected EOF while looking for matching
    `''''

    /tmp/tmp02epq0et.sh: line 64: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# the list of the eight planets\
    \ in our solar system\n\tplanets=(Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune)\n\t# the index of the first planet\n\tfirstIndex=-1\n\t# the index\
    \ of the second planet\n\tsecondIndex=-1\n\t# the planets between the two planets\n\
    \tplanetsList=\n\t# iterate through the list of planets and look for the two planets\n\
    \tfor (( i=0; i<${#planets[@]}; i++ )); do\n\t\tif [ \"${planets[$i]}\" == \"\
    $1\" ]; then\n\t\t\tfirstIndex=$i\n\t\tfi\n\t\tif [ \"${planets[$i]}\" == \"$2\"\
    \ ]; then\n\t\t\tsecondIndex=$i\n\t\tfi\n\tdone\n\tif [ $firstIndex -eq -1 ] ||\
    \ [ $secondIndex -eq -1 ]; then\n\t\techo \"[]\"\n\telse\n\t\tif [ $firstIndex\
    \ -lt $secondIndex ]; then\n\t\t\tplanetsList=( ${planets[@]:$((firstIndex+1)):$((secondIndex-firstIndex))}\
    \ )\n\t\telse\n\t\t\tplanetsList=( ${planets[@]:$((secondIndex+1)):$((firstIndex-secondIndex))}\
    \ )\n\t\tfi\n\t\techo \"[\"$( IFS=,; echo \"${planetsList[*]}\" )\"]\"\n\tfi\n\
    }\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  local planet_list=(\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\
    \  local planet1=\"$1\"\n  local planet2=\"$2\"\n  local planet1_index=0\n  local\
    \ planet2_index=0\n  local planet_list_length=${#planet_list[@]}\n  local planet_list_result=()\n\
    \  local k=0\n  local i=0\n  local j=0\n  local is_found_planet1=false\n  local\
    \ is_found_planet2=false\n  local output=\"\"\n  # find the position of $planet1\
    \ and $planet2\n  for (( i=0; i<${planet_list_length}; i++ )); do\n    if [[ ${planet_list[$i]}\
    \ == \"$planet1\" ]]; then\n      planet1_index=$i\n      is_found_planet1=true\n\
    \    fi\n    if [[ ${planet_list[$i]} == \"$planet2\" ]]; then\n      planet2_index=$i\n\
    \      is_found_planet2=true\n    fi\n  done\n  # if $planet1 or $planet2 is not\
    \ correct planet names, then return an empty list\n  if [[ $is_found_planet1 ==\
    \ false || $is_found_planet2 == false ]]; then\n    echo \"[]\"\n    return\n\
    \  fi\n  # if $planet1_index > $planet2_index, then reverse $planet1_index and\
    \ $planet2_index\n  if [[ $planet1_index -gt $planet2_index ]]; then\n    local\
    \ temp=$planet1_index\n    planet1_index=$planet2_index\n    planet2_index=$temp\n\
    \  fi\n  # push planets between $planet1_index and $planet2_index to an array\n\
    \  for (( j=planet1_index+1; j<planet2_index; j++ )); do\n    planet_list_result[$k]=${planet_list[$j]}\n\
    \    k=$(($k+1))\n  done\n  # if there is more than one planet in the result array,\
    \ then use a double quote to wrap each string\n  if [[ ${#planet\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzn1jg40n.sh: line 64: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmpzn1jg40n.sh: line 64: syntax error near `}''

    /tmp/tmpzn1jg40n.sh: line 64: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planets=(Mercury Venus\
    \ Earth Mars Jupiter Saturn Uranus Neptune)\n    planetsCount=${#planets[@]}\n\
    \    maxIndex=$((planetsCount - 1))\n    minIndex=0\n    result=()\n    ret=0\n\
    \    planet1Index=-1\n    planet2Index=-1\n    for ((i=0; i<planetsCount; i++));\
    \ do\n        if [[ \"${planets[$i]}\" == \"$1\" ]]; then\n            planet1Index=$i\n\
    \        fi\n        if [[ \"${planets[$i]}\" == \"$2\" ]]; then\n           \
    \ planet2Index=$i\n        fi\n    done\n    if [[ ( \"$1\" == \"\" ) || ( \"\
    $2\" == \"\" ) || ( \"$planet1Index\" == \"-1\" ) || ( \"$planet2Index\" == \"\
    -1\" ) ]]; then\n        echo \"empty params\"\n        ret=1\n    elif [[ ( \"\
    $planet1Index\" -lt \"$minIndex\" ) || ( \"$planet1Index\" -gt \"$maxIndex\" )\
    \ || ( \"$planet2Index\" -lt \"$minIndex\" ) || ( \"$planet2Index\" -gt \"$maxIndex\"\
    \ ) ]]; then\n        echo \"wrong params\"\n        ret=1\n    elif [[ \"$planet1Index\"\
    \ -gt \"$planet2Index\" ]]; then\n        tempIndex=$planet1Index\n        planet1Index=$planet2Index\n\
    \        planet2Index=$tempIndex\n    fi\n    for ((i=$planet1Index+1; i<$planet2Index;\
    \ i++)); do\n        result+=(${planets[$i]})\n    done\n    echo ${result[@]}\n\
    \    return $ret\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tlocal RANGE=''\n\tlocal PLANETS=(\"\
    Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\"\
    )\n\tlocal PLANET1=''\n\tlocal PLANET2=''\n\tlocal PLANETINDEX1=''\n\tlocal PLANETINDEX2=''\n\
    \tlocal RESULT=''\n\t# find planet 1\n\tfor i in \"${!PLANETS[@]}\"; do\n\t\t\
    if [[ \"${PLANETS[$i]}\" == \"$1\" ]]; then\n\t\t\tPLANETINDEX1=$i\n\t\t\tPLANET1=${PLANETS[$i]}\n\
    \t\t\tbreak\n\t\tfi\n\tdone\n\t# find planet 2\n\tfor i in \"${!PLANETS[@]}\"\
    ; do\n\t\tif [[ \"${PLANETS[$i]}\" == \"$2\" ]]; then\n\t\t\tPLANETINDEX2=$i\n\
    \t\t\tPLANET2=${PLANETS[$i]}\n\t\t\tbreak\n\t\tfi\n\tdone\n\tif [[ \"$PLANET1\"\
    \ != '' && \"$PLANET2\" != '' ]]; then\n\t\tfor (( i=PLANETINDEX1; i<=PLANETINDEX2;\
    \ i++ )); do\n\t\t\tRANGE+=\"${PLANETS[$i]} \"\n\t\tdone\n\t\techo \"$RANGE\"\n\
    \telse\n\t\techo \"no planets found\"\n\tfi\n}\n\ncandidate() {\n    bf \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"\
    Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n\
    \    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\"\
    \ ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\")\
    \ = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  case $1 in\n    Mercury)\n\
    \      case $2 in\n        Venus) echo \"Venus\";;\n        Earth) echo \"Venus\"\
    ;;\n        Mars) echo \"Venus\";;\n        Jupiter) echo \"Venus\";;\n      \
    \  Saturn) echo \"Venus\";;\n        Uranus) echo \"Venus\";;\n        Neptune)\
    \ echo \"Venus\";;\n        *) echo \"[]\";;\n      esac;;\n    Venus)\n     \
    \ case $2 in\n        Mercury) echo \"[]\";;\n        Earth) echo \"Earth\";;\n\
    \        Mars) echo \"Earth\";;\n        Jupiter) echo \"Earth\";;\n        Saturn)\
    \ echo \"Earth\";;\n        Uranus) echo \"Earth\";;\n        Neptune) echo \"\
    Earth\";;\n        *) echo \"[]\";;\n      esac;;\n    Earth)\n      case $2 in\n\
    \        Mercury) echo \"[]\";;\n        Venus) echo \"[]\";;\n        Mars) echo\
    \ \"Mars\";;\n        Jupiter) echo \"Mars\";;\n        Saturn) echo \"Mars\"\
    ;;\n        Uranus) echo \"Mars\";;\n        Neptune) echo \"Mars\";;\n      \
    \  *) echo \"[]\";;\n      esac;;\n    Mars)\n      case $2 in\n        Mercury)\
    \ echo \"[]\";;\n        Venus) echo \"[]\";;\n        Earth) echo \"[]\";;\n\
    \        Jupiter) echo \"Jupiter\";;\n        Saturn) echo \"Jupiter\";;\n   \
    \     Uranus) echo \"Jupiter\";;\n        Neptune) echo \"Jupiter\";;\n      \
    \  *) echo \"[]\";;\n      esac;;\n    Jupiter)\n      case $2 in\n        Mercury)\
    \ echo \"[]\";;\n        Venus) echo \"[]\";;\n        Earth) echo \"[]\";;\n\
    \        Mars) echo \"[]\";;\n        Saturn) echo \"Saturn\";;\n        Uranus)\
    \ echo \"Saturn\";;\n        Neptune) echo \"Saturn\";;\n        *) echo \"[]\"\
    ;;\n      esac;;\n    Saturn)\n      case $2 in\n        Mercury) echo \"[]\"\
    ;;\n        Venus) echo \"[]\";;\n        Earth) echo \"[]\";;\n        Mars)\
    \ echo \"[]\";;\n        Jupiter) echo \"[]\";;\n        Uranus) echo \"Uranus\"\
    ;;\n        Neptune) echo \"Uranus\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwvq7u1jh.sh: line 87: syntax error near unexpected token `}''

    /tmp/tmpwvq7u1jh.sh: line 87: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# put your code here\n\t\
    # you can use the following variables:\n\t# planets - this is an array containing\
    \ the names of the planets\n\t# the list of the planets are in the file \"planets.txt\"\
    \n\t# you can use the following command to get it:\n\t# planets=($(cat planets.txt))\n\
    \t# the 0th element of the array planets is Mercury\n\t# the 1st element of the\
    \ array planets is Venus\n\t# etc.\n\t#\n\t# planets_distances - this is an array\
    \ containing the distances of the planets from the Sun\n\t# the list of the planets\
    \ distances are in the file \"distances.txt\"\n\t# you can use the following command\
    \ to get it:\n\t# planets_distances=($(cat distances.txt))\n\t# the 0th element\
    \ of the array planets_distances is the distance of Mercury from the Sun\n\t#\
    \ the 1st element of the array planets_distances is the distance of Venus from\
    \ the Sun\n\t# etc.\n\t#\n\t# planets_moons - this is an array containing the\
    \ number of moons of the planets\n\t# the list of the planets moons are in the\
    \ file \"moons.txt\"\n\t# you can use the following command to get it:\n\t# planets_moons=($(cat\
    \ moons.txt))\n\t# the 0th element of the array planets_moons is the number of\
    \ moons of Mercury\n\t# the 1st element of the array planets_moons is the number\
    \ of moons of Venus\n\t# etc.\n\t\n\tindex1=0\n\tindex2=0\n\t\n\tfor i in \"${!planets[@]}\"\
    ;\n\tdo\n\t\tif [ \"${planets[$i]}\" == \"$1\" ];\n\t\tthen\n\t\t\tindex1=$i\n\
    \t\tfi\n\t\tif [ \"${planets[$i]}\" == \"$2\" ];\n\t\tthen\n\t\t\tindex2=$i\n\t\
    \tfi\n\tdone\n\t\n\tif [ $index1 -gt $index2 ];\n\tthen\n\t\tt=$index1\n\t\tindex1=$index2\n\
    \t\tindex2=$t\n\tfi\n\t\n\techo $index1 $index2\n\t\n\t\n\t#\n\t\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # Make a copy of the planets\n\
    \    [[ \"$#\" -ne 2 ]] && return\n\n    # Make a copy of the planets\n    t_planets=(\
    \ \"${planets[@]}\" )\n\n    # Shift out all the planets until we get to planet1\n\
    \    while [[ \"${t_planets[0]}\" != \"$1\" ]]; do\n        if [[ \"${#t_planets[@]}\"\
    \ -gt 1 ]]; then\n            t_planets=( \"${t_planets[@]:1}\" )\n        else\n\
    \            return\n        fi\n    done\n\n    # Pop out all the planets until\
    \ we get to planet2\n    while [[ \"${t_planets[-1]}\" != \"$2\" ]]; do\n    \
    \    if [[ \"${#t_planets[@]}\" -gt 1 ]]; then\n            t_planets=( \"${t_planets[@]:0:$((${#t_planets[@]}-1))}\"\
    \ )\n        else\n            return\n        fi\n    done\n\n    # Output the\
    \ planets \n    printf \"%s\\n\" \"${t_planets[@]:1:$((${#t_planets[@]}-2))}\"\
    \n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# Enter your code here.\n\
    }\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwh0d6t9y.sh: line 23: syntax error near unexpected token `}''

    /tmp/tmpwh0d6t9y.sh: line 23: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  # local res=$(python3 <<EOT\n\
    \  # planet_list = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune']\n  # def get_index(planet):\n  #   for i in range(0, len(planet_list)):\n\
    \  #     if planet_list[i] == planet:\n  #       return i\n  #   return None\n\
    \  # def get_planets(planets_between):\n  #   return str(planet_list[planets_between])\n\
    \  # planet1_index = get_index('$1')\n  # planet2_index = get_index('$2')\n  #\
    \ if planet1_index == None or planet2_index == None:\n  #   print([])\n  # elif\
    \ planet1_index < planet2_index:\n  #   print(get_planets(range(planet1_index+1,\
    \ planet2_index)))\n  # else:\n  #   print(get_planets(range(planet2_index+1,\
    \ planet1_index)))\n  # EOT\n  # )\n  # echo $res\n  planet_list=('Mercury' 'Venus'\
    \ 'Earth' 'Mars' 'Jupiter' 'Saturn' 'Uranus' 'Neptune')\n  planet1_index=1\n \
    \ planet2_index=1\n  for i in \"${!planet_list[@]}\"; do\n    if [[ \"${planet_list[$i]}\"\
    \ == \"$1\" ]]; then\n      planet1_index=$((i+1))\n    fi\n    if [[ \"${planet_list[$i]}\"\
    \ == \"$2\" ]]; then\n      planet2_index=$((i+1))\n    fi\n  done\n  if [ \"\
    $planet1_index\" -eq 1 ] || [ \"$planet2_index\" -eq 1 ]; then\n    echo \"[]\"\
    \n  elif [ \"$planet1_index\" -lt \"$planet2_index\" ]; then\n    echo \"${planet_list[@]:$planet1_index:$((planet2_index-planet1_index))}\"\
    \n  else\n    echo \"${planet\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplgd2t7le.sh: line 73: unexpected EOF while looking for matching
    `"''

    /tmp/tmplgd2t7le.sh: line 77: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    case $1 in\n        Mercury)\
    \ i=0 ;;\n        Venus) i=1 ;;\n        Earth) i=2 ;;\n        Mars) i=3 ;;\n\
    \        Jupiter) i=4 ;;\n        Saturn) i=5 ;;\n        Uranus) i=6 ;;\n   \
    \     Neptune) i=7 ;;\n        *) return ;;\n    esac\n    case $2 in\n      \
    \  Mercury) j=0 ;;\n        Venus) j=1 ;;\n        Earth) j=2 ;;\n        Mars)\
    \ j=3 ;;\n        Jupiter) j=4 ;;\n        Saturn) j=5 ;;\n        Uranus) j=6\
    \ ;;\n        Neptune) j=7 ;;\n        *) return ;;\n    esac\n    for p in $(seq\
    \ $i $j); do\n        echo -n $p\n    done\n}\n\ncandidate() {\n    bf \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[\
    \ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n\
    \    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"\
    Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  # Create the planet list\n\
    \  planetList=( \"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"\
    \ \"Uranus\" \"Neptune\" )\n  # Set the indexes for the two planets\n  p1=$(findInArray\
    \ $1)\n  p2=$(findInArray $2)\n  # Check if there are indexes\n  if [ -z $p1 ]\
    \ || [ -z $p2 ]; then\n    # If not, exit with an empty array\n    echo \"[]\"\
    \n    exit\n  fi\n  # Check if the indexes are in the correct order\n  if [ $p1\
    \ -lt $p2 ]; then\n    # If not, inverse the indexes\n    tmp=$p1\n    p1=$p2\n\
    \    p2=$tmp\n  fi\n  # Print the string\n  printf \"[\"\n  # Loop through the\
    \ planet list and print the ones in the range\n  for (( i=$p2; i<=$p1; i++ ));\
    \ do\n    printf \"\\\"${planetList[$i]}\\\"\"\n    if [ $i -lt $p1 ]; then\n\
    \      printf \", \"\n    fi\n  done\n  printf \"]\"\n}\n\ncandidate() {\n   \
    \ bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9tbqy80q.sh: line 25: findInArray: command not found

    /tmp/tmp9tbqy80q.sh: line 26: findInArray: command not found

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    case \"$1\" in\n      \
    \  \"Mercury\")\n            case \"$2\" in\n                \"Mercury\")\n  \
    \                  printf \"[]\"\n                    ;;\n                \"Venus\"\
    )\n                    printf \"[\\\"Venus\\\"]\"\n                    ;;\n  \
    \              \"Earth\")\n                    printf \"[\\\"Venus\\\", \\\"Earth\\\
    \"]\"\n                    ;;\n                \"Mars\")\n                   \
    \ printf \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\"]\"\n                  \
    \  ;;\n                \"Jupiter\")\n                    printf \"[\\\"Venus\\\
    \", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\"]\"\n                    ;;\n\
    \                \"Saturn\")\n                    printf \"[\\\"Venus\\\", \\\"\
    Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\"]\"\n                \
    \    ;;\n                \"Uranus\")\n                    printf \"[\\\"Venus\\\
    \", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\
    \"]\"\n                    ;;\n                \"Neptune\")\n                \
    \    printf \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\
    \"Saturn\\\", \\\"Uranus\\\", \\\"Neptune\\\"]\"\n                    ;;\n   \
    \             *)\n                    printf \"[]\"\n                    ;;\n\
    \            esac\n            ;;\n        \"Venus\")\n            case \"$2\"\
    \ in\n                \"Mercury\")\n                    printf \"[]\"\n      \
    \              ;;\n                \"Venus\")\n                    printf \"[]\"\
    \n                    ;;\n                \"Earth\")\n                    printf\
    \ \"[\\\"Earth\\\"]\"\n                    ;;\n                \"Mars\")\n   \
    \                 printf \"[\\\"Earth\\\", \\\"Mars\\\"]\"\n                 \
    \   ;;\n                \"Jupiter\")\n                    printf \"[\\\"Earth\\\
    \", \\\"Mars\\\", \\\"Jupiter\\\"]\"\n                    ;;\n               \
    \ \"Saturn\")\n                    printf \"[\\\"Earth\\\", \\\"Mars\\\", \\\"\
    Jupiter\\\", \\\"Saturn\\\"]\"\n                    ;;\n                \"Uranus\"\
    )\n                    printf \"[\\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\"\
    , \\\"Saturn\\\", \\\"Uranus\\\"]\"\n                    ;;\n                \"\
    Neptune\")\n                    printf \"[\\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\
    \", \\\"Saturn\\\", \\\"Uranus\\\", \\\"Neptune\\\"]\"\n                    ;;\n\
    \                *)\n                    printf \"[]\"\n                    ;;\n\
    \            esac\n            ;;\n        \"Earth\")\n            case \"$2\"\
    \ in\n                \"Mercury\")\n                    printf \"[]\"\n      \
    \              ;;\n                \"Venus\")\n                    printf \"[]\"\
    \n                   \n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[\
    \ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\"\
    \ \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"\
    Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuw7fh3yu.sh: line 93: syntax error near unexpected token `}''

    /tmp/tmpuw7fh3yu.sh: line 93: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # Write your code here\n\
    \    # You can write additional functions\n    # Do not write the main part of\
    \ the program here\n    :\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[\
    \ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\"\
    \ \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"\
    Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tlocal ret=()\n\tlocal planets=(\"\
    Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\"\
    )\n\tlocal p1=${planets[*]/$1/}\n\tlocal p2=${planets[*]/$2/}\n\tfor planet in\
    \ ${p1[*]}; do\n\t\tif [[ \"$planet\" =~ ^\"$2\" ]]; then\n\t\t\tbreak\n\t\tfi\n\
    \t\tret+=(\"$planet\")\n\tdone\n\tfor planet in ${p2[*]}; do\n\t\tif [[ \"$planet\"\
    \ =~ ^\"$1\" ]]; then\n\t\t\tbreak\n\t\tfi\n\t\tret+=(\"$planet\")\n\tdone\n\t\
    echo ${ret[*]}\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [ \"$1\" = \"Mercury\"\
    \ ] && [ \"$2\" = \"Mercury\" ]; then\n\techo \"Mercury\"\n    elif [ \"$1\" =\
    \ \"Mercury\" ] && [ \"$2\" = \"Venus\" ]; then\n\techo \"Venus\"\n    elif [\
    \ \"$1\" = \"Mercury\" ] && [ \"$2\" = \"Earth\" ]; then\n\techo \"Venus\" \"\
    Earth\"\n    elif [ \"$1\" = \"Mercury\" ] && [ \"$2\" = \"Mars\" ]; then\n\t\
    echo \"Venus\" \"Earth\" \"Mars\"\n    elif [ \"$1\" = \"Mercury\" ] && [ \"$2\"\
    \ = \"Jupiter\" ]; then\n\techo \"Venus\" \"Earth\" \"Mars\" \"Jupiter\"\n   \
    \ elif [ \"$1\" = \"Mercury\" ] && [ \"$2\" = \"Saturn\" ]; then\n\techo \"Venus\"\
    \ \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"\n    elif [ \"$1\" = \"Mercury\" ]\
    \ && [ \"$2\" = \"Uranus\" ]; then\n\techo \"Venus\" \"Earth\" \"Mars\" \"Jupiter\"\
    \ \"Saturn\" \"Uranus\"\n    elif [ \"$1\" = \"Mercury\" ] && [ \"$2\" = \"Neptune\"\
    \ ]; then\n\techo \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\"\
    \ \"Neptune\"\n    elif [ \"$1\" = \"Venus\" ] && [ \"$2\" = \"Venus\" ]; then\n\
    \techo \"Venus\"\n    elif [ \"$1\" = \"Venus\" ] && [ \"$2\" = \"Earth\" ]; then\n\
    \techo \"Earth\"\n    elif [ \"$1\" = \"Venus\" ] && [ \"$2\" = \"Mars\" ]; then\n\
    \techo \"Earth\" \"Mars\"\n    elif [ \"$1\" = \"Venus\" ] && [ \"$2\" = \"Jupiter\"\
    \ ]; then\n\techo \"Earth\" \"Mars\" \"Jupiter\"\n    elif [ \"$1\" = \"Venus\"\
    \ ] && [ \"$2\" = \"Saturn\" ]; then\n\techo \"Earth\" \"Mars\" \"\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5tifcpkz.sh: line 62: unexpected EOF while looking for matching
    `"''

    /tmp/tmp5tifcpkz.sh: line 66: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tlocal planets=(\n\t\tMercury\n\
    \t\tVenus\n\t\tEarth\n\t\tMars\n\t\tJupiter\n\t\tSaturn\n\t\tUranus\n\t\tNeptune\n\
    \t)\n\tlocal idx1=$(index_of \"$1\" \"${planets[@]}\")\n\tlocal idx2=$(index_of\
    \ \"$2\" \"${planets[@]}\")\n\tif [[ $idx1 -eq -1 || $idx2 -eq -1 ]]; then\n\t\
    \treturn\n\tfi\n\tlocal low=$idx1\n\tlocal high=$idx2\n\tif (( $idx1 > $idx2 ));\
    \ then\n\t\tlow=$idx2\n\t\thigh=$idx1\n\tfi\n\tprintf '%s\\n' \"${planets[@]:$low:$((\
    \ $high - $low + 1 ))}\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[\
    \ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\"\
    \ \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"\
    Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphfk2sn64.sh: line 32: index_of: command not found

    /tmp/tmphfk2sn64.sh: line 33: index_of: command not found

    /tmp/tmphfk2sn64.sh: line 39: ((: >  : syntax error: operand expected (error token
    is ">  ")

    /tmp/tmphfk2sn64.sh: line 43: $(( $high - $low + 1 )): substring expression <
    0

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: -1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    for i in {1..8}; do\n \
    \       s=$(cat -)\n        if [[ $1 == $s ]]; then\n            echo -n '\"'\n\
    \            echo -n \"$s\"\n            echo -n '\"'\n            break\n   \
    \     fi\n    done\n    while read s; do\n        if [[ $2 == $s ]]; then\n  \
    \          break\n        fi\n        echo -n ',\"'\n        echo -n \"$s\"\n\
    \        echo -n '\"'\n    done\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=49 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=38 encoding='utf-8'>
  timestamp: 1660020685
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  # Write your code here\n\
    \  # Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune\n  if [ ! $1 = \"\
    Mercury\" ] && [ ! $1 = \"Venus\" ] && [ ! $1 = \"Earth\" ] && [ ! $1 = \"Mars\"\
    \ ] && [ ! $1 = \"Jupiter\" ] && [ ! $1 = \"Saturn\" ] && [ ! $1 = \"Uranus\"\
    \ ] && [ ! $1 = \"Neptune\" ]; then\n\t  echo \"[]\"\n\t  return\n  fi\n  if [\
    \ ! $2 = \"Mercury\" ] && [ ! $2 = \"Venus\" ] && [ ! $2 = \"Earth\" ] && [ !\
    \ $2 = \"Mars\" ] && [ ! $2 = \"Jupiter\" ] && [ ! $2 = \"Saturn\" ] && [ ! $2\
    \ = \"Uranus\" ] && [ ! $2 = \"Neptune\" ]; then\n\t  echo \"[]\"\n\t  return\n\
    \  fi\n  planets=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"\
    \ \"Uranus\" \"Neptune\")\n  len=${#planets[@]}\n  index1=-1\n  index2=-1\n  for((i=0;i<len;i++));\
    \ do\n  \t  if [ $1 = ${planets[$i]} ]; then\n\t\t  index1=$i\n\t  fi\n\t  if\
    \ [ $2 = ${planets[$i]} ]; then\n\t\t  index2=$i\n\t  fi\n  done\n  if [ $index1\
    \ -gt $index2 ]; then\n\t  tmp=$index1\n\t  index1=$index2\n\t  index2=$tmp\n\
    \  fi\n  result=\"\"\n  for((i=index1+1;i<index2;i++)); do\n\t  if [ ! $result\
    \ = \"\" ]; then\n\t\t  result=$result\", \"\n\t  fi\n\t  result=$result'\"'${planets[$i]}'\"\
    '\n  done\n  echo \"[\"$result\"]\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tplanet1=\"$1\"\n\tplanet2=\"\
    $2\"\n\tif test -z $planet1 || test -z $planet2; then\n\t\techo \"\"\n\t\treturn\n\
    \tfi\n\tplanets=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"\
    \ \"Uranus\" \"Neptune\")\n\tin=0\n\tindex1=0\n\tindex2=0\n\tin1=0\n\tin2=0\n\t\
    for index in ${!planets[@]}; do\n\t\tif test \"${planets[$index]}\" = \"$planet1\"\
    ; then\n\t\t\tin1=1\n\t\t\tindex1=$index\n\t\tfi\n\t\tif test \"${planets[$index]}\"\
    \ = \"$planet2\"; then\n\t\t\tin2=1\n\t\t\tindex2=$index\n\t\tfi\n\tdone\n\tif\
    \ test $in1 -eq 0 || test $in2 -eq 0; then\n\t\techo \"\"\n\t\treturn\n\tfi\n\t\
    if test $index1 -le $index2; then\n\t\tfor ((i=$index1+1; i<$index2; i++)); do\n\
    \t\t\techo -n '\"'\n\t\t\techo -n ${planets[$i]}\n\t\t\techo -n '\"'\n\t\t\techo\
    \ -n \" \"\n\t\tdone\n\telse\n\t\tfor ((i=$index2+1; i<$index1; i++)); do\n\t\t\
    \techo -n '\"'\n\t\t\techo -n ${planets[$i]}\n\t\t\techo -n '\"'\n\t\t\techo -n\
    \ \" \"\n\t\tdone\n\tfi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[\
    \ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\"\
    \ \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"\
    Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planets=( \"Mercury\" \"\
    Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\" )\n \
    \   planetOnePosition=-1\n    planetTwoPosition=-1\n    # find the position of\
    \ planet1 and planet2 in planets array\n    for (( i=0; i<${#planets[@]}; i++\
    \ )); do\n        if [ ${planets[$i]} = $1 ]; then\n            planetOnePosition=$i\n\
    \        fi\n        if [ ${planets[$i]} = $2 ]; then\n            planetTwoPosition=$i\n\
    \        fi\n    done\n    # planet1 and planet2 are not correct planet names\n\
    \    if [ $planetOnePosition -eq -1 -o $planetTwoPosition -eq -1 ]; then\n   \
    \     echo \"\"\n        return\n    fi\n    # find the number of planets between\
    \ planet1 and planet2\n    if [ $planetOnePosition -lt $planetTwoPosition ]; then\n\
    \        # planet1 is closer to sun than planet2\n        numberOfPlanets=`expr\
    \ $planetTwoPosition - $planetOnePosition - 1`\n        lastPlanet=$planetTwoPosition\n\
    \        firstPlanet=`expr $planetOnePosition + 1`\n    else\n        # planet2\
    \ is closer to sun than planet1\n        numberOfPlanets=`expr $planetOnePosition\
    \ - $planetTwoPosition - 1`\n        lastPlanet=$planetOnePosition\n        firstPlanet=`expr\
    \ $planetTwoPosition + 1`\n    fi\n    result=\"[\"\n    # print the planets between\
    \ planet1 and planet2\n    for (( i=0; i<$numberOfPlanets; i++ )); do\n      \
    \  currentPlanetPosition=`expr $firstPlanet + $i`\n        if [ $i -ne `expr $numberOfPlanets\
    \ - 1` ]; then\n            result+='\"'${planets[$currentPlanetPosition]}'\"\
    , '\n        else\n            result+='\"'${planets[$currentPlanetPosition]}'\"\
    ]'\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    bf \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[\
    \ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n\
    \    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"\
    Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  planets=(Mercury Venus Earth\
    \ Mars Jupiter Saturn Uranus Neptune)\n  if [[ ! \"${planets[@]}\" =~ \"$1\" ]]\
    \ || [[ ! \"${planets[@]}\" =~ \"$2\" ]]; then\n    echo \"Error: Invalid input\"\
    \n    return\n  fi\n  # the lower bound is always the planet after the planet\
    \ with smaller index\n  idx1=$((${planets[@]/$1/} + 1))\n  idx2=$((${planets[@]/$2/}\
    \ + 1))\n  # the upper bound is always the planet with smaller index\n  if ((\
    \ $idx1 < $idx2 )); then\n    idx1=$idx2\n    idx2=$((${planets[@]/$1/} + 1))\n\
    \  fi\n  # slice the array from lower bound to upper bound\n  planets=(${planets[@]:$idx2:$(($idx1\
    \ - $idx2))})\n  # convert the array to string\n  planets=${planets[@]}\n  # remove\
    \ all double quotes\n  planets=\"${planets//\\\"}\"\n  echo \"\\\"$planets\\\"\
    \"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_gv_ieap.sh: line 28: Mercury Venus Earth Mars  Saturn Uranus Neptune
    + 1: syntax error in expression (error token is "Venus Earth Mars  Saturn Uranus
    Neptune + 1")

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [ \"$#\" -ne 2 ]; then\n\
    \        exit 1\n    fi\n    # Make sure you declare planet_list so that it exists\
    \ in the subshell\n    declare -a planet_list=()\n    for planet in \"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\";\
    \ do\n        if [ \"$planet\" == \"$1\" ] || [ \"$planet\" == \"$2\" ]; then\n\
    \            echo \"Failure\"\n            exit 1\n        fi\n        if [ \"\
    $planet\" == \"Mercury\" ] || [ \"$planet\" == \"Venus\" ] || [ \"$planet\" ==\
    \ \"Earth\" ] || [ \"$planet\" == \"Mars\" ]; then\n            if [ \"$1\" ==\
    \ \"Jupiter\" ] || [ \"$1\" == \"Saturn\" ] || [ \"$1\" == \"Uranus\" ] || [ \"\
    $1\" == \"Neptune\" ]; then\n                planet_list+=($planet)\n        \
    \    fi\n        elif [ \"$planet\" == \"Jupiter\" ] || [ \"$planet\" == \"Saturn\"\
    \ ] || [ \"$planet\" == \"Uranus\" ] || [ \"$planet\" == \"Neptune\" ]; then\n\
    \            if [ \"$1\" == \"Mercury\" ] || [ \"$1\" == \"Venus\" ] || [ \"$1\"\
    \ == \"Earth\" ] || [ \"$1\" == \"Mars\" ]; then\n                planet_list+=($planet)\n\
    \            fi\n        fi\n    done\n    if [ \"${#planet_list[@]}\" -eq 0 ];\
    \ then\n        echo \"Failure\"\n        exit 1\n    fi\n    echo \"${planet_list[@]}\"\
    \n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local planet1=$1\n    local\
    \ planet2=$2\n    # Append two elements to the array\n    # with double parentheses\n\
    \    local planets=($(get_planets))\n    local result=()\n    local index_1\n\
    \    local index_2\n    local planet\n\n    # Find index of the first element\n\
    \    for index_1 in ${!planets[@]}; do\n        if [[ ${planets[$index_1]} ==\
    \ $planet1 ]]; then\n            break\n        fi\n    done\n\n    # Find index\
    \ of the second element\n    for index_2 in ${!planets[@]}; do\n        if [[\
    \ ${planets[$index_2]} == $planet2 ]]; then\n            break\n        fi\n \
    \   done\n\n    if [[ $index_1 -gt $index_2 ]]; then\n        # Reverse indexes\n\
    \        index_1=$index_2\n        index_2=$index_1\n    fi\n\n    for index in\
    \ $(seq $index_1 $index_2); do\n        planet=${planets[$index]}\n        if\
    \ [[ $planet == $planet1 || $planet == $planet2 ]]; then\n            continue\n\
    \        fi\n        result+=($planet)\n    done\n\n    echo \"${result[@]}\"\n\
    }\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbc8yhc8w.sh: line 26: get_planets: command not found

    seq: missing operand

    Try ''seq --help'' for more information.

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [ $# -ne 2 ]; then\n\
    \        echo \"Usage: bf planet1 planet2\"\n        exit 1\n    fi\n    if [\
    \ ! $1 =~ ^[A-Z][a-z]+$ ]; then\n        echo \"usage: bf planet1 planet2 - planet1\
    \ is not a capitalized word\"\n        exit 1\n    fi\n    if [ ! $2 =~ ^[A-Z][a-z]+$\
    \ ]; then\n        echo \"usage: bf planet1 planet2 - planet2 is not a capitalized\
    \ word\"\n        exit 1\n    fi\n    output=\"\"\n    found=0\n    for planet\
    \ in \"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\"\
    \ \"Neptune\"; do\n        if [ $planet = $1 ]; then\n            found=1\n  \
    \      fi\n        if [ $found -eq 1 ]; then\n            output=\"$output $planet\"\
    \n        fi\n        if [ $planet = $2 ]; then\n            break\n        fi\n\
    \    done\n    echo $output\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp87d0qgbk.sh: line 26: [: =~: binary operator expected

    /tmp/tmp87d0qgbk.sh: line 30: [: =~: binary operator expected

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  # Write your code here\n\
    \  declare -a planets=(\n\t\t\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\"\
    \ \"Saturn\" \"Uranus\" \"Neptune\"\n\t)\n\t\n\tlocal planet1=$1\n\tlocal planet2=$2\n\
    \tlocal start index1 index2\n\t\n\t# check if parameters are valid\n\tif [[ !\
    \ \" ${planets[@]} \" =~ \" ${planet1} \" ]] || [[ ! \" ${planets[@]} \" =~ \"\
    \ ${planet2} \" ]]; then\n\t\techo \"\"\n\t\treturn\n\tfi\n\t\n\t# get the index\
    \ of the planets\n\tfor planet in \"${planets[@]}\"; do\n\t\tif [[ $planet ==\
    \ $planet1 ]]; then\n\t\t\tindex1=$start\n\t\tfi\n\t\tif [[ $planet == $planet2\
    \ ]]; then\n\t\t\tindex2=$start\n\t\tfi\n\t\t((start++))\n\tdone\n\t\n\t# if planet1\
    \ is after planet2\n\tif (( $index1 > $index2 )); then\n\t\tfor (( i=$index2+1;\
    \ i<$index1; i++ )); do\n\t\t\techo -n \"\\\"${planets[$i]}\\\" \"\n\t\tdone\n\
    \telse # planet1 is before planet2\n\t\tfor (( i=$index1+1; i<$index2; i++ ));\
    \ do\n\t\t\techo -n \"\\\"${planets[$i]}\\\" \"\n\t\tdone\n\tfi\n\techo \"\"\n\
    }\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  declare -A dist # distance\
    \ from the sun\n  dist[\"Mercury\"]=1\n  dist[\"Venus\"]=2\n  dist[\"Earth\"]=3\n\
    \  dist[\"Mars\"]=4\n  dist[\"Jupiter\"]=5\n  dist[\"Saturn\"]=6\n  dist[\"Uranus\"\
    ]=7\n  dist[\"Neptune\"]=8\n  local plane1 plane2\n  plane1=${dist[$1]}\n  plane2=${dist[$2]}\n\
    \  if [ -z \"$plane1\" -o -z \"$plane2\" ]; then\n    echo \"null\"\n    return\n\
    \  fi\n  if [ $plane1 -gt $plane2 ]; then\n    local plane1 plane2\n    plane1=$plane2\n\
    \    plane2=$plane1\n  fi\n  local planets=()\n  for planet in \"${!dist[@]}\"\
    ; do\n    local d=${dist[$planet]}\n    if [ $d -gt $plane1 -a $d -lt $plane2\
    \ ]; then\n      planets+=($planet)\n    fi\n  done\n  echo ${planets[@]}\n}\n\
    \ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  local planetlist=(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune)\n  local planet1=$1\n  local\
    \ planet2=$2\n  local outputlist=()\n  local p1index=-1\n  local p2index=-1\n\
    \  local found=0\n  local i=0\n  local j=0\n  local k=0\n  for i in \"${planetlist[@]}\"\
    ; do\n    if [ \"$i\" == \"$planet1\" ]; then\n      p1index=$k\n      found=1\n\
    \    fi\n    if [ \"$i\" == \"$planet2\" ]; then\n      p2index=$k\n      found=1\n\
    \    fi\n    if [ $found -eq 1 ]; then\n      break\n    fi\n    ((k++))\n  done\n\
    \  found=0\n  for ((j=$p1index; j<=$p2index; j++)); do\n    outputlist+=\"\\\"\
    ${planetlist[$j]}\\\"\"\n    ((found++))\n  done\n  if [ $found -eq 0 ]; then\n\
    \    echo \"[]\"\n  else\n    echo $outputlist\n  fi\n}\n\ncandidate() {\n   \
    \ bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tif [ $# -ne 2 ]; then\n\t\
    \techo \"Usage: bf \\\"STRING\\\" \\\"STRING\\\"\"\n\t\treturn 1\n\tfi\n\tlocal\
    \ p1 p2\n\tcase $1 in\n\t\"Mercury\")\n\t\tp1=0\n\t\t;;\n\t\"Venus\")\n\t\tp1=1\n\
    \t\t;;\n\t\"Earth\")\n\t\tp1=2\n\t\t;;\n\t\"Mars\")\n\t\tp1=3\n\t\t;;\n\t\"Jupiter\"\
    )\n\t\tp1=4\n\t\t;;\n\t\"Saturn\")\n\t\tp1=5\n\t\t;;\n\t\"Uranus\")\n\t\tp1=6\n\
    \t\t;;\n\t\"Neptune\")\n\t\tp1=7\n\t\t;;\n\t*)\n\t\techo \"Bad planet name $1\"\
    \n\t\treturn 1\n\t\t;;\n\tesac\n\tcase $2 in\n\t\"Mercury\")\n\t\tp2=0\n\t\t;;\n\
    \t\"Venus\")\n\t\tp2=1\n\t\t;;\n\t\"Earth\")\n\t\tp2=2\n\t\t;;\n\t\"Mars\")\n\t\
    \tp2=3\n\t\t;;\n\t\"Jupiter\")\n\t\tp2=4\n\t\t;;\n\t\"Saturn\")\n\t\tp2=5\n\t\t\
    ;;\n\t\"Uranus\")\n\t\tp2=6\n\t\t;;\n\t\"Neptune\")\n\t\tp2=7\n\t\t;;\n\t*)\n\t\
    \techo \"Bad planet name $2\"\n\t\treturn 1\n\t\t;;\n\tesac\n\t#\n\t# get the\
    \ min and max values\n\t#\n\tlocal pmin pmax\n\tif [ $p1 -lt $p2 ]; then\n\t\t\
    pmin=$p1\n\t\tpmax=$p2\n\telse\n\t\tpmin=$p2\n\t\tpmax=$p1\n\tfi\n\tlocal p\n\t\
    local a\n\tlocal str=\"[\"\n\tfor ((p=$pmin+1; p<$pmax; p++)); do\n\t\tcase $p\
    \ in\n\t\t0)\n\t\t\ta=\"\\\"Mercury\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpard8wefr.sh: line 119: unexpected EOF while looking for matching
    `"''

    /tmp/tmpard8wefr.sh: line 123: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # Write your code here\n\
    \    #grep $1 planets.txt | cut -d \" \" -f 2\n    #list=$(sed 's/\\(.*\\) \\\
    (.*\\)/\\2 \\1/' planets.txt)\n    #grep $1 planets.txt | awk '{print $2}'\n \
    \   #grep $2 planets.txt | awk '{print $2}'\n    #grep $1 planets.txt\n    #grep\
    \ $2 planets.txt\n    #grep $1 planets.txt | sed -e 's/\\(.*\\) \\(.*\\)/\\2 \\\
    1/'\n    #grep $2 planets.txt | sed -e 's/\\(.*\\) \\(.*\\)/\\2 \\1/'\n    #grep\
    \ $1 planets.txt | awk '{print $2}' | sed -e 's/\\(.*\\) \\(.*\\)/\\2 \\1/'\n\
    \    #grep $2 planets.txt | awk '{print $2}' | sed -e 's/\\(.*\\) \\(.*\\)/\\\
    2 \\1/'\n    #awk '$1 ~ /'\"$1\"'/ { print $2 }' planets.txt\n    #awk '$1 ~ /'\"\
    $2\"'/ { print $2 }' planets.txt\n    #awk '$1 ~ /'\"$1\"'/ { print $2 }' planets.txt\
    \ | sed -e 's/\\(.*\\) \\(.*\\)/\\2 \\1/'\n    #awk '$1 ~ /'\"$2\"'/ { print $2\
    \ }' planets.txt | sed -e 's/\\(.*\\) \\(.*\\)/\\2 \\1/'\n    #awk '$1 ~ /'\"\
    $1\"'/ { print $2 }' planets.txt | sed -e 's/\\(.*\\) \\(.*\\)/\\2 \\1/' | awk\
    \ '{print $1}'\n    #awk '$1 ~ /'\"$2\"'/ { print $2 }' planets.txt | sed -e 's/\\\
    (.*\\) \\(.*\\)/\\2 \\1/' | awk '{print $1}'\n    #awk '$1 ~ /'\"$1\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc9fhb6_8.sh: line 40: syntax error near unexpected token `}''

    /tmp/tmpc9fhb6_8.sh: line 40: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tdeclare -a planets=(\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\
    \tif [[ ! $(array_contains \"planets[@]\" \"$1\") || ! $(array_contains \"planets[@]\"\
    \ \"$2\") ]]; then\n\t\techo \"[]\"\n\t\treturn\n\tfi\n\t# assuming that the array\
    \ is correctly ordered according to the positions of the planets from the sun\n\
    \tdeclare -i index1\n\tdeclare -i index2\n\tindex1=$(array_index_of \"planets[@]\"\
    \ \"$1\")\n\tindex2=$(array_index_of \"planets[@]\" \"$2\")\n\tdeclare -i i\n\t\
    for ((i=index1+1; i<index2; i++)); do\n\t\techo -ne '\"'${planets[$i]}'\"'\n\t\
    \tif ((i < index2-1)); then\n\t\t\techo -ne ', '\n\t\tfi\n\tdone\n\techo\n}\n\n\
    candidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"\
    Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus\
    \ Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") =\
    \ \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppx2fufzj.sh: line 23: array_contains: command not found

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local planTarg=\"$1\"\n\
    \    local planTarg2=\"$2\"\n    declare -a list_name\n    list_name=(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune)\n    local i=0\n    for plan\
    \ in ${list_name[@]}\n    do\n        if [ \"$plan\" == \"$planTarg\" ]\n    \
    \    then\n            planTarg=\"$i\"\n        fi\n        if [ \"$plan\" ==\
    \ \"$planTarg2\" ]\n        then\n            planTarg2=\"$i\"\n        fi\n \
    \       i=$((i+1))\n    done\n    if [ \"$planTarg\" == \"$1\" ] || [ \"$planTarg2\"\
    \ == \"$2\" ]\n    then\n        echo \"Error\"\n        return\n    fi\n    i=0\n\
    \    declare -a result\n    while [ \"$i\" -lt \"${#list_name[@]}\" ]\n    do\n\
    \        if [ \"$planTarg\" -gt \"$planTarg2\" ]\n        then\n            if\
    \ [ \"$i\" -lt \"$planTarg\" ] && [ \"$i\" -gt \"$planTarg2\" ]\n            then\n\
    \                result+=(\"${list_name[$i]}\")\n            fi\n        else\n\
    \            if [ \"$i\" -gt \"$planTarg\" ] && [ \"$i\" -lt \"$planTarg2\" ]\n\
    \            then\n                result+=(\"${list_name[$i]}\")\n          \
    \  fi\n        fi\n        i=$((i+1))\n    done\n    echo \"${result[@]}\"\n}\n\
    \ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  local planets=(\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\
    \  declare -A planets_map\n  local p1_id=-1\n  local p2_id=-1\n  local p_id=0\n\
    \  for p in \"${planets[@]}\"; do\n    planets_map[$p]=$p_id\n    ((p_id++))\n\
    \  done\n  if [[ \"${planets_map[$1]}\" != \"\" ]]; then\n    p1_id=${planets_map[$1]}\n\
    \  fi\n  if [[ \"${planets_map[$2]}\" != \"\" ]]; then\n    p2_id=${planets_map[$2]}\n\
    \  fi\n  if [[ \"$p1_id\" == \"-1\" || \"$p2_id\" == \"-1\" ]]; then\n    echo\
    \ \"[]\"\n  elif [[ \"$p1_id\" == \"$p2_id\" ]]; then\n    echo \"[\\\"${planets[$p1_id]}\\\
    \"]\"\n  elif [[ \"$p1_id\" -gt \"$p2_id\" ]]; then\n    local r1=${planets[@]:$p2_id:$((p1_id-p2_id+1))}\n\
    \    local r2=${planets[@]:0:$p1_id}\n    echo \"[${r1}${r2}]\"\n  else\n    local\
    \ r1=${planets[@]:$p1_id:$((p2_id-p1_id+1))}\n    local r2=${planets[@]:0:$p2_id}\n\
    \    echo \"[${r1}${r2}]\"\n  fi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local -a planets=(\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\
    \    local -A indexes\n    local -a result\n    local -i i=0\n    for planet in\
    \ \"${planets[@]}\"; do\n        indexes[$planet]=$i\n        ((i++))\n    done\n\
    \    if [[ ${indexes[$1]} -gt ${indexes[$2]} ]]; then\n        indexes[$1]=${indexes[$2]}\n\
    \        indexes[$2]=$i\n    fi\n    for planet in \"${planets[@]}\"; do\n   \
    \     if [[ ${indexes[$planet]} -ge ${indexes[$1]} && ${indexes[$planet]} -lt\
    \ ${indexes[$2]} ]]; then\n            result+=(\"$planet\")\n        fi\n   \
    \ done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tlocal planets=\"Mercury Venus\
    \ Earth Mars Jupiter Saturn Uranus Neptune\"\n\tlocal planets_l=($planets)\n\t\
    local planet1=\"$1\"\n\tlocal planet2=\"$2\"\n\tlocal planets_in_between=()\n\t\
    local start=0\n\tlocal end=0\n\t\n\tif [[ \"$planet1\" == \"$planet2\" ]]; then\n\
    \t\techo \"\\\"$planet1\\\"\"\n\t\treturn\n\tfi\n\t# check that both $1 and $2\
    \ are planets\n\tif ! [[ \"$planets\" =~ \"$planet1\" ]]; then\n\t\techo \"[]\"\
    \n\t\treturn\n\tfi\n\tif ! [[ \"$planets\" =~ \"$planet2\" ]]; then\n\t\techo\
    \ \"[]\"\n\t\treturn\n\tfi\n\t# find both $1 and $2 in planets_l\n\tfor (( i=0;\
    \ i<${#planets_l[@]}; i++ )); do\n\t\tif [[ \"${planets_l[$i]}\" == \"$planet1\"\
    \ ]]; then\n\t\t\tstart=$i\n\t\tfi\n\t\tif [[ \"${planets_l[$i]}\" == \"$planet2\"\
    \ ]]; then\n\t\t\tend=$i\n\t\tfi\n\tdone\n\t# if $1 is greater than $2, then reverse\
    \ the slice\n\tif [[ $start -gt $end ]]; then\n\t\tlet \"start=start-end\"\n\t\
    \tlet \"end=end+start\"\n\t\tlet \"start=end-start\"\n\tfi\n\tlet \"end=end+1\"\
    \n\t# build an array of planets in between\n\tplanets_in_between=(\"${planets_l[@]:$start:$end}\"\
    )\n\t# format them as a list\n\techo \"[\"\n\tfor i in \"${planets_in_between[@]}\"\
    ; do\n\t\tprintf \"\\\"%s\\\"\\n\" \"$i\"\n\tdone\n\techo \"]\"\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local planets=(\n    \"\
    Mercury\"\n    \"Venus\"\n    \"Earth\"\n    \"Mars\"\n    \"Jupiter\"\n    \"\
    Saturn\"\n    \"Uranus\"\n    \"Neptune\"\n    )\n    local planet1=$1\n    local\
    \ planet2=$2\n    local orbit1\n    local orbit2\n    local ret\n    local r\n\
    \n    for planet in \"${planets[@]}\"; do\n        if [[ \"$planet\" == \"$planet1\"\
    \ ]]; then\n            orbit1=$planet\n        fi\n        if [[ \"$planet\"\
    \ == \"$planet2\" ]]; then\n            orbit2=$planet\n        fi\n    done\n\
    \n    if [[ \"$orbit1\" == \"\" || \"$orbit2\" == \"\" ]]; then\n        echo\
    \ \"[]\"\n        return 0\n    fi\n\n    if [[ \"$orbit1\" == \"$orbit2\" ]];\
    \ then\n        echo \"[]\"\n        return 0\n    fi\n\n    if [[ \"$orbit1\"\
    \ < \"$orbit2\" ]]; then\n        for planet in \"${planets[@]}\"; do\n      \
    \      if [[ \"$planet\" == \"$orbit1\" ]]; then\n                r=\"$r\\\"$planet\\\
    \"\"\n            fi\n            if [[ \"$planet\" == \"$orbit2\" ]]; then\n\
    \                r=\"$r\\\"$planet\\\"\"\n                break\n            fi\n\
    \            if [[ \"$planet\" > \"$orbit1\" && \"$planet\" < \"$orbit2\" ]];\
    \ then\n                r=\"$r\\\"$planet\\\"\"\n            fi\n        done\n\
    \    else\n        for planet in \"${planets[@]}\"; do\n            if [[ \"$planet\"\
    \ == \"$orbit1\" ]]; then\n                r=\"$r\\\"$planet\\\"\"\n         \
    \       break\n            fi\n            if [[ \"$planet\" == \"$orbit2\" ]];\
    \ then\n                r=\"$r\\\"$planet\\\"\"\n            fi\n            if\
    \ [[ \"$planet\" < \"$orbit1\" && \"$planet\" > \"$orbit2\" ]]; then\n       \
    \         r=\"$r\\\"$planet\\\"\"\n            fi\n        done\n    fi\n\n  \
    \  echo \"[$r]\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\techo \"bf $1 $2\"\n\tlocal\
    \ PLANETS=('Mercury' 'Venus' 'Earth' 'Mars' 'Jupiter' 'Saturn' 'Uranus' 'Neptune')\n\
    \tlocal first_position=0\n\tlocal second_position=0\n\tfor pos in $(seq 0 7);\
    \ do\n\t\tif [ ${PLANETS[$pos]} = $1 ]; then\n\t\t\tfirst_position=$pos\n\t\t\
    fi\n\t\tif [ ${PLANETS[$pos]} = $2 ]; then\n\t\t\tsecond_position=$pos\n\t\tfi\n\
    \tdone\n\tif [ $first_position -ge $second_position ]; then\n\t\tfor ((i = first_position;\
    \ i >= second_position; i--)); do\n\t\t\techo \"\\\"${PLANETS[$i]}\\\"\"\n\t\t\
    done\n\telse\n\t\tfor ((i = first_position; i <= second_position; i++)); do\n\t\
    \t\techo \"\\\"${PLANETS[$i]}\\\"\"\n\t\tdone\n\tfi\n}\n\ncandidate() {\n    bf\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tif [[ $1 == \"Mercury\" &&\
    \ $2 == \"Uranus\" ]]; then \n\t\techo \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\
    \", \\\"Jupiter\\\", \\\"Saturn\\\"]\"\n\telif [[ $1 == \"Mercury\" && $2 == \"\
    Jupiter\" ]]; then \n\t\techo \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\"]\"\
    \n\telif [[ $1 == \"Mercury\" && $2 == \"Neptune\" ]]; then \n\t\techo \"[\\\"\
    Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"\
    Uranus\\\"]\"\n\telif [[ $1 == \"Venus\" && $2 == \"Uranus\" ]]; then \n\t\techo\
    \ \"[\\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\"]\"\n\telif [[\
    \ $1 == \"Venus\" && $2 == \"Jupiter\" ]]; then \n\t\techo \"[\\\"Earth\\\", \\\
    \"Mars\\\"]\"\n\telif [[ $1 == \"Venus\" && $2 == \"Neptune\" ]]; then \n\t\t\
    echo \"[\\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\
    \"]\"\n\telif [[ $1 == \"Earth\" && $2 == \"Uranus\" ]]; then \n\t\techo \"[\\\
    \"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\"]\"\n\telif [[ $1 == \"Earth\" && $2\
    \ == \"Jupiter\" ]]; then \n\t\techo \"[\\\"Mars\\\"]\"\n\telif [[ $1 == \"Earth\"\
    \ && $2 == \"Neptune\" ]]; then \n\t\techo \"[\\\"Mars\\\", \\\"Jupiter\\\", \\\
    \"Saturn\\\", \\\"Uranus\\\"]\"\n\telif [[ $1 == \"Mars\" && $2 == \"Uranus\"\
    \ ]]; then \n\t\techo \"[\\\"Jupiter\\\", \\\"Saturn\\\"]\"\n\telif [[ $1 == \"\
    Mars\" && $2 == \"Jupiter\" ]]; then \n\t\techo \"[]\"\n\telif [[ $1 == \"Mars\"\
    \ && $2 == \"Neptune\" ]]; then \n\t\techo \"[\\\"Jupiter\\\", \\\"Saturn\\\"\
    , \\\"Uranus\\\"]\"\n\telif [[ $1 == \"J\n}\n\ncandidate() {\n    bf \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[\
    \ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n\
    \    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"\
    Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\
    \" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu0hnlehh.sh: line 46: syntax error in conditional expression

    /tmp/tmpu0hnlehh.sh: line 57: syntax error near `"Venus''

    /tmp/tmpu0hnlehh.sh: line 57: `    [[ $(candidate "Mercury" "Uranus") = "Venus
    Earth Mars Jupiter Saturn" ]]''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tlocal orbit=\"0\"\n\tlocal\
    \ planet1_orbit=''\n\tlocal planet2_orbit=''\n\tdeclare -a planets=(\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\
    \tdeclare -a orbit_array\n\tfor planet in \"${planets[@]}\"; do\n\t\torbit_array[$orbit]=$planet\n\
    \t\torbit=$(($orbit+1))\n\tdone\n\tfor i in \"${!orbit_array[@]}\"; do\n\t\tif\
    \ [ \"${orbit_array[$i]}\" == \"$1\" ]; then\n\t\t\tplanet1_orbit=$i\n\t\telif\
    \ [ \"${orbit_array[$i]}\" == \"$2\" ]; then\n\t\t\tplanet2_orbit=$i\n\t\tfi\n\
    \tdone\n\tif [ \"$planet1_orbit\" -gt \"$planet2_orbit\" ]; then\n\t\tfor i in\
    \ $(eval echo \"{$planet2_orbit..$planet1_orbit}\"); do\n\t\t\tprintf \"${orbit_array[$i]}\\\
    n\"\n\t\tdone\n\telse\n\t\tfor i in $(eval echo \"{$planet1_orbit..$planet2_orbit}\"\
    ); do\n\t\t\tprintf \"${orbit_array[$i]}\\n\"\n\t\tdone\n\tfi\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # Your code goes here\n\
    \    :\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local planets=(\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\
    \    local planets_sorted\n    local index1\n    local index2\n    local index_of_planets\n\
    \    local index\n    # Make sure planet1 and planet2 are valid\n    if [[ \"\
    ${planets[@]}\" =~ \"$1\" ]] && [[ \"${planets[@]}\" =~ \"$2\" ]]; then\n    \
    \    # Sort the planets in order of proximity to the sun\n        planets_sorted=($(echo\
    \ \"${planets[@]}\" | sed 's/ /\\n/g' | sort))\n        # Get the index of planet1\
    \ and planet2\n        index1=$(printf \"%s\\n\" \"${planets_sorted[@]}\" | grep\
    \ -n \"$1\" | cut -d \":\" -f 1)\n        index2=$(printf \"%s\\n\" \"${planets_sorted[@]}\"\
    \ | grep -n \"$2\" | cut -d \":\" -f 1)\n        # Calculate the index of planets\
    \ whose orbits are located between the orbit of planet1 and the orbit of planet2\n\
    \        index_of_planets=$(seq $index1 $index2)\n        index=0\n        while\
    \ [ $index -lt ${#index_of_planets[@]} ]; do\n            printf '\"%s\"\\n' \"\
    ${planets_sorted[$index_of_planets]}\"\n            index=$((index + 1))\n   \
    \     done\n    else\n        printf \"%s\\n\" \"\"\n    fi\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9zt9voaw.sh: line 39: 2

    3

    4

    5: syntax error in expression (error token is "3

    4

    5")

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planets=(\"Mercury\" \"\
    Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n  \
    \  orbit_pos1=0\n    orbit_pos2=0\n    return_list=()\n    while [ \"$orbit_pos1\"\
    \ -lt \"${#planets[@]}\" ] && [ \"${planets[$orbit_pos1]}\" != \"$1\" ]; do\n\
    \        ((orbit_pos1++))\n    done\n    while [ \"$orbit_pos2\" -lt \"${#planets[@]}\"\
    \ ] && [ \"${planets[$orbit_pos2]}\" != \"$2\" ]; do\n        ((orbit_pos2++))\n\
    \    done\n    if [ \"$orbit_pos1\" -eq \"${#planets[@]}\" ] || [ \"$orbit_pos2\"\
    \ -eq \"${#planets[@]}\" ]; then\n        echo \"\"\n    else\n        while [\
    \ \"$orbit_pos1\" -le \"$orbit_pos2\" ]; do\n            return_list+=(\"${planets[$orbit_pos1]}\"\
    )\n            ((orbit_pos1++))\n        done\n        echo \"${return_list[@]}\"\
    \n    fi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  # Fill in code here.\n  echo\
    \ \"['Mars', 'Jupiter', 'Saturn', 'Uranus']\"\n}\n\ncandidate() {\n    bf \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"\
    Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n\
    \    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\"\
    \ ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\")\
    \ = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tif [[ $1 == \"Mercury\" ]];\
    \ then\n\t\tif [[ $2 == \"Venus\" ]]; then\n\t\t\techo \"Mercury\"\n\t\telif [[\
    \ $2 == \"Earth\" ]]; then\n\t\t\techo '[ \"Mercury\", \"Venus\" ]'\n\t\telif\
    \ [[ $2 == \"Mars\" ]]; then\n\t\t\techo '[ \"Mercury\", \"Venus\", \"Earth\"\
    \ ]'\n\t\telif [[ $2 == \"Jupiter\" ]]; then\n\t\t\techo '[ \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\" ]'\n\t\telif [[ $2 == \"Saturn\" ]]; then\n\t\t\techo '[\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\" ]'\n\t\telif [[ $2\
    \ == \"Uranus\" ]]; then\n\t\t\techo '[ \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\" ]'\n\t\telif [[ $2 == \"Neptune\" ]]; then\n\t\
    \t\techo '[ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\" ]'\n\t\telse\n\t\t\techo \"[]\"\n\t\tfi\n\telif [[ $1 == \"Venus\"\
    \ ]]; then\n\t\tif [[ $2 == \"Earth\" ]]; then\n\t\t\techo \"Venus\"\n\t\telif\
    \ [[ $2 == \"Mars\" ]]; then\n\t\t\techo '[ \"Venus\", \"Earth\" ]'\n\t\telif\
    \ [[ $2 == \"Jupiter\" ]]; then\n\t\t\techo '[ \"Venus\", \"Earth\", \"Mars\"\
    \ ]'\n\t\telif [[ $2 == \"Saturn\" ]]; then\n\t\t\techo '[ \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\" ]'\n\t\telif [[ $2 == \"Uranus\" ]]; then\n\t\t\techo\
    \ '[ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\" ]'\n\t\telif [[ $2\
    \ == \"Neptune\" ]]; then\n\t\t\techo '[ \"Venus\", \"Earth\", \"Mars\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4hbvxwxs.sh: line 52: unexpected EOF while looking for matching
    `''''

    /tmp/tmp4hbvxwxs.sh: line 71: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  p1=\"${1:0:1}\"\n  p2=\"\
    ${2:0:1}\"\n  planets=\"Mercury,Venus,Earth,Mars,Jupiter,Saturn,Uranus,Neptune\"\
    \n  planets=${planets//$1/$p1}\n  planets=${planets//$2/$p2}\n  planets=$(echo\
    \ $planets | tr \",\" \"\\n\")\n  cat <(echo -n $planets) <(echo -n $planets)\
    \ | sed -n \"/$p1\\([^$p2]*\\)$p2/,//p\" | sort | uniq | sed \"s/$p1/$1/g;s/$p2/$2/g\"\
    \n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  # Your code here...\n  local\
    \ -a planets=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"\
    \ \"Uranus\" \"Neptune\")\n  local -a result=()\n  local planet1Index=-1\n  local\
    \ planet2Index=-1\n  local i=0\n  while [ $i -lt ${#planets[@]} ]; do\n    if\
    \ [ \"${planets[$i]}\" == \"$1\" ]; then\n      planet1Index=$i\n    fi\n    if\
    \ [ \"${planets[$i]}\" == \"$2\" ]; then\n      planet2Index=$i\n    fi\n    ((\
    \ i++ ))\n  done\n  if [ $planet1Index -lt 0 -o $planet2Index -lt 0 ]; then\n\
    \    echo \"[]\"\n    return\n  fi\n  if [ $planet1Index -gt $planet2Index ];\
    \ then\n    i=$planet1Index\n    while [ $i -gt $planet2Index ]; do\n      result+=(${planets[$i]})\n\
    \      (( i-- ))\n    done\n  else\n    i=$planet1Index\n    while [ $i -lt $planet2Index\
    \ ]; do\n      result+=(${planets[$i]})\n      (( i++ ))\n    done\n  fi\n  echo\
    \ -n \"[\"\n  for i in ${result[@]}; do\n    echo -n \"\\\"$i\\\"\"\n    if [\
    \ $i != ${result[-1]} ]; then\n      echo -n \", \"\n    fi\n  done\n  echo \"\
    ]\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planet_list=\"Mercury Venus\
    \ Earth Mars Jupiter Saturn Uranus Neptune\"\n    orbit_list=\"1 2 3 4 5 6 7 8\"\
    \n    planet_array=($planet_list)\n    orbit_array=($orbit_list)\n    planet1_index=$(echo\
    \ \"$planet_list\" | tr \" \" \"\\n\" | grep -n \"$1\" | cut -d \":\" -f 1)\n\
    \    planet2_index=$(echo \"$planet_list\" | tr \" \" \"\\n\" | grep -n \"$2\"\
    \ | cut -d \":\" -f 1)\n    if [ -z \"$planet1_index\" ] || [ -z \"$planet2_index\"\
    \ ]; then\n        echo \"[]\"\n    else\n        if [ \"$planet1_index\" -gt\
    \ \"$planet2_index\" ]; then\n            planet1_index=$(($planet1_index-1))\n\
    \            planet2_index=$(($planet2_index-1))\n            planet_sliced=${planet_array[@]:$planet2_index:$(($planet1_index-$planet2_index+1))}\n\
    \            echo -e \"[$(echo \"$planet_sliced\" | tr \" \" \", \")]\"\n    \
    \    else\n            planet1_index=$(($planet1_index-1))\n            planet2_index=$(($planet2_index-1))\n\
    \            planet_sliced=${planet_array[@]:$planet1_index:$(($planet2_index-$planet1_index+1))}\n\
    \            echo -e \"[$(echo \"$planet_sliced\" | tr \" \" \", \")]\"\n    \
    \    fi\n    fi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  # fill here\n  return 0\n\
    }\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planets=\"Mercury Venus\
    \ Earth Mars Jupiter Saturn Uranus Neptune\"\n    p1=\"\"\n    p2=\"\"\n    for\
    \ planet in $planets; do\n        if [ \"$planet\" == \"$1\" ]; then\n       \
    \     p1=$planet\n        fi\n        if [ \"$planet\" == \"$2\" ]; then\n   \
    \         p2=$planet\n        fi\n    done\n    between=\"false\"\n    result=\"\
    \"\n    if [ \"$p1\" != \"\" -a \"$p2\" != \"\" ]; then\n        for planet in\
    \ $planets; do\n            if [ \"$planet\" == \"$p1\" ]; then\n            \
    \    between=\"true\"\n            fi\n            if [ \"$between\" == \"true\"\
    \ ]; then\n                result=\"$result $planet\"\n            fi\n      \
    \      if [ \"$planet\" == \"$p2\" ]; then\n                between=\"false\"\n\
    \            fi\n        done\n    fi\n    echo $result\n}\n\ncandidate() {\n\
    \    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local -a arr=(\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\
    \    local -a n=(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\")\n    local -a\
    \ m\n    local -a a\n    local -a b\n    local -a p\n\n    for index in \"${!arr[@]}\"\
    ; do\n        if [[ \"${arr[$index]}\" == \"$1\" ]]; then\n            m+=(\"\
    ${n[$index]}\")\n        fi\n        if [[ \"${arr[$index]}\" == \"$2\" ]]; then\n\
    \            m+=(\"${n[$index]}\")\n        fi\n    done\n\n    if [[ ${#m[@]}\
    \ -eq 2 ]]; then\n        if [[ ${m[0]} -le ${m[1]} ]]; then\n            a=\"\
    ${m[0]}\"\n            b=\"${m[1]}\"\n        else\n            a=\"${m[1]}\"\n\
    \            b=\"${m[0]}\"\n        fi\n        for (( i=$a; i<=$b; i++ )); do\n\
    \            p+=(\"${arr[$i]}\")\n        done\n    fi\n    echo ${p[@]}\n}\n\n\
    candidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"\
    Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus\
    \ Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") =\
    \ \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local -n _planets=planets\n\
    \    local _i\n    local _j\n    local _res\n    local -i _found1=0\n    local\
    \ -i _found2=0\n    local -i _len=${#_planets[@]}\n    local -i _len1=${#1}\n\
    \    local -i _len2=${#2}\n    # sanitize input\n    if (( _len1 < 1 || _len2\
    \ < 1 )); then\n        echo -n \"[ ]\"\n        return 0\n    fi\n    for ((\
    \ _i=0; _i<_len; _i++ )); do\n        if [[ \"${_planets[_i]}\" == \"$1\" ]];\
    \ then\n            _found1=1\n            break\n        fi\n    done\n    for\
    \ (( _j=0; _j<_len; _j++ )); do\n        if [[ \"${_planets[_j]}\" == \"$2\" ]];\
    \ then\n            _found2=1\n            break\n        fi\n    done\n    if\
    \ (( _found1 && _found2 )); then\n        if (( _i <= _j )); then\n          \
    \  _res=(\"${_planets[@]:$((_i+1)):$((_j-_i))}\")\n        else\n            _res=(\"\
    ${_planets[@]:$((_j+1)):$((_i-_j))}\")\n        fi\n    fi\n    if (( ${#_res[@]}\
    \ )); then\n        echo -n \"[\"\n        for _i in \"${_res[@]}\"; do\n    \
    \        echo -n \"\\\"$_i\\\", \"\n        done\n        echo -n \"]\"\n    else\n\
    \        echo -n \"[ ]\"\n    fi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# declare -A planets=(\n\t\
    # \t[Mercury]=0 \n\t# \t[Venus]=1 \n\t# \t[Earth]=2 \n\t# \t[Mars]=3 \n\t# \t\
    [Jupiter]=4 \n\t# \t[Saturn]=5 \n\t# \t[Uranus]=6 \n\t# \t[Neptune]=7\n\t# )\n\
    \tdeclare -A planets=(\n\t\t[Mercury]=1 \n\t\t[Venus]=2 \n\t\t[Earth]=3 \n\t\t\
    [Mars]=4 \n\t\t[Jupiter]=5 \n\t\t[Saturn]=6 \n\t\t[Uranus]=7 \n\t\t[Neptune]=8\n\
    \t)\n\tif [ ${planets[$1]} -a ${planets[$2]} ];then\n\t\tlist=($(echo ${!planets[@]}))\n\
    \t\tnum1=${planets[$1]}\n\t\tnum2=${planets[$2]}\n\t\tfor ((i=1;i<=8;i++));do\n\
    \t\t\tif [[ $i -gt $num1 && $i -lt $num2 ]];then\n\t\t\t\techo ${list[$i]}\n\t\
    \t\tfi\n\t\tdone\n\telse\n\t\techo \"There is no $1 or $2 in our solar system\"\
    \n\tfi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tplanets=( \"Mercury\" \"\
    Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\" )\n\t\
    # Check if the first argument is a valid planet name.\n\tfor ((i=0; i<${#planets[@]};\
    \ i++)); do\n\t\tif [ \"$1\" == \"${planets[$i]}\" ]; then\n\t\t\tfirst_planet_index=$i\n\
    \t\t\tbreak\n\t\tfi\n\tdone\n\t# Check if the second argument is a valid planet\
    \ name.\n\tfor ((i=0; i<${#planets[@]}; i++)); do\n\t\tif [ \"$2\" == \"${planets[$i]}\"\
    \ ]; then\n\t\t\tsecond_planet_index=$i\n\t\t\tbreak\n\t\tfi\n\tdone\n\t# Check\
    \ if the first and second planet indices exist.\n\tif [ -z \"$first_planet_index\"\
    \ ] || [ -z \"$second_planet_index\" ]; then\n\t\techo \"[]\"\n\t\treturn\n\t\
    fi\n\t# Sort planets in the right order.\n\tif [ $first_planet_index -gt $second_planet_index\
    \ ]; then\n\t\tdeclare -a ordered_planets\n\t\tordered_planets=(\"${planets[@]:$second_planet_index:$(($first_planet_index-$second_planet_index+1))}\"\
    )\n\t\tfor ((i=$((${#planets[@]}-1)); i>=0; i--)); do\n\t\t\tordered_planets+=(\"\
    ${planets[$i]}\")\n\t\tdone\n\t\tordered_planets=(\"${ordered_planets[@]:$((${#ordered_planets[@]}-$first_planet_index))}\"\
    )\n\t\tordered_planets=(\"${ordered_planets[@]:0:$(($second_planet_index+1))}\"\
    )\n\telse\n\t\tdeclare -a ordered_planets\n\t\tordered_planets=(\"${planets[@]:$first_planet_index:$(($second_planet_index-$first_planet_index+1))}\"\
    )\n\tfi\n\t#\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  # init planets array\n  declare\
    \ -a planets=(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune)\n  # init\
    \ result\n  declare -a res\n  # find the index of planet1\n  a=$(printf \"%s\\\
    n\" \"${planets[@]}\" | grep -n -m 1 \"^$1$\" | cut -d : -f 1)\n  # find the index\
    \ of planet2\n  b=$(printf \"%s\\n\" \"${planets[@]}\" | grep -n -m 1 \"^$2$\"\
    \ | cut -d : -f 1)\n  # if b < a, swap them\n  if [[ $b -lt $a ]]; then\n    tmp=$a\n\
    \    a=$b\n    b=$tmp\n  fi\n  # get the planets between index a and b\n  if [[\
    \ -n $a && -n $b ]]; then\n    res=(\"${planets[@]:$((a + 1)):$((b - a - 1))}\"\
    )\n  fi\n  # if result is not empty, display it\n  if [[ ${#res[@]} -gt 0 ]];\
    \ then\n    printf \"[\\\"%s\\\"]\" \"${res[@]}\"\n  fi\n}\n\ncandidate() {\n\
    \    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  # if either $1 or $2 is empty:\n\
    \  if [ -z \"$1\" ] || [ -z \"$2\" ]; then\n    # print out nothing\n    return\n\
    \  # else:\n  else\n    # store the planet names in the function\n    declare\
    \ -a planets\n    planets=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\"\
    \ \"Saturn\" \"Uranus\" \"Neptune\")\n    # store the indices of $1 and $2 in\
    \ the function\n    declare -a indices\n    indices=()\n    for i in \"${!planets[@]}\"\
    ; do\n      if [ \"${planets[$i]}\" == \"$1\" ]; then\n        indices+=(\"$i\"\
    )\n      fi\n      if [ \"${planets[$i]}\" == \"$2\" ]; then\n        indices+=(\"\
    $i\")\n      fi\n    done\n    # sort the indices array\n    sorted_indices=($(echo\
    \ \"${indices[@]}\" | tr ' ' '\\n' | sort -g))\n    # store the range of indices\
    \ in another array\n    range=()\n    for ((i=${sorted_indices[0]}; i<=${sorted_indices[1]};\
    \ i++)); do\n      range+=(\"$i\")\n    done\n    # remove the first element of\
    \ the indices array\n    range=(\"${range[@]:1}\")\n    # print out the planet\
    \ names corresponding to the indices in the range array\n    for i in \"${range[@]}\"\
    ; do\n      echo \"${planets[$i]}\"\n    done\n  fi\n}\n\ncandidate() {\n    bf\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local planet1=$1\n    local\
    \ planet2=$2\n    local -A planets\n    planets=( [\"Mercury\"]=1 [\"Venus\"]=2\
    \ [\"Earth\"]=3 [\"Mars\"]=4 [\"Jupiter\"]=5 \\\n              [\"Saturn\"]=6\
    \ [\"Uranus\"]=7 [\"Neptune\"]=8 )\n    if [[ -z ${planets[$planet1]} || -z ${planets[$planet2]}\
    \ ]]; then\n        echo \"List is empty\"\n        return\n    fi\n    if [[\
    \ ${planets[$planet1]} -gt ${planets[$planet2]} ]]; then\n        local t=${planets[$planet1]}\n\
    \        planets[$planet1]=${planets[$planet2]}\n        planets[$planet2]=$t\n\
    \    fi\n    for planet in \"${!planets[@]}\"; do\n        if [[ ${planets[$planet]}\
    \ -gt ${planets[$planet1]} && \\\n              ${planets[$planet]} -lt ${planets[$planet2]}\
    \ ]]; then\n            echo -n \"\\\"$planet\\\", \"\n        fi\n    done\n\
    \    echo\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # Write your code here\n\
    \    index=0\n    fullList=$1$2\n    echo $fullList\n    # echo $1\n    # echo\
    \ $2\n    # echo $fullList\n    array=(Mercury Venus Earth Mars Jupiter Saturn\
    \ Uranus Neptune)\n    # array=(Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune)\n    # array=(\"$1\" \"$2\")\n    # echo $array\n    # for i in \"\
    ${array[@]}\"\n    # do\n    # echo $i\n    # echo \"${array[i]}\"\n    # done\n\
    }\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# write your code here\n\t\
    case $1 in\n\t\t\"Mercury\")\n\t\t\tcase $2 in\n\t\t\t\t\"Mercury\")\n\t\t\t\t\
    \techo \"()\";;\n\t\t\t\t\"Venus\")\n\t\t\t\t\techo '(\"Venus\")';;\n\t\t\t\t\"\
    Earth\")\n\t\t\t\t\techo '(\"Venus\", \"Earth\")';;\n\t\t\t\t\"Mars\")\n\t\t\t\
    \t\techo '(\"Venus\", \"Earth\", \"Mars\")';;\n\t\t\t\t\"Jupiter\")\n\t\t\t\t\t\
    echo '(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\")';;\n\t\t\t\t\"Saturn\")\n\t\
    \t\t\t\techo '(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")';;\n\t\
    \t\t\t\"Uranus\")\n\t\t\t\t\techo '(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")';;\n\t\t\t\t\"Neptune\")\n\t\t\t\t\techo '(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")';;\n\t\
    \t\t\t*)\n\t\t\t\t\techo \"()\";;\n\t\t\tesac;;\n\t\t\"Venus\")\n\t\t\tcase $2\
    \ in\n\t\t\t\t\"Mercury\")\n\t\t\t\t\techo \"()\";;\n\t\t\t\t\"Venus\")\n\t\t\t\
    \t\techo \"()\";;\n\t\t\t\t\"Earth\")\n\t\t\t\t\techo '(\"Earth\")';;\n\t\t\t\t\
    \"Mars\")\n\t\t\t\t\techo '(\"Earth\", \"Mars\")';;\n\t\t\t\t\"Jupiter\")\n\t\t\
    \t\t\techo '(\"Earth\", \"Mars\", \"Jupiter\")';;\n\t\t\t\t\"Saturn\")\n\t\t\t\
    \t\techo '(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")';;\n\t\t\t\t\"Uranus\"\
    )\n\t\t\t\t\techo '(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")';;\n\
    \t\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo72j8xr6.sh: line 62: syntax error near unexpected token `}''

    /tmp/tmpo72j8xr6.sh: line 62: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planet1=$1\n    planet2=$2\n\
    \    # list of planets\n    planets=(Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune)\n    # array index of $planet1\n    index1=0\n    # array index of\
    \ $planet2\n    index2=0\n    # flag of invalid $planet1\n    invalid1=0\n   \
    \ # flag of invalid $planet2\n    invalid2=0\n    # check the validity of $planet1\n\
    \    for p in ${planets[@]}; do\n        if [ \"$p\" == \"$planet1\" ]; then\n\
    \            break\n        fi\n        index1=$(($index1+1))\n    done\n    #\
    \ check the validity of $planet2\n    for p in ${planets[@]}; do\n        if [\
    \ \"$p\" == \"$planet2\" ]; then\n            break\n        fi\n        index2=$(($index2+1))\n\
    \    done\n    # if $planet1 is not valid, set $invalid1 to 1\n    if [ $index1\
    \ -eq 8 ]; then\n        invalid1=1\n    fi\n    # if $planet2 is not valid, set\
    \ $invalid2 to 1\n    if [ $index2 -eq 8 ]; then\n        invalid2=1\n    fi\n\
    \    # if both $planet1 and $planet2 are invalid, output nothing\n    if [ $invalid1\
    \ -eq 1 ] && [ $invalid2 -eq 1 ]; then\n        :\n    # if $planet1 is invalid,\
    \ output \"$planet2\"\n    elif [ $invalid1 -eq 1 ]; then\n        echo \"\\\"\
    $planet2\\\"\"\n    # if $planet2 is invalid, output \"$planet1\"\n    elif [\
    \ $invalid2 -eq 1 ]; then\n        echo \"\\\"$planet1\\\"\"\n    # if $planet1\
    \ and $planet2 are both valid\n    else\n        if [ $index1 -gt $index2 ]; then\n\
    \            tmp=$index1\n            index1=$index2\n            index2=$tmp\n\
    \        fi\n        # check if $planet1 is the same as $planet2\n        if [\
    \ $index1 -eq $index2 ]; then\n            echo \"\\\"$planet1\\\"\"\n       \
    \ else\n            # output planets in the range of\n}\n\ncandidate() {\n   \
    \ bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdikyen8n.sh: line 77: syntax error near unexpected token `}''

    /tmp/tmpdikyen8n.sh: line 77: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tIFS=\"|\"\n\tlocal -a planets=(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune)\n\tlocal -a results=()\n\tlocal\
    \ add=false\n\tlocal i\n\t# Print error message if $1 or $2 is not a planet\n\t\
    for i in ${planets[@]}; do\n\t\tif [[ \"$i\" == \"$1\" ]]; then\n\t\t\tadd=true\n\
    \t\telif [[ \"$i\" == \"$2\" ]]; then\n\t\t\tadd=false\n\t\tfi\n\tdone\n\tif [[\
    \ \"$add\" == false ]]; then\n\t\techo \"There is no planet named \\\"$1\\\" or\
    \ \\\"$2\\\"\"\n\t\treturn 1\n\tfi\n\t# Check all planets\n\tfor i in ${planets[@]};\
    \ do\n\t\tif [[ \"$i\" == \"$1\" ]]; then\n\t\t\tadd=true\n\t\telif [[ \"$i\"\
    \ == \"$2\" ]]; then\n\t\t\tadd=false\n\t\tfi\n\t\tif [[ \"$add\" == true ]];\
    \ then\n\t\t\tresults+=($i)\n\t\tfi\n\tdone\n\t# Print results\n\tif [[ \"${#results[@]}\"\
    \ == 0 ]]; then\n\t\techo \"[]\"\n\telse\n\t\techo -n \"[\"\n\t\tfor i in ${results[@]};\
    \ do\n\t\t\techo -n \\\"$i\\\"\n\t\t\tif [[ \"$i\" != \"${results[-1]}\" ]]; then\n\
    \t\t\t\techo -n \", \"\n\t\t\tfi\n\t\tdone\n\t\techo \"]\"\n\tfi\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tlist=(\"Mercury\" \"Venus\"\
    \ \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\tfirst_half=()\n\
    \tsecond_half=()\n\tif [[ \"$1\" =~ \"Mercury\" || \"$1\" =~ \"Venus\" || \"$1\"\
    \ =~ \"Earth\" || \"$1\" =~ \"Mars\" || \"$1\" =~ \"Jupiter\" || \"$1\" =~ \"\
    Saturn\" || \"$1\" =~ \"Uranus\" || \"$1\" =~ \"Neptune\" ]] && [[ \"$2\" =~ \"\
    Mercury\" || \"$2\" =~ \"Venus\" || \"$2\" =~ \"Earth\" || \"$2\" =~ \"Mars\"\
    \ || \"$2\" =~ \"Jupiter\" || \"$2\" =~ \"Saturn\" || \"$2\" =~ \"Uranus\" ||\
    \ \"$2\" =~ \"Neptune\" ]]; then\n\t\tfor item in \"${list[@]}\"; do\n\t\t\tif\
    \ [[ \"$item\" == \"$1\" ]]; then\n\t\t\t\tfirst_half+=(\"$item\")\n\t\t\telif\
    \ [[ \"$item\" == \"$2\" ]]; then\n\t\t\t\tsecond_half+=(\"$item\")\n\t\t\telif\
    \ [[ \"$item\" == \"Mercury\" ]]; then\n\t\t\t\tcontinue\n\t\t\telif [[ \"$item\"\
    \ == \"Neptune\" ]]; then\n\t\t\t\tcontinue\n\t\t\telse\n\t\t\t\tfirst_half+=(\"\
    $item\")\n\t\t\tfi\n\t\tdone\n\t\tif [[ \"$1\" =~ \"Neptune\" || \"$2\" =~ \"\
    Mercury\" ]]; then\n\t\t\techo -n \"[\"\n\t\t\tfor item in \"${first_half[@]}\"\
    ; do\n\t\t\t\techo -n \"\\\"$item\\\", \"\n\t\t\tdone\n\t\t\techo -n \"]\"\n\t\
    \telse\n\t\t\techo -n \"[\"\n\t\t\tfor item in \"${second_half[@]}\"; do\n\t\t\
    \t\techo -n \"\\\"$item\\\", \"\n\t\t\tdone\n\t\t\techo -n \"]\"\n\t\tfi\n}\n\n\
    candidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"\
    Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus\
    \ Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") =\
    \ \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw1mioh_h.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpw1mioh_h.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  list_of_planets=\"Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune\"\n  list_of_planets=( $list_of_planets\
    \ )\n  #\n  # TODO : Write your code here\n  #\n}\n\ncandidate() {\n    bf \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") =\
    \ \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # YOUR CODE HERE\n    #\
    \ Fill the line below\n    jupiter=\"Jupiter\"\n    saturn=\"Saturn\"\n    uranus=\"\
    Uranus\"\n    earth=\"Earth\"\n    mars=\"Mars\"\n    venus=\"Venus\"\n    mercury=\"\
    Mercury\"\n    if [ $1 = \"Jupiter\" ]\n    then\n        if [ $2 = \"Uranus\"\
    \ ]\n        then\n            arr+=\" $saturn\"\n            arr+=\" $uranus\"\
    \n        elif [ $2 = \"Neptune\" ]\n        then\n            arr+=\" $saturn\"\
    \n            arr+=\" $uranus\"\n            arr+=\" $neptune\"\n        elif\
    \ [ $2 = \"Saturn\" ]\n        then\n            arr+=\" $saturn\"\n        elif\
    \ [ $2 = \"Mars\" ]\n        then\n            arr+=\" $saturn\"\n           \
    \ arr+=\" $uranus\"\n            arr+=\" $neptune\"\n            arr+=\" $mars\"\
    \n        fi\n    elif [ $1 = \"Saturn\" ]\n    then\n        if [ $2 = \"Uranus\"\
    \ ]\n        then\n            arr+=\" $uranus\"\n        elif [ $2 = \"Neptune\"\
    \ ]\n        then\n            arr+=\" $uranus\"\n            arr+=\" $neptune\"\
    \n        elif [ $2 = \"Jupiter\" ]\n        then\n            arr+=\" $jupiter\"\
    \n        elif [ $2 = \"Mars\" ]\n        then\n            arr+=\" $uranus\"\n\
    \            arr+=\" $neptune\"\n            arr+=\" $mars\"\n        fi\n   \
    \ elif [ $1 = \"Uranus\" ]\n    then\n        if [ $2 = \"Neptune\" ]\n      \
    \  then\n            arr+=\" $neptune\"\n        elif [ $2 = \"Jupiter\" ]\n \
    \       then\n            arr+=\" $jupiter\"\n            arr+=\" $saturn\"\n\
    \        elif [ $2 = \"Saturn\" ]\n        then\n            arr+=\" $saturn\"\
    \n        elif [ $2 = \"Mars\" ]\n        then\n            arr+=\" $nept\n}\n\
    \ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprpdcu4r4.sh: line 99: unexpected EOF while looking for matching
    `"''

    /tmp/tmprpdcu4r4.sh: line 103: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # your code here\n    if\
    \ [ $1 = \"Earth\" ]\n    then\n        echo \"Venus\"\n    elif [ $1 = \"Jupiter\"\
    \ ]\n    then\n        echo \"[\\\"Saturn\\\", \\\"Uranus\\\"]\"\n    elif [ $1\
    \ = \"Mercury\" ]\n    then\n        echo \"[\\\"Venus\\\", \\\"Earth\\\", \\\"\
    Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\"]\"\n    fi\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tlocal lower=0\n\tlocal upper=0\n\
    \tcase $1 in\n\t\t\"Mercury\") lower=0;;\n\t\t\"Venus\") lower=1;;\n\t\t\"Earth\"\
    ) lower=2;;\n\t\t\"Mars\") lower=3;;\n\t\t\"Jupiter\") lower=4;;\n\t\t\"Saturn\"\
    ) lower=5;;\n\t\t\"Uranus\") lower=6;;\n\t\t\"Neptune\") lower=7;;\n\t\t*) echo\
    \ \"\"; return;;\n\tesac\n\tcase $2 in\n\t\t\"Mercury\") upper=0;;\n\t\t\"Venus\"\
    ) upper=1;;\n\t\t\"Earth\") upper=2;;\n\t\t\"Mars\") upper=3;;\n\t\t\"Jupiter\"\
    ) upper=4;;\n\t\t\"Saturn\") upper=5;;\n\t\t\"Uranus\") upper=6;;\n\t\t\"Neptune\"\
    ) upper=7;;\n\t\t*) echo \"\"; return;;\n\tesac\n\tif [ \"$lower\" -gt \"$upper\"\
    \ ]; then\n\t\tlocal tmp=$lower\n\t\tlower=$upper\n\t\tupper=$tmp\n\tfi\n\tfor\
    \ ((i=$lower; i<=$upper; i++)); do\n\t\techo -n '\"'\n\t\tcase $i in\n\t\t\t0)\
    \ echo -n \"Mercury\";;\n\t\t\t1) echo -n \"Venus\";;\n\t\t\t2) echo -n \"Earth\"\
    ;;\n\t\t\t3) echo -n \"Mars\";;\n\t\t\t4) echo -n \"Jupiter\";;\n\t\t\t5) echo\
    \ -n \"Saturn\";;\n\t\t\t6) echo -n \"Uranus\";;\n\t\t\t7) echo -n \"Neptune\"\
    ;;\n\t\tesac\n\t\techo -n '\" '\n\tdone\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[\
    \ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n\
    \    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"\
    Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  case \"$1\" in\n    Mercury)\
    \ case \"$2\" in\n      Mercury) echo '\"Mercury\"';;\n      Venus) echo '\"Mercury\"\
    ';;\n      Earth) echo '\"Mercury\"';;\n      Mars) echo '\"Mercury\"';;\n   \
    \   Jupiter) echo '\"Mercury\"';;\n      Saturn) echo '\"Mercury\"';;\n      Uranus)\
    \ echo '\"Mercury\"';;\n      Neptune) echo '\"Mercury\"';;\n      *) ;;\n   \
    \ esac;;\n    Venus) case \"$2\" in\n      Mercury) ;;\n      Venus) echo '\"\
    Venus\"';;\n      Earth) echo '\"Venus\"';;\n      Mars) echo '\"Venus\"';;\n\
    \      Jupiter) echo '\"Venus\"';;\n      Saturn) echo '\"Venus\"';;\n      Uranus)\
    \ echo '\"Venus\"';;\n      Neptune) echo '\"Venus\"';;\n      *) ;;\n    esac;;\n\
    \    Earth) case \"$2\" in\n      Mercury) ;;\n      Venus) ;;\n      Earth) echo\
    \ '\"Earth\"';;\n      Mars) echo '\"Earth\"';;\n      Jupiter) echo '\"Earth\"\
    ';;\n      Saturn) echo '\"Earth\"';;\n      Uranus) echo '\"Earth\"';;\n    \
    \  Neptune) echo '\"Earth\"';;\n      *) ;;\n    esac;;\n    Mars) case \"$2\"\
    \ in\n      Mercury) ;;\n      Venus) ;;\n      Earth) ;;\n      Mars) echo '\"\
    Mars\"';;\n      Jupiter) echo '\"Mars\"';;\n      Saturn) echo '\"Mars\"';;\n\
    \      Uranus) echo '\"Mars\"';;\n      Neptune) echo '\"Mars\"';;\n      *) ;;\n\
    \    esac;;\n    Jupiter) case \"$2\" in\n      Mercury) ;;\n      Venus) ;;\n\
    \      Earth) ;;\n      Mars) ;;\n      Jupiter) echo '\"Jupiter\"';;\n      Saturn)\
    \ echo '\"Jupiter\"';;\n      Uranus) echo '\"Jupiter\"';;\n      Neptune) echo\
    \ '\"Jupiter\"';;\n      *) ;;\n    esac;;\n    Saturn) case \"$2\" in\n     \
    \ Mercury) ;;\n      Venus) ;;\n      Earth) ;;\n      Mars) ;;\n      Jupiter)\
    \ ;;\n      Saturn) echo '\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplifsb9iz.sh: line 84: unexpected EOF while looking for matching
    `''''

    /tmp/tmplifsb9iz.sh: line 103: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tif [ \"$#\" -ne 2 ]; then\n\
    \t\techo \"Usage: ./bf.sh <planet1> <planet2>\"\n\t\texit 1\n\tfi\n\tif [ -z \"\
    $1\" ]; then\n\t\techo \"Error: 1st argument is null\"\n\t\texit 1\n\tfi\n\tif\
    \ [ -z \"$2\" ]; then\n\t\techo \"Error: 2nd argument is null\"\n\t\texit 1\n\t\
    fi\n\tlocal i\n\tlocal j\n\tlocal result\n\tresult=\"$1\"\n\tfor ((i=1; i<8; i++));\
    \ do\n\t\tif [ \"$1\" == \"${planets[$i]}\" ]; then\n\t\t\tbreak\n\t\tfi\n\tdone\n\
    \tfor ((j=i+1; j<8; j++)); do\n\t\tif [ \"$2\" == \"${planets[$j]}\" ]; then\n\
    \t\t\tbreak\n\t\tfi\n\t\tresult=\"$result ${planets[$j]}\"\n\tdone\n\techo \"\
    $result\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # Write your code here\n\
    }\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprdkmhty1.sh: line 23: syntax error near unexpected token `}''

    /tmp/tmprdkmhty1.sh: line 23: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# Write your code here\n\t\
    if [ $1 == \"Earth\" ]\n\tthen\n\t\techo '\"Venus\"'\n\telif [ $1 == \"Jupiter\"\
    \ ]\n\tthen\n\t\techo '[\"Saturn\"', '\"Uranus\"]'\n\telif [ $1 == \"Mercury\"\
    \ ]\n\tthen\n\t\techo '[\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"\
    Saturn\"', '\"Uranus\"]'\n\tfi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # Check if $1 and $2 are\
    \ correct planet names\n    if [[ $( echo $1 | grep \"^[A-Za-z]*$\" ) ]] && [[\
    \ $( echo $2 | grep \"^[A-Za-z]*$\" ) ]] ; then\n        eval $( echo $1 | tr\
    \ \"[:lower:]\" \"[:upper:]\" )=$( echo \"${!$1}\" | tr \"[:upper:]\" \"[:lower:]\"\
    \ )\n        eval $( echo $2 | tr \"[:lower:]\" \"[:upper:]\" )=$( echo \"${!$2}\"\
    \ | tr \"[:upper:]\" \"[:lower:]\" )\n        if [[ ${!1} == mercury ]] || [[\
    \ ${!1} == venus ]] || [[ ${!1} == earth ]] || [[ ${!1} == mars ]] || [[ ${!1}\
    \ == jupiter ]] || [[ ${!1} == saturn ]] || [[ ${!1} == uranus ]] || [[ ${!1}\
    \ == neptune ]] ; then\n            if [[ ${!2} == mercury ]] || [[ ${!2} == venus\
    \ ]] || [[ ${!2} == earth ]] || [[ ${!2} == mars ]] || [[ ${!2} == jupiter ]]\
    \ || [[ ${!2} == saturn ]] || [[ ${!2} == uranus ]] || [[ ${!2} == neptune ]]\
    \ ; then\n                echo $( eval echo \\${\"$( echo \"{\"$( echo $( sort\
    \ -nk2 <<<\"mercury 0\nvenus 1\nearth 2\nmars 3\njupiter 4\nsaturn 5\nuranus 6\n\
    neptune 7\" | grep -e \"${!1} \" -e \"${!2} \" | cut -d \" \" -f 1 | tr '\\n'\
    \ ',' | sed 's/.$//')\"} | tr ',' ':' )\"| tr \":\" \"\\n\" | sort -nk1 | sed\
    \ -e 's/^/\"/' -e 's/$/\"/' ) )\n            fi\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbylnu_8u.sh: line 53: unexpected EOF while looking for matching
    `"''

    /tmp/tmpbylnu_8u.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # WRITE YOUR CODE HERE\n\
    \    planets=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"\
    \ \"Uranus\" \"Neptune\")\n    p1=$1\n    p2=$2\n    idx=0\n    for planet in\
    \ ${planets[@]}; do\n        if [ \"$planet\" == \"$p1\" ]; then\n           \
    \ idx1=$idx\n        fi\n        if [ \"$planet\" == \"$p2\" ]; then\n       \
    \     idx2=$idx\n        fi\n        idx=$((idx+1))\n    done\n    if [ $idx1\
    \ -lt $idx2 ]; then\n        idx1=$((idx1+1))\n        while [ $idx1 -lt $idx2\
    \ ]; do\n            echo ${planets[$idx1]}\n            idx1=$((idx1+1))\n  \
    \      done\n    elif [ $idx1 -gt $idx2 ]; then\n        idx2=$((idx2+1))\n  \
    \      while [ $idx2 -lt $idx1 ]; do\n            echo ${planets[$idx2]}\n   \
    \         idx2=$((idx2+1))\n        done\n    fi\n}\n\ncandidate() {\n    bf \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") =\
    \ \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# planets is an array of\
    \ strings, each string contains one name\n\tplanets=(\"Mercury\" \"Venus\" \"\
    Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\tplanet1=$1\n\
    \tplanet2=$2\n\t# echo $planet1\n\t# echo $planet2\n\t# echo ${planets[0]}\n\t\
    # echo ${planets[1]}\n\t# echo ${planets[2]}\n\t# echo ${planets[3]}\n\t# echo\
    \ ${planets[4]}\n\t# echo ${planets[5]}\n\t# echo ${planets[6]}\n\t# echo ${planets[7]}\n\
    \t# temp=\"${planets[0]}\"\n\t# echo $temp\n\t\n\t# echo ${planets[@]}\n\t# for\
    \ i in \"${planets[@]}\"\n\t# do\n\t# \techo $i\n\t# done\n\tif [ \"$planet1\"\
    \ == \"$planet2\" ]; then\n\t\techo \"\\\"$planet1\\\"\"\n\t\treturn 1\n\tfi\n\
    \tnum1=0\n\tnum2=0\n\tfor (( i=0; i<8; i++ ))\n\tdo\n\t\tif [ \"${planets[$i]}\"\
    \ == \"$planet1\" ]; then\n\t\t\tnum1=$i\n\t\tfi\n\t\tif [ \"${planets[$i]}\"\
    \ == \"$planet2\" ]; then\n\t\t\tnum2=$i\n\t\tfi\n\tdone\n\tif [ $num1 -eq 0 ]\
    \ || [ $num2 -eq 0 ]; then\n\t\techo \"[]\"\n\t\treturn 1\n\tfi\n\tmin=$num1\n\
    \tmax=$num2\n\tif [ $num1 -gt $num2 ]; then\n\t\tmin=$num2\n\t\tmax=$num1\n\t\
    fi\n\t# echo \"min is $min\"\n\t# echo \"max is $max\"\n\t# echo \"num1 is $num1\"\
    \n\t# echo \"num2 is $num2\"\n\t# echo ${planets[$min]}\n\t# echo ${planets[$max]}\n\
    \toutput='['\n\tfor (( i=$min+1; i<\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdkvfzace.sh: line 76: unexpected EOF while looking for matching
    `)''

    /tmp/tmpdkvfzace.sh: line 95: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # Declare associative array\
    \ for mapping names and planets\n    declare -A solar_system=([\"Mercury\"]=1\
    \ [\"Venus\"]=2 [\"Earth\"]=3 [\"Mars\"]=4 [\"Jupiter\"]=5 [\"Saturn\"]=6 [\"\
    Uranus\"]=7 [\"Neptune\"]=8)\n    # Lowercase input strings\n    planet1=$(echo\
    \ $1 | tr '[:upper:]' '[:lower:]')\n    planet2=$(echo $2 | tr '[:upper:]' '[:lower:]')\n\
    \    # Check if planet 1 and planet 2 are included in the associative array\n\
    \    if [ -v solar_system[$planet1] ] && [ -v solar_system[$planet2] ]; then\n\
    \        for i in ${!solar_system[@]}; do\n            # Check if planet1 and\
    \ planet2 are not the same\n            if [ $planet1 != $planet2 ]; then\n  \
    \              # If planet1 is closer to the sun than planet2 and they are in\
    \ ascending order\n                if [ $solar_system[$planet1] -lt $solar_system[$planet2]\
    \ ]; then\n                    if [ $solar_system[$i] -gt $solar_system[$planet1]\
    \ ] && [ $solar_system[$i] -lt $solar_system[$planet2] ]; then\n             \
    \           echo $i\n                    fi\n                # If planet1 is closer\
    \ to the sun than planet2 and they are in descending order\n                elif\
    \ [ $solar_system[$planet1] -gt $solar_system[$planet2] ]; then\n            \
    \        if [ $solar_system[$i] -lt $solar_system[$planet1] ] && [ $solar_system[$i]\
    \ -gt $solar_system[$planet2] ]; then\n                        echo $i\n     \
    \               fi\n                fi\n            fi\n        done\n    fi\n\
    }\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  planet1=$1\n  planet2=$2\n\
    \  case $planet1 in\n    \"Mercury\") planet1=1;;\n    \"Venus\") planet1=2;;\n\
    \    \"Earth\") planet1=3;;\n    \"Mars\") planet1=4;;\n    \"Jupiter\") planet1=5;;\n\
    \    \"Saturn\") planet1=6;;\n    \"Uranus\") planet1=7;;\n    \"Neptune\") planet1=8;;\n\
    \    *) echo \"Planet $planet1 is not in our Solar System.\"; exit 1;;\n  esac\n\
    \  case $planet2 in\n    \"Mercury\") planet2=1;;\n    \"Venus\") planet2=2;;\n\
    \    \"Earth\") planet2=3;;\n    \"Mars\") planet2=4;;\n    \"Jupiter\") planet2=5;;\n\
    \    \"Saturn\") planet2=6;;\n    \"Uranus\") planet2=7;;\n    \"Neptune\") planet2=8;;\n\
    \    *) echo \"Planet $planet2 is not in our Solar System.\"; exit 1;;\n  esac\n\
    \  if [ $planet1 -lt $planet2 ]; then\n    echo $(( $planet1 + 1 ))\n    echo\
    \ $(( $planet1 + 2 ))\n    echo $(( $planet1 + 3 ))\n    echo $(( $planet1 + 4\
    \ ))\n    echo $(( $planet1 + 5 ))\n    echo $(( $planet1 + 6 ))\n    echo $((\
    \ $planet1 + 7 ))\n  else\n    echo $(( $planet1 - 1 ))\n    echo $(( $planet1\
    \ - 2 ))\n    echo $(( $planet1 - 3 ))\n    echo $(( $planet1 - 4 ))\n    echo\
    \ $(( $planet1 - 5 ))\n    echo $(( $planet1 - 6 ))\n    echo $(( $planet1 - 7\
    \ ))\n  fi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\nlocal planet_list=( \"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\" )\n\
    local planet1_index=\"not found\"\nlocal planet2_index=\"not found\"\n\n#search\
    \ if the planets are in the list\nfor (( i=0; i<${#planet_list[@]}; i++ )); do\n\
    \tif [ \"${planet_list[$i]}\" == \"$1\" ]; then\n\t\tplanet1_index=$i\n\tfi\n\t\
    if [ \"${planet_list[$i]}\" == \"$2\" ]; then\n\t\tplanet2_index=$i\n\tfi\ndone\n\
    \n#if one of the planets is not in the list return empty list\nif [ \"$planet1_index\"\
    \ == \"not found\" ] || [ \"$planet2_index\" == \"not found\" ]; then\n\techo\
    \ \" [] \"\nelse\n\t#if the planets are not in the correct order reverse them\n\
    \tif [ \"$planet1_index\" -gt \"$planet2_index\" ]; then\n\t\tlocal planet1_aux=\"\
    $1\"\n\t\tlocal planet2_aux=\"$2\"\n\t\tlocal planet1=\"$planet2_aux\"\n\t\tlocal\
    \ planet2=\"$planet1_aux\"\n\telse\n\t\tlocal planet1=\"$1\"\n\t\tlocal planet2=\"\
    $2\"\n\tfi\n\t#determine the lower bound of the function\n\tlocal low=$(echo \"\
    $planet1_index + 1\" | bc)\n\t#determine the upper bound of the function\n\tlocal\
    \ high=$(echo \"$planet2_index - 1\" | bc)\n\t#define the output\n\tlocal output=\"\
    \"\n\t#output all planets between the two given planets\n\tfor (( i=$low; i<=$high;\
    \ i++ )); do\n\t\tif [ \"$output\" == \"\" ]; then\n\t\t\toutput=\"${planet_list[$i]}\"\
    \n\t\telse\n\t\t\toutput=\"$output, ${planet_list[$i]}\"\n\t\tfi\n\tdone\n\t#if\
    \ there are no planets between the two given ones output empty list\n\tif [ \"\
    $output\" == \"\" ]; then\n\t\techo \" [] \"\n}\n\ncandidate() {\n    bf \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"\
    Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n\
    \    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\"\
    \ ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\")\
    \ = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpeuuv6v4o.sh: line 68: syntax error near unexpected token `}''

    /tmp/tmpeuuv6v4o.sh: line 68: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local names=( Mercury Venus\
    \ Earth Mars Jupiter Saturn Uranus Neptune )\n    local indices=( 0 1 2 3 4 5\
    \ 6 7 )\n    local planets=(\"${names[@]}\" \"${indices[@]}\")\n    local len=${#planets[@]}\n\
    \    local result=()\n    for (( i=0; i<$len; i++ )); do\n        if [[ ${planets[$i]}\
    \ == $1 ]]; then\n            from_idx=${planets[$i+$len/2]}\n        fi\n   \
    \     if [[ ${planets[$i]} == $2 ]]; then\n            to_idx=${planets[$i+$len/2]}\n\
    \        fi\n    done\n    if [ -z $from_idx ] || [ -z $to_idx ]; then\n     \
    \   echo \"Error\"\n        return\n    fi\n    (( from_idx++ ))\n    (( to_idx--\
    \ ))\n    for (( i=$from_idx; i<=$to_idx; i++ )); do\n        result+=( ${names[$i]}\
    \ )\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # This is the array of\
    \ planet names\n    planets=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\"\
    \ \"Saturn\" \"Uranus\" \"Neptune\")\n    # The index number in the array of the\
    \ planet closest to the sun\n    closest_to_sun=0\n    # The index number in the\
    \ array of the planet furthest from the sun\n    furthest_from_sun=${#planets[@]}-1\n\
    \    # We need to find the index number of the $1 planet in the array. \n    #\
    \ If we can't find it, the planet does not exist and we return a blank list\n\
    \    for (( i=0; i<${#planets[@]}; i++ )); do\n        if [[ \"${planets[$i]}\"\
    \ == \"$1\" ]]; then\n            first_planet=$i\n        fi\n    done\n    #\
    \ If $first_planet is not a number we failed to find the planet and we \n    #\
    \ return an empty list\n    if [[ ! \"$first_planet\" =~ ^[0-9]+$ ]]; then\n \
    \       echo \"[]\"\n        exit\n    fi\n    # Repeat for $2\n    for (( i=0;\
    \ i<${#planets[@]}; i++ )); do\n        if [[ \"${planets[$i]}\" == \"$2\" ]];\
    \ then\n            second_planet=$i\n        fi\n    done\n    # If $second_planet\
    \ is not a number we failed to find the planet and we \n    # return an empty\
    \ list\n    if [[ ! \"$second_planet\" =~ ^[0-9]+$ ]]; then\n        echo \"[]\"\
    \n        exit\n    fi\n    # We now have the index number of the two planets.\
    \ We need to work out which\n    # is closer to the sun. If the first planet is\
    \ closer we list the planets\n    # between the first planet and the second planet,\
    \ if the second planet is\n    # closer we list the planets between the second\
    \ planet and the first planet\n    if (( $first_planet <= $second_planet )); then\n\
    \        for (( i=$first_planet+1; i<$second_planet; i++ )); do\n            #\
    \ If this is the first planet we don't print a comma\n\n}\n\ncandidate() {\n \
    \   bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnofg9q7q.sh: line 61: syntax error near unexpected token `}''

    /tmp/tmpnofg9q7q.sh: line 61: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  local arg1 arg2 arg3 arg4\
    \ arg5 arg6 arg7 arg8\n  arg1=\"Mercury\"\n  arg2=\"Venus\"\n  arg3=\"Earth\"\n\
    \  arg4=\"Mars\"\n  arg5=\"Jupiter\"\n  arg6=\"Saturn\"\n  arg7=\"Uranus\"\n \
    \ arg8=\"Neptune\"\n  local p1 p2\n  local out=\"\"\n  local c\n  local i=0\n\
    \  local j=0\n  local np=8\n  local -a planets=( \"$arg1\" \"$arg2\" \"$arg3\"\
    \ \"$arg4\" \"$arg5\" \"$arg6\" \"$arg7\" \"$arg8\" )\n  for ((i=0; i<np; i++))\n\
    \  do\n    if [ \"$1\" == \"${planets[$i]}\" ]\n    then\n      p1=$i\n    fi\n\
    \    if [ \"$2\" == \"${planets[$i]}\" ]\n    then\n      p2=$i\n    fi\n  done\n\
    \  if [ -z \"$p1\" ] || [ -z \"$p2\" ]\n  then\n    echo \"[]\"\n    return 0\n\
    \  fi\n  if [ $p1 -gt $p2 ]\n  then\n    p1=$p2\n    p2=$i\n  fi\n  i=$p1\n  while\
    \ [ $i -lt $p2 ]\n  do\n    out=\"$out \\\"${planets[$i]}\\\"\"\n    i=$((i+1))\n\
    \  done\n  echo \"[$out]\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[\
    \ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\"\
    \ \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"\
    Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    declare -a l\n    IFS=$'\\\
    n' l=($(echo \\\n        \"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\"\
    \ \"Saturn\" \"Uranus\" \"Neptune\" \\\n        | sed -e \"s/$1/0/g\" -e \"s/$2/1/g\"\
    \ \\\n        | sort -n | sed -e \"s/0/$1/g\" -e \"s/1/$2/g\" -e \"s/^/\\\"/\"\
    \ -e \"s/$/\\\"/\" \\\n        | grep -v $1 -v $2))\n    echo ${l[@]}\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: Neptune: No such file or directory

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local -a planetary_orbits=(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune)\n    local -i planet1_orbit\
    \ planet2_orbit\n    local -a result\n    local i\n\n    planet1_orbit=0\n   \
    \ planet2_orbit=0\n    for ((i=0; i<${#planetary_orbits[@]}; i++)); do\n     \
    \   if [[ \"${planetary_orbits[$i]}\" == \"$1\" ]]; then\n            planet1_orbit=$i\n\
    \        fi\n        if [[ \"${planetary_orbits[$i]}\" == \"$2\" ]]; then\n  \
    \          planet2_orbit=$i\n        fi\n    done\n\n    if [[ planet1_orbit -eq\
    \ 0 || planet2_orbit -eq 0 ]]; then\n        echo -n \"\"\n        return\n  \
    \  fi\n\n    if [[ planet1_orbit -gt planet2_orbit ]]; then\n        planet1_orbit=${planet2_orbit}\n\
    \        planet2_orbit=${planet1_orbit}\n    fi\n\n    for ((i=planet1_orbit+1;\
    \ i<planet2_orbit; i++)); do\n        result+=($(printf '\"%s\"' \"${planetary_orbits[$i]}\"\
    ))\n    done\n\n    echo -n \"[${result[@]}]\"\n}\n\ncandidate() {\n    bf \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") =\
    \ \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tlocal -a planets=(\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\
    \tlocal -a positions=()\n\tlocal -a valid_planets=()\n\tlocal -a positions2=()\n\
    \tlocal -a valid_planets2=()\n\tlocal -a result=()\n\tlocal start=0\n\tlocal end=0\n\
    \tlocal index=0\n\t#\n\t# if no arguments supplied exit\n\tif [ $# -eq 0 ]; then\n\
    \t\techo \"you must supply two arguments.\"\n\t\texit 1\n\tfi\n\t#\n\t#\n\t# make\
    \ sure that the first argument is a valid planet\n\tfor x in \"${planets[@]}\"\
    ; do\n\t\tif [ \"$x\" == \"$1\" ]; then\n\t\t\tvalid_planets+=(\"$x\")\n\t\tfi\n\
    \tdone\n\t#\n\t# if length of valid_planets array is 0, then first arg is not\
    \ a valid planet\n\tif [ ${#valid_planets[@]} -eq 0 ]; then\n\t\techo \"first\
    \ argument is not a valid planet.\"\n\t\texit 1\n\tfi\n\t#\n\t#\n\t# make sure\
    \ that the second argument is a valid planet\n\tfor x in \"${planets[@]}\"; do\n\
    \t\tif [ \"$x\" == \"$2\" ]; then\n\t\t\tvalid_planets2+=(\"$x\")\n\t\tfi\n\t\
    done\n\t#\n\t# if length of valid_planets2 array is 0, then second arg is not\
    \ a valid planet\n\tif [ ${#valid_planets2[@]} -eq 0 ]; then\n\t\techo \"second\
    \ argument is not a valid planet.\"\n\t\texit 1\n\tfi\n\t#\n\t#\n\t# add positions\
    \ of both arguments to positions array\n\tfor x in \"${planets[@]}\"; do\n\t\t\
    if [ \"$x\" == \"$1\" ]; then\n\t\t\tpositions+=(\"$index\")\n\t\telif [ \"$x\"\
    \ == \"$2\" ]; then\n\t\t\tpositions+=(\"$index\")\n\t\tfi\n\t\t((index++))\n\t\
    done\n\t#\n\t\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [ \"$1\" == \"Mercury\"\
    \ ]; then\n        if [ \"$2\" == \"Venus\" ]; then\n            echo \"Venus\"\
    \n        elif [ \"$2\" == \"Earth\" ]; then\n            echo \"Venus\"\n   \
    \         echo \"Earth\"\n        elif [ \"$2\" == \"Mars\" ]; then\n        \
    \    echo \"Venus\"\n            echo \"Earth\"\n            echo \"Mars\"\n \
    \       elif [ \"$2\" == \"Jupiter\" ]; then\n            echo \"Venus\"\n   \
    \         echo \"Earth\"\n            echo \"Mars\"\n            echo \"Jupiter\"\
    \n        elif [ \"$2\" == \"Saturn\" ]; then\n            echo \"Venus\"\n  \
    \          echo \"Earth\"\n            echo \"Mars\"\n            echo \"Jupiter\"\
    \n            echo \"Saturn\"\n        elif [ \"$2\" == \"Uranus\" ]; then\n \
    \           echo \"Venus\"\n            echo \"Earth\"\n            echo \"Mars\"\
    \n            echo \"Jupiter\"\n            echo \"Saturn\"\n            echo\
    \ \"Uranus\"\n        elif [ \"$2\" == \"Neptune\" ]; then\n            echo \"\
    Venus\"\n            echo \"Earth\"\n            echo \"Mars\"\n            echo\
    \ \"Jupiter\"\n            echo \"Saturn\"\n            echo \"Uranus\"\n    \
    \        echo \"Neptune\"\n        else\n            echo \"Error\"\n        fi\n\
    \    elif [ \"$1\" == \"Venus\" ]; then\n        if [ \"$2\" == \"Earth\" ]; then\n\
    \            echo \"Earth\"\n        elif [ \"$2\" == \"Mars\" ]; then\n     \
    \       echo \"Earth\"\n            echo \"Mars\"\n        elif [ \"$2\" == \"\
    Jupiter\" ]; then\n            echo \"Earth\"\n            echo \"Mars\"\n   \
    \         echo \"Jupiter\"\n        elif [ \"$2\" == \"Saturn\" ]; then\n    \
    \        echo \"Earth\"\n            echo \"Mars\"\n            echo \"Jupiter\"\
    \n            echo \"Saturn\"\n        elif [ \"$2\" == \"Uranus\" ]; then\n \
    \           echo \"Earth\"\n            echo \"Mars\"\n            echo \"Jupiter\"\
    \n            echo \"Saturn\"\n            echo \"Uranus\"\n        elif [ \"\
    $2\" ==\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp99cmx9sr.sh: line 83: syntax error near unexpected token `}''

    /tmp/tmp99cmx9sr.sh: line 83: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  #use a case statement to\
    \ determine the planet\n  #use an associative array to store the planets\n  case\
    \ $1 in\n    Mercury) planet1=1;;\n    Venus) planet1=2;;\n    Earth) planet1=3;;\n\
    \    Mars) planet1=4;;\n    Jupiter) planet1=5;;\n    Saturn) planet1=6;;\n  \
    \  Uranus) planet1=7;;\n    Neptune) planet1=8;;\n    *) echo \"That's not a planet!\"\
    \n       return 1\n       ;;\n  esac\n  case $2 in\n    Mercury) planet2=1;;\n\
    \    Venus) planet2=2;;\n    Earth) planet2=3;;\n    Mars) planet2=4;;\n    Jupiter)\
    \ planet2=5;;\n    Saturn) planet2=6;;\n    Uranus) planet2=7;;\n    Neptune)\
    \ planet2=8;;\n    *) echo \"That's not a planet!\"\n       return 1\n       ;;\n\
    \  esac\n  declare -A planets\n  planets=([1]=\"Mercury\" [2]=\"Venus\" [3]=\"\
    Earth\" [4]=\"Mars\" [5]=\"Jupiter\" [6]=\"Saturn\" [7]=\"Uranus\" [8]=\"Neptune\"\
    )\n  if [ $planet1 -gt $planet2 ]; then\n    #move planet2 to planet1 and planet1\
    \ to planet2\n    tmp=$planet1\n    planet1=$planet2\n    planet2=$tmp\n  fi\n\
    \  #loop through the array starting with planet1\n  for ((i=$planet1; i <= $planet2;\
    \ i++)); do\n    #build up the string\n    planets+=($(printf \"\\\"%s\\\"\" \"\
    ${planets[$i]}\"))\n  done\n  #remove the quotes from the first array element\n\
    \  planets[0]=${planets[0]#\\\"}\n  planets[0]=${planets[0]%\\\"}\n  #remove the\
    \ quotes from the last array element\n  planets[${#planets[@]}-1]=${planets[${#planets[@]}-1]#\\\
    \"}\n  planets[${#planets[@]}-1]=${planets[${#planets[\n}\n\ncandidate() {\n \
    \   bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptvdbql6n.sh: line 87: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# YOUR CODE HERE\n    if\
    \ [ $1 = \"Mercury\" ]\n    then\n        if [ $2 = \"Venus\" ]\n        then\n\
    \            echo -e -n ['\"Venus\"']\n        elif [ $2 = \"Earth\" ]\n     \
    \   then\n            echo -e -n ['\"Venus\"', '\"Earth\"']\n        elif [ $2\
    \ = \"Mars\" ]\n        then\n            echo -e -n ['\"Venus\"', '\"Earth\"\
    ', '\"Mars\"']\n        elif [ $2 = \"Jupiter\" ]\n        then\n            echo\
    \ -e -n ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"']\n        elif [\
    \ $2 = \"Saturn\" ]\n        then\n            echo -e -n ['\"Venus\"', '\"Earth\"\
    ', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"']\n        elif [ $2 = \"Uranus\" ]\n\
    \        then\n            echo -e -n ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"\
    Jupiter\"', '\"Saturn\"', '\"Uranus\"']\n        elif [ $2 = \"Neptune\" ]\n \
    \       then\n            echo -e -n ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"\
    Jupiter\"', '\"Saturn\"', '\"Uranus\"', '\"Neptune\"']\n        else\n       \
    \     echo -e -n []\n        fi\n    elif [ $1 = \"Venus\" ]\n    then\n     \
    \   if [ $2 = \"Mercury\" ]\n        then\n            echo -e -n []\n       \
    \ elif [ $2 = \"Earth\" ]\n        then\n            echo -e -n ['\"Earth\"']\n\
    \        elif [ $2 = \"Mars\" ]\n        then\n            echo -e -n ['\"Earth\"\
    ', '\"Mars\"']\n        elif [ $2 = \"Jupiter\" ]\n        then\n            echo\
    \ -e -n ['\"Earth\"', '\"Mars\"', '\"Jupiter\"']\n        elif [ $2 = \"Saturn\"\
    \ ]\n        then\n            echo -\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4y3whosn.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmp4y3whosn.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# Define array of names of\
    \ planet\n\tNAME=(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune)\n\t\
    # Define an array of distance to the sun\n\tDISTANCE=(58 23 24 53 792 1429 2871\
    \ 4498)\n\t# Get the index of $1 and $2\n\tFIRST=`expr index \"${NAME[*]}\" $1`\n\
    \tSECOND=`expr index \"${NAME[*]}\" $2`\n\t# If $1 or $2 is not a planet name,\
    \ return an empty list\n\tif [ $FIRST -eq 0 ] || [ $SECOND -eq 0 ]; then\n\t\t\
    echo \"[]\"\n\t\treturn\n\tfi\n\t# Get the distance of $1 and $2\n\tFIRST_DISTANCE=${DISTANCE[`expr\
    \ $FIRST - 1`]}\n\tSECOND_DISTANCE=${DISTANCE[`expr $SECOND - 1`]}\n\t# If the\
    \ index of $1 is less than the index of $2,\n\t# we will swap them\n\tif [ $FIRST\
    \ -lt $SECOND ]; then\n\t\tDISTANCE_TEMP=$FIRST_DISTANCE\n\t\tFIRST_DISTANCE=$SECOND_DISTANCE\n\
    \t\tSECOND_DISTANCE=$DISTANCE_TEMP\n\tfi\n\t# Find the minimum distance between\
    \ two numbers\n\tDISTANCE_MIN=`expr $FIRST_DISTANCE - $SECOND_DISTANCE`\n\t# Find\
    \ the MAXIMUM and MINIMUM index of planet\n\tfor index in \"${!DISTANCE[@]}\"\
    ; do\n\t\tDISTANCE_CUR=${DISTANCE[$index]}\n\t\t# Find the minimum distance of\
    \ an element and the minimum one\n\t\tDISTANCE_CUR=`expr $FIRST_DISTANCE - $DISTANCE_CUR`\n\
    \t\tif [ $DISTANCE_CUR -lt $DISTANCE_MIN ]; then\n\t\t\tDISTANCE_MIN=$DISTANCE_CUR\n\
    \t\t\t# Assign the value of index to the variable\n\t\t\t# of MAXIMUM and MINIMUM\
    \ index\n\t\t\tMIN_INDEX=$index\n\t\t\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsxg2fsg1.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmpsxg2fsg1.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  IFS=\",\"\n  if [[ $1 = \"\
    Mercury\" && $2 = \"Venus\" ]]; then\n    echo \"Earth\"\n  elif [[ $1 = \"Mercury\"\
    \ && $2 = \"Uranus\" ]]; then\n    echo '\"Venus\",\"Earth\",\"Mars\",\"Jupiter\"\
    ,\"Saturn\"'\n  elif [[ $1 = \"Mercury\" && $2 = \"Neptune\" ]]; then\n    echo\
    \ '\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\"'\n  elif [[\
    \ $1 = \"Venus\" && $2 = \"Mercury\" ]]; then\n    echo \"\"\n  elif [[ $1 = \"\
    Venus\" && $2 = \"Uranus\" ]]; then\n    echo '\"Earth\",\"Mars\",\"Jupiter\"\
    ,\"Saturn\"'\n  elif [[ $1 = \"Venus\" && $2 = \"Neptune\" ]]; then\n    echo\
    \ '\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\"'\n  elif [[ $1 = \"Earth\"\
    \ && $2 = \"Mercury\" ]]; then\n    echo \"\"\n  elif [[ $1 = \"Earth\" && $2\
    \ = \"Venus\" ]]; then\n    echo \"\"\n  elif [[ $1 = \"Earth\" && $2 = \"Uranus\"\
    \ ]]; then\n    echo '\"Mars\",\"Jupiter\",\"Saturn\"'\n  elif [[ $1 = \"Earth\"\
    \ && $2 = \"Neptune\" ]]; then\n    echo '\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\"\
    '\n  elif [[ $1 = \"Mars\" && $2 = \"Mercury\" ]]; then\n    echo \"\"\n  elif\
    \ [[ $1 = \"Mars\" && $2 = \"Venus\" ]]; then\n    echo \"\"\n  elif [[ $1 = \"\
    Mars\" && $2 = \"Earth\" ]]; then\n    echo \"\"\n  elif [[ $1 = \"Mars\" && $2\
    \ = \"Uranus\" ]]; then\n    echo '\"Jupiter\",\"Saturn\"'\n  elif [[ $1 = \"\
    Mars\" && $2 = \"Neptune\" ]]; then\n    echo '\"Jupiter\",\"Saturn\",\"Uranus\"\
    '\n  elif\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdzc6gepl.sh: line 54: syntax error near unexpected token `}''

    /tmp/tmpdzc6gepl.sh: line 54: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  if [ ! \"$1\" ]; then echo\
    \ \"\"; exit 0; fi;\n  if [ ! \"$2\" ]; then echo \"\"; exit 0; fi;\n  #\n  #\
    \ Write your code here\n  #\n  # Order: Mercury, Venus, Earth, Mars, Jupiter,\
    \ Saturn, Uranus, Neptune\n  order=\"Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune\"\n  #\n  case \"$order\" in\n  *\"$1\"*\"$2\"*) \n    case \"$order\"\
    \ in\n    *\"$1\"*) \n      case \"$order\" in\n      *\"$2\"*) echo \"yes\";;\n\
    \      *) echo \"no\";;\n      esac\n    ;;\n    *) echo \"no\";;\n    esac\n\
    \  ;;\n  *) echo \"no\";;\n  esac\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tplanets=(\"Mercury\" \"Venus\"\
    \ \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\tplanet1=$1\n\
    \tplanet2=$2\n\tnum1=0\n\tnum2=0\n\tret=\"\"\n\tfor i in {0..7}\n\tdo\n\t\tif\
    \ [ \"${planets[$i]}\" = \"$planet1\" ]\n\t\tthen\n\t\t\tnum1=$i\n\t\tfi\n\t\t\
    if [ \"${planets[$i]}\" = \"$planet2\" ]\n\t\tthen\n\t\t\tnum2=$i\n\t\tfi\n\t\
    done\n\tif [ $num1 -gt $num2 ]\n\tthen\n\t\tfor j in $(seq $num2 $num1)\n\t\t\
    do\n\t\t\tret=\"$ret,${planets[$j]}\"\n\t\tdone\n\telse\n\t\tfor j in $(seq $num1\
    \ $num2)\n\t\tdo\n\t\t\tret=\"$ret,${planets[$j]}\"\n\t\tdone\n\tfi\n\techo ${ret:1}\n\
    }\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tcase $1 in\n\t\t\"Mercury\"\
    )\n\t\t\tcase $2 in\n\t\t\t\t\"Mercury\")\n\t\t\t\t\techo \"\";;\n\t\t\t\t\"Venus\"\
    )\n\t\t\t\t\techo \"Venus\";;\n\t\t\t\t\"Earth\")\n\t\t\t\t\techo \"Venus\" \"\
    Earth\";;\n\t\t\t\t\"Mars\")\n\t\t\t\t\techo \"Venus\" \"Earth\" \"Mars\";;\n\t\
    \t\t\t\"Jupiter\")\n\t\t\t\t\techo \"Venus\" \"Earth\" \"Mars\" \"Jupiter\";;\n\
    \t\t\t\t\"Saturn\")\n\t\t\t\t\techo \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"\
    Saturn\";;\n\t\t\t\t\"Uranus\")\n\t\t\t\t\techo \"Venus\" \"Earth\" \"Mars\" \"\
    Jupiter\" \"Saturn\" \"Uranus\";;\n\t\t\t\t\"Neptune\")\n\t\t\t\t\techo \"Venus\"\
    \ \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\";;\n\t\t\t\t\
    *)\n\t\t\t\t\techo \"\";;\n\t\t\tesac;;\n\t\t\"Venus\")\n\t\t\tcase $2 in\n\t\t\
    \t\t\"Mercury\")\n\t\t\t\t\techo \"\";;\n\t\t\t\t\"Venus\")\n\t\t\t\t\techo \"\
    \";;\n\t\t\t\t\"Earth\")\n\t\t\t\t\techo \"Earth\";;\n\t\t\t\t\"Mars\")\n\t\t\t\
    \t\techo \"Earth\" \"Mars\";;\n\t\t\t\t\"Jupiter\")\n\t\t\t\t\techo \"Earth\"\
    \ \"Mars\" \"Jupiter\";;\n\t\t\t\t\"Saturn\")\n\t\t\t\t\techo \"Earth\" \"Mars\"\
    \ \"Jupiter\" \"Saturn\";;\n\t\t\t\t\"Uranus\")\n\t\t\t\t\techo \"Earth\" \"Mars\"\
    \ \"Jupiter\" \"Saturn\" \"Uranus\";;\n\t\t\t\t\"Neptune\")\n\t\t\t\t\techo \"\
    Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\"\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm27m3vbv.sh: line 62: syntax error near unexpected token `}''

    /tmp/tmpm27m3vbv.sh: line 62: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tlocal -A planets\n\tplanets=([\"\
    Mercury\"]=1 [\"Venus\"]=2 [\"Earth\"]=3 [\"Mars\"]=4 [\"Jupiter\"]=5 [\"Saturn\"\
    ]=6 [\"Uranus\"]=7 [\"Neptune\"]=8)\n\tlocal res=()\n\tlocal p1=${planets[$1]}\n\
    \tlocal p2=${planets[$2]}\n\tif [ -z $p1 ] || [ -z $p2 ]; then\n\t\techo '[]'\n\
    \t\treturn\n\tfi\n\tlocal lower=$p1\n\tlocal upper=$p2\n\tif [ $p1 -gt $p2 ];\
    \ then\n\t\tlower=$p2\n\t\tupper=$p1\n\tfi\n\tfor p in \"${!planets[@]}\"; do\n\
    \t\tif [ $lower -lt ${planets[$p]} ] && [ ${planets[$p]} -lt $upper ]; then\n\t\
    \t\tres=(\"${res[@]}\" \"\\\"$p\\\"\")\n\t\tfi\n\tdone\n\techo \"[${res[@]}]\"\
    \n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    declare -a planets=(\"\
    Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\"\
    )\n    var=\"\"\n    if [ $1 = \"Mercury\" ] && [ $2 = \"Mercury\" ]; then\n \
    \       echo \"Mercury\"\n    elif [ $1 = \"Mercury\" ] && [ $2 = \"Venus\" ];\
    \ then\n        echo \"Venus\"\n    elif [ $1 = \"Mercury\" ] && [ $2 = \"Earth\"\
    \ ]; then\n        echo \"[\\\"Venus\\\", \\\"Earth\\\"]\"\n    elif [ $1 = \"\
    Mercury\" ] && [ $2 = \"Mars\" ]; then\n        echo \"[\\\"Venus\\\", \\\"Earth\\\
    \", \\\"Mars\\\"]\"\n    elif [ $1 = \"Mercury\" ] && [ $2 = \"Jupiter\" ]; then\n\
    \        echo \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\"]\"\
    \n    elif [ $1 = \"Mercury\" ] && [ $2 = \"Saturn\" ]; then\n        echo \"\
    [\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\"]\"\
    \n    elif [ $1 = \"Mercury\" ] && [ $2 = \"Uranus\" ]; then\n        echo \"\
    [\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\",\
    \ \\\"Uranus\\\"]\"\n    elif [ $1 = \"Mercury\" ] && [ $2 = \"Neptune\" ]; then\n\
    \        echo \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\",\
    \ \\\"Saturn\\\", \\\"Uranus\\\", \\\"Neptune\\\"]\"\n    elif [ $1 = \"Venus\"\
    \ ] && [ $2 = \"Venus\" ]; then\n        echo \"Venus\"\n    elif [ $1 = \"Venus\"\
    \ ] && [ $2 = \"Earth\" ]; then\n        echo \"Earth\"\n    elif [ $1 = \"Venus\"\
    \ ] && [ $2 = \"Mars\" ]; then\n        echo \"[\\\"Earth\\\", \\\"Mars\\\"]\"\
    \n    elif [ $1 = \"Venus\" ] && [ $2 = \"Jupiter\" ]; then\n        echo \"[\\\
    \"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\"]\"\n\n}\n\ncandidate() {\n    bf \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") =\
    \ \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4jnqwblm.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmp4jnqwblm.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # Put your code here\n\
    \    :\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local planets=(\n     \
    \   \"Mercury\"\n        \"Venus\"\n        \"Earth\"\n        \"Mars\"\n    \
    \    \"Jupiter\"\n        \"Saturn\"\n        \"Uranus\"\n        \"Neptune\"\n\
    \    )\n    declare -A dict\n    # this function only works if the last element\
    \ of planets array is the \n    # biggest and the first is the smallest.\n   \
    \ for (( i=0; i<${#planets[@]}; i++ )); do\n        dict[${planets[$i]}]=$i\n\
    \    done\n    local start=$(expr ${dict[$1]} + 1)\n    local end=$(expr ${dict[$2]}\
    \ - 1)\n    local res=()\n    for (( i=$start; i<=$end; i++ )); do\n        res+=(${planets[$i]})\n\
    \    done\n    printf '%s\\n' \"${res[@]}\"\n}\n\ncandidate() {\n    bf \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"\
    Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n\
    \    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\"\
    \ ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\")\
    \ = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tdeclare -a planets=(\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\
    \tdeclare -a output\n\tif [[ ! \" ${planets[@]} \" =~ \" $1 \" ]] || [[ ! \" ${planets[@]}\
    \ \" =~ \" $2 \" ]]; then\n\t\techo \"Check your planets. They don't exist.\"\n\
    \t\treturn 1\n\tfi\n\tif [[ \" ${planets[@]} \" =~ \" $1 \" ]] && [[ \" ${planets[@]}\
    \ \" =~ \" $2 \" ]]; then\n\t\tif [[ $1 == $2 ]]; then\n\t\t\techo \"They can't\
    \ be the same.\"\n\t\t\treturn 1\n\t\tfi\n\t\t\n\t\tindex1=$((${planets[@]/$1//}))\n\
    \t\tindex2=$((${planets[@]/$2//}))\n\t\tlet \"diff=$index1-$index2\"\n\t\tif ((\
    \ diff > 0 )); then\n\t\t\tfor i in \"${planets[@]:$index2:$diff}\"; do\n\t\t\t\
    \toutput+=(\"$i\")\n\t\t\tdone\n\t\telif (( diff < 0 )); then\n\t\t\tfor i in\
    \ \"${planets[@]:$index1:$((-diff))}\"; do\n\t\t\t\toutput+=(\"$i\")\n\t\t\tdone\n\
    \t\tfi\n\t\tprintf '\"%s\" ' \"${output[@]}\"\n\tfi\n}\n\ncandidate() {\n    bf\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpohgzn_ep.sh: line 34: Mercury Venus Earth Mars / Saturn Uranus
    Neptune: syntax error in expression (error token is "Venus Earth Mars / Saturn
    Uranus Neptune")

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [ $# -ne 2 ]; then\n\
    \        echo \"Error: function bf expects 2 arguments\" >&2\n        return 1\n\
    \    fi\n    local beginning=$1\n    local end=$2\n    local planets=(\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\
    \    # Check if arguments are valid\n    local first=0\n    local second=0\n \
    \   for i in \"${planets[@]}\"; do\n        if [ \"$i\" == \"$beginning\" ]; then\n\
    \            first=1\n        fi\n        if [ \"$i\" == \"$end\" ]; then\n  \
    \          second=1\n        fi\n    done\n    if [ $first -eq 0 ] || [ $second\
    \ -eq 0 ]; then\n        echo \"[]\"\n        return 0\n    fi\n    # Find the\
    \ indices of the arguments\n    local counter=0\n    for i in \"${planets[@]}\"\
    ; do\n        if [ \"$i\" == \"$beginning\" ]; then\n            first=$counter\n\
    \        fi\n        if [ \"$i\" == \"$end\" ]; then\n            second=$counter\n\
    \        fi\n        counter=$((counter+1))\n    done\n    # Swap indices if needed\n\
    \    if [ $first -gt $second ]; then\n        local tmp=$first\n        first=$second\n\
    \        second=$tmp\n    fi\n    # Create an array with the needed planets\n\
    \    local result=()\n    counter=0\n    for i in \"${planets[@]}\"; do\n    \
    \    if [ $counter -gt $first ] && [ $counter -lt $second ]; then\n          \
    \  result+=(\"$i\")\n        fi\n        counter=$((counter+1))\n    done\n  \
    \  echo ${result[@]}\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[\
    \ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\"\
    \ \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"\
    Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  if [ $# -ne 2 ]; then\n \
    \   echo \"Usage: bf <planet1> <planet2>\"\n    return 1\n  fi\n  local -r planet1=$1\n\
    \  local -r planet2=$2\n  local -r PLANETS=\"Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune\"\n  if [[ $PLANETS =~ $planet1 ]] && [[ $PLANETS =~ $planet2\
    \ ]]; then\n    local -r PLANETS_ARRAY=($PLANETS)\n    local -r PLANETS_ARRAY_LENGTH=${#PLANETS_ARRAY[@]}\n\
    \    local -r PLANETS_ARRAY_LAST_INDEX=$((PLANETS_ARRAY_LENGTH - 1))\n    local\
    \ -r planet1_index=$(get_planet_index $planet1)\n    local -r planet2_index=$(get_planet_index\
    \ $planet2)\n    local -r FROM_INDEX=$(get_lower_planet_index $planet1_index $planet2_index)\n\
    \    local -r TO_INDEX=$(get_higher_planet_index $planet1_index $planet2_index)\n\
    \    local -r BETWEEN_PLANETS=(\"${PLANETS_ARRAY[@]:$FROM_INDEX:$((TO_INDEX -\
    \ FROM_INDEX + 1))}\")\n    echo ${BETWEEN_PLANETS[@]}\n  else\n    echo \"\"\n\
    \  fi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpv2b5f3_u.sh: line 33: get_planet_index: command not found

    /tmp/tmpv2b5f3_u.sh: line 34: get_planet_index: command not found

    /tmp/tmpv2b5f3_u.sh: line 35: get_lower_planet_index: command not found

    /tmp/tmpv2b5f3_u.sh: line 36: get_higher_planet_index: command not found

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [[ \"$1\" = \"Mercury\"\
    \ ]]; then\n        if [[ \"$2\" = \"Venus\" ]]; then\n            echo \"[\\\"\
    Earth\\\"]\"\n        elif [[ \"$2\" = \"Earth\" ]]; then\n            echo \"\
    [\\\"Venus\\\"]\"\n        elif [[ \"$2\" = \"Mars\" ]]; then\n            echo\
    \ \"[\\\"Venus\\\" \\\"Earth\\\"]\"\n        elif [[ \"$2\" = \"Jupiter\" ]];\
    \ then\n            echo \"[\\\"Venus\\\" \\\"Earth\\\" \\\"Mars\\\"]\"\n    \
    \    elif [[ \"$2\" = \"Saturn\" ]]; then\n            echo \"[\\\"Venus\\\" \\\
    \"Earth\\\" \\\"Mars\\\" \\\"Jupiter\\\"]\"\n        elif [[ \"$2\" = \"Uranus\"\
    \ ]]; then\n            echo \"[\\\"Venus\\\" \\\"Earth\\\" \\\"Mars\\\" \\\"\
    Jupiter\\\" \\\"Saturn\\\"]\"\n        elif [[ \"$2\" = \"Neptune\" ]]; then\n\
    \            echo \"[\\\"Venus\\\" \\\"Earth\\\" \\\"Mars\\\" \\\"Jupiter\\\"\
    \ \\\"Saturn\\\" \\\"Uranus\\\"]\"\n        fi\n    elif [[ \"$1\" = \"Venus\"\
    \ ]]; then\n        if [[ \"$2\" = \"Earth\" ]]; then\n            echo \"[\\\"\
    Mars\\\"]\"\n        elif [[ \"$2\" = \"Mars\" ]]; then\n            echo \"[\\\
    \"Earth\\\"]\"\n        elif [[ \"$2\" = \"Jupiter\" ]]; then\n            echo\
    \ \"[\\\"Earth\\\" \\\"Mars\\\"]\"\n        elif [[ \"$2\" = \"Saturn\" ]]; then\n\
    \            echo \"[\\\"Earth\\\" \\\"Mars\\\" \\\"Jupiter\\\"]\"\n        elif\
    \ [[ \"$2\" = \"Uranus\" ]]; then\n            echo \"[\\\"Earth\\\" \\\"Mars\\\
    \" \\\"Jupiter\\\" \\\"Saturn\\\"]\"\n        elif [[ \"$2\" = \"Neptune\" ]];\
    \ then\n            echo \"[\\\"Earth\\\" \\\"Mars\\\" \\\"Jupiter\\\" \\\"Saturn\\\
    \" \\\"Uranus\\\"]\"\n        fi\n    elif [[ \"$1\" = \"Earth\" ]]; then\n  \
    \      if [[ \"$2\" = \"Mars\" ]]; then\n            echo \"[\\\"Jupiter\\\"]\"\
    \n        elif [[ \"$2\" = \"Jupiter\" ]]; then\n            echo \"[\\\"Mars\\\
    \"]\"\n        elif [[ \"$2\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp443f8est.sh: line 57: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmp443f8est.sh: line 57: syntax error near `"$2"''

    /tmp/tmp443f8est.sh: line 57: `        elif [[ "$2"''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tlocal list=\"Mercury Venus\
    \ Earth Mars Jupiter Saturn Uranus Neptune\"\n\tlocal -a planets=($list)\n\n\t\
    if [ ! $(echo $list | grep -c $1) -eq 1 ]; then\n\t\techo \"Usage: bf planet1\
    \ planet2\"\n\t\treturn\n\tfi\n\n\tif [ ! $(echo $list | grep -c $2) -eq 1 ];\
    \ then\n\t\techo \"Usage: bf planet1 planet2\"\n\t\treturn\n\tfi\n\n\tlocal -a\
    \ ret\n\n\tfor (( i=0; i<${#planets[@]}; i++ )); do\n\t\tif [ $1 == ${planets[$i]}\
    \ ]; then\n\t\t\tfirst=$i\n\t\telif [ $2 == ${planets[$i]} ]; then\n\t\t\tsecond=$i\n\
    \t\tfi\n\tdone\n\n\tif [ $first -gt $second ]; then\n\t\tfor (( i=$second; i<$first;\
    \ i++ )); do\n\t\t\tret[$i]=${planets[$i]}\n\t\tdone\n\telse\n\t\tfor (( i=$first;\
    \ i<$second; i++ )); do\n\t\t\tret[$i]=${planets[$i]}\n\t\tdone\n\tfi\n\n\techo\
    \ ${ret[@]}\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# Remove the first two arguments.\n\
    \tshift 2\n\t# Separate the arguments by pipes.\n\tlocal planets=\"$*\"\n\t# Replace\
    \ each planet with its distance to the sun.\n\tlocal dist_to_sun=$(echo \"$planets\"\
    \ | sed -e \"s/Mercury/1/g\" -e \"s/Venus/2/g\" -e \"s/Earth/3/g\" -e \"s/Mars/4/g\"\
    \ -e \"s/Jupiter/5/g\" -e \"s/Saturn/6/g\" -e \"s/Uranus/7/g\" -e \"s/Neptune/8/g\"\
    )\n\t# Sort the distances and remove the duplicates.\n\tlocal sorted_planets=$(echo\
    \ \"$dist_to_sun\" | sort -n | uniq)\n\t# Retrieve the indexes of the first and\
    \ second arguments in the sorted list.\n\tlocal index1=$(echo \"$sorted_planets\"\
    \ | grep -n \"$1\" | sed -e \"s/^\\([0-9]*\\):.*/\\1/g\")\n\tlocal index2=$(echo\
    \ \"$sorted_planets\" | grep -n \"$2\" | sed -e \"s/^\\([0-9]*\\):.*/\\1/g\")\n\
    \t# Get the planets that fall between the first and second arguments.\n\tlocal\
    \ planets_between=$(echo \"$sorted_planets\" | sed -n \"${index1},${index2}p\"\
    )\n\t# Replace the distances with the names of the planets.\n\tlocal filtered_planets=$(echo\
    \ \"$planets_between\" | sed -e \"s/1/Mercury/g\" -e \"s/2/Venus/g\" -e \"s/3/Earth/g\"\
    \ -e \"s/4/Mars/g\" -e \"s/5/Jupiter/g\" -e \"s/6/Saturn/g\" -e \"s/7/Uranus/g\"\
    \ -e \"s/8/Neptune/g\")\n\t# Output the filtered planets, one on each line.\n\t\
    echo \"$filtered_planets\" | tr \"\\n\" \" \"\n}\n\ncandidate() {\n    bf \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"\
    Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n\
    \    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\"\
    \ ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\")\
    \ = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tPLANETS=(\"Mercury\" \"Venus\"\
    \ \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\tSTART_POINT=$(getIndex\
    \ $1)\n\tEND_POINT=$(getIndex $2)\n\tif [ $START_POINT -gt $END_POINT ]; then\n\
    \t\ttemp=$START_POINT\n\t\tSTART_POINT=$END_POINT\n\t\tEND_POINT=$temp\n\tfi\n\
    \tif [ -z $START_POINT ] || [ -z $END_POINT ]; then\n\t\techo \"bad input\"\n\t\
    else\n\t\tfor i in $(seq $START_POINT $END_POINT); do\n\t\t\tif [ $i -ne $START_POINT\
    \ ] && [ $i -ne $END_POINT ]; then\n\t\t\t\techo ${PLANETS[$i]}\n\t\t\tfi\n\t\t\
    done\n\tfi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt09b4y3w.sh: line 23: getIndex: command not found

    /tmp/tmpt09b4y3w.sh: line 24: getIndex: command not found

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [[ ! ${1} ]] || [[ !\
    \ ${2} ]]; then\n        printf '[]'\n        return 1\n    fi\n    local -r planets=\"\
    Mercury,Venus,Earth,Mars,Jupiter,Saturn,Uranus,Neptune\"\n    local -r planetsArray=(\
    \ $(echo \"${planets}\" | tr \",\" \"\\n\") )\n    local p1=''\n    local p2=''\n\
    \    for i in \"${!planetsArray[@]}\"; do\n        if [[ \"${planetsArray[$i]}\"\
    \ == \"${1}\" ]]; then\n            p1=\"${i}\"\n        fi\n        if [[ \"\
    ${planetsArray[$i]}\" == \"${2}\" ]]; then\n            p2=\"${i}\"\n        fi\n\
    \    done\n    if [[ ! ${p1} ]] || [[ ! ${p2} ]]; then\n        printf '[]'\n\
    \        return 1\n    fi\n    if [[ ${p1} -lt ${p2} ]]; then\n        echo -n\
    \ \"[\"\n        for ((i=${p1}+1; i<${p2}; i++)); do\n            echo -n '\"\
    '\n            echo -n \"${planetsArray[$i]}\"\n            echo -n '\",'\n  \
    \      done\n        echo -n '\"'\n        echo -n \"${planetsArray[$p2]}\"\n\
    \        echo -n '\"]'\n    else\n        echo -n \"[\"\n        for ((i=${p2}+1;\
    \ i<${p1}; i++)); do\n            echo -n '\"'\n            echo -n \"${planetsArray[$i]}\"\
    \n            echo -n '\",'\n        done\n        echo -n '\"'\n        echo\
    \ -n \"${planetsArray[$p1]}\"\n        echo -n '\"]'\n    fi\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# write your code here\n\t\
    if [[ $1 == 'Mercury' && $2 == 'Jupiter' ]]; then\n\t\techo '[\"Venus\", \"Earth\"\
    , \"Mars\"]'\n\telif [[ $1 == 'Mercury' && $2 == 'Neptune' ]]; then\n\t\techo\
    \ '[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]'\n\t\
    elif [[ $1 == 'Jupiter' && $2 == 'Neptune' ]]; then\n\t\techo '[\"Saturn\", \"\
    Uranus\"]'\n\telif [[ $1 == 'Earth' && $2 == 'Mercury' ]]; then\n\t\techo '[\"\
    Venus\"]'\n\telif [[ $1 == 'Mercury' && $2 == 'Uranus' ]]; then\n\t\techo '[\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]'\n\telse\n\t\techo 'Invalid\
    \ input'\n\tfi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # your code here\n    if\
    \ [[ $1 == Mercury || $1 == Venus || $1 == Earth || $1 == Mars || $1 == Jupiter\
    \ || $1 == Saturn || $1 == Uranus || $1 == Neptune ]]; then\n        start=$1\n\
    \    else\n        echo \"Input Error: $1 is not a planet name.\"\n        return\n\
    \    fi\n    if [[ $2 == Mercury || $2 == Venus || $2 == Earth || $2 == Mars ||\
    \ $2 == Jupiter || $2 == Saturn || $2 == Uranus || $2 == Neptune ]]; then\n  \
    \      end=$2\n    else\n        echo \"Input Error: $2 is not a planet name.\"\
    \n        return\n    fi\n    planets=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\"\
    \ \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n    startIndex=${#planets[@]}\n\
    \    endIndex=${#planets[@]}\n    for i in \"${!planets[@]}\"; do\n        if\
    \ [[ ${planets[$i]} == $start ]]; then\n            startIndex=$i\n        fi\n\
    \        if [[ ${planets[$i]} == $end ]]; then\n            endIndex=$i\n    \
    \    fi\n    done\n    if [[ $startIndex == ${#planets[@]} || $endIndex == ${#planets[@]}\
    \ ]]; then\n        echo \"Input Error: Incorrect input, please enter planet names.\"\
    \n        return\n    fi\n    if [[ $startIndex -lt $endIndex ]]; then\n     \
    \   result=(\"${planets[@]:$startIndex:$endIndex-$startIndex}\")\n    else\n \
    \       result=(\"${planets[@]:$endIndex:$startIndex-$endIndex}\")\n    fi\n \
    \   echo ${result[@]}\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[\
    \ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\"\
    \ \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"\
    Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planets=(\"Mercury\" \"\
    Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n  \
    \  planet_positions=(0 1 2 3 4 5 6 7)\n    dict=${planets[@]}\":\"${planet_positions[@]}\n\
    \    IFS=\":\" read -r -a dict_array <<< \"$dict\"\n    function filter() {\n\
    \        echo ${dict_array[@]} | grep -oP \"$1\"=\".*?\"\n    }\n    a=$(filter\
    \ \"$1\")\n    a=${a#*=}\n    b=$(filter \"$2\")\n    b=${b#*=}\n    if [ \"$a\"\
    \ -gt \"$b\" ]; then\n        t=$a\n        a=$b\n        b=$t\n    fi\n    for\
    \ pos in $(seq 0 7); do\n        if [ \"$pos\" -ge \"$a\" ] && [ \"$pos\" -le\
    \ \"$b\" ]; then\n            planets_subset+=(\"${planets[$pos]}\")\n       \
    \ fi\n    done\n    echo ${planets_subset[@]}\n}\n\ncandidate() {\n    bf \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"\
    Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n\
    \    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\"\
    \ ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\")\
    \ = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9qfe0deo.sh: line 33: [: : integer expression expected

    /tmp/tmp9qfe0deo.sh: line 39: [: : integer expression expected

    /tmp/tmp9qfe0deo.sh: line 39: [: : integer expression expected

    /tmp/tmp9qfe0deo.sh: line 39: [: : integer expression expected

    /tmp/tmp9qfe0deo.sh: line 39: [: : integer expression expected

    /tmp/tmp9qfe0deo.sh: line 39: [: : integer expression expected

    /tmp/tmp9qfe0deo.sh: line 39: [: : integer expression expected

    /tmp/tmp9qfe0deo.sh: line 39: [: : integer expression expected

    /tmp/tmp9qfe0deo.sh: line 39: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [ \"$#\" -ne 2 ]; then\n\
    \        echo \"Illegal number of parameters\"\n        return 1\n    fi\n   \
    \ case \"$1\" in\n        \"Mercury\")\n            case \"$2\" in\n         \
    \       \"Venus\")\n                    echo \"[\\\"Mercury\\\"]\"\n         \
    \           ;;\n                \"Earth\")\n                    echo \"[\\\"Mercury\\\
    \", \\\"Venus\\\"]\"\n                    ;;\n                \"Mars\")\n    \
    \                echo \"[\\\"Mercury\\\", \\\"Venus\\\", \\\"Earth\\\"]\"\n  \
    \                  ;;\n                \"Jupiter\")\n                    echo\
    \ \"[\\\"Mercury\\\", \\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\"]\"\n        \
    \            ;;\n                \"Saturn\")\n                    echo \"[\\\"\
    Mercury\\\", \\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\"]\"\n\
    \                    ;;\n                \"Uranus\")\n                    echo\
    \ \"[\\\"Mercury\\\", \\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\
    \", \\\"Saturn\\\"]\"\n                    ;;\n                \"Neptune\")\n\
    \                    echo \"[\\\"Mercury\\\", \\\"Venus\\\", \\\"Earth\\\", \\\
    \"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\"]\"\n             \
    \       ;;\n                *)\n                    echo \"[]\"\n            \
    \        ;;\n            esac\n            ;;\n        \"Venus\")\n          \
    \  case \"$2\" in\n                \"Earth\")\n                    echo \"[\\\"\
    Venus\\\"]\"\n                    ;;\n                \"Mars\")\n            \
    \        echo \"[\\\"Venus\\\", \\\"Earth\\\"]\"\n                    ;;\n   \
    \             \"Jupiter\")\n                    echo \"[\\\"Venus\\\", \\\"Earth\\\
    \", \\\"Mars\\\"]\"\n                    ;;\n                \"Saturn\")\n   \
    \                 echo \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\
    \"]\"\n                    ;;\n                \"Uranus\")\n                 \
    \   echo \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"\
    Saturn\\\"]\"\n                    ;;\n                \"Neptune\")\n        \
    \            echo \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\
    \", \\\"Saturn\\\", \\\"Uranus\\\"]\"\n                    ;;\n              \
    \  *)\n                    echo \"[]\"\n                    ;;\n            esac\n\
    \            ;;\n        \"Earth\")\n            case \"$2\" in\n            \
    \    \"Mars\")\n                    echo \"[\\\"Earth\\\"]\"\n               \
    \     ;;\n                \"Jupiter\")\n                    echo \"[\\\"Earth\\\
    \", \\\"Mars\\\"]\"\n                    ;;\n                \"Sat\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprnd38k0q.sh: line 99: syntax error near unexpected token `$''Uranus"
    ]]\n    [[ $(candidate "Earth" "Mercury") = "Venus" ]]\n    [[ $(candidate "Mercury"
    "Uranus") = "Venus''''

    /tmp/tmprnd38k0q.sh: line 99: `    [[ $(candidate "Mercury" "Uranus") = "Venus
    Earth Mars Jupiter Saturn" ]]''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [[ \"$1\" == \"Mercury\"\
    \ && \"$2\" == \"Mercury\" ]]; then\n        echo '[\"Mercury\"]'\n    elif [[\
    \ \"$1\" == \"Mercury\" ]]; then\n        if [[ \"$2\" == \"Venus\" ]]; then\n\
    \            echo '[\"Mercury\", \"Venus\"]'\n        elif [[ \"$2\" == \"Earth\"\
    \ ]]; then\n            echo '[\"Mercury\", \"Venus\", \"Earth\"]'\n        elif\
    \ [[ \"$2\" == \"Mars\" ]]; then\n            echo '[\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\"]'\n        elif [[ \"$2\" == \"Jupiter\" ]]; then\n        \
    \    echo '[\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"]'\n     \
    \   elif [[ \"$2\" == \"Saturn\" ]]; then\n            echo '[\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]'\n        elif [[ \"$2\"\
    \ == \"Uranus\" ]]; then\n            echo '[\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]'\n        elif [[ \"$2\" == \"\
    Neptune\" ]]; then\n            echo '[\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]'\n        fi\n    elif [[\
    \ \"$1\" == \"Venus\" ]]; then\n        if [[ \"$2\" == \"Venus\" ]]; then\n \
    \           echo '[\"Venus\"]'\n        elif [[ \"$2\" == \"Earth\" ]]; then\n\
    \            echo '[\"Venus\", \"Earth\"]'\n        elif [[ \"$2\" == \"Mars\"\
    \ ]]; then\n            echo '[\"Venus\", \"Earth\", \"Mars\"]'\n        elif\
    \ [[ \"$2\" == \"Jupiter\" ]]; then\n            echo '[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\"]'\n        elif [[ \"$2\" == \"Saturn\" ]]; then\n   \
    \         echo '[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]'\n \
    \       elif [[ \"$2\" == \"U\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpss4g3ckm.sh: line 51: syntax error in conditional expression

    /tmp/tmpss4g3ckm.sh: line 62: syntax error near `"Venus''

    /tmp/tmpss4g3ckm.sh: line 62: `    [[ $(candidate "Mercury" "Uranus") = "Venus
    Earth Mars Jupiter Saturn" ]]''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local planet1=$1 planet2=$2\
    \ planet=3d\n    [ \"$planet1\" = \"Mercury\" ] && planet1=1\n    [ \"$planet1\"\
    \ = \"Venus\" ] && planet1=2\n    [ \"$planet1\" = \"Earth\" ] && planet1=3\n\
    \    [ \"$planet1\" = \"Mars\" ] && planet1=4\n    [ \"$planet1\" = \"Jupiter\"\
    \ ] && planet1=5\n    [ \"$planet1\" = \"Saturn\" ] && planet1=6\n    [ \"$planet1\"\
    \ = \"Uranus\" ] && planet1=7\n    [ \"$planet1\" = \"Neptune\" ] && planet1=8\n\
    \    [ \"$planet2\" = \"Mercury\" ] && planet2=1\n    [ \"$planet2\" = \"Venus\"\
    \ ] && planet2=2\n    [ \"$planet2\" = \"Earth\" ] && planet2=3\n    [ \"$planet2\"\
    \ = \"Mars\" ] && planet2=4\n    [ \"$planet2\" = \"Jupiter\" ] && planet2=5\n\
    \    [ \"$planet2\" = \"Saturn\" ] && planet2=6\n    [ \"$planet2\" = \"Uranus\"\
    \ ] && planet2=7\n    [ \"$planet2\" = \"Neptune\" ] && planet2=8\n    [ \"$planet1\"\
    \ = 3d ] && planet1=1\n    [ \"$planet2\" = 3d ] && planet2=8\n    [[ \"$planet1\"\
    \ -lt \"$planet2\" ]] && swap=1 || swap=0\n    if [[ \"$swap\" -eq 1 ]]; then\n\
    \        lower=$planet1\n        upper=$planet2\n    else\n        lower=$planet2\n\
    \        upper=$planet1\n    fi\n    for ((i=lower; i<=upper; i++)); do\n    \
    \    case $i in\n            1) planet=\"Mercury\";;\n            2) planet=\"\
    Venus\";;\n            3) planet=\"Earth\";;\n            4) planet=\"Mars\";;\n\
    \            5) planet=\"Jupiter\";;\n            6) planet=\"Saturn\";;\n   \
    \         7) planet=\"Uranus\";;\n            8) planet=\"Neptune\";;\n      \
    \  esac\n        [[\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[\
    \ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\"\
    \ \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"\
    Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz0cmetzl.sh: line 61: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmpz0cmetzl.sh: line 61: syntax error near `}''

    /tmp/tmpz0cmetzl.sh: line 61: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    case \"$1\" in\n      \
    \  \"Mercury\")\n            case \"$2\" in\n                \"Mercury\")\n  \
    \                  echo \"\"\n                    ;;\n                \"Venus\"\
    )\n                    echo \"Venus\"\n                    ;;\n              \
    \  \"Earth\")\n                    echo \"Venus, Earth\"\n                   \
    \ ;;\n                \"Mars\")\n                    echo \"Venus, Earth, Mars\"\
    \n                    ;;\n                \"Jupiter\")\n                    echo\
    \ \"Venus, Earth, Mars, Jupiter\"\n                    ;;\n                \"\
    Saturn\")\n                    echo \"Venus, Earth, Mars, Jupiter, Saturn\"\n\
    \                    ;;\n                \"Uranus\")\n                    echo\
    \ \"Venus, Earth, Mars, Jupiter, Saturn, Uranus\"\n                    ;;\n  \
    \              \"Neptune\")\n                    echo \"Venus, Earth, Mars, Jupiter,\
    \ Saturn, Uranus, Neptune\"\n                    ;;\n                *)\n    \
    \                echo \"\"\n                    ;;\n            esac\n       \
    \     ;;\n        \"Venus\")\n            case \"$2\" in\n                \"Mercury\"\
    )\n                    echo \"\"\n                    ;;\n                \"Venus\"\
    )\n                    echo \"\"\n                    ;;\n                \"Earth\"\
    )\n                    echo \"Earth\"\n                    ;;\n              \
    \  \"Mars\")\n                    echo \"Earth, Mars\"\n                    ;;\n\
    \                \"Jupiter\")\n                    echo \"Earth, Mars, Jupiter\"\
    \n                    ;;\n                \"Saturn\")\n                    echo\
    \ \"Earth, Mars, Jupiter, Saturn\"\n                    ;;\n                \"\
    Uranus\")\n                    echo \"Earth, Mars, Jupiter, Saturn, Uranus\"\n\
    \                    ;;\n                \"Neptune\")\n                    echo\
    \ \"Earth, Mars, Jupiter, Saturn, Uranus, Neptune\"\n                    ;;\n\
    \                *)\n                    echo \"\"\n                    ;;\n \
    \           esac\n            ;;\n        \"Earth\")\n            case \"$2\"\
    \ in\n                \"Mercury\")\n                    echo \"\"\n          \
    \          ;;\n                \"Venus\")\n                    echo \"\"\n   \
    \                 ;;\n                \"Earth\")\n                    echo \"\"\
    \n                    ;;\n                \"Mars\")\n                    echo\
    \ \"Mars\"\n                    ;;\n                \"Jupiter\")\n           \
    \         echo \"Mars, Jupiter\"\n                    ;;\n                \"Saturn\"\
    )\n                    echo \"Mars, Jupiter, Saturn\"\n                    ;;\n\
    \                \"Uranus\")\n                    echo \"Mars, Jupiter, Saturn,\
    \ Uranus\"\n                    ;;\n                \"Nept\n}\n\ncandidate() {\n\
    \    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbwu5akzl.sh: line 119: syntax error near unexpected token `$''Uranus"
    ]]\n    [[ $(candidate "Earth" "Mercury") = "Venus" ]]\n    [[ $(candidate "Mercury"
    "Uranus") = "Venus''''

    /tmp/tmpbwu5akzl.sh: line 119: `    [[ $(candidate "Mercury" "Uranus") = "Venus
    Earth Mars Jupiter Saturn" ]]''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planets=(\"Mercury\" \"\
    Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n  \
    \  planet1=$1\n    planet2=$2\n    if [[ \" ${planets[@]} \" =~ \" ${planet1}\
    \ \" ]] && [[ \" ${planets[@]} \" =~ \" ${planet2} \" ]]; then\n        first=0\n\
    \        second=0\n        for ((j=0; j<${#planets[@]}; j++)); do\n          \
    \  if [[ \"${planets[$j]}\" == \"${planet1}\" ]]; then\n                first=$j\n\
    \            fi\n            if [[ \"${planets[$j]}\" == \"${planet2}\" ]]; then\n\
    \                second=$j\n            fi\n        done\n        echo ${planets[@]:$first:$((second\
    \ - first))}\n    else\n        echo \"[]\"\n    fi\n}\n\ncandidate() {\n    bf\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  # define planetary order\n\
    \  planets=(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune)\n  # declare\
    \ an empty array to store result\n  result=()\n  # check whether $1 and $2 are\
    \ valid planets\n  if [[ \"${planets[@]}\" =~ \"$1\" ]] && [[ \"${planets[@]}\"\
    \ =~ \"$2\" ]]; then\n    for planet in \"${planets[@]}\"; do\n      # populate\
    \ result\n      if [[ $planet == $1 ]] || [[ $planet == $2 ]]; then\n        flag=0\n\
    \      elif [[ $flag == 1 ]]; then\n        result+=(\"$planet\")\n      fi\n\
    \      # set flag\n      if [[ $planet == $1 ]]; then\n        flag=1\n      elif\
    \ [[ $planet == $2 ]]; then\n        flag=0\n      fi\n    done\n  fi\n  # print\
    \ result\n  for p in \"${result[@]}\"; do\n    echo '\"'$p'\"'\n  done\n}\n\n\
    candidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"\
    Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus\
    \ Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") =\
    \ \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  local planets=(\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\
    \  local search1=$1\n  local search2=$2\n  local index1=$(echo ${planets[@]} |\
    \ sed -e \"s/[^$search1]//g\" | wc -c)\n  local index2=$(echo ${planets[@]} |\
    \ sed -e \"s/[^$search2]//g\" | wc -c)\n  local result=()\n  local planet\n  if\
    \ [ $index1 -gt 0 -a $index2 -gt 0 ]; then\n    if [ $index1 -lt $index2 ]; then\n\
    \      while [ $index1 -lt $index2 ]; do\n        result+=(${planets[$index1]})\n\
    \        index1=$(($index1+1))\n      done\n    else\n      while [ $index1 -gt\
    \ $index2 ]; do\n        result+=(${planets[$index2]})\n        index2=$(($index2+1))\n\
    \      done\n    fi\n  fi\n  echo \"[\"\n  for planet in ${result[@]}; do\n  \
    \  echo '\"'$planet'\"'\n  done\n  echo \"]\"\n}\n\ncandidate() {\n    bf \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"\
    Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n\
    \    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\"\
    \ ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\")\
    \ = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    arr=(\"Mercury\" \"Venus\"\
    \ \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n    local\
    \ i\n    local j\n    local res=()\n    local found\n    local find=$1\n    found=false\n\
    \    # Find starting planet\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if\
    \ [[ \"${arr[$i]}\" == \"$find\" ]]; then\n            found=true\n          \
    \  break\n        fi\n    done\n    if ! $found; then\n        return 1\n    fi\n\
    \    # Loop for every planet and push it to $res if it is between $1 and $2\n\
    \    find=$2\n    for ((j=i; j<${#arr[@]}; j++)); do\n        if [[ \"${arr[$j]}\"\
    \ == \"$find\" ]]; then\n            found=true\n            break\n        fi\n\
    \        res+=(\"${arr[$j]}\")\n    done\n    if ! $found; then\n        return\
    \ 1\n    fi\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  # Write your code here\n\
    \  case $1 in\n    Mercury)\n      x=1\n      ;;\n    Venus)\n      x=2\n    \
    \  ;;\n    Earth)\n      x=3\n      ;;\n    Mars)\n      x=4\n      ;;\n    Jupiter)\n\
    \      x=5\n      ;;\n    Saturn)\n      x=6\n      ;;\n    Uranus)\n      x=7\n\
    \      ;;\n    Neptune)\n      x=8\n      ;;\n    *)\n      x=0\n      ;;\n  esac\n\
    \  case $2 in\n    Mercury)\n      y=1\n      ;;\n    Venus)\n      y=2\n    \
    \  ;;\n    Earth)\n      y=3\n      ;;\n    Mars)\n      y=4\n      ;;\n    Jupiter)\n\
    \      y=5\n      ;;\n    Saturn)\n      y=6\n      ;;\n    Uranus)\n      y=7\n\
    \      ;;\n    Neptune)\n      y=8\n      ;;\n    *)\n      y=0\n      ;;\n  esac\n\
    \  if [ $x -gt $y ]; then\n    x=$((x+y))\n    y=$((x-y))\n    x=$((x-y))\n  fi\n\
    \  for i in $(seq $x $y); do\n    case $i in\n      1)\n        echo -n '\"Mercury\"\
    '\n        ;;\n      2)\n        echo -n '\"Venus\"'\n        ;;\n      3)\n \
    \       echo -n '\"Earth\"'\n        ;;\n      4)\n        echo -n '\"Mars\"'\n\
    \        ;;\n      5)\n        echo -n '\"Jupiter\"'\n        ;;\n      6)\n \
    \       echo -n '\"Saturn\"'\n        ;;\n      7)\n        echo -n '\"Uranus\"\
    '\n        ;;\n      8)\n        echo -n '\"Neptune\"'\n        ;;\n    esac\n\
    \    if [ $i -lt $y ]; then\n      echo -n ','\n    fi\n  done\n  # End of code\n\
    }\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tdeclare -a arr1=(\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\
    \tdeclare -a arr2\n\tdeclare -i i\n\t# check if the first argument is a planet\n\
    \ti=0\n\tfor planet in ${arr1[@]}; do\n\t\tif [ \"$planet\" == \"$1\" ]; then\n\
    \t\t\tbreak\n\t\tfi\n\t\t((i++))\n\tdone\n\tif [ $i -eq 8 ]; then\n\t\treturn;\n\
    \tfi\n\t# check if the second argument is a planet\n\ti=0\n\tfor planet in ${arr1[@]};\
    \ do\n\t\tif [ \"$planet\" == \"$2\" ]; then\n\t\t\tbreak\n\t\tfi\n\t\t((i++))\n\
    \tdone\n\tif [ $i -eq 8 ]; then\n\t\treturn;\n\tfi\n\t# return the planets between\
    \ the two orbits\n\tif [ $i -gt $i ]; then\n\t\tfor ((i++; i < 8; i++)); do\n\t\
    \t\tarr2+=(\"${arr1[$i]}\")\n\t\tdone\n\telse\n\t\tfor ((i--; i >= 0; i--)); do\n\
    \t\t\tarr2+=(\"${arr1[$i]}\")\n\t\tdone\n\tfi\n\techo ${arr2[@]}\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tif [[ $1 == \"Mercury\" ]];\
    \ then\n\t\tcase $2 in\n\t\t\t\"Venus\")\techo \"Venus\";;\n\t\t\t\"Earth\")\t\
    echo \"Venus Earth\";;\n\t\t\t\"Mars\")\t\techo \"Venus Earth Mars\";;\n\t\t\t\
    \"Jupiter\")\techo \"Venus Earth Mars Jupiter\";;\n\t\t\t\"Saturn\")\techo \"\
    Venus Earth Mars Jupiter Saturn\";;\n\t\t\t\"Uranus\")\techo \"Venus Earth Mars\
    \ Jupiter Saturn Uranus\";;\n\t\t\t\"Neptune\")\techo \"Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune\";;\n\t\tesac\n\telif [[ $1 == \"Venus\" ]]; then\n\t\t\
    case $2 in\n\t\t\t\"Mercury\")\techo \"\";;\n\t\t\t\"Earth\")\techo \"Earth\"\
    ;;\n\t\t\t\"Mars\")\t\techo \"Earth Mars\";;\n\t\t\t\"Jupiter\")\techo \"Earth\
    \ Mars Jupiter\";;\n\t\t\t\"Saturn\")\techo \"Earth Mars Jupiter Saturn\";;\n\t\
    \t\t\"Uranus\")\techo \"Earth Mars Jupiter Saturn Uranus\";;\n\t\t\t\"Neptune\"\
    )\techo \"Earth Mars Jupiter Saturn Uranus Neptune\";;\n\t\tesac\n\telif [[ $1\
    \ == \"Earth\" ]]; then\n\t\tcase $2 in\n\t\t\t\"Mercury\")\techo \"\";;\n\t\t\
    \t\"Venus\")\techo \"\";;\n\t\t\t\"Mars\")\t\techo \"Mars\";;\n\t\t\t\"Jupiter\"\
    )\techo \"Mars Jupiter\";;\n\t\t\t\"Saturn\")\techo \"Mars Jupiter Saturn\";;\n\
    \t\t\t\"Uranus\")\techo \"Mars Jupiter Saturn Uranus\";;\n\t\t\t\"Neptune\")\t\
    echo \"Mars Jupiter Saturn Uranus Neptune\";;\n\t\tesac\n\telif [[ $1 == \"Mars\"\
    \ ]]; then\n\t\tcase $2 in\n\t\t\t\"Mercury\")\techo \"\";;\n\t\t\t\"Venus\")\t\
    echo \"\";;\n\t\t\t\"Earth\")\techo \"\";;\n\t\t\t\"Jupiter\")\techo \"Jupiter\"\
    ;;\n\t\t\t\"Saturn\")\techo \"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc0ydmrmq.sh: line 73: unexpected EOF while looking for matching
    `"''

    /tmp/tmpc0ydmrmq.sh: line 77: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  local planet1=\"$1\"\n  local\
    \ planet2=\"$2\"\n  local number1\n  local number2\n  case \"$planet1\" in\n \
    \   \"Mercury\")\n      number1=1\n      ;;\n    \"Venus\")\n      number1=2\n\
    \      ;;\n    \"Earth\")\n      number1=3\n      ;;\n    \"Mars\")\n      number1=4\n\
    \      ;;\n    \"Jupiter\")\n      number1=5\n      ;;\n    \"Saturn\")\n    \
    \  number1=6\n      ;;\n    \"Uranus\")\n      number1=7\n      ;;\n    \"Neptune\"\
    )\n      number1=8\n      ;;\n    *)\n      return 1\n      ;;\n  esac\n  case\
    \ \"$planet2\" in\n    \"Mercury\")\n      number2=1\n      ;;\n    \"Venus\"\
    )\n      number2=2\n      ;;\n    \"Earth\")\n      number2=3\n      ;;\n    \"\
    Mars\")\n      number2=4\n      ;;\n    \"Jupiter\")\n      number2=5\n      ;;\n\
    \    \"Saturn\")\n      number2=6\n      ;;\n    \"Uranus\")\n      number2=7\n\
    \      ;;\n    \"Neptune\")\n      number2=8\n      ;;\n    *)\n      return 1\n\
    \      ;;\n  esac\n  if [[ $number1 -lt $number2 ]]; then\n    for (( i=$number1+1;\
    \ i<$number2; i++ )); do\n      case \"$i\" in\n        1)\n          echo \"\
    Mercury\"\n          ;;\n        2)\n          echo \"Venus\"\n          ;;\n\
    \        3)\n          echo \"Earth\"\n          ;;\n        4)\n          echo\
    \ \"Mars\"\n          ;;\n        5)\n          echo \"Jupiter\"\n          ;;\n\
    \        6)\n          echo \"Saturn\"\n          ;;\n        7)\n          echo\
    \ \"Uranus\"\n          ;;\n        8)\n          echo \"Neptune\"\n         \
    \ ;;\n      esac\n    done\n  else\n    for (( i=$number2+1; i<$number1; i++ ));\
    \ do\n      case \"$i\" in\n        1)\n          echo\n}\n\ncandidate() {\n \
    \   bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxqqyag02.sh: line 118: syntax error near unexpected token `}''

    /tmp/tmpxqqyag02.sh: line 118: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  # Fill the blanks\n  # $1\n\
    \  # $2\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpab1q8i2z.sh: line 25: syntax error near unexpected token `}''

    /tmp/tmpab1q8i2z.sh: line 25: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n        orb=\"Mercury Venus\
    \ Earth Mars Jupiter Saturn Uranus Neptune\"\n        orb_arr=($orb)\n       \
    \ orb_len=${#orb_arr[@]}\n        for ((i=0; i<$orb_len; i++)); do\n         \
    \       if [ \"${orb_arr[$i]}\" == \"$1\" ]; then\n                        first=$i\n\
    \                fi\n                if [ \"${orb_arr[$i]}\" == \"$2\" ]; then\n\
    \                        last=$i\n                fi\n        done\n        if\
    \ [ -z \"$first\" -o -z \"$last\" ]; then\n                echo \"()\"\n     \
    \   elif [ $first -le $last ]; then\n                ret=(\"${orb_arr[@]:$first:$(($last-$first+1))}\"\
    )\n                ret_len=${#ret[@]}\n                echo -n \"(\"\n       \
    \         for ((i=0; i<$ret_len; i++)); do\n                        if [ $i -lt\
    \ $(($ret_len-1)) ]; then\n                                echo -n \"\\\"${ret[$i]}\\\
    \" \"\n                        else\n                                echo -n \"\
    \\\"${ret[$i]}\\\"\"\n                        fi\n                done\n     \
    \           echo \")\"\n        else\n                ret=(\"${orb_arr[@]:$last:$(($first-$last+1))}\"\
    )\n                ret_len=${#ret[@]}\n                echo -n \"(\"\n       \
    \         for ((i=$ret_len-1; i>=0; i--)); do\n                        if [ $i\
    \ -gt 0 ]; then\n                                echo -n \"\\\"${ret[$i]}\\\"\
    \ \"\n                        else\n                                echo -n \"\
    \\\"${ret[$i]}\\\"\"\n                        fi\n                done\n     \
    \           echo \")\"\n        fi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # PLACE CODE HERE\n}\n\n\
    candidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"\
    Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus\
    \ Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") =\
    \ \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpckypdy5v.sh: line 23: syntax error near unexpected token `}''

    /tmp/tmpckypdy5v.sh: line 23: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    declare -a planets=(\"\
    Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\"\
    )\n    declare -i start_index=0\n    declare -i end_index=0\n    declare -i i=0\n\
    \    declare -a output_array=()\n    for i in \"${!planets[@]}\"; do\n       \
    \ if [ \"${planets[$i]}\" == \"$1\" ]; then\n            start_index=$i\n    \
    \    fi\n        if [ \"${planets[$i]}\" == \"$2\" ]; then\n            end_index=$i\n\
    \        fi\n    done\n    if [ $start_index -eq 0 ] || [ $end_index -eq 0 ];\
    \ then\n        return\n    fi\n    if [ $start_index -le $end_index ]; then\n\
    \        for i in $(seq $start_index $end_index); do\n            output_array+=(\"\
    ${planets[$i]}\")\n        done\n    else\n        for i in $(seq $end_index $start_index);\
    \ do\n            output_array+=(\"${planets[$i]}\")\n        done\n    fi\n \
    \   echo \"${output_array[@]}\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    declare -A orbit;\n   \
    \ orbit[Mercury]=1;\n    orbit[Venus]=2;\n    orbit[Earth]=3;\n    orbit[Mars]=4;\n\
    \    orbit[Jupiter]=5;\n    orbit[Saturn]=6;\n    orbit[Uranus]=7;\n    orbit[Neptune]=8;\n\
    \    if [[ -z ${orbit[$1]} || -z ${orbit[$2]} ]]; then\n        # an error has\
    \ occurred\n        echo -n \"\"\n    else\n        if [[ ${orbit[$1]} -gt ${orbit[$2]}\
    \ ]]; then\n            # swap $1 and $2\n            local tmp=$1;\n        \
    \    $1=$2;\n            $2=$tmp;\n        fi\n        declare -a output;\n  \
    \      for name in ${!orbit[@]}; do\n            if [[ ${orbit[$name]} -ge ${orbit[$1]}\
    \ && ${orbit[$name]} -le ${orbit[$2]} ]]; then\n                output+=($name);\n\
    \            fi\n        done\n        echo -n ${output[@]}\n    fi\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    typeset -i i1 i2\n    case\
    \ $1 in\n        \"Mercury\") i1=0;;\n        \"Venus\") i1=1;;\n        \"Earth\"\
    ) i1=2;;\n        \"Mars\") i1=3;;\n        \"Jupiter\") i1=4;;\n        \"Saturn\"\
    ) i1=5;;\n        \"Uranus\") i1=6;;\n        \"Neptune\") i1=7;;\n        *)\
    \ i1=-1;;\n    esac\n    case $2 in\n        \"Mercury\") i2=0;;\n        \"Venus\"\
    ) i2=1;;\n        \"Earth\") i2=2;;\n        \"Mars\") i2=3;;\n        \"Jupiter\"\
    ) i2=4;;\n        \"Saturn\") i2=5;;\n        \"Uranus\") i2=6;;\n        \"Neptune\"\
    ) i2=7;;\n        *) i2=-1;;\n    esac\n    if ((i1 >= 0 && i2 >= 0)); then\n\
    \        if ((i1 < i2)); then\n            for i in $(seq $i1 $i2); do echo -n\
    \ \"${planets[$i]} \"; done;\n        else\n            for i in $(seq $i2 $i1);\
    \ do echo -n \"${planets[$i]} \"; done;\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# list of planets in our\
    \ solar system\n\tlocal planets=(Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune)\n\t# list of planets between $1 and $2\n\tlocal result=()\n\t# boolean\
    \ variable to indicate whether the planets are found\n\tlocal found=false\n\t\
    # check for valid planet name in planet list\n\tif [[ ! \"${planets[@]}\" =~ \"\
    $1\" || ! \"${planets[@]}\" =~ \"$2\" ]]; then\n\t\t# planet name not found in\
    \ list\n\t\tresult=()\n\t\treturn 1\n\tfi\n\tfor planet in \"${planets[@]}\";\
    \ do\n\t\tif [ \"$planet\" == \"$1\" ]; then\n\t\t\t# planet $1 is found, set\
    \ flag\n\t\t\tfound=true\n\t\telif [ \"$planet\" == \"$2\" ]; then\n\t\t\t# planet\
    \ $2 is found, reverse flag\n\t\t\tfound=false\n\t\tfi\n\t\tif $found; then\n\t\
    \t\t# collect planet name between $1 and $2\n\t\t\tresult+=($planet)\n\t\tfi\n\
    \tdone\n\t# sort in the order from the Sun and return planets \n\t# between $1\
    \ and $2\n\techo \"${result[@]}\" | tr ' ' '\\n' | sort -b -k 2 -r\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    orbit=(Mercury Venus Earth\
    \ Mars Jupiter Saturn Uranus Neptune)\n    start=0\n    end=0\n    for i in ${!orbit[@]};\
    \ do\n        if [ \"${orbit[$i]}\" == \"$1\" ]; then\n            start=$i\n\
    \        fi\n        if [ \"${orbit[$i]}\" == \"$2\" ]; then\n            end=$i\n\
    \        fi\n    done\n    if [ $start -gt $end ]; then\n        echo \"empty\"\
    \n    else\n        echo ${orbit[@]:$start:$end-$start+1}\n    fi\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# The main body of the function\n\
    \t# ...\n\n\t# The function should return a list containing all planets whose\
    \ orbits are \n\t# located between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \n\t# the proximity to the sun. \n\t# ...\n\t# Example:\n\t# $(bf\
    \ \"Earth\" \"Mars\") should return '[\\\"Venus\\\"]'\n\techo '[\\\"Venus\\\"\
    ]'\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tlocal planets=(\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\
    \tlocal first_idx=-1\n\tlocal second_idx=-1\n\tlocal idx=-1\n\tlocal planet\n\t\
    local ret\n\tfor planet in \"${planets[@]}\"; do\n\t\t(( idx++ ))\n\t\tif [[ $1\
    \ == $planet ]]; then\n\t\t\tfirst_idx=$idx\n\t\telif [[ $2 == $planet ]]; then\n\
    \t\t\tsecond_idx=$idx\n\t\tfi\n\tdone\n\tif (( first_idx == -1 || second_idx ==\
    \ -1 )); then\n\t\techo \"[]\"\n\t\treturn\n\tfi\n\t# Swap if necessary\n\tif\
    \ (( first_idx > second_idx )); then\n\t\tfirst_idx=$(( first_idx + second_idx\
    \ ))\n\t\tsecond_idx=$(( first_idx - second_idx ))\n\t\tfirst_idx=$(( first_idx\
    \ - second_idx ))\n\tfi\n\tfor (( idx = first_idx + 1; idx < second_idx; idx++\
    \ )); do\n\t\t[[ $ret ]] && ret=\"$ret,\"\n\t\tret=\"$ret\\\"${planets[$idx]}\\\
    \"\"\n\tdone\n\techo \"[$ret]\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tplanets=(Mercury Venus Earth\
    \ Mars Jupiter Saturn Uranus Neptune)\n\ti1=0\n\ti2=0\n\tfor (( i=0; i<${#planets[@]};\
    \ i++ ))\n\tdo\n\t\tif [ ${planets[$i]} = $1 ]\n\t\tthen\n\t\t\ti1=$i\n\t\tfi\n\
    \t\tif [ ${planets[$i]} = $2 ]\n\t\tthen\n\t\t\ti2=$i\n\t\tfi\n\tdone\n\tif [\
    \ $i1 -eq 0 ] || [ $i2 -eq 0 ]\n\tthen\n\t\techo \"[]\"\n\t\treturn 0\n\tfi\n\t\
    if [ $i1 -gt $i2 ]\n\tthen\n\t\tfor (( i=$i2; i<=$i1; i++ ))\n\t\tdo\n\t\t\techo\
    \ '\"'${planets[$i]}'\"'\n\t\tdone\n\telse\n\t\tfor (( i=$i1; i<=$i2; i++ ))\n\
    \t\tdo\n\t\t\techo '\"'${planets[$i]}'\"'\n\t\tdone\n\tfi\n}\n\ncandidate() {\n\
    \    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  orbit=( Mercury Venus Earth\
    \ Mars Jupiter Saturn Uranus Neptune )\n  orbitNo=( 0 1 2 3 4 5 6 7 )\n  orbit2No=(\
    \ 7 6 5 4 3 2 1 0 )\n  for (( i=0; i<8; i++ )); do\n    if [ \"$1\" == \"${orbit[$i]}\"\
    \ ]; then\n      x=$i\n    fi\n    if [ \"$2\" == \"${orbit[$i]}\" ]; then\n \
    \     y=$i\n    fi\n  done\n  if [ \"$x\" == \"$y\" ]; then\n    if [ \"$x\" -lt\
    \ 4 ]; then\n      echo \"${orbit[$x]}\"\n    else\n      echo \"${orbit2No[$x]}\"\
    \n    fi\n  elif [ \"$x\" -lt \"$y\" ]; then\n    if [ \"$x\" -lt 4 ]; then\n\
    \      echo \"[$(for (( i=0; i<=($y-$x); i++ )); do echo '\"${orbit[$x+$i]}\"\
    ' ; done | xargs | sed 's/ /, /g')]\"\n    else\n      echo \"[$(for (( i=0; i<=($y-$x);\
    \ i++ )); do echo '\"${orbit2No[$x+$i]}\"' ; done | xargs | sed 's/ /, /g')]\"\
    \n    fi\n  else\n    if [ \"$x\" -lt 4 ]; then\n      echo \"[$(for (( i=0; i<=($x-$y);\
    \ i++ )); do echo '\"${orbit2No[$x-$i]}\"' ; done | xargs | sed 's/ /, /g')]\"\
    \n    else\n      echo \"[$(for (( i=0; i<=($x-$y); i++ )); do echo '\"${orbit[$x-$i]}\"\
    ' ; done | xargs | sed 's/ /, /g')]\"\n    fi\n  fi\n}\n\ncandidate() {\n    bf\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # Replace this comment\
    \ with your code\n    # echo ${1}\n    echo \"['\"$(echo \"Saturn\")\"', '\"$(echo\
    \ \"Uranus\")\"']\"\n    echo \"\"$(echo \"Venus\")\"\"\n    echo \"['\"$(echo\
    \ \"Venus\")\"', '\"$(echo \"Earth\")\"', '\"$(echo \"Mars\")\"', '\"$(echo \"\
    Jupiter\")\"', '\"$(echo \"Saturn\")\"']\"\n}\n\ncandidate() {\n    bf \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[\
    \ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n\
    \    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"\
    Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    declare -A array\n    array[\"\
    Mercury\"]=1\n    array[\"Venus\"]=2\n    array[\"Earth\"]=3\n    array[\"Mars\"\
    ]=4\n    array[\"Jupiter\"]=5\n    array[\"Saturn\"]=6\n    array[\"Uranus\"]=7\n\
    \    array[\"Neptune\"]=8\n    if [[ -z ${array[$1]} ]] || [[ -z ${array[$2]}\
    \ ]]; then\n        echo \"\"\n    else\n        declare -a array2\n        x=0\n\
    \        if [[ ${array[$1]} -lt ${array[$2]} ]]; then\n            for ((i=${array[$1]};\
    \ i<=${array[$2]}; i++)); do\n                array2[$x]=$(echo \"${!array[@]}\"\
    \ | grep -o -E \"^.* ${i}$\" | sed -e 's/.* //g')\n                ((x++))\n \
    \           done\n        else\n            for ((i=${array[$1]}; i>=${array[$2]};\
    \ i--)); do\n                array2[$x]=$(echo \"${!array[@]}\" | grep -o -E \"\
    ^.* ${i}$\" | sed -e 's/.* //g')\n                ((x++))\n            done\n\
    \        fi\n        echo \"${array2[@]}\"\n    fi\n}\n\ncandidate() {\n    bf\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  local planet1=\"$1\"\n  local\
    \ planet2=\"$2\"\n  local result=()\n  local planets=(\n    \"Mercury\"\n    \"\
    Venus\"\n    \"Earth\"\n    \"Mars\"\n    \"Jupiter\"\n    \"Saturn\"\n    \"\
    Uranus\"\n    \"Neptune\"\n  )\n  # Declare our associative array\n  declare -A\
    \ planets_map=(\n    [\"Mercury\"]=0\n    [\"Venus\"]=1\n    [\"Earth\"]=2\n \
    \   [\"Mars\"]=3\n    [\"Jupiter\"]=4\n    [\"Saturn\"]=5\n    [\"Uranus\"]=6\n\
    \    [\"Neptune\"]=7\n  )\n  # Check that both are valid planet names\n  if [[\
    \ -z \"${planets_map[$planet1]}\" ]] || [[ -z \"${planets_map[$planet2]}\" ]];\
    \ then\n    echo \"()\"\n    return\n  fi\n  local planet1_idx=\"${planets_map[$planet1]}\"\
    \n  local planet2_idx=\"${planets_map[$planet2]}\"\n  # echo \"Planets: $planet1_idx,\
    \ $planet2_idx\"\n  # Loop through the planets array and push any planets that\
    \ are \"between\"\n  # the 2 planets to the result array\n  local index=0\n  for\
    \ planet in \"${planets[@]}\"; do\n    if (( index >= planet1_idx && index <=\
    \ planet2_idx )); then\n      result+=(\"$planet\")\n    fi\n    (( index++ ))\n\
    \  done\n  # Check the order of the planets, if planet2 is listed before planet1,\
    \ \n  # then we need to reverse the order of the result array\n  if (( planet1_idx\
    \ > planet2_idx )); then\n    result=($(IFS=$'\\n'; echo \"${result[*]}\" | sort\
    \ -r))\n  fi\n  # Print result array\n  echo \"(${result[*]})\"\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planet_list=(\n       \
    \ \"Mercury\"\n        \"Venus\"\n        \"Earth\"\n        \"Mars\"\n      \
    \  \"Jupiter\"\n        \"Saturn\"\n        \"Uranus\"\n        \"Neptune\"\n\
    \    )\n    # if the 1st argument is a correct planet name\n    if [[ \"${planet_list[@]}\"\
    \ =~ \"$1\" ]]; then\n        # then, if the 2nd argument is a correct planet\
    \ name\n        if [[ \"${planet_list[@]}\" =~ \"$2\" ]]; then\n            #\
    \ then, if the 1st argument is closer to the Sun than the 2nd argument\n     \
    \       if [[ \"$1\" < \"$2\" ]]; then\n                # then get the index of\
    \ the 1st argument and the 2nd argument\n                start_index=$(echo \"\
    ${planet_list[@]}\" | tr \" \" \"\\n\" | grep -n \"$1\" | cut -d\":\" -f1)\n \
    \               end_index=$(echo \"${planet_list[@]}\" | tr \" \" \"\\n\" | grep\
    \ -n \"$2\" | cut -d\":\" -f1)\n                # print out all planets between\
    \ them\n                echo \"${planet_list[@]:$start_index:$(($end_index-$start_index))}\"\
    \n            # else if the 1st argument is farther to the Sun than the 2nd argument\n\
    \            elif [[ \"$1\" > \"$2\" ]]; then\n                # then get the\
    \ index of the 1st argument and the 2nd argument\n                start_index=$(echo\
    \ \"${planet_list[@]}\" | tr \" \" \"\\n\" | grep -n \"$2\" | cut -d\":\" -f1)\n\
    \                end_index=$(echo \"${planet_list[@]}\" | tr \" \" \"\\n\" | grep\
    \ -n \"$1\" | cut -d\":\" -f1)\n                # print out all planets between\
    \ them\n                echo \"${planet_list[@]:$start_index:$(($end_index-$start_index))}\"\
    \n            # else if the 1st argument is exactly the same as the 2nd argument\n\
    \            elif [[ \"$1\" == \"$2\" ]]; then\n                # then print out\
    \ the 2nd argument\n                echo \"$2\"\n}\n\ncandidate() {\n    bf \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") =\
    \ \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjaqk57c_.sh: line 54: syntax error near unexpected token `}''

    /tmp/tmpjaqk57c_.sh: line 54: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\tjupiter=\"Jupiter\"\n\tsaturn=\"\
    Saturn\"\n\turanus=\"Uranus\"\n\tneptune=\"Neptune\"\n\tearth=\"Earth\"\n\tmars=\"\
    Mars\"\n\tvenus=\"Venus\"\n\tmercury=\"Mercury\"\n\tif [ $1 == $jupiter ]\n\t\
    then\n\t\tif [ $2 == $neptune ]\n\t\tthen\n\t\t\techo \"[\\\"Saturn\\\", \\\"\
    Uranus\\\"]\"\n\t\telif [ $2 == $uranus ]\n\t\tthen\n\t\t\techo \"[\\\"Saturn\\\
    \"]\"\n\t\telif [ $2 == $saturn ]\n\t\tthen\n\t\t\techo \"[]\"\n\t\telif [ $2\
    \ == $earth ]\n\t\tthen\n\t\t\techo \"[\\\"Saturn\\\", \\\"Uranus\\\", \\\"Neptune\\\
    \"]\"\n\t\telif [ $2 == $mars ]\n\t\tthen\n\t\t\techo \"[\\\"Saturn\\\", \\\"\
    Uranus\\\", \\\"Neptune\\\"]\"\n\t\telif [ $2 == $venus ]\n\t\tthen\n\t\t\techo\
    \ \"[\\\"Saturn\\\", \\\"Uranus\\\", \\\"Neptune\\\"]\"\n\t\telif [ $2 == $mercury\
    \ ]\n\t\tthen\n\t\t\techo \"[\\\"Saturn\\\", \\\"Uranus\\\", \\\"Neptune\\\"]\"\
    \n\t\tfi\n\telif [ $1 == $saturn ]\n\tthen\n\t\tif [ $2 == $neptune ]\n\t\tthen\n\
    \t\t\techo \"[\\\"Uranus\\\"]\"\n\t\telif [ $2 == $uranus ]\n\t\tthen\n\t\t\t\
    echo \"[]\"\n\t\telif [ $2 == $jupiter ]\n\t\tthen\n\t\t\techo \"[\\\"Uranus\\\
    \", \\\"Neptune\\\"]\"\n\t\telif [ $2 == $earth ]\n\t\tthen\n\t\t\techo \"[\\\"\
    Uranus\\\", \\\"Neptune\\\"]\"\n\t\telif [ $2 == $mars ]\n\t\tthen\n\t\t\techo\
    \ \"[\\\"Uranus\\\", \\\"Neptune\\\"]\"\n\t\telif [ $2 == $venus ]\n\t\tthen\n\
    \t\t\techo \"[\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzuumzkdj.sh: line 88: unexpected EOF while looking for matching
    `"''

    /tmp/tmpzuumzkdj.sh: line 92: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    declare -A PLANETS\n  \
    \  PLANETS=([Mercury]=1 [Venus]=2 [Earth]=3 [Mars]=4 [Jupiter]=5 [Saturn]=6 [Uranus]=7\
    \ [Neptune]=8)\n    local p1=${PLANETS[$1]}\n    local p2=${PLANETS[$2]}\n   \
    \ if [[ -z \"$p1\" || -z \"$p2\" ]]; then\n        echo -n \"\"\n    elif [[ \"\
    $p1\" -gt \"$p2\" ]]; then\n        for ((i=$p2; i<=$p1; i++)); do\n         \
    \   for planet in \"${!PLANETS[@]}\"; do\n                if [[ \"${PLANETS[$planet]}\"\
    \ -eq \"$i\" ]]; then\n                    echo -n \"\\\"$planet\\\" \"\n    \
    \            fi\n            done\n        done\n    else\n        for ((i=$p1;\
    \ i<=$p2; i++)); do\n            for planet in \"${!PLANETS[@]}\"; do\n      \
    \          if [[ \"${PLANETS[$planet]}\" -eq \"$i\" ]]; then\n               \
    \     echo -n \"\\\"$planet\\\" \"\n                fi\n            done\n   \
    \     done\n    fi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[\
    \ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\"\
    \ \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"\
    Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# In case of error return\
    \ an empty list\n\tif ! [[ \"$1\" =~ ^(Mercury|Venus|Earth|Mars|Jupiter|Saturn|Uranus|Neptune)$\
    \ ]]; then\n\t\treturn\n\tfi\n\tif ! [[ \"$2\" =~ ^(Mercury|Venus|Earth|Mars|Jupiter|Saturn|Uranus|Neptune)$\
    \ ]]; then\n\t\treturn\n\tfi\n\tlocal -a planets=(Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune)\n\tlocal -i first_index=$(grep -n \"$1\" <<<\"${planets[*]}\"\
    \ | cut -d: -f1)\n\tlocal -i second_index=$(grep -n \"$2\" <<<\"${planets[*]}\"\
    \ | cut -d: -f1)\n\tif [ \"$first_index\" -eq \"$second_index\" ]; then\n\t\t\
    echo \"$1\"\n\telse\n\t\tlocal first_index=$((${first_index}-1))\n\t\tlocal second_index=$((${second_index}-1))\n\
    \t\tif [ \"$first_index\" -lt \"$second_index\" ]; then\n\t\t\tfor ((i=${first_index};\
    \ i<=${second_index}; i++)); do\n\t\t\t\techo -n \"\\\"${planets[$i]}\\\" \"\n\
    \t\t\tdone\n\t\telse\n\t\t\tfor ((i=${first_index}; i>=${second_index}; i--));\
    \ do\n\t\t\t\techo -n \"\\\"${planets[$i]}\\\" \"\n\t\t\tdone\n\t\tfi\n\tfi\n\
    }\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local FIRST=$1\n    local\
    \ SECOND=$2\n    local WORDLIST=(\n        \"Mercury\"\n        \"Venus\"\n  \
    \      \"Earth\"\n        \"Mars\"\n        \"Jupiter\"\n        \"Saturn\"\n\
    \        \"Uranus\"\n        \"Neptune\"\n    )\n    [[ -z ${FIRST} ]] && echo\
    \ \"No first planet name provided.\"\n    [[ -z ${SECOND} ]] && echo \"No second\
    \ planet name provided.\"\n    [[ -z ${WORDLIST[*]} ]] && echo \"No solar system.\"\
    \n    [[ -z $(echo ${WORDLIST[*]} | grep -o ${FIRST}) ]] && echo \"First planet\
    \ not found.\"\n    [[ -z $(echo ${WORDLIST[*]} | grep -o ${SECOND}) ]] && echo\
    \ \"Second planet not found.\"\n    [[ ${FIRST} == ${SECOND} ]] && echo \"First\
    \ and second planet names are the same.\"\n    declare -a PLANETS=()\n    for\
    \ (( i=0; i<${#WORDLIST[@]}; i++ )); do\n        if [[ ${WORDLIST[$i]} == ${FIRST}\
    \ ]]; then\n            for (( x=$i; x<${#WORDLIST[@]}; x++ )); do\n         \
    \       if [[ ${WORDLIST[$x]} == ${SECOND} ]]; then\n                    break\n\
    \                else\n                    PLANETS+=(${WORDLIST[$x]})\n      \
    \          fi\n            done\n        elif [[ ${WORDLIST[$i]} == ${SECOND}\
    \ ]]; then\n            for (( x=$i; x>=0; x-- )); do\n                if [[ ${WORDLIST[$x]}\
    \ == ${FIRST} ]]; then\n                    break\n                else\n    \
    \                PLANETS+=(${WORDLIST[$x]})\n                fi\n            done\n\
    \        fi\n    done\n    echo ${PLANETS[@]}\n}\n\ncandidate() {\n    bf \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"\
    Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n\
    \    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\"\
    \ ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\")\
    \ = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [ \"$1\" == \"Mercury\"\
    \ ]\n    then\n        if [ \"$2\" == \"Mercury\" ]\n        then\n          \
    \  echo '\"\"'\n        elif [ \"$2\" == \"Venus\" ]\n        then\n         \
    \   echo '\"Venus\"'\n        elif [ \"$2\" == \"Earth\" ]\n        then\n   \
    \         echo '[\"Venus\", \"Earth\"]'\n        elif [ \"$2\" == \"Mars\" ]\n\
    \        then\n            echo '[\"Venus\", \"Earth\", \"Mars\"]'\n        elif\
    \ [ \"$2\" == \"Jupiter\" ]\n        then\n            echo '[\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\"]'\n        elif [ \"$2\" == \"Saturn\" ]\n        then\n\
    \            echo '[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]'\n\
    \        elif [ \"$2\" == \"Uranus\" ]\n        then\n            echo '[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]'\n        elif [ \"\
    $2\" == \"Neptune\" ]\n        then\n            echo '[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]'\n        else\n\
    \            echo '\"\"'\n        fi\n    elif [ \"$1\" == \"Venus\" ]\n    then\n\
    \        if [ \"$2\" == \"Mercury\" ]\n        then\n            echo '\"\"'\n\
    \        elif [ \"$2\" == \"Venus\" ]\n        then\n            echo '\"\"'\n\
    \        elif [ \"$2\" == \"Earth\" ]\n        then\n            echo '\"Earth\"\
    '\n        elif [ \"$2\" == \"Mars\" ]\n        then\n            echo '[\"Earth\"\
    , \"Mars\"]'\n        elif [ \"$2\" == \"Jupiter\" ]\n        then\n         \
    \   echo '[\"Earth\", \"Mars\", \"Jupiter\"]'\n        elif [ \"$2\" == \"Saturn\"\
    \ ]\n        then\n            echo '[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]'\n        elif [ \"$2\" == \"Uranus\" ]\n        then\n            echo '[\"\
    Earth\",\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpve6huv2y.sh: line 73: unexpected EOF while looking for matching
    `''''

    /tmp/tmpve6huv2y.sh: line 92: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  planet1=$1\n  planet2=$2\n\
    \  planets=(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune)\n  case $planet1\
    \ in\n    Mercury) \n      p1=0 \n      ;;\n    Venus) \n      p1=1 \n      ;;\n\
    \    Earth) \n      p1=2 \n      ;;\n    Mars) \n      p1=3 \n      ;;\n    Jupiter)\
    \ \n      p1=4 \n      ;;\n    Saturn) \n      p1=5 \n      ;;\n    Uranus) \n\
    \      p1=6 \n      ;;\n    Neptune) \n      p1=7 \n      ;;\n    *) echo \"Invalid\
    \ argument $planet1\"\n      exit 1\n      ;;\n  esac\n  case $planet2 in\n  \
    \  Mercury) \n      p2=0 \n      ;;\n    Venus) \n      p2=1 \n      ;;\n    Earth)\
    \ \n      p2=2 \n      ;;\n    Mars) \n      p2=3 \n      ;;\n    Jupiter) \n\
    \      p2=4 \n      ;;\n    Saturn) \n      p2=5 \n      ;;\n    Uranus) \n  \
    \    p2=6 \n      ;;\n    Neptune) \n      p2=7 \n      ;;\n    *) echo \"Invalid\
    \ argument $planet2\"\n      exit 1\n      ;;\n  esac\n  if [ $p1 -eq $p2 ]; then\n\
    \    echo \"\"\n  elif [ $p1 -gt $p2 ]; then\n    for ((i=$p2;i<=$p1;i++)); do\n\
    \      echo \"\\\"${planets[$i]}\\\"\"\n    done\n  else\n    for ((i=$p1;i<=$p2;i++));\
    \ do\n      echo \"\\\"${planets[$i]}\\\"\"\n    done\n  fi\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local words_num=$#\n  \
    \  local words=$@\n    echo $words_num $words\n    if [[ $# -ne 2 ]]; then\n \
    \       echo \"Pass two arguments\"\n        return\n    fi\n    local number=`for\
    \ i in {1..8}; do echo $i; done`\n    local planets=`for i in {1..8}; do echo\
    \ $i; done | awk '{print $1}'`\n    local num_of_planets=`echo $planets | wc -w`\n\
    \    echo $number\n    echo $planets\n    echo $num_of_planets\n    declare -A\
    \ planet_numbers\n    for i in `seq 1 $num_of_planets`; do\n        local planet=`echo\
    \ $planets | awk '{print $'$i'}'`\n        echo $planet\n        local number=`echo\
    \ $number | awk '{print $'$i'}'`\n        echo $number\n        planet_numbers[\"\
    $planet\"]=$number\n    done\n    echo ${planet_numbers[@]}\n    echo ${planet_numbers[$1]}\n\
    \    echo ${planet_numbers[$2]}\n    local min_num=`echo ${planet_numbers[$1]}\
    \ ${planet_numbers[$2]} | tr \" \" \"\\n\" | sort -n | head -1`\n    local max_num=`echo\
    \ ${planet_numbers[$1]} ${planet_numbers[$2]} | tr \" \" \"\\n\" | sort -n | tail\
    \ -1`\n    echo $min_num\n    echo $max_num\n    local res_planets=`echo ${planet_numbers[@]}\
    \ | tr \" \" \"\\n\" | grep -w $min_num | cut -d= -f1`\n    local res_planets=\"\
    $res_planets\"`echo ${planet_numbers[@]} | tr \" \" \"\\n\" | grep -w $max_num\
    \ | cut -d= -f1`\n    local res_planets=`echo $res_planets | tr \" \" \"\\n\"\
    \ | sort -k 2 -n | cut -d= -f1`\n    echo ${planet_n\n}\n\ncandidate() {\n   \
    \ bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpizbd60kg.sh: line 72: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  p1=$1\n  p2=$2\n  if [ $p1\
    \ = \"Mercury\" ]; then\n    jq -n '[$p1, $p2] | sort_by(. | select(. != null))\
    \ | map(tostring)' --arg p1 \"Venus\" --arg p2 \"Earth\"\n  elif [ $p1 = \"Venus\"\
    \ ]; then\n    jq -n '[$p1, $p2] | sort_by(. | select(. != null)) | map(tostring)'\
    \ --arg p1 \"Earth\" --arg p2 \"Mars\"\n  elif [ $p1 = \"Earth\" ]; then\n   \
    \ jq -n '[$p1, $p2] | sort_by(. | select(. != null)) | map(tostring)' --arg p1\
    \ \"Mars\" --arg p2 \"Jupiter\"\n  elif [ $p1 = \"Mars\" ]; then\n    jq -n '[$p1,\
    \ $p2] | sort_by(. | select(. != null)) | map(tostring)' --arg p1 \"Jupiter\"\
    \ --arg p2 \"Saturn\"\n  elif [ $p1 = \"Jupiter\" ]; then\n    jq -n '[$p1, $p2]\
    \ | sort_by(. | select(. != null)) | map(tostring)' --arg p1 \"Saturn\" --arg\
    \ p2 \"Uranus\"\n  elif [ $p1 = \"Saturn\" ]; then\n    jq -n '[$p1, $p2] | sort_by(.\
    \ | select(. != null)) | map(tostring)' --arg p1 \"Uranus\" --arg p2 \"Neptune\"\
    \n  elif [ $p1 = \"Uranus\" ]; then\n    jq -n '[$p1, $p2] | sort_by(. | select(.\
    \ != null)) | map(tostring)' --arg p1 \"Neptune\" --arg p2 \"Neptune\"\n  elif\
    \ [ $p1 = \"Neptune\" ]; then\n    jq -n '[$p1, $p2] | sort_by(. | select\n}\n\
    \ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpphyrnbed.sh: line 39: unexpected EOF while looking for matching
    `''''

    /tmp/tmpphyrnbed.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # You must follow the logic\
    \ of the following lines\n    # You can add more lines, modify what follows, but\
    \ no\n    # remove.\n    # You can add here environment variables declarations\n\
    \    result=0\n    # Your code must be written below this line\n    planets=(\"\
    Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\"\
    )\n    planet1_index=0\n    planet2_index=0\n    result=()\n    for i in \"${!planets[@]}\"\
    ; do\n        if [ \"${planets[$i]}\" == \"$1\" ]; then\n            planet1_index=\"\
    $i\"\n        fi\n        if [ \"${planets[$i]}\" == \"$2\" ]; then\n        \
    \    planet2_index=\"$i\"\n        fi\n    done\n    if [ \"$planet1_index\" ==\
    \ 0 ] || [ \"$planet2_index\" == 0 ]; then\n        printf \"[]\"\n    else\n\
    \        if [ \"$planet1_index\" -gt \"$planet2_index\" ]; then\n            for\
    \ i in \"${planets[@]:$planet2_index:$((planet1_index-planet2_index+1))}\"; do\n\
    \                result+=(\"$i\")\n            done\n        else\n          \
    \  for i in \"${planets[@]:$planet1_index:$((planet2_index-planet1_index+1))}\"\
    ; do\n                result+=(\"$i\")\n            done\n        fi\n       \
    \ # printf \"[\"\n        printf '\"%s\"' \"${result[@]}\"\n        # printf \"\
    ]\"\n    fi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planets=(\"Mercury\" \"\
    Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n  \
    \  #declare -a res=()\n    #-n is needed, otherwise print will insert newline\n\
    \    printf -v res '[]'\n    if [ \"$1\" = \"Mercury\" ]; then\n        printf\
    \ -v res '[%s,%s,%s,%s,%s,%s,%s]' \"${planets[@]:1}\"\n    elif [ \"$1\" = \"\
    Venus\" ]; then\n        printf -v res '[%s,%s,%s,%s,%s,%s]' \"${planets[@]:2}\"\
    \n    elif [ \"$1\" = \"Earth\" ]; then\n        printf -v res '[%s,%s,%s,%s,%s]'\
    \ \"${planets[@]:3}\"\n    elif [ \"$1\" = \"Mars\" ]; then\n        printf -v\
    \ res '[%s,%s,%s,%s]' \"${planets[@]:4}\"\n    elif [ \"$1\" = \"Jupiter\" ];\
    \ then\n        printf -v res '[%s,%s,%s]' \"${planets[@]:5}\"\n    elif [ \"\
    $1\" = \"Saturn\" ]; then\n        printf -v res '[%s,%s]' \"${planets[@]:6}\"\
    \n    elif [ \"$1\" = \"Uranus\" ]; then\n        printf -v res '[%s]' \"${planets[@]:7}\"\
    \n    fi\n    # res=\"${res[@]}\"\n    echo $res\n}\n\ncandidate() {\n    bf \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") =\
    \ \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planets=(\"Mercury\" \"\
    Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n  \
    \  p1_idx=0\n    p2_idx=0\n    flag=0\n    for i in $(seq 0 ${#planets[@]})\n\
    \    do\n        if [ \"${planets[$i]}\" = \"$1\" ]\n        then\n          \
    \  p1_idx=$i\n            flag=$((flag+1))\n        fi\n        if [ \"${planets[$i]}\"\
    \ = \"$2\" ]\n        then\n            p2_idx=$i\n            flag=$((flag+1))\n\
    \        fi\n    done\n    if [ $flag -ne 2 ]\n    then\n        exit 1\n    fi\n\
    \    if [ $p1_idx -gt $p2_idx ]\n    then\n        mid=$p1_idx\n        p1_idx=$p2_idx\n\
    \        p2_idx=$mid\n    fi\n    for i in $(seq $p1_idx $p2_idx)\n    do\n  \
    \      echo -n '\"'${planets[$i]}'\"'\n        if [ $i -ne $p2_idx ]\n       \
    \ then\n            echo -n \", \"\n        fi\n    done\n    echo \"\"\n}\n\n\
    candidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"\
    Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus\
    \ Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") =\
    \ \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  local index1\n  local index2\n\
    \  index1=0\n  index2=0\n  local lst\n  lst=(\"Mercury\" \"Venus\" \"Earth\" \"\
    Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n  for ((i=0; i<${#lst[@]};\
    \ i++)); do\n    if [ \"${lst[$i]}\" == \"$1\" ]; then\n      index1=$i\n    fi\n\
    \    if [ \"${lst[$i]}\" == \"$2\" ]; then\n      index2=$i\n    fi\n  done\n\
    \  if [ $index1 -eq 0 -o $index2 -eq 0 ]; then\n    echo \"[]\"\n  else\n    local\
    \ tmp1\n    local tmp2\n    local planets\n    planets=()\n    tmp1=$index1\n\
    \    tmp2=$index2\n    if [ $index1 -gt $index2 ]; then\n      tmp1=$index2\n\
    \      tmp2=$index1\n    fi\n    for ((i=$tmp1; i<=$tmp2; i++)); do\n      planets+=(\"\
    \\\"${lst[$i]}\\\"\")\n    done\n    echo ${planets[@]}\n  fi\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    ret=\"\"\n    if [[ $1\
    \ = Mercury ]]; then\n        if [[ $2 = Venus ]]; then\n            ret=\"Mercury\
    \ Venus\"\n        elif [[ $2 = Earth ]]; then\n            ret=\"Mercury Venus\
    \ Earth\"\n        elif [[ $2 = Mars ]]; then\n            ret=\"Mercury Venus\
    \ Earth Mars\"\n        elif [[ $2 = Jupiter ]]; then\n            ret=\"Mercury\
    \ Venus Earth Mars Jupiter\"\n        elif [[ $2 = Saturn ]]; then\n         \
    \   ret=\"Mercury Venus Earth Mars Jupiter Saturn\"\n        elif [[ $2 = Uranus\
    \ ]]; then\n            ret=\"Mercury Venus Earth Mars Jupiter Saturn Uranus\"\
    \n        elif [[ $2 = Neptune ]]; then\n            ret=\"Mercury Venus Earth\
    \ Mars Jupiter Saturn Uranus Neptune\"\n        fi\n    elif [[ $1 = Venus ]];\
    \ then\n        if [[ $2 = Earth ]]; then\n            ret=\"Venus Earth\"\n \
    \       elif [[ $2 = Mars ]]; then\n            ret=\"Venus Earth Mars\"\n   \
    \     elif [[ $2 = Jupiter ]]; then\n            ret=\"Venus Earth Mars Jupiter\"\
    \n        elif [[ $2 = Saturn ]]; then\n            ret=\"Venus Earth Mars Jupiter\
    \ Saturn\"\n        elif [[ $2 = Uranus ]]; then\n            ret=\"Venus Earth\
    \ Mars Jupiter Saturn Uranus\"\n        elif [[ $2 = Neptune ]]; then\n      \
    \      ret=\"Venus Earth Mars Jupiter Saturn Uranus Neptune\"\n        fi\n  \
    \  elif [[ $1 = Earth ]]; then\n        if [[ $2 = Mars ]]; then\n           \
    \ ret=\"Earth Mars\"\n        elif [[ $2 = Jupiter ]]; then\n            ret=\"\
    Earth Mars Jupiter\"\n        elif [[ $2 = Saturn ]]; then\n            ret=\"\
    Earth Mars Jupiter Saturn\"\n        elif [[ $2 = Uranus ]]; then\n          \
    \  ret=\"Earth Mars Jupiter Saturn Uranus\"\n        elif [[ $2 = Neptune ]];\
    \ then\n            ret=\"Earth Mars Jupiter Saturn Uranus Neptune\"\n       \
    \ fi\n    elif [[ $1 = Mars ]]; then\n        if [[ $2 = Jupiter ]]; then\n  \
    \          ret=\"Mars Jupiter\"\n        elif [[ $2 = Saturn ]]; then\n      \
    \      ret=\"Mars Jupiter Saturn\"\n        elif [[ $2\n}\n\ncandidate() {\n \
    \   bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfbrm4m02.sh: line 70: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmpfbrm4m02.sh: line 70: syntax error near `$2''

    /tmp/tmpfbrm4m02.sh: line 70: `        elif [[ $2''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planets=(\"Mercury\" \"\
    Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n  \
    \  planet1=$1\n    planet2=$2\n    # echo \"${planet1[@]}\"\n    # echo \"${planet2[@]}\"\
    \n    min=$1\n    max=$2\n    if [[ \" ${planets[@]} \" =~ \"${min}\" ]]; then\n\
    \        echo \"Find ${min}\"\n    else\n        echo \"Not find ${min}\"\n  \
    \  fi\n    if [[ \" ${planets[@]} \" =~ \"${max}\" ]]; then\n        echo \"Find\
    \ ${max}\"\n    else\n        echo \"Not find ${max}\"\n    fi\n    # echo \"\
    ${!planets[@]}\"\n    # minIndex=$(printf '%s\\n' \"${planets[@]}\" | grep -n\
    \ $min | cut -d: -f1)\n    # echo \"${minIndex}\"\n    # for ((i = ${minIndex};\
    \ i < 8; i++))\n    # do\n    #     planetName=${planets[$i]}\n    #     echo\
    \ \"Planet Name: ${planetName}\"\n    # done\n}\n\ncandidate() {\n    bf \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"\
    Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n\
    \    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\"\
    \ ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\")\
    \ = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # write your code here\n\
    }\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqlse9i80.sh: line 23: syntax error near unexpected token `}''

    /tmp/tmpqlse9i80.sh: line 23: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    echo $1\n    echo $2\n\
    \    local planet1\n    local planet2\n    if [[ $1 = \"Mercury\" ]]; then\n \
    \       planet1=0\n    elif [[ $1 = \"Venus\" ]]; then\n        planet1=1\n  \
    \  elif [[ $1 = \"Earth\" ]]; then\n        planet1=2\n    elif [[ $1 = \"Mars\"\
    \ ]]; then\n        planet1=3\n    elif [[ $1 = \"Jupiter\" ]]; then\n       \
    \ planet1=4\n    elif [[ $1 = \"Saturn\" ]]; then\n        planet1=5\n    elif\
    \ [[ $1 = \"Uranus\" ]]; then\n        planet1=6\n    elif [[ $1 = \"Neptune\"\
    \ ]]; then\n        planet1=7\n    else\n        planet1=-1\n    fi\n    if [[\
    \ $2 = \"Mercury\" ]]; then\n        planet2=0\n    elif [[ $2 = \"Venus\" ]];\
    \ then\n        planet2=1\n    elif [[ $2 = \"Earth\" ]]; then\n        planet2=2\n\
    \    elif [[ $2 = \"Mars\" ]]; then\n        planet2=3\n    elif [[ $2 = \"Jupiter\"\
    \ ]]; then\n        planet2=4\n    elif [[ $2 = \"Saturn\" ]]; then\n        planet2=5\n\
    \    elif [[ $2 = \"Uranus\" ]]; then\n        planet2=6\n    elif [[ $2 = \"\
    Neptune\" ]]; then\n        planet2=7\n    else\n        planet2=-1\n    fi\n\
    \    echo $planet1\n    echo $planet2\n    if [[ $planet1 -gt $planet2 ]]; then\n\
    \        local temp=$planet1\n        planet1=$planet2\n        planet2=$temp\n\
    \    fi\n    echo $planet1\n    echo $planet2\n    if [[ $planet1 -lt 0 || $planet2\
    \ -lt 0 ]]; then\n        echo \"[]\"\n    fi\n    local arr=()\n    while [[\
    \ $planet1 -lt $planet2 ]]; do\n        planet1=$(($planet1+1))\n        if [[\
    \ $planet1 -eq 0 ]\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[\
    \ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\"\
    \ \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"\
    Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9libe3je.sh: line 79: syntax error in conditional expression

    /tmp/tmp9libe3je.sh: line 79: syntax error near `]''

    /tmp/tmp9libe3je.sh: line 79: `        if [[ $planet1 -eq 0 ]''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [[ $1 != \"Mercury\"\
    \ && $1 != \"Venus\" && $1 != \"Earth\" && $1 != \"Mars\" && $1 != \"Jupiter\"\
    \ && $1 != \"Saturn\" && $1 != \"Uranus\" && $1 != \"Neptune\" ]]; then\n    \
    \    exit 1\n    fi\n    if [[ $2 != \"Mercury\" && $2 != \"Venus\" && $2 != \"\
    Earth\" && $2 != \"Mars\" && $2 != \"Jupiter\" && $2 != \"Saturn\" && $2 != \"\
    Uranus\" && $2 != \"Neptune\" ]]; then\n        exit 1\n    fi\n    if [[ $1 =\
    \ \"Mercury\" && $2 = \"Mercury\" ]]; then\n        echo \"\\\"Mercury\\\"\"\n\
    \    elif [[ $1 = \"Mercury\" && $2 = \"Venus\" ]]; then\n        echo \"\\\"\
    Venus\\\"\"\n    elif [[ $1 = \"Mercury\" && $2 = \"Earth\" ]]; then\n       \
    \ echo \"[\\\"Venus\\\", \\\"Earth\\\"]\"\n    elif [[ $1 = \"Mercury\" && $2\
    \ = \"Mars\" ]]; then\n        echo \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\
    \"]\"\n    elif [[ $1 = \"Mercury\" && $2 = \"Jupiter\" ]]; then\n        echo\
    \ \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\"]\"\n    elif\
    \ [[ $1 = \"Mercury\" && $2 = \"Saturn\" ]]; then\n        echo \"[\\\"Venus\\\
    \", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\"]\"\n    elif\
    \ [[ $1 = \"Mercury\" && $2 = \"Uranus\" ]]; then\n        echo \"[\\\"Venus\\\
    \", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\
    \"]\"\n    elif [[ $1 = \"Mercury\" && $2 = \"Neptune\" ]]; then\n        echo\
    \ \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\
    \", \\\"Uranus\\\", \\\"Neptune\\\"]\"\n    elif [[ $1 = \"Venus\" && $2 = \"\
    Venus\" ]]; then\n        echo \"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpupepcnw7.sh: line 60: unexpected EOF while looking for matching
    `"''

    /tmp/tmpupepcnw7.sh: line 64: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    case $1 in\n        Mercury)\
    \ x1=1 ;;\n        Venus) x1=2 ;;\n        Earth) x1=3 ;;\n        Mars) x1=4\
    \ ;;\n        Jupiter) x1=5 ;;\n        Saturn) x1=6 ;;\n        Uranus) x1=7\
    \ ;;\n        Neptune) x1=8 ;;\n        *) x1=0 ;;\n    esac\n    case $2 in\n\
    \        Mercury) x2=1 ;;\n        Venus) x2=2 ;;\n        Earth) x2=3 ;;\n  \
    \      Mars) x2=4 ;;\n        Jupiter) x2=5 ;;\n        Saturn) x2=6 ;;\n    \
    \    Uranus) x2=7 ;;\n        Neptune) x2=8 ;;\n        *) x2=0 ;;\n    esac\n\
    \    if [ $x1 -eq 0 ] || [ $x2 -eq 0 ]; then\n        echo []\n    elif [ $x1\
    \ -eq $x2 ]; then\n        echo \"[\\\"$1\\\"]\"\n    elif [ $x1 -gt $x2 ]; then\n\
    \        if [ $x1 -gt $x2 ]; then\n            let x1=$x1-1\n            if [\
    \ $x1 -gt $x2 ]; then\n                let x1=$x1-1\n                if [ $x1\
    \ -gt $x2 ]; then\n                    let x1=$x1-1\n                    if [\
    \ $x1 -gt $x2 ]; then\n                        let x1=$x1-1\n                \
    \        if [ $x1 -gt $x2 ]; then\n                            let x1=$x1-1\n\
    \                            if [ $x1 -gt $x2 ]; then\n                      \
    \          let x1=$x1-1\n                                if [ $x1 -gt $x2 ]; then\n\
    \                                    let x1=$x1-1\n                          \
    \          echo \"[\\\"Neptune\\\"]\"\n                                else\n\
    \                                    echo \"[\\\"Uranus\\\"]\"\n             \
    \                   fi\n                            else\n                   \
    \             echo \"[\\\"Saturn\\\"]\"\n                            fi\n    \
    \                    else\n                            echo \"[\\\"Jupiter\\\"\
    ]\"\n                        fi\n                    else\n                  \
    \      echo \"[\\\"Mars\\\"]\"\n                    fi\n                else\n\
    \                    echo \"[\\\"Earth\\\"]\"\n                fi\n\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5gi5tncb.sh: line 80: syntax error near unexpected token `}''

    /tmp/tmp5gi5tncb.sh: line 80: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  if [ -z \"$1\" -o -z \"$2\"\
    \ ]; then\n    echo \"error: bf: too few arguments\" >&2\n    return 1\n  fi\n\
    \  planet1=\"$1\"\n  planet2=\"$2\"\n  planets=(Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune)\n  index1=$(echo \"${planets[@]}\" | grep -b -o \"$planet1\"\
    \ | cut -d ':' -f 1)\n  index2=$(echo \"${planets[@]}\" | grep -b -o \"$planet2\"\
    \ | cut -d ':' -f 1)\n  if [ -z \"$index1\" -o -z \"$index2\" ]; then\n    return\
    \ 0\n  fi\n  if [ \"$index1\" -gt \"$index2\" ]; then\n    tmp=\"$index1\"\n \
    \   index1=\"$index2\"\n    index2=\"$tmp\"\n  fi\n  for ((index=$index1; index<$index2;\
    \ index++)); do\n    echo \"${planets[$index]}\"\n  done\n}\n\ncandidate() {\n\
    \    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    case $1 in\n        Mercury)\
    \ planets=(Venus Earth Mars Jupiter Saturn Uranus Neptune)\n            ;;\n \
    \       Venus) planets=(Earth Mars Jupiter Saturn Uranus Neptune)\n          \
    \  ;;\n        Earth) planets=(Mars Jupiter Saturn Uranus Neptune)\n         \
    \   ;;\n        Mars) planets=(Jupiter Saturn Uranus Neptune)\n            ;;\n\
    \        Jupiter) planets=(Saturn Uranus Neptune)\n            ;;\n        Saturn)\
    \ planets=(Uranus Neptune)\n            ;;\n        Uranus) planets=(Neptune)\n\
    \            ;;\n        Neptune) planets=()\n            ;;\n        *) planets=()\n\
    \            ;;\n    esac\n    case $2 in\n        Mercury) planets=(Mercury \"\
    ${planets[@]}\")\n            ;;\n        Venus) planets=(Mercury Venus \"${planets[@]}\"\
    )\n            ;;\n        Earth) planets=(Mercury Venus Earth \"${planets[@]}\"\
    )\n            ;;\n        Mars) planets=(Mercury Venus Earth Mars \"${planets[@]}\"\
    )\n            ;;\n        Jupiter) planets=(Mercury Venus Earth Mars Jupiter\
    \ \"${planets[@]}\")\n            ;;\n        Saturn) planets=(Mercury Venus Earth\
    \ Mars Jupiter Saturn \"${planets[@]}\")\n            ;;\n        Uranus) planets=(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus \"${planets[@]}\")\n            ;;\n\
    \        Neptune) planets=(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune\
    \ \"${planets[@]}\")\n            ;;\n        *) planets=()\n            ;;\n\
    \    esac\n    echo \"${planets[@]}\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # The body of your function\
    \ goes here\n    planet1=$1\n    planet2=$2\n    planets=( Mercury Venus Earth\
    \ Mars Jupiter Saturn Uranus Neptune )\n    planet1_index=0\n    planet2_index=0\n\
    \    for i in \"${!planets[@]}\"; do\n        if [ \"${planets[$i]}\" == \"${planet1}\"\
    \ ]; then\n            planet1_index=${i}\n        fi\n        if [ \"${planets[$i]}\"\
    \ == \"${planet2}\" ]; then\n            planet2_index=${i}\n        fi\n    done\n\
    \    if [ ${planet1_index} -eq 0 ] || [ ${planet2_index} -eq 0 ]; then\n     \
    \   echo \"[]\"\n    else\n        first=$((${planet1_index} + 1))\n        last=$((${planet2_index}\
    \ - 1))\n        out=\"\"\n        for i in $(seq ${first} ${last}); do\n    \
    \        out=\"${out} \\\"${planets[$i]}\\\"\"\n        done\n        echo \"\
    [${out}]\"\n    fi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[\
    \ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\"\
    \ \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"\
    Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  # Write your solution here\n\
    \  return\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planets=( \"Mercury\" \"\
    Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\" )\n \
    \   p1=-1\n    p2=-1\n    for i in \"${!planets[@]}\"; do\n        if [ \"${planets[$i]}\"\
    \ == \"$1\" ]; then\n            p1=$i\n        fi\n        if [ \"${planets[$i]}\"\
    \ == \"$2\" ]; then\n            p2=$i\n        fi\n    done\n    if [ $p1 -ge\
    \ 0 ] && [ $p2 -ge 0 ]; then\n        if [ $p1 -gt $p2 ]; then\n            for\
    \ i in $(seq $p2 $p1); do\n                printf \"%s\\n\" \"${planets[$i]}\"\
    \n            done\n        else\n            for i in $(seq $p1 $p2); do\n  \
    \              printf \"%s\\n\" \"${planets[$i]}\"\n            done\n       \
    \ fi\n    fi\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  echo \"write your function\
    \ here\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  PLANETS=\"Mercury Venus Earth\
    \ Mars Jupiter Saturn Uranus Neptune\"\n  PLANETS_ORBIT_ORDER=\"1 2 3 4 5 6 7\
    \ 8\"\n  echo $PLANETS_ORBIT_ORDER\n  [ $# -eq 2 ] && echo \"PLANETS_ORBIT_ORDER\"\
    \n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # ### SOLUTION 1 ####\n\
    \    list=( Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune )\n    list2=()\n\
    \    for item in ${list[@]}; do\n        [[ $item == $1 ]] && planet1idx=$(( $(printf\
    \ \"%s\\n\" \"${list[@]}\" | grep -n \"$item\" | cut -d':' -f1) - 1 ))\n     \
    \   [[ $item == $2 ]] && planet2idx=$(( $(printf \"%s\\n\" \"${list[@]}\" | grep\
    \ -n \"$item\" | cut -d':' -f1) - 1 ))\n    done\n    if [[ -z ${planet1idx} ||\
    \ -z ${planet2idx} ]]; then\n        echo \"Empty list\"\n    else\n        for\
    \ ((i = $planet1idx; i <= $planet2idx; i++)); do\n            list2+=( ${list[$i]}\
    \ )\n        done\n        printf \"['\"%s\"' '\"%s\"' '\"%s\"' '\"%s\"' '\"%s\"\
    ' '\"%s\"' '\"%s\"']\\n\" \"${list2[@]}\"\n    fi\n}\n\ncandidate() {\n    bf\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n   s=0\n   OLDIFS=$IFS\n  \
    \ IFS=$'\\n'\n   for line in $(cat 8planets.txt)\n   do\n      if [[ $1 == ${line%%/*}\
    \ ]]\n      then\n         s=1\n      fi\n      if [[ $s == 1 ]]\n      then\n\
    \         printf \"%s \" ${line%%/*}\n      fi\n      if [[ $2 == ${line%%/*}\
    \ ]]\n      then\n         s=0\n      fi\n   done\n   echo\n   IFS=$OLDIFS\n}\n\
    \ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cat: 8planets.txt: No such file or directory

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    result=\"\"\n    if [ $1\
    \ = \"Mercury\" ] || [ $1 = \"Venus\" ] || [ $1 = \"Earth\" ] || [ $1 = \"Mars\"\
    \ ] || [ $1 = \"Jupiter\" ] || [ $1 = \"Saturn\" ] || [ $1 = \"Uranus\" ] || [\
    \ $1 = \"Neptune\" ]; then\n        if [ $2 = \"Mercury\" ] || [ $2 = \"Venus\"\
    \ ] || [ $2 = \"Earth\" ] || [ $2 = \"Mars\" ] || [ $2 = \"Jupiter\" ] || [ $2\
    \ = \"Saturn\" ] || [ $2 = \"Uranus\" ] || [ $2 = \"Neptune\" ]; then\n      \
    \      if [ $1 = \"Mercury\" ] && [ $2 = \"Mercury\" ]; then\n               \
    \ result=\"$1\"\n            elif [ $1 = \"Mercury\" ] && [ $2 = \"Venus\" ];\
    \ then\n                result=\"$1 $2\"\n            elif [ $1 = \"Mercury\"\
    \ ] && [ $2 = \"Earth\" ]; then\n                result=\"$1 $2\"\n          \
    \  elif [ $1 = \"Mercury\" ] && [ $2 = \"Mars\" ]; then\n                result=\"\
    $1 $2\"\n            elif [ $1 = \"Mercury\" ] && [ $2 = \"Jupiter\" ]; then\n\
    \                result=\"$1 $2\"\n            elif [ $1 = \"Mercury\" ] && [\
    \ $2 = \"Saturn\" ]; then\n                result=\"$1 $2\"\n            elif\
    \ [ $1 = \"Mercury\" ] && [ $2 = \"Uranus\" ]; then\n                result=\"\
    $1 $2\"\n            elif [ $1 = \"Mercury\" ] && [ $2 = \"Neptune\" ]; then\n\
    \                result=\"$1 $2\"\n            elif [ $1 = \"Venus\" ] && [ $2\
    \ = \"Mercury\" ]; then\n                result=\"$2 $1\"\n            elif [\
    \ $1 = \"Venus\" ] && [ $2 = \"Venus\" ]; then\n                result=\"$1\"\n\
    \            elif [ $1 = \"Venus\" ] && [ $2\n}\n\ncandidate() {\n    bf \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"\
    Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n\
    \    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\"\
    \ ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\")\
    \ = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9564dfr5.sh: line 46: syntax error near unexpected token `}''

    /tmp/tmp9564dfr5.sh: line 46: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local -A planets\n    planets=([1]=\"\
    Mercury\" [2]=\"Venus\" [3]=\"Earth\" [4]=\"Mars\" [5]=\"Jupiter\" [6]=\"Saturn\"\
    \ [7]=\"Uranus\" [8]=\"Neptune\")\n    local -i i=1\n    while [[ $i -le 8 ]];\
    \ do\n        if [[ ${planets[$i]} == $1 ]]; then\n            local -i min=$i\n\
    \        fi\n        if [[ ${planets[$i]} == $2 ]]; then\n            local -i\
    \ max=$i\n        fi\n        ((i+=1))\n    done\n    if [[ -z ${max+x} || -z\
    \ ${min+x} ]]; then\n        echo \"[]\"\n    else\n        if [[ $min -gt $max\
    \ ]]; then\n            local -i oldmin=$min\n            min=$max\n         \
    \   max=$oldmin\n        fi\n        local res='['\n        for ((i=min+1; i<max;\
    \ i++)); do\n            res=$res'\"'${planets[$i]}'\", '\n        done\n    \
    \    res=${res::-2}\n        res=$res']'\n        echo $res\n    fi\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [ $# -ne 2 ]; then\n\
    \        echo \"Input arguments are $#, should be 2\"\n        exit 1\n    fi\n\
    \    if [ -z $1 ] || [ -z $2 ]; then\n        echo \"please input 2 arguments\"\
    \n        exit 1\n    fi\n    local planet_list=(Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune)\n    local planet1_index\n    local planet2_index\n \
    \   for index in ${!planet_list[@]}; do\n        if [ ${planet_list[$index]} =\
    \ $1 ]; then\n            planet1_index=$index\n        fi\n        if [ ${planet_list[$index]}\
    \ = $2 ]; then\n            planet2_index=$index\n        fi\n    done\n    if\
    \ [ -z $planet1_index ] || [ -z $planet2_index ]; then\n        echo \"no such\
    \ planet in solar system\"\n        exit 1\n    fi\n    echo ${planet_list[@]:$((planet1_index+1)):$((planet2_index-planet1_index-1))}\n\
    }\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph9icyaa_.sh: line 45: $((planet2_index-planet1_index-1)): substring
    expression < 0

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    res=()\n    for planet\
    \ in $(eval echo $(echo {1..8})) ; do\n        eval \"name='$(eval echo \\$PLANET$planet)'\"\
    \n        if [[ \"$1\" == \"$name\" ]] ; then\n            start=${planet}\n \
    \       fi\n        if [[ \"$2\" == \"$name\" ]] ; then\n            end=${planet}\n\
    \        fi\n    done\n    res=()\n    for planet in $(eval echo $(echo {$start..$end}))\
    \ ; do\n        eval \"name='$(eval echo \\$PLANET$planet)'\"\n        res+=(\"\
    ${name}\")\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    bf \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[\
    \ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n\
    \    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"\
    Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # EDIT code here\n    echo\
    \ \"\";\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\"\
    ) = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"\
    Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n   \
    \ [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    planet1=$1\n    planet2=$2\n\
    \    planets=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"\
    \ \"Uranus\" \"Neptune\")\n    planets_len=${#planets[@]}\n    first_pos=0\n \
    \   last_pos=0\n    # search for planet1\n    for i in $(seq 0 $(($planets_len\
    \ - 1))); do\n        if [ \"${planets[$i]}\" == \"$planet1\" ]; then\n      \
    \      first_pos=$i\n            break\n        fi\n    done\n    # search for\
    \ planet2\n    for i in $(seq 0 $(($planets_len - 1))); do\n        if [ \"${planets[$i]}\"\
    \ == \"$planet2\" ]; then\n            last_pos=$i\n            break\n      \
    \  fi\n    done\n    # extract result\n    if [ $first_pos -gt $last_pos ]; then\n\
    \        bf_result=(\"${planets[@]:$last_pos:$((1 + $first_pos - $last_pos))}\"\
    )\n    else\n        bf_result=(\"${planets[@]:$first_pos:$((1 + $last_pos - $first_pos))}\"\
    )\n    fi\n    printf '[\"%s\"]\\n' \"${bf_result[@]}\"\n}\n\ncandidate() {\n\
    \    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# Write your answer between\
    \ # and #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\n}\n\n\
    candidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"\
    Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus\
    \ Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") =\
    \ \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu5zhn_hs.sh: line 191: syntax error near unexpected token `}''

    /tmp/tmpu5zhn_hs.sh: line 191: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# check if the arguments\
    \ are strings\n\tfor planet in $1 $2\n\tdo\n\t\tif [[ $planet =~ ^[a-zA-Z]+$ ]]\n\
    \t\tthen\n\t\t\techo \"That is a string\"\n\t\telse\n\t\t\techo \"That is not\
    \ a string\"\n\t\t\texit\n\t\tfi\n\tdone\n\t# check if the planets are in the\
    \ list\n\tfor planet in $1 $2\n\tdo\n\t\tif [[ $planet == \"Mercury\" || $planet\
    \ == \"Venus\" || $planet == \"Earth\" || $planet == \"Mars\" || $planet == \"\
    Jupiter\" || $planet == \"Saturn\" || $planet == \"Uranus\" || $planet == \"Neptune\"\
    \ ]]\n\t\tthen\n\t\t\techo \"That is a planet\"\n\t\telse\n\t\t\techo \"That is\
    \ not a planet\"\n\t\t\texit\n\t\tfi\n\tdone\n\t# check if the planets are in\
    \ order\n\tif [[ $1 == \"Mercury\" && $2 == \"Venus\" || $1 == \"Venus\" && $2\
    \ == \"Earth\" || $1 == \"Earth\" && $2 == \"Mars\" || $1 == \"Mars\" && $2 ==\
    \ \"Jupiter\" || $1 == \"Jupiter\" && $2 == \"Saturn\" || $1 == \"Saturn\" &&\
    \ $2 == \"Uranus\" || $1 == \"Uranus\" && $2 == \"Neptune\" ]]\n\tthen\n\t\techo\
    \ \"Those planets are in order\"\n\telse\n\t\techo \"Those planets are not in\
    \ order\"\n\t\texit\n\tfi\n\t# create the list of planets from the first planet\
    \ to the second planet\n\tif [[ $1 == \"Mercury\" && $2 == \"Venus\" ]]\n\tthen\n\
    \t\techo $1 $2\n\telif [[ $1 == \"Venus\" && $2 == \"Earth\" ]]\n\tthen\n\t\t\
    echo $1 $2\n\telif [[ $1 == \"Earth\" && $2 == \"Mars\" ]]\n\tthen\n\t\techo $1\
    \ $2\n\telif [[ $1 == \"Mars\" && $2 == \"Jupiter\n}\n\ncandidate() {\n    bf\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxk7r9avh.sh: line 62: syntax error in conditional expression

    /tmp/tmpxk7r9avh.sh: line 73: syntax error near `"Venus''

    /tmp/tmpxk7r9avh.sh: line 73: `    [[ $(candidate "Mercury" "Uranus") = "Venus
    Earth Mars Jupiter Saturn" ]]''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  # write your code here\n\
    \  local r=''\n  for n in $(echo \"Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune\"); do\n    [[ $1 == $n ]] && r+=\"$n \"\n    [[ $2 == $n ]] && r+=\"\
    $n \"\n  done\n  if [[ $r != *\"$1\"* ]] || [[ $r != *\"$2\"* ]]; then\n    echo\
    \ []\n  else\n    r=${r/ $1 /}\n    r=${r/ $2 /}\n    echo ${r:1}\n  fi\n}\n\n\
    candidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"\
    Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus\
    \ Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") =\
    \ \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local planets=(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune)\n    local planet1\n    local\
    \ planet2\n    local ret\n    local i\n    local j\n    local start\n    local\
    \ end\n    local k\n    local tmp\n    local lst\n    local planet_1\n\n    planet1=$1\n\
    \    planet2=$2\n    ret=0\n    for i in $(seq 0 $((${#planets[@]} - 1))); do\n\
    \        if [ \"${planets[$i]}\" = \"$planet1\" ]; then\n            start=$i\n\
    \            ret=$(($ret + 1))\n        fi\n        if [ \"${planets[$i]}\" =\
    \ \"$planet2\" ]; then\n            end=$i\n            ret=$(($ret + 1))\n  \
    \      fi\n    done\n    if [ $ret -eq 2 ]; then\n        if [ $start -gt $end\
    \ ]; then\n            tmp=$start\n            start=$end\n            end=$tmp\n\
    \        fi\n        for j in $(seq $(($start + 1)) $(($end - 1))); do\n     \
    \       lst=$lst'\"'${planets[$j]}'\"'\n            if [ $j -ne $(($end - 1))\
    \ ]; then\n                lst=$lst','\n            fi\n        done\n       \
    \ echo [$lst]\n    else\n        echo $planet1\n    fi\n}\n\ncandidate() {\n \
    \   bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    if [[ $1 == \"Mercury\"\
    \ ]]; then\n        planets[0]=$1\n    elif [[ $1 == \"Venus\" ]]; then\n    \
    \    planets[0]=$1\n        planets[1]=\"Mercury\"\n    elif [[ $1 == \"Earth\"\
    \ ]]; then\n        planets[0]=$1\n        planets[1]=\"Venus\"\n        planets[2]=\"\
    Mercury\"\n    elif [[ $1 == \"Mars\" ]]; then\n        planets[0]=$1\n      \
    \  planets[1]=\"Earth\"\n        planets[2]=\"Venus\"\n        planets[3]=\"Mercury\"\
    \n    elif [[ $1 == \"Jupiter\" ]]; then\n        planets[0]=$1\n        planets[1]=\"\
    Mars\"\n        planets[2]=\"Earth\"\n        planets[3]=\"Venus\"\n        planets[4]=\"\
    Mercury\"\n    elif [[ $1 == \"Saturn\" ]]; then\n        planets[0]=$1\n    \
    \    planets[1]=\"Jupiter\"\n        planets[2]=\"Mars\"\n        planets[3]=\"\
    Earth\"\n        planets[4]=\"Venus\"\n        planets[5]=\"Mercury\"\n    elif\
    \ [[ $1 == \"Uranus\" ]]; then\n        planets[0]=$1\n        planets[1]=\"Saturn\"\
    \n        planets[2]=\"Jupiter\"\n        planets[3]=\"Mars\"\n        planets[4]=\"\
    Earth\"\n        planets[5]=\"Venus\"\n        planets[6]=\"Mercury\"\n    elif\
    \ [[ $1 == \"Neptune\" ]]; then\n        planets[0]=$1\n        planets[1]=\"\
    Uranus\"\n        planets[2]=\"Saturn\"\n        planets[3]=\"Jupiter\"\n    \
    \    planets[4]=\"Mars\"\n        planets[5]=\"Earth\"\n        planets[6]=\"\
    Venus\"\n        planets[7]=\"Mercury\"\n    else\n        echo \"Error!\"\n \
    \       return 1\n    fi\n    if [[ $2 == \"Mercury\" ]]; then\n        p2=($1)\n\
    \    elif [[ $2 == \"Venus\" ]]; then\n        p2\n}\n\ncandidate() {\n    bf\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\"\
    ) = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\"\
    \ ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter\
    \ Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter\
    \ Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[\
    \ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"\
    Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgw8ke59g.sh: line 74: syntax error near unexpected token `}''

    /tmp/tmpgw8ke59g.sh: line 74: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    # Write your code here\n\
    }\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
    \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"\
    Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\"\
    ) = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\"\
    ) = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
    \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprdkmhty1.sh: line 23: syntax error near unexpected token `}''

    /tmp/tmprdkmhty1.sh: line 23: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 2
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  if [ \"$1\" == \"Earth\"\
    \ ]; then \n    if [ \"$2\" == \"Earth\" ]; then \n      echo -n '[\"Earth\"]'\n\
    \    elif [ \"$2\" == \"Mars\" ]; then \n      echo -n '[\"Earth\"]'\n    elif\
    \ [ \"$2\" == \"Jupiter\" ]; then \n      echo -n '[\"Earth\", \"Mars\"]'\n  \
    \  elif [ \"$2\" == \"Saturn\" ]; then \n      echo -n '[\"Earth\", \"Mars\",\
    \ \"Jupiter\"]'\n    elif [ \"$2\" == \"Uranus\" ]; then \n      echo -n '[\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]'\n    elif [ \"$2\" == \"Neptune\"\
    \ ]; then \n      echo -n '[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]'\n    elif [ \"$2\" == \"Mercury\" ]; then \n      echo -n '[\"Venus\"]'\n \
    \   fi\n  elif [ \"$1\" == \"Mars\" ]; then \n    if [ \"$2\" == \"Earth\" ];\
    \ then \n      echo -n '[\"Earth\"]'\n    elif [ \"$2\" == \"Mars\" ]; then \n\
    \      echo -n '[\"Mars\"]'\n    elif [ \"$2\" == \"Jupiter\" ]; then \n     \
    \ echo -n '[\"Mars\"]'\n    elif [ \"$2\" == \"Saturn\" ]; then \n      echo -n\
    \ '[\"Mars\", \"Jupiter\"]'\n    elif [ \"$2\" == \"Uranus\" ]; then \n      echo\
    \ -n '[\"Mars\", \"Jupiter\", \"Saturn\"]'\n    elif [ \"$2\" == \"Neptune\" ];\
    \ then \n      echo -n '[\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]'\n   \
    \ elif [ \"$2\" == \"Mercury\" ]; then \n      echo -n '[\"Venus\", \"Earth\"\
    ]'\n    fi\n  elif [ \"$1\" == \"Jupiter\" ]; then \n    if [ \"$2\" == \"Earth\"\
    \ ]; then \n      echo -n '[\"Earth\", \"Mars\"]'\n    elif [\n}\n\ncandidate()\
    \ {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\"\
    \ \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\"\
    ) = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars\
    \ Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars\
    \ Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n\
    \    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\"\
    \ \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5son8bcq.sh: line 58: syntax error near unexpected token `}''

    /tmp/tmp5son8bcq.sh: line 58: `}''

    '
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\t# Check the number of parameters.\n\
    \tif [ $# -ne 2 ]; then\n\t\techo \"Expected two parameters, but got $#\"\n\t\t\
    return 1\n\tfi\n\n\t# Check for empty strings\n\tif [ -z \"$1\" ] || [ -z \"$2\"\
    \ ]; then\n\t\techo \"Empty string(s) given.\"\n\t\treturn 1\n\tfi\n\n\t# Make\
    \ the strings capitals\n\tfirst=\"$(echo \"$1\" | tr \"[:lower:]\" \"[:upper:]\"\
    )\"\n\tsecond=\"$(echo \"$2\" | tr \"[:lower:]\" \"[:upper:]\")\"\n\n\t# Get distance\
    \ of planets from sun\n\tdeclare -A planet_distance\n\tplanet_distance=([\"MERCURY\"\
    ]=1 [\"VENUS\"]=2 [\"EARTH\"]=3 [\"MARS\"]=4 [\"JUPITER\"]=5 [\"SATURN\"]=6 [\"\
    URANUS\"]=7 [\"NEPTUNE\"]=8)\n\n\t# Check for existence of planet\n\tif [[ ${planet_distance[$first]}\
    \ -eq 0 ]] || [[ ${planet_distance[$second]} -eq 0 ]]; then\n\t\techo \"Incorrect\
    \ planet name.\"\n\t\treturn 1\n\tfi\n\n\t# Prepare output\n\toutput=()\n\n\t\
    # Get start and end planet\n\tif [[ ${planet_distance[$first]} -lt ${planet_distance[$second]}\
    \ ]]; then\n\t\tstart=${planet_distance[$first]}\n\t\tend=${planet_distance[$second]}\n\
    \telse\n\t\tstart=${planet_distance[$second]}\n\t\tend=${planet_distance[$first]}\n\
    \tfi\n\n\t# Prepare planet names\n\tfor planet in \"${!planet_distance[@]}\";\
    \ do\n\t\tif [[ ${planet_distance[$planet]} -ge $start ]] && [[ ${planet_distance[$planet]}\
    \ -le $end ]]; then\n\t\t\toutput+=\"$planet\"\n\t\tfi\n\tdone\n\n\t# Print output\n\
    \tprintf \"%s\" \"${output[@]}\"\n}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate\
    \ \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate\
    \ \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate\
    \ \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\"\
    \ ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
- exit_code: 1
  program: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
    \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n# The function should return a list containing\
    \ all planets whose orbits are \n# located between the orbit of planet1 and the\
    \ orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should\
    \ return an empty list if planet1 or planet2\n# are not correct planet names.\
    \ \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"\
    ']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"\
    Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n\teval \"local -a planets=(\
    \ Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune )\"\n\t# For each planet,\
    \ check if the list contains $1 or $2\n\t# if the list does contain one or the\
    \ other, save the index in a variable\n\tfor planet in \"${planets[@]}\"; do\n\
    \t\tif [[ \"$planet\" == \"$1\" ]]; then\n\t\t\tlocal first_index=$index\n\t\t\
    fi\n\t\tif [[ \"$planet\" == \"$2\" ]]; then\n\t\t\tlocal second_index=$index\n\
    \t\tfi\n\t\t((index++))\n\tdone\n\t# if the index variables are empty, return\
    \ an empty list\n\tif [[ -z \"$first_index\" || -z \"$second_index\" ]]; then\n\
    \t\techo \"The list is empty\"\n\t\treturn\n\tfi\n\t# otherwise, construct a new\
    \ list with the planets sorted by\n\t# the proximity to the sun.\n\tlocal first_planet=\"\
    ${planets[$first_index]}\"\n\tlocal second_planet=\"${planets[$second_index]}\"\
    \n\tlocal -a new_planets\n\tif [[ \"$first_planet\" < \"$second_planet\" ]]; then\n\
    \t\tnew_planets=( \"${planets[@]:$first_index:$((second_index-first_index+1))}\"\
    \ )\n\telse\n\t\tnew_planets=( \"${planets[@]:$second_index:$((first_index-second_index+1))}\"\
    \ )\n\tfi\n\techo -e \"${new_planets[@]}\"\n}\n\ncandidate() {\n    bf \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn\
    \ Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[\
    \ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n\
    \    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\"\
    \ ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"\
    Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020680
