name: HumanEval_146_specialFilter
language: sh
prompt: "#!/bin/bash\n# Write a function that takes an array of numbers as input and\
  \ returns \n# the number of elements in the array that are greater than 10 and both\
  \ \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n\
  # >>> $(specialFilter \"15 -73 14 -15\")\n# \"1\"\n# >>> $(specialFilter \"33 -2\
  \ -3 45 21 109\")\n# \"2\"\n#\n# $1 is a space-separated list\nspecialFilter() {\n"
tests: "}\n\ncandidate() {\n    specialFilter \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"5 -2 1 -5\") = \"0\" ]]\n    [[ $(candidate \"15 -73 14 -15\"\
  ) = \"1\" ]]\n    [[ $(candidate \"33 -2 -3 45 21 109\") = \"2\" ]]\n    [[ $(candidate\
  \ \"43 -12 93 125 121 109\") = \"4\" ]]\n    [[ $(candidate \"71 -2 -33 75 21 19\"\
  ) = \"3\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"\") = \"\
  0\" ]]\n}\n\nrun_test"
completions: ["    # write your code here\n    nums=($1)\n    filtered_nums=()\n \
    \   counter=0\n    for x in ${nums[@]}; do\n        if [[ \"$x\" -ge 10 ]]; then\n\
    \            first=${x:0:1}\n            if [[ \"$first\" -ge 1 && \"$first\"\
    \ -le 9 ]]; then\n                last=${x:${#x}-1:1}\n                if [[ \"\
    $last\" -ge 1 && \"$last\" -le 9 ]]; then\n                    if [[ \"$(( first\
    \ % 2 ))\" -eq 1 && \"$(( last % 2 ))\" -eq 1 ]]; then\n                     \
    \   filtered_nums+=($x)\n                        counter=$(( counter + 1 ))\n\
    \                    fi\n                fi\n            fi\n        fi\n    done\n\
    \    echo $counter", "    numberList=$1\n    echo $numberList | tr \" \" \"\\\
    n\" | \n    while read num; do\n        if [ $(($num > 10)) ] && [ $(($num % 2))\
    \ == 1 ]; then\n            counter=0\n            while [ $(($num > 0)) ]; do\n\
    \                if [ $(($counter % 2)) == 0 ] && [ $(($num % 2)) == 1 ]; then\n\
    \                    if [ $(($num / 10 == 0)) ]; then\n                      \
    \  echo $num\n                    fi\n                fi\n                let\
    \ num=num/10\n                let counter=counter+1\n            done\n      \
    \  fi\n    done | wc -l", "    IFS=\" \" read -a arr <<< \"$1\"\n\n    count=0\n\
    \    for num in \"${arr[@]}\"; do\n        if (( num > 10 )); then\n         \
    \   if [[ \"$num\" =~ ^[13579]?[13579]$ ]]; then\n                count=$((count\
    \ + 1))\n            fi\n        fi\n    done\n\n    echo \"$count\"", "    local\
    \ cnt=0\n    local number\n    for number in $1; do\n        if [ ${number} -gt\
    \ 10 ] && \\\n           [ $((${number} % 10)) -gt 0 ] && \\\n           [ $((${number}\
    \ / 10)) -gt 0 ] && \\\n           [ $((${number} % 10)) -eq $((${number} / 10))\
    \ ] ; then\n            cnt=$((${cnt} + 1))\n        fi\n    done\n    echo ${cnt}",
  "    # Write code here\n    # Return either a string or an integer\n    input=$1\n\
    \    arr=($input)\n    count=0\n    for i in ${arr[@]}\n    do\n        if [ $i\
    \ -gt 10 ]\n        then\n            first=${i:0:1}\n            last=${i:(-1)}\n\
    \            if [ $first -gt 1 ] && [ $first -lt 9 ] && [ $last -gt 1 ] && [ $last\
    \ -lt 9 ]\n            then\n                count=$((count+1))\n            fi\n\
    \        fi\n    done\n    echo $count", "    echo $1 | sed 's/\\-[0-9]*//g' |\
    \ sed 's/[0-9]*\\-//g' | tr ' ' '\\n' | grep -E '^[13579][0-9]+[13579]$' | wc\
    \ -l", "    echo \"$1\" | tr ' ' '\\n' | awk '{if ($1>10 && ($1%2!=0) && ($1%10!=0))\
    \ count++;} END {print count}'", "    # bash array\n    local -a list=($1)\n \
    \   local count=0\n    for num in ${list[@]}; do\n        if [ $num -gt 10 ] &&\
    \ [ `expr $num % 2` -eq 1 ] && [ `expr $num % 10` -eq 1 ]; then\n            count=$((count+1))\n\
    \        fi\n    done\n    echo $count", "    echo \"$1\" | tr ' ' '\\n' | awk\
    \ '{if ($1 > 10 && $1 % 2 == 1 && ($1 / 10) % 2 == 1 && ($1 % 10) % 2 == 1) {print}}'\
    \ | wc -l", "    # YOUR SOLUTION HERE\n\n\t# parse the input\n\tnum=$(echo $1\
    \ | tr ' ' '\\n')\n\n\t# create variable to count\n\tcount=0\n\n\t#iterate through\
    \ each number and check the rules\n\tfor i in $num; do\n\t\t# get the first digit\
    \ and last digit to check for odd\n\t\tfirst=$(echo $i | cut -c 1)\n\t\tlast=$(echo\
    \ $i | rev | cut -c 1)\n\n\t\t# check to see if they are odd and if the number\
    \ is greater than 10\n\t\tif [ $((first % 2)) -ne 0 ] && [ $((last % 2)) -ne 0\
    \ ] && [ $i -gt 10 ]; then\n\t\t\tcount=$((count + 1))\n\t\tfi\n\tdone\n\n\t#\
    \ print the number of numbers that satisfy the conditions\n\techo $count", " \
    \ local count=0\n  for i in $1; do\n    if [ \"$i\" -gt 10 ]; then\n      if [\
    \ $(($i%10)) -eq 0 ]; then\n        if [ $(($i/10)) -gt 10 ]; then\n         \
    \ if [ $(($i/10%10)) -eq 0 ]; then\n            if [ $(($i/100%10)) -eq 1 ] ||\
    \ [ $(($i/100%10)) -eq 3 ] || [ $(($i/100%10)) -eq 5 ] || [ $(($i/100%10)) -eq\
    \ 7 ] || [ $(($i/100%10)) -eq 9 ]; then\n              count=$(($count+1))\n \
    \           fi\n          fi\n        else\n          if [ $(($i/10%10)) -eq 1\
    \ ] || [ $(($i/10%10)) -eq 3 ] || [ $(($i/10%10)) -eq 5 ] || [ $(($i/10%10)) -eq\
    \ 7 ] || [ $(($i/10%10)) -eq 9 ]; then\n            count=$(($count+1))\n    \
    \      fi\n        fi\n      fi\n    fi\n  done\n  echo $count", "    local str=\"\
    $1\"\n    local result=0\n    local number\n    for number in $str; do\n     \
    \   local last_digit=$(echo \"$number % 10\" | bc)\n        local first_digit=$(echo\
    \ \"$number / 10\" | bc)\n        if [[ \"$first_digit\" -ge 10 ]]; then\n   \
    \         first_digit=$(echo \"$first_digit % 10\" | bc)\n        fi\n       \
    \ if [[ \"$number\" -gt 10 ]] && [[ \"$last_digit\" -ne 0 ]] && [[ \"$first_digit\"\
    \ -ne 0 ]]; then\n            ((result++))\n        fi\n    done\n    echo \"\
    $result\"", "    local f_\n    for i in $1\n    do\n        local a=${i:0:1}\n\
    \        local b=${i: -1}\n        [[ $i -gt 10 && $a%2 -ne 0 && $b%2 -ne 0 ]]\
    \ && {\n            f_=$((f_+1))\n        }\n    done\n    echo $f_", "  # YOUR\
    \ CODE HERE\n  arr=($1)\n  len=${#arr[@]}\n  count=0\n  for (( i=0; i<$len; i++\
    \ ))\n  do\n  \tc=${arr[$i]}\n  \tif [[ $c -gt 10 ]]\n  \tthen\n  \t\tfirst=$(($c\
    \ / 10))\n  \t\tlast=$(($c % 10))\n  \t\tif [[ $first -gt 0 && $last -gt 0 ]]\n\
    \  \t\tthen\n  \t\t\tif [[ $first -gt 1 && $last -gt 1 ]]\n  \t\t\tthen\n  \t\t\
    \t\tif [[ $first % 2 -ne 0 && $last % 2 -ne 0 ]]\n  \t\t\t\tthen\n  \t\t\t\t\t\
    ((count++))\n  \t\t\t\tfi\n  \t\t\tfi\n  \t\tfi\n  \tfi\n  done\n  echo $count",
  "    # Your code goes here\n    # IMPORTANT: The output must be a number.\n    #\
    \ Don't forget to return!", "    local nums=($1)\n    local result=0\n    for\
    \ ((i=0; i<${#nums[@]}; i++)); do\n        # Get first digit of a number\n   \
    \     firstDigit=${nums[$i]:0:1}\n        # Get last digit of a number\n     \
    \   lastDigit=${nums[$i]: -1:1}\n        if [[ $((nums[$i])) -gt 10 && $((firstDigit\
    \ % 2)) -ne 0 \\\n            && $((lastDigit % 2)) -ne 0 ]]; then\n         \
    \   result=$((result + 1))\n        fi\n    done\n    echo $result", "    local\
    \ result=0\n    for i in $@; do\n        local first=${i:0:1}\n        local last=${i:\
    \ -1}\n        if (( i > 10 )) && (( $first % 2 == 1 )) && (( $last % 2 == 1 ));\
    \ then\n            result=$((result + 1))\n        fi\n    done\n    echo $result",
  "\t# Your code starts here\n\tarray=()\n\tfor element in $1; do\n\t\tif [[ $(echo\
    \ \"$element > 10\" | bc) -eq 1 ]]; then\n\t\t\tif [[ $(echo \"$element % 2\"\
    \ | bc) -eq 1 ]]; then\n\t\t\t\tarray+=(\"$element\")\n\t\t\tfi\n\t\tfi\n\tdone\n\
    \t# Your code ends here\n\techo \"${#array[@]}\"", "    res=0\n    for i in $1\n\
    \    do\n        if [ $(($i > 10)) -eq 1 ]\n        then\n            if [ $(($(($i/10))%2))\
    \ -eq 1 ]\n            then\n                if [ $(($i%2)) -eq 1 ]\n        \
    \        then\n                    ((res++))\n                fi\n           \
    \ fi\n        fi\n    done\n    echo $res", "\t# all arguments\n\tallArgs=$@\n\
    \techo \"$allArgs\"\n\t# split arguments using space as separator\n\tIFS=' ' read\
    \ -r -a array <<< \"$allArgs\"\n\t# for each number in array\n\tcount=0\n\tfor\
    \ num in \"${array[@]}\"\n\tdo\n\t\t# both first and last digits are odd\n\t\t\
    firstDigit=$(($num / 10))\n\t\tfirstDigit=$(($firstDigit % 10))\n\t\tlastDigit=$(($num\
    \ % 10))\n\t\tif [[ $firstDigit == 1 || $firstDigit == 3 || $firstDigit == 5 ||\
    \ $firstDigit == 7 || $firstDigit == 9 ]] && [[ $lastDigit == 1 || $lastDigit\
    \ == 3 || $lastDigit == 5 || $lastDigit == 7 || $lastDigit == 9 ]]\n\t\tthen\n\
    \t\t\t# is greater than 10\n\t\t\tif [[ $num -gt 10 ]]\n\t\t\tthen\n\t\t\t\t((count++))\n\
    \t\t\tfi\n\t\tfi\n\tdone\n\techo $count"]
stop_tokens:
- "\n}"
