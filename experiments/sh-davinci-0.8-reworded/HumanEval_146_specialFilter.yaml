name: HumanEval_146_specialFilter
language: sh
prompt: "#!/bin/bash\n# Write a function that takes an array of numbers as input and\
  \ returns \n# the number of elements in the array that are greater than 10 and both\
  \ \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n\
  # >>> $(specialFilter \"15 -73 14 -15\")\n# \"1\"\n# >>> $(specialFilter \"33 -2\
  \ -3 45 21 109\")\n# \"2\"\n#\n# $1 is a space-separated list\nspecialFilter() {\n"
tests: "}\n\ncandidate() {\n    specialFilter \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"5 -2 1 -5\") = \"0\" ]]\n    [[ $(candidate \"15 -73 14 -15\"\
  ) = \"1\" ]]\n    [[ $(candidate \"33 -2 -3 45 21 109\") = \"2\" ]]\n    [[ $(candidate\
  \ \"43 -12 93 125 121 109\") = \"4\" ]]\n    [[ $(candidate \"71 -2 -33 75 21 19\"\
  ) = \"3\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"\") = \"\
  0\" ]]\n}\n\nrun_test"
completions: ["    # write your code here\n    nums=($1)\n    filtered_nums=()\n \
    \   counter=0\n    for x in ${nums[@]}; do\n        if [[ \"$x\" -ge 10 ]]; then\n\
    \            first=${x:0:1}\n            if [[ \"$first\" -ge 1 && \"$first\"\
    \ -le 9 ]]; then\n                last=${x:${#x}-1:1}\n                if [[ \"\
    $last\" -ge 1 && \"$last\" -le 9 ]]; then\n                    if [[ \"$(( first\
    \ % 2 ))\" -eq 1 && \"$(( last % 2 ))\" -eq 1 ]]; then\n                     \
    \   filtered_nums+=($x)\n                        counter=$(( counter + 1 ))\n\
    \                    fi\n                fi\n            fi\n        fi\n    done\n\
    \    echo $counter", "    numberList=$1\n    echo $numberList | tr \" \" \"\\\
    n\" | \n    while read num; do\n        if [ $(($num > 10)) ] && [ $(($num % 2))\
    \ == 1 ]; then\n            counter=0\n            while [ $(($num > 0)) ]; do\n\
    \                if [ $(($counter % 2)) == 0 ] && [ $(($num % 2)) == 1 ]; then\n\
    \                    if [ $(($num / 10 == 0)) ]; then\n                      \
    \  echo $num\n                    fi\n                fi\n                let\
    \ num=num/10\n                let counter=counter+1\n            done\n      \
    \  fi\n    done | wc -l", "    IFS=\" \" read -a arr <<< \"$1\"\n\n    count=0\n\
    \    for num in \"${arr[@]}\"; do\n        if (( num > 10 )); then\n         \
    \   if [[ \"$num\" =~ ^[13579]?[13579]$ ]]; then\n                count=$((count\
    \ + 1))\n            fi\n        fi\n    done\n\n    echo \"$count\"", "    local\
    \ cnt=0\n    local number\n    for number in $1; do\n        if [ ${number} -gt\
    \ 10 ] && \\\n           [ $((${number} % 10)) -gt 0 ] && \\\n           [ $((${number}\
    \ / 10)) -gt 0 ] && \\\n           [ $((${number} % 10)) -eq $((${number} / 10))\
    \ ] ; then\n            cnt=$((${cnt} + 1))\n        fi\n    done\n    echo ${cnt}",
  "    # Write code here\n    # Return either a string or an integer\n    input=$1\n\
    \    arr=($input)\n    count=0\n    for i in ${arr[@]}\n    do\n        if [ $i\
    \ -gt 10 ]\n        then\n            first=${i:0:1}\n            last=${i:(-1)}\n\
    \            if [ $first -gt 1 ] && [ $first -lt 9 ] && [ $last -gt 1 ] && [ $last\
    \ -lt 9 ]\n            then\n                count=$((count+1))\n            fi\n\
    \        fi\n    done\n    echo $count", "    echo $1 | sed 's/\\-[0-9]*//g' |\
    \ sed 's/[0-9]*\\-//g' | tr ' ' '\\n' | grep -E '^[13579][0-9]+[13579]$' | wc\
    \ -l", "    echo \"$1\" | tr ' ' '\\n' | awk '{if ($1>10 && ($1%2!=0) && ($1%10!=0))\
    \ count++;} END {print count}'", "    # bash array\n    local -a list=($1)\n \
    \   local count=0\n    for num in ${list[@]}; do\n        if [ $num -gt 10 ] &&\
    \ [ `expr $num % 2` -eq 1 ] && [ `expr $num % 10` -eq 1 ]; then\n            count=$((count+1))\n\
    \        fi\n    done\n    echo $count", "    echo \"$1\" | tr ' ' '\\n' | awk\
    \ '{if ($1 > 10 && $1 % 2 == 1 && ($1 / 10) % 2 == 1 && ($1 % 10) % 2 == 1) {print}}'\
    \ | wc -l", "    # YOUR SOLUTION HERE\n\n\t# parse the input\n\tnum=$(echo $1\
    \ | tr ' ' '\\n')\n\n\t# create variable to count\n\tcount=0\n\n\t#iterate through\
    \ each number and check the rules\n\tfor i in $num; do\n\t\t# get the first digit\
    \ and last digit to check for odd\n\t\tfirst=$(echo $i | cut -c 1)\n\t\tlast=$(echo\
    \ $i | rev | cut -c 1)\n\n\t\t# check to see if they are odd and if the number\
    \ is greater than 10\n\t\tif [ $((first % 2)) -ne 0 ] && [ $((last % 2)) -ne 0\
    \ ] && [ $i -gt 10 ]; then\n\t\t\tcount=$((count + 1))\n\t\tfi\n\tdone\n\n\t#\
    \ print the number of numbers that satisfy the conditions\n\techo $count", " \
    \ local count=0\n  for i in $1; do\n    if [ \"$i\" -gt 10 ]; then\n      if [\
    \ $(($i%10)) -eq 0 ]; then\n        if [ $(($i/10)) -gt 10 ]; then\n         \
    \ if [ $(($i/10%10)) -eq 0 ]; then\n            if [ $(($i/100%10)) -eq 1 ] ||\
    \ [ $(($i/100%10)) -eq 3 ] || [ $(($i/100%10)) -eq 5 ] || [ $(($i/100%10)) -eq\
    \ 7 ] || [ $(($i/100%10)) -eq 9 ]; then\n              count=$(($count+1))\n \
    \           fi\n          fi\n        else\n          if [ $(($i/10%10)) -eq 1\
    \ ] || [ $(($i/10%10)) -eq 3 ] || [ $(($i/10%10)) -eq 5 ] || [ $(($i/10%10)) -eq\
    \ 7 ] || [ $(($i/10%10)) -eq 9 ]; then\n            count=$(($count+1))\n    \
    \      fi\n        fi\n      fi\n    fi\n  done\n  echo $count", "    local str=\"\
    $1\"\n    local result=0\n    local number\n    for number in $str; do\n     \
    \   local last_digit=$(echo \"$number % 10\" | bc)\n        local first_digit=$(echo\
    \ \"$number / 10\" | bc)\n        if [[ \"$first_digit\" -ge 10 ]]; then\n   \
    \         first_digit=$(echo \"$first_digit % 10\" | bc)\n        fi\n       \
    \ if [[ \"$number\" -gt 10 ]] && [[ \"$last_digit\" -ne 0 ]] && [[ \"$first_digit\"\
    \ -ne 0 ]]; then\n            ((result++))\n        fi\n    done\n    echo \"\
    $result\"", "    local f_\n    for i in $1\n    do\n        local a=${i:0:1}\n\
    \        local b=${i: -1}\n        [[ $i -gt 10 && $a%2 -ne 0 && $b%2 -ne 0 ]]\
    \ && {\n            f_=$((f_+1))\n        }\n    done\n    echo $f_", "  # YOUR\
    \ CODE HERE\n  arr=($1)\n  len=${#arr[@]}\n  count=0\n  for (( i=0; i<$len; i++\
    \ ))\n  do\n  \tc=${arr[$i]}\n  \tif [[ $c -gt 10 ]]\n  \tthen\n  \t\tfirst=$(($c\
    \ / 10))\n  \t\tlast=$(($c % 10))\n  \t\tif [[ $first -gt 0 && $last -gt 0 ]]\n\
    \  \t\tthen\n  \t\t\tif [[ $first -gt 1 && $last -gt 1 ]]\n  \t\t\tthen\n  \t\t\
    \t\tif [[ $first % 2 -ne 0 && $last % 2 -ne 0 ]]\n  \t\t\t\tthen\n  \t\t\t\t\t\
    ((count++))\n  \t\t\t\tfi\n  \t\t\tfi\n  \t\tfi\n  \tfi\n  done\n  echo $count",
  "    # Your code goes here\n    # IMPORTANT: The output must be a number.\n    #\
    \ Don't forget to return!", "    local nums=($1)\n    local result=0\n    for\
    \ ((i=0; i<${#nums[@]}; i++)); do\n        # Get first digit of a number\n   \
    \     firstDigit=${nums[$i]:0:1}\n        # Get last digit of a number\n     \
    \   lastDigit=${nums[$i]: -1:1}\n        if [[ $((nums[$i])) -gt 10 && $((firstDigit\
    \ % 2)) -ne 0 \\\n            && $((lastDigit % 2)) -ne 0 ]]; then\n         \
    \   result=$((result + 1))\n        fi\n    done\n    echo $result", "    local\
    \ result=0\n    for i in $@; do\n        local first=${i:0:1}\n        local last=${i:\
    \ -1}\n        if (( i > 10 )) && (( $first % 2 == 1 )) && (( $last % 2 == 1 ));\
    \ then\n            result=$((result + 1))\n        fi\n    done\n    echo $result",
  "\t# Your code starts here\n\tarray=()\n\tfor element in $1; do\n\t\tif [[ $(echo\
    \ \"$element > 10\" | bc) -eq 1 ]]; then\n\t\t\tif [[ $(echo \"$element % 2\"\
    \ | bc) -eq 1 ]]; then\n\t\t\t\tarray+=(\"$element\")\n\t\t\tfi\n\t\tfi\n\tdone\n\
    \t# Your code ends here\n\techo \"${#array[@]}\"", "    res=0\n    for i in $1\n\
    \    do\n        if [ $(($i > 10)) -eq 1 ]\n        then\n            if [ $(($(($i/10))%2))\
    \ -eq 1 ]\n            then\n                if [ $(($i%2)) -eq 1 ]\n        \
    \        then\n                    ((res++))\n                fi\n           \
    \ fi\n        fi\n    done\n    echo $res", "\t# all arguments\n\tallArgs=$@\n\
    \techo \"$allArgs\"\n\t# split arguments using space as separator\n\tIFS=' ' read\
    \ -r -a array <<< \"$allArgs\"\n\t# for each number in array\n\tcount=0\n\tfor\
    \ num in \"${array[@]}\"\n\tdo\n\t\t# both first and last digits are odd\n\t\t\
    firstDigit=$(($num / 10))\n\t\tfirstDigit=$(($firstDigit % 10))\n\t\tlastDigit=$(($num\
    \ % 10))\n\t\tif [[ $firstDigit == 1 || $firstDigit == 3 || $firstDigit == 5 ||\
    \ $firstDigit == 7 || $firstDigit == 9 ]] && [[ $lastDigit == 1 || $lastDigit\
    \ == 3 || $lastDigit == 5 || $lastDigit == 7 || $lastDigit == 9 ]]\n\t\tthen\n\
    \t\t\t# is greater than 10\n\t\t\tif [[ $num -gt 10 ]]\n\t\t\tthen\n\t\t\t\t((count++))\n\
    \t\t\tfi\n\t\tfi\n\tdone\n\techo $count", "  elements=(\"$@\")\n  count=0\n  for\
    \ ((i=0; i<${#elements[@]}; i++)); do\n    element=\"${elements[$i]}\"\n    if\
    \ [ $element -gt 10 ] && [ $(isFirstDigitOdd $element) -eq 1 ] && [ $(isLastDigitOdd\
    \ $element) -eq 1 ]; then\n      ((count++))\n    fi\n  done\n  echo $count",
  "\tfor i in $1\n\tdo\n\t\tif [ ${#i} -gt 1 ] && [ $(( $i % 2 )) -ne 0 ] && [ $((\
    \ ${i:0:1} % 2 )) -ne 0 ] && [ $(( ${i:${#i}-1:1} % 2 )) -ne 0 ]\n\t\tthen\n\t\
    \t\t[ $i -gt 10 ] && printf \"$i\\n\"\n\t\tfi\n\tdone | wc -l", "    local arr=(\"\
    $@\")\n    local filtered=(${arr[@]/%/} 11) # Append 11 (so we can check the last\
    \ digit)\n    local counter=0\n    for (( i=0; i<${#filtered[@]}-1; i++ ))\n \
    \   do\n        if (( ${filtered[i]} > 10 && (( ${filtered[i]%10} % 2 != 0 ))\
    \ && (( ${filtered[i+1]%10} % 2 != 0 )) ))\n        then\n            (( counter++\
    \ ))\n        fi\n    done\n    echo \"$counter\"", "  local ARR=($1)\n  local\
    \ count=0\n  for i in ${ARR[@]}; do\n    local num=$i\n    local firstDigit=${num:0:1}\n\
    \    local secondDigit=${num: -1}\n    if [ $firstDigit -gt 10 ] && [ $secondDigit\
    \ -gt 10 ] &&\n       [ $((firstDigit % 2)) -ne 0 ] && [ $((secondDigit % 2))\
    \ -ne 0 ]; then\n      ((count++))\n    fi\n  done\n  echo $count", "   echo \"\
    $@\" | tr ' ' '\\n' | \n   awk '$1 > 10 && $1 ~ /^[13579]/ && $1 ~ /[13579]$/'\
    \ | wc -l", "\t# TODO implement here", "    local -a arr=($1)\n    local -i count=0\n\
    \    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]} -gt 10 ]]; then\n\
    \            if [[ $(echo ${arr[$i]} | cut -c1)%2 -ne 0 ]] && \\\n           \
    \    [[ $(echo ${arr[$i]} | cut -c3)%2 -ne 0 ]]; then\n                count=$((count+1))\n\
    \            fi\n        fi\n    done\n    echo $count", "  local numbers=($1)\n\
    \  local numGreaterThan10=0\n  local firstDigit=\"\"\n  local lastDigit=\"\"\n\
    \  for number in ${numbers[@]}; do\n    firstDigit=$(echo $number | cut -c1)\n\
    \    lastDigit=$(echo $number | cut -c${#number})\n    if [[ $number -gt 10 &&\
    \ $firstDigit%2 -ne 0 && $lastDigit%2 -ne 0 ]]; then\n      numGreaterThan10=$((numGreaterThan10+1))\n\
    \    fi\n  done\n  echo $numGreaterThan10", "  local input=($1)\n  local count=0\n\
    \  for i in ${input[@]}; do\n    if [ $(echo $i | sed 's/[^0-9]//g' | wc -c) -gt\
    \ 2 ] && \\\n       [ $(echo $i | head -c 1) -ge 1 ] && \\\n       [ $(echo $i\
    \ | head -c 1) -le 9 ] && \\\n       [ $(echo $i | tail -c 2) -ge 1 ] && \\\n\
    \       [ $(echo $i | tail -c 2) -le 9 ]; then\n      let count=count+1\n    fi\n\
    \  done\n  echo $count", " \n  #TODO: replace the body of this function with your\
    \ implementation.\n  #The function should return a single number\n  \n    array=(\"\
    $@\")\n    count=0\n    for i in ${array[@]}\n    do\n        if [[ ${i:0:1} ==\
    \ [1-9] && ${i: -1} == [1-9] && $i -gt 10 ]]\n        then\n            count=$((count+1))\n\
    \        fi\n    done\n    echo $count", "  local count=0\n  for number in \"\
    $@\"; do\n    if [ \"${number}\" -gt 10 ]; then\n      if [ \"${number:0:1}\"\
    \ -eq 1 ] || \\\n         [ \"${number:0:1}\" -eq 3 ] || \\\n         [ \"${number:0:1}\"\
    \ -eq 5 ] || \\\n         [ \"${number:0:1}\" -eq 7 ] || \\\n         [ \"${number:0:1}\"\
    \ -eq 9 ]; then\n        if [ \"${number: -1}\" -eq 1 ] || \\\n           [ \"\
    ${number: -1}\" -eq 3 ] || \\\n           [ \"${number: -1}\" -eq 5 ] || \\\n\
    \           [ \"${number: -1}\" -eq 7 ] || \\\n           [ \"${number: -1}\"\
    \ -eq 9 ]; then\n          count=$((count + 1))\n        fi\n      fi\n    fi\n\
    \  done\n  echo \"${count}\"", "\techo $1 | tr \" \" \"\\n\" | grep \"^[0-9]*[13579][0-9]*$\"\
    \ | grep -v \"^[0-9]*0[0-9]*$\" | grep -E \"^[0-9]*.[0-9]*[13579]$\" | grep -vE\
    \ \"^[0-9]*.[0-9]*0$\" | wc -l", "    #This is not a very robust solution, but\
    \ it works for the examples provided\n    #It works by piping the list into tr\
    \ and then into sed, which will substitute\n    #any numbers with more than one\
    \ digit for a single character that is not a number\n    #Then, it pipes that\
    \ into tr again, which will substitute any characters other\n    #than numbers\
    \ for spaces.  After that, we have a space-separated list of numbers\n    #Now,\
    \ we pipe that list into sed, which will look for numbers with first and last\n\
    \    #digits being odd numbers.  Then, we pipe that into grep, which will look\
    \ for\n    #numbers greater than 10.  Finally, we pass that list into wc, which\
    \ will count\n    #the number of lines in the list, which is the number of numbers\
    \ in the list\n    echo $1 | tr -s \"[0-9]\" \" \" | tr -s \"[a-z]\" \" \" | sed\
    \ -E 's/([13579])([0-9]*)([13579])/\\3/g' | grep -E '[1-9][0-9]{1,}' | wc -l",
  "\tnums=($1)\n\tcount=0\n\tfor i in ${nums[@]}; do\n\t\tif [ $i -gt 10 ]; then\n\
    \t\t\tfirst=$(echo $i | sed 's/^\\(.\\).*$/\\1/')\n\t\t\tlast=$(echo $i | sed\
    \ 's/^.*\\(.\\)$/\\1/')\n\t\t\t[ $((first%2)) -eq 1 ] && [ $((last%2)) -eq 1 ]\
    \ && let count++\n\t\tfi\n\tdone\n\techo $count", "    # Write your code here\n\
    \    echo \"\"", "  local -i result=0\n  local x\n\n  for x in $1; do\n    if\
    \ (( 10 < x )); then\n      local -i firstDigit=${x%${x#?}}\n      local -i lastDigit=${x#${x%?}}\n\
    \      if (( 0 == (firstDigit & 1) && 0 == (lastDigit & 1) )); then\n        ((\
    \ ++result ))\n      fi\n    fi\n  done\n\n  echo \"$result\"", "  # Remove the\
    \ spaces\n  list=${1// /}\n  # Number of numbers to test\n  n=$((${#list} / 2))\n\
    \  count=0\n  # Loop through each number\n  for ((i=0; i<n; i++)); do\n    # Get\
    \ the number\n    number=${list:0:2}\n    # Remove the number from the list\n\
    \    list=${list:2}\n    # Test the number\n    testSpecial $number && count=$((count\
    \ + 1))\n  done\n  echo $count", "\t# $1 is a space-separated list\n\t# output\
    \ is a single number\n\tlastdigit=\"${1: -1}\"\n\tif [[ \"$1\" -gt 10 ]] && [[\
    \ \"$lastdigit\" -ne 0 ]] && [[ \"$1\" -ge 10 ]]; then\n\t\tcount=$((count+1))\n\
    \tfi\n\techo \"$count\"", "\t# set -x\n\tlocal numbers=($1)\n\tlocal counter=0\n\
    \tfor num in ${numbers[@]}; do\n\t\tif (( num > 10 )); then\n\t\t\tif [[ $(isSpecial\
    \ ${num}) == \"true\" ]]; then\n\t\t\t\tcounter=$((counter+1))\n\t\t\tfi\n\t\t\
    fi\n\tdone\n\techo $counter", "\tlst=($1)\n\tcount=0\n\tfor num in ${lst[@]};\
    \ do\n\t\tif [[ \"$num\" > 10 ]]; then\n\t\t\tfirst_digit=${num:0:1}\n\t\t\tlast_digit=${num:\
    \ -1}\n\t\t\tif [[ $((first_digit % 2)) == 1 && $((last_digit % 2)) == 1 ]]; then\n\
    \t\t\t\t((count++))\n\t\t\tfi\n\t\tfi\n\tdone\n\techo $count", "\t# TODO: put\
    \ your solution here\n\tlocal element;\n\tlocal result=0;\n\tfor element in $1;\
    \ do\n\t\tif ((${element:0:1}%2!=0 && ${element: -1}%2!=0 && $element>10)); then\n\
    \t\t\t((result++));\n\t\tfi\n\tdone\n\techo $result;", "  echo \"$1\" | tr \"\
    \ \" \"\\n\" | grep -E \"^[13579]\\d*[13579]$\" | grep -E '.*[0-9]+.*' | wc -l",
  "    a=($1)\n    count=0\n    for num in ${a[@]}; do\n        if (( num > 10 &&\
    \ $(echo ${num:0:1} % 2) && $(echo ${num:(-1)} % 2) )); then\n            count=$((count\
    \ + 1))\n        fi\n    done\n    echo $count", "    # set array input\n    arr=(\"\
    $@\")\n    # initialize sum\n    sum=0\n    # loop over each number and sum +1\
    \ if it's greater than 10 and has odd digits\n    for i in \"${arr[@]}\"; do\n\
    \        # if number is greater than 10\n        if [[ $i -gt 10 ]]; then\n  \
    \          # if first digit is odd\n            if [[ $(echo $i | head -c 1) ==\
    \ [13579] ]]; then\n                # if last digit is odd\n                if\
    \ [[ $(echo $i | tail -c 1) == [13579] ]]; then\n                    sum=$((sum+1))\n\
    \                fi\n            fi\n        fi\n    done\n    # return sum\n\
    \    echo $sum", "\tlocal i count=0\n\tfor i in $1; do\n\t\tcase $i in\n\t\t\t\
    ([13579][13579]*) ((++count)) ;;\n\t\tesac\n\tdone\n\techo $count", "    local\
    \ numbers=($1)\n    local count=0\n    for x in ${numbers[@]}; do\n        if\
    \ [[ $x -gt 10 ]]; then\n            first=$(echo $x | cut -c1)\n            last=$(echo\
    \ $x | cut -c2)\n            if [[ $(($first % 2)) -ne 0 ]] && [[ $(($last % 2))\
    \ -ne 0 ]]; then\n                count=$(($count + 1))\n            fi\n    \
    \    fi\n    done\n    echo $count", "\t# Replace this line with your code.\n\t\
    echo $1 | tr \" \" \"\\n\" | grep -e '[1-9][0-9]*[1-9]' -e '[13579]$' | wc -l",
  "    #return the number of elements in the array that are greater than 10\n    arr=($@)\n\
    \    # print ${arr[@]}\n    counter=0\n    for element in ${arr[@]}\n    do\n\
    \        if [[ ${element} -gt 10 ]]\n        then\n            # print $element\n\
    \            counter=$(($counter+1))\n        fi\n    done\n    # print $counter\n\
    \    echo \"$counter\"", "\tlocal -a numbers\n\tlocal length\n\tlocal number\n\
    \tlocal firstDigit\n\tlocal lastDigit\n\tlocal i\n\t\n\tif [ $# -ne 1 ]; then\n\
    \t\techo \"Usage: $(basename $0) \\\"list of numbers\\\"\"\n\t\texit 1\n\tfi\n\
    \t\n\tnumbers=($(echo $1))\n\tlength=${#numbers[@]}\n\t\n\tfor ((i=0; i<length;\
    \ i++)); do\n\t\tnumber=${numbers[$i]}\n\t\tfirstDigit=${number%??}\n\t\tlastDigit=${number##*-}\n\
    \t\t\n\t\tif [[ ${#number} -gt 2 && $firstDigit -ge 1 && $firstDigit -le 9 &&\
    \ $lastDigit -ge 1 && $lastDigit -le 9 ]]; then\n\t\t\tif [[ $number -gt 10 &&\
    \ $(($firstDigit%2)) -ne 0 && $(($lastDigit%2)) -ne 0 ]]; then\n\t\t\t\techo $number\n\
    \t\t\tfi\n\t\tfi\n\tdone | wc -l", "\t# use awk to print numbers that meet the\
    \ criteria\n\tawk '{for(i=1;i<=NF;i++)\n\t\tif((($i>10) && ($i%2==1)) && ((int($i/10)%2==1)\
    \ && ($i%10%2==1)))\n\t\t\tprint $i}' <(echo \"$1\") | wc -l", "  local result=0\n\
    \  for n in $1; do\n    if [ $n -gt 10 ] && echo $n | grep '^[13579]$' &> /dev/null\
    \ \\\n      && echo $n | grep '[13579]$' &> /dev/null; then\n      (( result++\
    \ ))\n    fi\n  done\n  echo $result", "\t[ $# -lt 1 ] && echo \"ERROR: Not enough\
    \ arguments.\" && return 1\n\n\tlocal i sum=0\n\tfor i in $1; do\n\t\t[ ${i:0:1}\
    \ -gt 0 -a ${i:0:1} -lt 10 -a ${i: -1} -gt 0 -a ${i: -1} -lt 10 ] && (( sum++\
    \ ))\n\tdone\n\techo $sum", "  local -i total=0\n  for number in $1; do\n    if\
    \ [ $number -gt 10 ]; then\n      firstdigit=$(echo $number | cut -c1)\n     \
    \ lastdigit=$(echo $number | tail -c2)\n      if [ $firstdigit -eq 1 ] || \\\n\
    \         [ $firstdigit -eq 3 ] || \\\n         [ $firstdigit -eq 5 ] || \\\n\
    \         [ $firstdigit -eq 7 ] || \\\n         [ $firstdigit -eq 9 ]; then\n\
    \        if [ $lastdigit -eq 1 ] || \\\n           [ $lastdigit -eq 3 ] || \\\n\
    \           [ $lastdigit -eq 5 ] || \\\n           [ $lastdigit -eq 7 ] || \\\n\
    \           [ $lastdigit -eq 9 ]; then\n          ((total++))\n        fi\n  \
    \    fi\n    fi\n  done\n  echo $total", "    local arr=($1)\n    local cnt=0\n\
    \    local elem=\"\"\n    for elem in ${arr[@]}; do\n        if [[ $elem -gt 10\
    \ ]]; then\n            local first=$(echo $elem | cut -c1)\n            local\
    \ last=$(echo $elem | cut -c${#elem})\n            [[ $first -ge 1 && $first -le\
    \ 9 && $first%2 -ne 0 ]] && \\\n            [[ $last -ge 1 && $last -le 9 && $last%2\
    \ -ne 0 ]] && \\\n            (( cnt++ ))\n        fi\n    done\n    echo $cnt",
  "\tlocal total=0\n\tfor i in $1\n\tdo\n\t\tif [[ $i -gt 10 ]] && [[ $(echo $i |\
    \ cut -c1)%2 -eq 1 ]] && [[ $(echo $i | cut -c$(echo ${#i}))%2 -eq 1 ]]\n\t\t\
    then\n\t\t\ttotal=$((total+1))\n\t\tfi\n\tdone\n\techo $total", "\tIFS=' ' read\
    \ -a array <<< \"$1\"\n\t\n\tcount=0\n\tfor i in \"${array[@]}\"\n\tdo\n\t\t#\
    \ if i is greater than 10 and\n\t\t# both first and last digits are odd\n\t\t\
    if [[ \"$i\" -gt 10 && $(echo \"$i\" | cut -c1)%2 -ne 0 && $(echo \"$i\" | cut\
    \ -c2)%2 -ne 0 ]]\n\t\tthen\n\t\t\tcount=$((count+1))\n\t\tfi\n\tdone\n\techo\
    \ \"$count\"", "\tcnt=0\n\tfor i in $@; do\n\t\tisTwoDigit $i && cnt=$((cnt+1))\n\
    \tdone\n\techo $cnt", "    if [ -z \"$1\" ]; then\n        return 1\n    fi\n\
    \    local array=()\n    local res=0\n    #read -a array <<< \"${1// /'\n    #'}\"\
    \ # does not work, TODO why?\n    for x in $1; do\n        #echo \"x: $x\"\n \
    \       array+=($x)\n    done\n    for x in ${array[@]}; do\n        if [[ $x\
    \ -gt 10 ]]; then\n            if [[ $((${x:0:1} % 2)) -eq 1 ]] && [[ $((${x:\
    \ -1} % 2)) -eq 1 ]]; then\n                res=$(($res + 1))\n            fi\n\
    \        fi\n    done\n    echo $res", "\t#\n\t# Your code here\n\t#\n    local\
    \ sum=0\n    local numbers=( $1 )\n    for i in ${numbers[@]}; do\n        if\
    \ [[ $i -gt 10 ]]; then\n            local len=${#i}\n            if [[ ${i:0:1}\
    \ -gt 0 ]] && [[ ${i:len-1:1} -gt 0 ]]; then\n                sum=$(( sum + 1\
    \ ))\n            fi\n        fi\n    done\n    echo $sum", "    for i in $1;\
    \ do\n\tfirst=${i:0:1}\n\tlast=${i: -1}\n\tif (( i>10 )) && (( (first % 2) !=\
    \ 0 )) && (( (last % 2) != 0 )); then\n\t    ((count++))\n\tfi\n    done\n   \
    \ echo $count", "  local count=0\n  local value=0\n  local values=${1}\n  local\
    \ firstDigit=0\n  local lastDigit=0\n  for value in ${values}\n  do\n    let \"\
    firstDigit = value / 10\"\n    let \"lastDigit = value % 10\"\n    if [ $firstDigit\
    \ -gt 10 -a $firstDigit -gt 0 -a $(($firstDigit % 2)) -eq 1 -a $(($lastDigit %\
    \ 2)) -eq 1 ]\n    then\n      let \"count += 1\"\n    fi\n  done\n  echo $count",
  "\tlocal nums=($@)\n\tlocal count=0\n\tfor num in ${nums[@]}; do\n\t\tlocal len=${#num}\n\
    \t\tlocal first=$(echo $num | cut -c1)\n\t\tlocal last=$(echo $num | cut -c$len)\n\
    \t\tif [ $num -gt 10 ] && [ $first -eq 1 -o $first -eq 3 -o $first -eq 5 -o $first\
    \ -eq 7 -o $first -eq 9 ] && [ $last -eq 1 -o $last -eq 3 -o $last -eq 5 -o $last\
    \ -eq 7 -o $last -eq 9 ]; then\n\t\t\tcount=$(($count + 1))\n\t\tfi\n\tdone\n\t\
    echo $count", "    array=($1)\n    re='^[0-9]+$'\n    result=0\n    for element\
    \ in \"${array[@]}\"\n    do\n        [[ $element =~ $re ]] && [[ $element -gt\
    \ 10 ]] && [[ $((${element:0:1} % 2)) -eq 1 ]] && [[ $((${element: -1} % 2)) -eq\
    \ 1 ]] && ((result++))\n    done\n    echo $result", "  TEMP=\"$1\"\n  let COUNT=0\n\
    \  for i in $TEMP; do\n    if [ ${#i} -gt 2 ]; then\n      if [ $(( $i % 2 ))\
    \ -ne 0 ]; then\n        let COUNT++\n      fi\n    fi\n  done\n  echo \"$COUNT\"",
  "    for f in $1; do\n        if [ $f -gt 10 ] && [ $(($f%10)) -gt 0 ] && [ $(($f/10))\
    \ -gt 0 ]; then\n            echo $f\n        fi\n    done | wc -l", "    local\
    \ input=$@\n    local count=0\n    local arr=( $input )\n    for n in ${arr[@]};\
    \ do\n        if [ $(echo $n | cut -c1) -eq $(echo $n | cut -c${#n}) ]; then\n\
    \            if [ $(($n%2)) -eq 1 ]; then\n                if [ $n -gt 10 ]; then\n\
    \                    ((count++))\n                fi\n            fi\n       \
    \ fi\n    done\n    echo $count", "    # your code here\n    # do not change `result`\
    \ variable name\n    local result=0\n    for i in $1\n    do\n        if [[ $i\
    \ -gt 10 ]] && [[ $i =~ ^[13579] ]] && [[ $i =~ [13579]$ ]]\n        then\n  \
    \          result=$((result+1))\n        fi\n    done\n    echo $result", "\t\
    local array=($1)\n\tlocal count=0\n\tlocal n\n\tfor n in ${array[@]}; do\n\t\t\
    if [ ${n:0:1} -ge 1 -a ${n:0:1} -le 9 -a ${n:(-1)} -ge 1 -a ${n:(-1)} -le 9 -a\
    \ $n -gt 10 ]; then\n\t\t\tcount=$((count+1))\n\t\tfi\n\tdone\n\techo $count",
  "\tdeclare -i total\n\ttotal=0\n\tfor i in $1; do\n\t\tdeclare -i num=$i\n\t\tdeclare\
    \ -i firstDigit=$(echo $num | cut -c1)\n\t\tdeclare -i lastDigit=$(echo $num |\
    \ cut -c2)\n\t\tdeclare -i isAbove10\n\t\tdeclare -i firstOdd\n\t\tdeclare -i\
    \ lastOdd\n\t\tisAbove10=$((num>10))\n\t\tfirstOdd=$((firstDigit%2==1))\n\t\t\
    lastOdd=$((lastDigit%2==1))\n\t\t((total+=(isAbove10 && firstOdd && lastOdd)))\n\
    \tdone\n\techo $total", "  local nums=\"$@\"\n\n  local count=0\n  for n in $nums;\
    \ do\n    first=$(echo $n | cut -c1)\n    last=$(echo $n | cut -c-1)\n    if ((\
    \ ($n > 10) && (($first % 2 == 1)) && (($last % 2 == 1)) )); then\n      ((count++))\n\
    \    fi\n  done\n\n  echo $count", '    echo $1 | tr " " "\n" | egrep "^[13579][0-9]*[13579]$"
    | egrep "[[:digit:]]*[0-9]{2,}[[:digit:]]*" | wc -l', "  # TODO: Write your code\
    \ here\n  numbers=()\n  for number in \"$@\"; do\n    if [[ $number =~ ^[+-]?[0-9]+$\
    \ ]]; then\n      numbers+=($number)\n    fi\n  done\n  if [ ${#numbers[@]} -eq\
    \ 0 ]; then\n    echo \"0\"\n    return\n  fi\n  counter=0\n  for number in \"\
    ${numbers[@]}\"; do\n    first_digit=$(echo $number | cut -c 1)\n    last_digit=$(echo\
    \ $number | rev | cut -c 1)\n    if [[ $number -gt 10 && $first_digit -gt 0 &&\
    \ $first_digit%2 -ne 0 && $last_digit -gt 0 && $last_digit%2 -ne 0 ]]; then\n\
    \      ((counter++))\n    fi\n  done\n  echo \"$counter\"", "  my_array=($1)\n\
    \  count=0\n  for i in ${my_array[@]}; do\n    if (( i > 10 && i%2 == 1 && i/10%2\
    \ == 1 )); then\n      ((count++))\n    fi\n  done\n  echo \"$count\"", "\tlocal\
    \ -a result\n\tlocal -a input\n\t\n\tinput=(${1// / }) # convert $1 to array\n\
    \tfor i in ${input[@]}; do\n\t\tif [[ ${i:0:1} =~ [13579] && ${i:(-1)} =~ [13579]\
    \ && $i -gt 10 ]]; then\n\t\t\tresult+=($i)\n\t\tfi\n\tdone\n\techo ${#result[@]}",
  "\tfor i in $1\n\tdo\n\t\t# Get the first digit\n\t\tdigit=$(echo $i | cut -c1)\n\
    \t\tif [ $digit -gt 10 ]\n\t\tthen\n\t\t\tif [ $digit -eq 1 ] || [ $digit -eq\
    \ 3 ] || [ $digit -eq 5 ] || [ $digit -eq 7 ] || [ $digit -eq 9 ]\n\t\t\tthen\n\
    \t\t\t\t# Get the last digit\n\t\t\t\tdigit=$(echo $i | cut -c2)\n\t\t\t\tif [\
    \ $digit -eq 1 ] || [ $digit -eq 3 ] || [ $digit -eq 5 ] || [ $digit -eq 7 ] ||\
    \ [ $digit -eq 9 ]\n\t\t\t\tthen\n\t\t\t\t\tn=`expr $n + 1`\n\t\t\t\tfi\n\t\t\t\
    fi\n\t\tfi\n\tdone\n\techo $n", "\tlocal sum=0\n\t# $1 is first argument, the\
    \ list of numbers\n\t# for each number in the list, check whether it satisfies\
    \ \n\t# both conditions: greater than 10 and both first and last \n\t# digits\
    \ are odd\n\tfor num in $1\n\tdo\n\t\tfirst=${num:0:1} # get first digit\n\t\t\
    last=${num: -1} # get last digit\n\t\t[ $first -gt 1 ] && [ $last -gt 1 ] && [\
    \ $first -lt 9 ] && \\\n\t\t\t[ $last -lt 9 ] && [ $num -gt 10 ] && sum=$((sum+1))\n\
    \tdone\n\techo $sum", "    for number in $1; do\n        if [ $number -gt 10 ];\
    \ then\n            left=$(echo $number | cut -c1)\n            right=$(echo $number\
    \ | cut -c2)\n            if [[ $left%2 -ne 0 && $right%2 -ne 0 ]]; then\n   \
    \             count=$((count+1))\n            fi\n        fi\n    done\n    echo\
    \ $count", "\t# setup an empty array\n\tdeclare -a arr\n\t# push all of the arguments\
    \ into the array\n\tfor i in $@; do\n\t\tarr+=($i)\n\tdone\n\t# count the number\
    \ of entries in the array that are greater than 10\n\t# and have odd first and\
    \ last digits\n\tlocal sum=0\n\tfor i in ${arr[@]}; do\n\t\tif [[ $i -gt 10 ]];\
    \ then\n\t\t\tlocal first=${i:0:1}\n\t\t\tlocal last=${i:${#i}-1:1}\n\t\t\tif\
    \ [[ $first%2 -ne 0 && $last%2 -ne 0 ]]; then\n\t\t\t\t((sum++))\n\t\t\tfi\n\t\
    \tfi\n\tdone\n\techo $sum", '    printf "%s\n" $1 | grep -E "^[13579][0-9]*[13579]$"
    | grep -E "[0-9]+" | grep -v -E "[0-9]+0$" | grep -v -E "^0[0-9]+" | grep -E "^[0-9]+$"
    | grep -E "[0-9]+[^0]$" | grep -E "[1-9][0-9]*" | grep -v -E "^0$" | grep -v -E
    "^[0-9]+0$" | grep -v -E "^[0-9]+[^0]$" | wc -l', "  declare -i counter=0\n  for\
    \ i in $1\n  do\n    if [ $i -gt 10 ]\n    then\n      if [ $((i % 10))%2 -ne\
    \ 0 ] && [ $((${i:0:1} % 2)) -ne 0 ]\n      then\n        ((counter++))\n    \
    \  fi\n    fi\n  done\n  echo $counter", "    input=($@)\n    count=0\n    for\
    \ i in ${input[@]}; do\n        if [[ ${i:0:1} =~ [13579] && ${i: -1} =~ [13579]\
    \ && $i -gt 10 ]]; then\n            ((count++))\n        fi\n    done\n    echo\
    \ $count", "\tcount=0\n\tfor i in $@; do\n\t\t# Check to see if number is greater\
    \ than 10\n\t\tif [ $i -gt 10 ]; then\n\t\t\t# Check to see if first digit is\
    \ odd\n\t\t\tfirstDigit=${i:0:1}\n\t\t\tif [ $((firstDigit%2)) -ne 0 ]; then\n\
    \t\t\t\t# Check to see if last digit is odd\n\t\t\t\tlastDigit=${i: -1}\n\t\t\t\
    \tif [ $((lastDigit%2)) -ne 0 ]; then\n\t\t\t\t\tcount=$((count+1))\n\t\t\t\t\
    fi\n\t\t\tfi\n\t\tfi\n\tdone\n\techo $count", "  count=0\n  for i in $1; do\n\
    \    if [[ $i -gt 10 ]]; then\n      if [[ $(($i % 2)) -eq 1 ]]; then\n      \
    \  if [[ $((${i:0:1} % 2)) -eq 1 ]]; then\n          count=$(($count + 1))\n \
    \       fi\n      fi\n    fi\n  done\n  echo $count", "    count=0\n    for i\
    \ in $1\n    do\n        if [[ $i -gt 10 ]]\n        then\n            if [[ ${i:0:1}%2\
    \ -ne 0 ]]\n            then\n                if [[ ${i:${#i}-1:1}%2 -ne 0 ]]\n\
    \                then\n                    count=$((count+1))\n              \
    \  fi\n            fi\n        fi\n    done\n    echo $count", "\techo \"$1\"\
    \ | tr ' ' '\\n' |\n\tgrep '[13579].' |\n\tgrep '\\.[13579]' |\n\twc -l", "  #\
    \ For example, the following line reads the first element of the space-separated\
    \ list\n  # local firstElement=$(echo $1 | cut -d' ' -f1)\n  #\n  # YOUR CODE\
    \ GOES HERE\n  local count=0\n\n  for i in $1; do\n    if [ $i -gt 10 ]; then\n\
    \      if [ $(($(($i/10))%2)) -ne 0 ]; then\n        if [ $(($i%2)) -ne 0 ]; then\n\
    \          count=$(($count+1))\n        fi\n      fi\n    fi\n  done\n\n  echo\
    \ $count", "    IFS=\" \" read -r -a array <<< \"$1\"\n\n    count=0\n    for\
    \ value in \"${array[@]}\"; do\n        first_digit=$(echo \"$value\" | cut -c\
    \ 1)\n        last_digit=$(echo \"$value\" | tail -c 2)\n        if [ $value -gt\
    \ 10 ] && [ $first_digit -gt 0 ] && [ $last_digit -gt 0 ] && \\\n            [\
    \ $(($first_digit % 2)) == 1 ] && [ $(($last_digit % 2)) == 1 ]; then\n      \
    \      count=$((count + 1))\n        fi\n    done\n\n    echo \"$count\"", " \
    \   local arr=(\"$@\")\n    local i=0\n    local num=0\n    local sum=0\n    local\
    \ firstDigit=0\n    local lastDigit=0\n    while [ $i -lt ${#arr[@]} ]; do\n \
    \       num=${arr[$i]}\n        firstDigit=$(echo \"$num\" | cut -c 1)\n     \
    \   lastDigit=$(echo \"$num\" | cut -c $((${#num})))\n        if [[ ${firstDigit}\
    \ =~ ^[13579]$ ]] && \\\n           [[ ${lastDigit} =~ ^[13579]$ ]] && \\\n  \
    \         [[ ${num} -gt 10 ]]; then\n            sum=$((sum + 1))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo ${sum}", "    # Put your code here:\n\
    \    n=0\n    for i in $1; do\n        if [ $(echo $i | cut -c1) -eq $(echo $i\
    \ | cut -c${#i}) ]; then\n            if [ $(( $(echo $i | cut -c1) % 2 )) -eq\
    \ 1 ]; then\n                if [ $i -gt 10 ]; then\n                    n=$((n+1))\n\
    \                fi\n            fi\n        fi\n    done\n    echo $n", "\techo\
    \ $1 | awk '{\n\t  for (i=1; i<=NF; i++) {\n\t    if (length($i) > 1 &&\n\t  \
    \      substr($i, 1, 1)%2 == 1 &&\n\t        substr($i, length($i), 1)%2 == 1\
    \ &&\n\t        $i > 10) {\n\t      count++;\n\t    }\n\t  }\n\t  print count;\n\
    \t}'", "    local nums=($1)\n    local count=0\n    for num in ${nums[@]}; do\n\
    \        if [[ \"${num:0:1}\" -gt 1 && \"${num:0:1}\" -lt 9 && \"${num: -1}\"\
    \ -gt 1 && \"${num: -1}\" -lt 9 ]]; then\n            count=$((count + 1))\n \
    \       fi\n    done\n    echo $count", "    function f {\n        local count=0\n\
    \        for i in $@; do\n            if [ $i -gt 10 ] && (( $i % 2 == 1 )) &&\
    \ (( ($i / 10) % 2 == 1 )); then\n                count=$(( count + 1 ))\n   \
    \         fi\n        done\n        echo $count\n    }\n    f $@", "  local counter=0\n\
    \  for number in $1\n  do\n    # check if $number is greater than 10\n    if [[\
    \ $number -gt 10 ]]\n    then\n      # check if first digit is odd\n      if [[\
    \ $(echo \"$number/10\" | bc)%2 != 0 ]]\n      then\n        # check if last digit\
    \ is odd\n        if [[ $number%2 != 0 ]]\n        then\n          counter=$((counter+1))\n\
    \        fi\n      fi\n    fi\n  done\n  echo $counter", "    set -f         \
    \             # avoid globbing (expansion of *).\n    array=($1)\n    set +f\n\
    \    count=0\n\n    for i in \"${array[@]}\"\n    do\n        # do not change\
    \ the test line below\n        if (( (i > 10) && ((i / 10) % 2 != 0) && (i % 2\
    \ != 0) )); then\n            count=$((count + 1))\n        fi\n    done\n\n \
    \   echo $count", "    count=0\n    for num in $1; do\n        # If the number\
    \ has at least two digits, extract both digits and compare them\n        if [\
    \ ${#num} -gt 1 ]; then\n            first_digit=${num:0:1}\n            last_digit=${num:\
    \ -1}\n            if [[ \"$first_digit\" == \"1\" || \"$first_digit\" == \"3\"\
    \ || \"$first_digit\" == \"5\" || \"$first_digit\" == \"7\" || \"$first_digit\"\
    \ == \"9\" ]] &&\n                [[ \"$last_digit\" == \"1\" || \"$last_digit\"\
    \ == \"3\" || \"$last_digit\" == \"5\" || \"$last_digit\" == \"7\" || \"$last_digit\"\
    \ == \"9\" ]]; then\n                if [ $num -gt 10 ]; then\n              \
    \      count=$((count + 1))\n                fi\n            fi\n        fi\n\
    \    done\n    echo $count", "    list=($1)\n    count=0\n    for n in ${list[@]};\
    \ do\n        if [[ ${n:0:1}%2 == 1 && ${n:(-1)}%2 == 1 && n -gt 10 ]]; then\n\
    \            count=$(($count+1))\n        fi\n    done\n    echo $count", "\t\
    # DEFINE ARRAY\n\tdeclare -a number\n\t\n\t# SPLIT ARGUMENTS\n\tIFS=' ' read -r\
    \ -a number <<< \"$1\"\n\t# echo \"${number[@]}\"\n\n\t# GET FIRST AND LAST ELEMENT\
    \ OF EACH NUMBER\n\tfor (( i=0; i<${#number[@]}; i++ )); do\n\t\tfirst=${number[$i]:0:1}\n\
    \t\tlast=${number[$i]:(-1)}\n\t\t# IF NUMBER HAS MORE THAN ONE DIGIT\n\t\tif [\
    \ \"${#number[$i]}\" -gt 1 ]; then\n\t\t\t# CHECK IF GREATER THAN 10 AND LAST\
    \ DIGIT IS ODD\n\t\t\tif [ \"${number[$i]}\" -gt 10 ] && [ \"$last\" != '0' ]\
    \ && [ \"$last\" != '2' ] && [ \"$last\" != '4' ] && [ \"$last\" != '6' ] && [\
    \ \"$last\" != '8' ]; then\n\t\t\t\t# CHECK IF FIRST DIGIT IS ODD\n\t\t\t\tif\
    \ [ \"$first\" != '0' ] && [ \"$first\" != '2' ] && [ \"$first\" != '4' ] && [\
    \ \"$first\" != '6' ] && [ \"$first\" != '8' ]; then\n\t\t\t\t\tcount=$((count+1))\n\
    \t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\tdone\n\techo \"$count\"", "\tlocal ret=0\n\tfor\
    \ num in $1\n\tdo\n\t\tif [ ${num} -gt 10 ]\n\t\tthen\n\t\t\tlocal n1=$(echo ${num}\
    \ | cut -c 1)\n\t\t\tlocal n2=$(echo ${num} | cut -c $((${#num}-1)))\n\t\t\tif\
    \ [[ $((n1 % 2)) == 1 && $((n2 % 2)) == 1 ]]\n\t\t\tthen\n\t\t\t\tret=$((ret+1))\n\
    \t\t\tfi\n\t\tfi\n\tdone\n\techo ${ret}", "\techo \"$1\" | tr ' ' '\\n' | grep\
    \ -E '^[13579]\\d+[13579]$' | grep -E '.*[13579]$' | wc -l", '  # TODO: Implementation
    of the function', '  # your code here', "  local number\n  local count=0\n  for\
    \ number in $@; do\n    # When bash evaluates [], the spaces in the string are\
    \ significant. \n    # If you want to include spaces in the test string, you must\
    \ quote the \n    # expression.\n    # Check if the number is greater than 10\n\
    \    if [[ \"$number\" -gt 10 ]]; then\n      # Get the first digit\n      if\
    \ [[ \"${number:0:1}\" -eq 1 ]] || [[ \"${number:0:1}\" -eq 3 ]] || \\\n     \
    \   [[ \"${number:0:1}\" -eq 5 ]] || [[ \"${number:0:1}\" -eq 7 ]] || \\\n   \
    \     [[ \"${number:0:1}\" -eq 9 ]]; then\n        # Get the last digit\n    \
    \    if [[ \"${number: -1}\" -eq 1 ]] || [[ \"${number: -1}\" -eq 3 ]] || \\\n\
    \          [[ \"${number: -1}\" -eq 5 ]] || [[ \"${number: -1}\" -eq 7 ]] || \\\
    \n          [[ \"${number: -1}\" -eq 9 ]]; then\n          count=$((count + 1))\n\
    \        fi\n      fi\n    fi\n  done\n  echo \"$count\"", "    local  __resultvar=$1\n\
    \    local  string=$2\n    local  i\n    local  count=0\n    local  char\n\n \
    \   IFS=' ' read -r -a intArray <<< \"$string\"\n    for i in \"${intArray[@]}\"\
    \n    do\n        local char=${i:0:1}\n        if [ $char -gt 1 ] && [ $char -lt\
    \ 9 ] && [ $(($i%2)) -ne 0 ]; then\n            local char=${i:(-1)}\n       \
    \     if [ $char -gt 1 ] && [ $char -lt 9 ] && [ $(($i%2)) -ne 0 ]; then\n   \
    \             local count=$((count+1))\n            fi\n        fi\n    done\n\
    \    eval $__resultvar=\"'$count'\"", "    local numbers=($1)\n    local arrayLength=${#numbers[@]}\n\
    \    local counter=0\n    for ((i=0; i<arrayLength; i++)); do\n        if [[ ${numbers[$i]}\
    \ -gt 10 ]]; then\n            local firstDigit=${numbers[$i]:0:1}\n         \
    \   local lastDigit=${numbers[$i]:(-1)}\n            if [[ $firstDigit%2 -ne 0\
    \ && $lastDigit%2 -ne 0 ]]; then\n                counter=$((counter+1))\n   \
    \         fi\n        fi\n    done\n    echo $counter", "    IFS=\" \" read -r\
    \ -a arr <<< $1\n    result=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n      \
    \  a=${arr[$i]}\n        [ \"${a:0:1}\" -eq \"${a:0:1}\" ] 2>/dev/null && [ \"\
    ${a:(-1)}\" -eq \"${a:(-1)}\" ] 2>/dev/null || continue\n        if [ \"$a\" -gt\
    \ 10 ]; then\n            ((result++))\n        fi\n    done\n    echo $result",
  "\t# Count the number of elements in the array\n\tlocal num_elements=\"$(echo \"\
    $1\" | wc -w)\"\n\t# Initialize an array\n\tlocal arr=()\n\t# Iterate over the\
    \ array, checking for the conditions specified above\n\tfor ((i=1; i<=$num_elements;\
    \ i++)); do\n\t\t# Get each element of the array and put it in a variable\n\t\t\
    local current_element=\"$(echo \"$1\" | cut -d \" \" -f $i)\"\n\t\t# Check if\
    \ the first digit of the element is odd\n\t\tif [[ $current_element =~ ^[13579].*\
    \ ]]; then\n\t\t\t# Check if the last digit of the element is odd\n\t\t\tif [[\
    \ $current_element =~ .*[13579]$ ]]; then\n\t\t\t\t# Check if the element is greater\
    \ than 10\n\t\t\t\tif [[ $current_element -gt 10 ]]; then\n\t\t\t\t\t# If the\
    \ conditions are met, add the element to the array\n\t\t\t\t\tarr+=(\"$current_element\"\
    )\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\tdone\n\t# Count the number of elements in the\
    \ new array and print it\n\techo \"${#arr[@]}\"", "\tlocal counter=0\n\tfor elem\
    \ in $1; do\n\t\tif (($elem > 10)) && (($elem % 2 == 1)) && ((${elem:0:1} % 2\
    \ == 1)) && ((${elem:${#elem}-1:1} % 2 == 1)); then\n\t\t\tcounter=$((counter\
    \ + 1))\n\t\tfi\n\tdone\n\techo $counter", "  local filt=\"$1\"\n  local test=$(echo\
    \ $filt | awk '{print $1}')\n  local func=\"BEGIN {\n    count=0\n  }\n  {\n \
    \   if (\\$1 > 10) {\n      i=length(\\$1)\n      if (substr(\\$1, 1, 1) % 2 !=\
    \ 0 && substr(\\$1, i, 1) % 2 != 0) {\n        count++\n      }\n    }\n  }\n\
    \  END {\n    print count\n  }\"\n  echo \"$filt\" | awk \"$func\"", "  max=10\n\
    \  filtered=$(echo $1 | tr \" \" \"\\n\" | grep -E \"^[13579]{1}[0-9]*[13579]{1}$\"\
    \ | grep -E \"[0-9]*[0-9]{1}[0-9]*\" | tr \"\\n\" \" \")\n  echo $filtered", "\t\
    local input=$1\n\tlocal n=0\n\tfor i in $input; do\n\t\tif [[ $i > 10 ]]; then\n\
    \t\t\tif [[ $(isOdd $(getFirstDigit $i)) == 1 ]] && [[ $(isOdd $(getLastDigit\
    \ $i)) == 1 ]]; then\n\t\t\t\tn=$(($n + 1))\n\t\t\tfi\n\t\tfi\n\tdone\n\techo\
    \ $n", "\tlocal a\n\tlocal sum=0\n\tlocal num\n\tlocal not\n\tfor a in $1\n\t\
    do\n\t\tnot=$(expr $a + 1)\n\t\tnum=$(expr substr $not 1 1)\n\t\tif [[ $a -gt\
    \ 10 && $num -eq 3 ]]\n\t\tthen\n\t\t\tsum=$(expr $sum + 1)\n\t\tfi\n\tdone\n\t\
    echo $sum", "    declare -i counter=0\n    for number in $1\n    do\n        if\
    \ (( (number > 10) && ((number%2 == 1)) && (($((number/10))%2 == 1)) )); then\n\
    \            ((counter++))\n        fi\n    done\n    echo \"$counter\"", "  \
    \  echo \"$1\" | awk 'BEGIN { OFS = \"\"; ORS = \"\" }\n        {\n          \
    \  for (i = 1; i <= NF; i++) {\n                if ($i > 10 && $i >= 10) {\n \
    \                   first = int($i / 10);\n                    last = $i % 10;\n\
    \                    if (first % 2 != 0 && last % 2 != 0)\n                  \
    \      count++;\n                }\n            }\n        }\n        END { print\
    \ count }'", "    local -a nums=( $1 )\n    local count=0\n    for (( i=0; i<${#nums[@]};\
    \ i++ )); do\n        if [[ ${nums[$i]} -gt 10 ]]; then\n            if [[ $(checkOddFirstLastDigit\
    \ ${nums[$i]}) == true ]]; then\n                (( count++ ))\n            fi\n\
    \        fi\n    done\n    echo $count", "    local counter=0\n    for i in $@\n\
    \    do\n        if [[ $i -gt 10 ]] && [[ $(($i%10))%2 -ne 0 ]] && [[ $((${i:0:1}))%2\
    \ -ne 0 ]]\n        then\n            counter=$(($counter+1))\n        fi\n  \
    \  done\n    echo $counter", "    nums=($1)\n    count=0\n    for num in ${nums[@]};\
    \ do\n        fl=${num:0:1}\n        ll=${num:${#num}-1:1}\n        if [ \"$num\"\
    \ -gt 10 ] && [ \"$fl\" -gt 0 ] && [ \"$ll\" -gt 0 ] && [ \"$((fl%2))\" -eq 1\
    \ ] && [ \"$((ll%2))\" -eq 1 ]; then\n            count=$((count+1))\n       \
    \ fi\n    done\n    echo \"$count\"", "    str=$@\n\n    # Set Internal Field\
    \ Separator to space\n    IFS=' '\n    # Convert string to array\n    arr=($str)\n\
    \    # Restore Internal Field Separator\n    unset IFS\n\n    # Number of elements\
    \ that satisfy the condition\n    count=0\n\n    for n in ${arr[@]}; do\n    \
    \    # Isolate first and last digits from the number\n        last=${n:(-1)}\n\
    \        first=${n:0:1}\n\n        # Add number to count if it satisfies the condition\n\
    \        if [ $n -gt 10 ] && [ $last -eq 1 ] || [ $last -eq 3 ] || \\\n      \
    \      [ $last -eq 5 ] || [ $last -eq 7 ] || [ $last -eq 9 ] && \\\n         \
    \   [ $first -eq 1 ] || [ $first -eq 3 ] || [ $first -eq 5 ] || \\\n         \
    \   [ $first -eq 7 ] || [ $first -eq 9 ]; then\n            ((count++))\n    \
    \    fi\n    done\n\n    echo $count", "    local sum=0\n    # TODO: Add a loop\
    \ that goes through each item in the list\n    # and adds to the sum all numbers\
    \ greater than 10 and with odd\n    # first and last digits\n\n    # Finally,\
    \ print out the sum\n    echo \"$sum\"", "\tlocal IFS=$' '\n\tlocal count=0\n\t\
    local num\n\tlocal firstdigit\n\tlocal lastdigit\n\t\n\tfor num in $1\n\tdo\n\t\
    \tfirstdigit=${num:0:1}\n\t\tlastdigit=${num: -1}\n\t\tif [[ $num -gt 10 && $firstdigit\
    \ -eq 1 || $firstdigit -eq 3 || \\\n\t\t\t$firstdigit -eq 5 || $firstdigit -eq\
    \ 7 || $firstdigit -eq 9 && \\\n\t\t\t$lastdigit -eq 1 || $lastdigit -eq 3 ||\
    \ $lastdigit -eq 5 || \\\n\t\t\t$lastdigit -eq 7 || $lastdigit -eq 9 ]]\n\t\t\
    then\n\t\t\tcount=$((count + 1))\n\t\tfi\n\tdone\n\t\n\techo $count", "  echo\
    \ $1 | tr \" \" \"\\n\" | awk '$1>10 && (($1/10)%2 == 1) && ($1%2 == 1)' | wc\
    \ -l", "    local nums=($1)\n    local count=0\n    for num in ${nums[@]}; do\n\
    \        if (( 10 < num )); then\n            local first=${num:0:1}\n       \
    \     local last=${num: -1}\n            if (( 1 == $((first % 2)) && 1 == $((last\
    \ % 2)) )); then\n                count=$((count + 1))\n            fi\n     \
    \   fi\n    done\n    echo $count", "    local array=()\n    local count=0\n \
    \   local i=0\n    for value in $1; do\n        array[$i]=$value\n        ((i++))\n\
    \    done\n    for ((i=0; i<${#array[@]}; i++)); do\n        if [ $(isOdd ${array[$i]})\
    \ -eq 1 ] && \\\n           [ $(isGreaterThanTen ${array[$i]}) -eq 1 ]; then\n\
    \            ((count++))\n        fi\n    done\n    echo $count", "    declare\
    \ -i cnt=0\n    for n in $1; do\n        if [ ${n} -gt 10 ]; then\n          \
    \  if [ $((${n} % 2)) -eq 1 ]; then\n                let cnt=cnt+1\n         \
    \   else\n                continue\n            fi\n        else\n           \
    \ continue\n        fi\n    done\n    echo ${cnt}", "    echo \"$1\" | tr ' '\
    \ '\\n' | # replace spaces with newlines\n        grep '^[^0-9]*[13579][^0-9]*$'\
    \ | # filter for lines with odd first and last digits\n        grep '^[^0-9]*[0-9]\\\
    {2,\\}[^0-9]*$' | # filter for lines with more than 2 digits\n        grep '[0-9]\\\
    {3,\\}' | # filter for lines with more than 3 digits\n        wc -l # count the\
    \ number of lines", "  local arg_arr=($1)\n  local res_arr=()\n  local num\n \
    \ for num in ${arg_arr[@]}; do\n    local first_digit=${num:0:1}\n    local last_digit=${num:\
    \ -1}\n    if [[ $first_digit -gt 10 && $last_digit -gt 10 ]]; then\n      if\
    \ [[ $first_digit%2 != 0 && $last_digit%2 != 0 ]]; then\n        res_arr+=($num)\n\
    \      fi\n    fi\n  done\n  echo ${#res_arr[@]}", "    echo $1 | tr \" \" \"\\\
    n\" | \\\n        sed '/^[^0-9]/d' | \\\n        awk '{if (10 < $1 && $1 > 99)\
    \ print}' | \\\n        sed '/^.$/d' | \\\n        sed '/^..$/d' | \\\n      \
    \  sed 's/^\\(.\\).*\\(.\\)$/\\1\\2/' | \\\n        grep '[13579]$' | grep '^[13579]'\
    \ | \\\n        wc -l", "\tlocal numbers=($1)\n\tlocal special=0\n\tfor number\
    \ in ${numbers[@]}; do\n\t\t# Exclude numbers less than 10\n\t\tif [ $number -lt\
    \ 10 ]; then\n\t\t\tcontinue\n\t\tfi\n\t\t# Exclude numbers with an even first\
    \ digit\n\t\tif [ $(($number/10)) -eq 0 ]; then\n\t\t\tfirst_digit=$number\n\t\
    \telse\n\t\t\tfirst_digit=$(($number/$((10**$((${#number}-1))))))\n\t\tfi\n\t\t\
    if [ $(($first_digit%2)) -eq 0 ]; then\n\t\t\tcontinue\n\t\tfi\n\t\t# Exclude\
    \ numbers with an even last digit\n\t\tlast_digit=$(($number%10))\n\t\tif [ $(($last_digit%2))\
    \ -eq 0 ]; then\n\t\t\tcontinue\n\t\tfi\n\t\tspecial=$(($special+1))\n\tdone\n\
    \techo $special", "    local result=0\n    for val in \"$@\"; do\n        if [[\
    \ $val -gt 10 ]] && [[ $(echo $val | cut -c1) -ne 0 ]] && [[ $(echo $val | cut\
    \ -c1) -ne 2 ]] && [[ $(echo $val | cut -c1) -ne 4 ]] && [[ $(echo $val | cut\
    \ -c1) -ne 6 ]] && [[ $(echo $val | cut -c1) -ne 8 ]] && [[ $(echo $val | cut\
    \ -c2) -ne 0 ]] && [[ $(echo $val | cut -c2) -ne 2 ]] && [[ $(echo $val | cut\
    \ -c2) -ne 4 ]] && [[ $(echo $val | cut -c2) -ne 6 ]] && [[ $(echo $val | cut\
    \ -c2) -ne 8 ]]; then\n            result=$((result+1))\n        fi\n    done\n\
    \    echo $result", "    # Use a regex match to find numbers greater than 10 and\
    \ two-digit\n    # numbers with odd first and last digits. Then count the number\n\
    \    # of matches.\n    echo \"$@\" | grep -E \"[1-9][[:digit:]]\\+|[13579][[:digit:]]\"\
    \ | wc -l", "  declare -a arr=()\n  # Get the array from space-separated list\n\
    \  for i in $1; do\n    arr+=(\"$i\")\n  done\n  # Print out the array\n  echo\
    \ \"Input array: ${arr[@]}\"\n  # Function to check whether a number is an even\
    \ or odd\n  isOdd() {\n    if (( $1%2 == 0 )); then\n      return 0\n    else\n\
    \      return 1\n    fi\n  }\n  # Function to check first and last digits of a\
    \ number is odd\n  isOddDigits() {\n    if isOdd \"$1\" && isOdd \"$2\"; then\n\
    \      return 0\n    else\n      return 1\n    fi\n  }\n  local -i count=0\n \
    \ for i in \"${arr[@]}\"; do\n    # Turn the number into an absolute value\n \
    \   if (( i < 0 )); then\n      i=\"$(( i * -1 ))\"\n    fi\n    # Compare the\
    \ number with 10 and first last digits of that number\n    if (( i > 10 )) &&\
    \ isOddDigits \"${i:0:1}\" \"${i: -1}\"; then\n      (( count++ ))\n    fi\n \
    \ done\n  echo \"Number of elements in the array greater than 10 and both \" \\\
    \n    \"first and last digits of a number are odd: $count\"", "    local NUMS=\"\
    $1\"\n    local RES=\"\"\n    for NUM in $NUMS; do\n        if [ $NUM -gt 10 ];\
    \ then\n            local LD=$(echo $NUM | tail -c 1)\n            local FD=$(echo\
    \ $NUM | head -c 1)\n            if [ $LD -ne 0 ] && [ $LD -ne 2 ] && [ $LD -ne\
    \ 4 ] && [ $LD -ne 6 ] && [ $LD -ne 8 ] && [ $FD -ne 0 ] && [ $FD -ne 2 ] && [\
    \ $FD -ne 4 ] && [ $FD -ne 6 ] && [ $FD -ne 8 ]; then\n                RES=\"\
    $RES $NUM\"\n            fi\n        fi\n    done\n    echo $RES | wc -w", " \
    \   local cnt=0\n    for n in $1\n    do\n        if [[ $n -gt 10 ]]\n       \
    \ then\n            local fd=$(echo $n | head -c 1)\n            local ld=$(echo\
    \ $n | tail -c 1)\n            if [[ $fd -gt 0 && $fd -lt 10 && $fd%2 -eq 1 ]]\n\
    \            then\n                if [[ $ld -gt 0 && $ld -lt 10 && $ld%2 -eq\
    \ 1 ]]\n                then\n                    ((cnt++))\n                fi\n\
    \            fi\n        fi\n    done\n    echo $cnt", "    # Print the number\
    \ of elements of the array that are \n    # greater than 10 and both first and\
    \ last digits of a number are odd\n    echo $1 | awk 'BEGIN { FS = \" \" }\n \
    \   {\n        split($1, array1, \"\");\n        split($2, array2, \"\");\n  \
    \      split($3, array3, \"\");\n        split($4, array4, \"\");\n        split($5,\
    \ array5, \"\");\n        counter = 0;\n        if ($1 > 10 && array1[1] % 2 ==\
    \ 1 && array1[length($1)] % 2 == 1) {\n            counter += 1;\n        }\n\
    \        if ($2 > 10 && array2[1] % 2 == 1 && array2[length($2)] % 2 == 1) {\n\
    \            counter += 1;\n        }\n        if ($3 > 10 && array3[1] % 2 ==\
    \ 1 && array3[length($3)] % 2 == 1) {\n            counter += 1;\n        }\n\
    \        if ($4 > 10 && array4[1] % 2 == 1 && array4[length($4)] % 2 == 1) {\n\
    \            counter += 1;\n        }\n        if ($5 > 10 && array5[1] % 2 ==\
    \ 1 && array5[length($5)] % 2 == 1) {\n            counter += 1;\n        }\n\
    \        print counter;\n    }'", "    list=$1\n\n    counter=0\n    # For each\
    \ number in $list:\n    for num in $list; do\n        # Check if it is greater\
    \ than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9)\n\
    \        # The following is roughly equivalent to the above sentence:\n      \
    \  if [[ $num -gt 10 && $num -ne $(echo $num | rev) && $num -gt $(echo $num |\
    \ rev) ]]; then\n            counter=$((counter + 1))\n        fi\n    done\n\n\
    \    echo $counter", "  even_nums_count=0\n  for i in $1\n  do\n    while (( $i\
    \ > 0 ))\n    do\n      first_num=$(( $i % 10 ))\n      last_num=$(( $i / 10 ))\n\
    \      if [[ $last_num -gt 10 && $first_num -gt 1 && $first_num -lt 9 ]]\n   \
    \   then\n        let even_nums_count++\n      fi\n      i=$last_num\n    done\n\
    \  done\n  echo $even_nums_count", "\t# Delete elements from array, if first or\
    \ last digit not 1, 3, 5, 7, 9\n\tinput=(${1// / })\t\t# convert 1 into a space-separated\
    \ array\n\t# echo \"${input[*]}\"\t# all elements of input\n\t# echo ${input[@]}\t\
    \t# all elements of input\n\t#echo ${#input[@]}\t\t# length of input\n\tfor ((i=0;\
    \ i<${#input[@]}; i++)); do\n\t\tlast_digit=${input[$i]: -1}\n\t\tfirst_digit=${input[$i]:0:1}\n\
    \t\tif [[ $last_digit =~ [13579] ]] && [[ $first_digit =~ [13579] ]]; then\n\t\
    \t\tif [[ ${input[$i]} -gt 10 ]]; then\n\t\t\t\tfiltered+=(${input[$i]})\n\t\t\
    \tfi\n\t\tfi\n\tdone\n\techo ${#filtered[@]}", "    special=0\n    for i in $1;\
    \ do\n        if [ $i -gt 10 ] && [ $(($i%2)) -eq 1 ] && [ $(($(($i/10))%2)) -eq\
    \ 1 ]; then\n            special=$(($special+1))\n        fi\n    done\n    echo\
    \ $special", "    declare -a array=(\"$@\")\n    count=0\n    for number in \"\
    ${array[@]}\"; do\n        if [ $number -gt 10 ] && [ $((number/10))%2 -eq 1 ]\
    \ && [ $((number%10))%2 -eq 1 ]; then\n            count=$((count+1))\n      \
    \  fi\n    done\n    echo $count", "  local args=($(echo $1))\n  cnt=0\n  for\
    \ i in ${args[@]}; do\n    if [[ $i -gt 10 ]]; then\n      first=${i:0:1}\n  \
    \    last=${i: -1}\n      if [[ $first -lt 5 && $last -lt 5 ]]; then\n       \
    \ ((cnt++))\n      fi\n    fi\n  done\n  echo $cnt", "    for num in $1; do\n\
    \        if [[ $num -gt 10 ]]; then\n            if [[ $((${num:0:1} % 2)) ==\
    \ 1 ]] && \\\n               [[ $((${num: -1} % 2)) == 1 ]]; then\n          \
    \      (( num_special++ ))\n            fi\n        fi\n    done\n    echo $num_special",
  "    local -i count=0\n    for x in $1; do\n        local -i first=${x:0:1}\n  \
    \      local -i last=${x: -1}\n        (( ${x:0:1} != 0 )) && (( ${x: -1} != 0\
    \ )) && (( x > 10 )) && (( (( first % 2 )) && (( last % 2 )) )) && (( count +=\
    \ 1 ))\n    done\n    echo $count", "    local input=\"$1\"\n    counter=0\n \
    \   for number in $input; do\n        if [[ $number -gt 10 ]]; then\n        \
    \    if [[ $number =~ ^[13579] ]]; then\n                local last_digit=${number%?}\n\
    \                if [[ $last_digit =~ [13579]$ ]]; then\n                    counter=$((counter+1))\n\
    \                fi\n            fi\n        fi\n    done\n    echo $counter",
  "    # write your code here\n    numbers=($1)\n    count=0\n    for number in ${numbers[@]};\
    \ do\n        test=${number#-}\n        if [[ $test -gt 10 ]]; then\n        \
    \    if [[ $((test % 10)) -ne 0 ]]; then\n                if [[ $((test % 2))\
    \ -ne 0 ]]; then\n                    count=$((count + 1))\n                fi\n\
    \            fi\n        fi\n    done\n    echo $count", "    local arr=$1\n \
    \   local number=0\n    for i in $arr; do\n        first_digit=${i:0:1}\n    \
    \    last_digit=${i: -1}\n        if [[ $i -gt 10 && $first_digit -gt 0 && $last_digit\
    \ -gt 0 && $((first_digit%2)) -ne 0 && $((last_digit%2)) -ne 0 ]]; then\n    \
    \        ((number++))\n        fi\n    done\n    echo $number", "\tlocal num_elements=0\n\
    \tfor number in $1; do\n\t\tif [ $number -gt 10 ] && [ $((number % 2)) -eq 1 ]\
    \ && [ $((number / 10 % 2)) -eq 1 ]; then\n\t\t\t((num_elements++))\n\t\tfi\n\t\
    done\n\techo $num_elements", "    # Replace this line with your code\n    echo\
    \ \"0\"", "\tresult=0\n\tfor n in $@; do\n\t\tlast_digit=${n: -1}\n\t\tfirst_digit=${n:0:1}\n\
    \t\tif [ $n -gt 10 ] && [ $last_digit -ne 0 ] && [ $last_digit -ne 2 ] && [ $last_digit\
    \ -ne 4 ] && [ $last_digit -ne 6 ] && [ $last_digit -ne 8 ] && [ $first_digit\
    \ -ne 0 ] && [ $first_digit -ne 2 ] && [ $first_digit -ne 4 ] && [ $first_digit\
    \ -ne 6 ] && [ $first_digit -ne 8 ]; then\n\t\t\tresult=$(($result + 1))\n\t\t\
    fi\n\tdone\n\techo $result", "  echo $1 | tr \" \" \"\\n\" | awk -F '\\n' '\n\
    \  BEGIN { \n    count = 0;\n  }\n  {\n    split($1, number, \"\");\n    if (length(number)\
    \ > 1 && $1 > 10 && (number[1] % 2 == 1) && (number[length(number)] % 2 == 1))\
    \ {\n      count += 1;\n    }\n  }\n  END {\n    print count;\n  }'", "    echo\
    \ $1 | tr \" \" \"\\n\" | while read i\n    do\n        if [[ $i -gt 10 ]] &&\
    \ \\\n            [[ $(echo $i | cut -c1) -ne 0 ]] && \\\n            [[ $(echo\
    \ $i | cut -c1) -ne 2 ]] && \\\n            [[ $(echo $i | cut -c1) -ne 4 ]] &&\
    \ \\\n            [[ $(echo $i | cut -c1) -ne 6 ]] && \\\n            [[ $(echo\
    \ $i | cut -c1) -ne 8 ]] && \\\n            [[ $(echo $i | cut -c1) -ne 10 ]]\
    \ && \\\n            [[ $(echo $i | cut -c1) -ne 12 ]] && \\\n            [[ $(echo\
    \ $i | cut -c1) -ne 14 ]] && \\\n            [[ $(echo $i | cut -c1) -ne 16 ]]\
    \ && \\\n            [[ $(echo $i | cut -c1) -ne 18 ]] && \\\n            [[ $(echo\
    \ $i | cut -c1) -ne 20 ]] && \\\n            [[ $(echo $i | cut -c1) -ne 22 ]]\
    \ && \\\n            [[ $(echo $i | cut -c1) -ne 24 ]] && \\\n            [[ $(echo\
    \ $i | cut -c1) -ne 26 ]] && \\\n            [[ $(echo $i | cut -c1) -ne 28 ]]\
    \ && \\\n            [[ $(echo $i | cut -c1) -ne 30 ]] && \\\n            [[ $(echo\
    \ $i | cut -c1) -ne 32 ]] && \\\n            [[ $(echo $i | cut -c1) -ne 34 ]]\
    \ && \\\n            [[ $(echo $i | cut -c1) -ne 36 ]] && \\\n            [[ $(echo\
    \ $i | cut -c1) -ne 38 ]] && \\\n            [[ $(echo $i | cut -c1) -ne 40 ]]\
    \ && \\\n            [[ $(echo $i | cut -c1) -ne 42 ]] && \\\n            [[ $(echo\
    \ $i | cut -c1) -ne 44 ]] && \\\n            [[ $(echo $i | cut -c1) -ne 46 ]]\
    \ && \\", "    # (1) place a space before and after each number, so that we can\
    \ easily\n    #     use awk to compare the first and last digit of each number\n\
    \    # (2) use awk to check if the first and last digit of each number is odd\n\
    \    # (3) use awk to check if the number is greater than 10\n    # (4) count\
    \ the number of lines\n    # (5) print the result\n    #\n    # \"echo -e\" is\
    \ to expand \"\\n\" in the input string to a newline character\n    # \"\\n\"\
    \ is replaced by a space character for easier manipulation\n    echo -e \"$1\"\
    \ | awk '{printf(\" %s \", $0)}' | awk '{printf(\"%s\\n\", $0);}' | awk '/^\\\
    s*[1-9]\\d*[13579]\\s*$/ {print $0}' | awk '{printf(\"%s\\n\", $0);}' | awk '{if($1\
    \ > 10) {printf(\"%s\\n\", $0);}}' | wc -l", "\tlocal foo=$(cat)\n\t#local foo=$1\n\
    \tlocal arr=()\n\tfor num in ${foo[@]}; do\n\t\tlocal fd=${num:0:1}\n\t\tlocal\
    \ ld=${num: -1}\n\t\tif [ $fd -gt 1 ] && [ $ld -gt 1 ] && [ $fd -lt 10 ] && [\
    \ $ld -lt 10 ]; then\n\t\t\tarr+=($num)\n\t\tfi\n\tdone\n\techo ${#arr[@]}", " \
    \ echo \"$1\" | tr ' ' '\\n' | awk 'BEGIN {sum=0} $1 > 10 && substr($1,1,1)%2==1\
    \ && substr($1,length($1),1)%2==1 {sum++} END {print sum}'", "    local count=0\n\
    \    for num in $1; do\n        # greater than 10\n        if [[ ${num} -gt 10\
    \ ]]; then\n            # first digit is odd\n            first=$(echo ${num}\
    \ | cut -c1)\n            if [[ ${first} -gt 0 ]] && [[ $((${first} % 2)) -eq\
    \ 1 ]]; then\n                # last digit is odd\n                last=$(echo\
    \ ${num} | cut -c3)\n                if [[ ${last} -gt 0 ]] && [[ $((${last} %\
    \ 2)) -eq 1 ]]; then\n                    (( count++ ))\n                fi\n\
    \            fi\n        fi\n    done\n    echo ${count}", '    #/ Write your
    code here', "  arr=( $1 )\n  result=0\n  for i in \"${arr[@]}\"\n  do\n    if\
    \ [ $i -gt 10 ]; then\n      if [ $((i%10)) -gt 0 ] && [ $((i%10)) -lt 8 ]; then\n\
    \        if [ $((i/10)) -gt 0 ] && [ $((i/10)) -lt 8 ]; then\n          result=$((result+1))\n\
    \        fi\n      fi\n    fi\n  done\n  echo $result", "  local numbers=($1)\n\
    \  local count=0\n  local number\n  for number in ${numbers[@]}; do\n    if ((\
    \ $number > 10 )); then\n      local first=$(echo $number | cut -c1)\n      local\
    \ last=$(echo $number | cut -c-1)\n      if (( $first % 2 == 1 && $last % 2 ==\
    \ 1 )); then\n        count=$((count + 1))\n      fi\n    fi\n  done\n  echo $count",
  "  LIST=(\"$@\")\n  COUNT=0\n  for VALUE in ${LIST[@]}; do\n    if [[ $VALUE -gt\
    \ 10 ]]; then\n      if [[ $(echo $VALUE | cut -c1)%2 -ne 0 ]] && [[ $(echo $VALUE\
    \ | cut -c${#VALUE})%2 -ne 0 ]]; then\n        COUNT=$((COUNT+1))\n      fi\n\
    \    fi\n  done\n  echo $COUNT", "    elements=0\n    for i in $@\n    do\n  \
    \      if (( $i>10 ))\n        then\n            if (( $i%2==1 ))\n          \
    \  then\n                elements=$(( $elements+1 ))\n            fi\n       \
    \ fi\n    done\n    echo $elements", "\t# write your code here", "  echo $1 |\
    \ awk '{ for (i=1; i<=NF; i++) { if ($i > 10 && (substr($i, 1, 1)%2 == 1) && (substr($i,\
    \ length($i), 1)%2 == 1)) {\n    count++;\n  }}} END {print count}'", "  # results\
    \ of awk\n  RESULTS=()\n  # loop through list of numbers\n  for i in $1; do\n\
    \    # number is greater than 10\n    if [[ $i -gt 10 ]]; then\n      # check\
    \ first digit\n      FIRST=$(echo $i | cut -c 1)\n      # check last digit\n \
    \     LAST=$(echo $i | rev | cut -c 1)\n      # both first and last digits are\
    \ odd\n      if [[ $(( $FIRST % 2 )) == 1 && $(( $LAST % 2 )) == 1 ]]; then\n\
    \        RESULTS+=($i)\n      fi\n    fi\n  done\n  # print result\n  echo ${#RESULTS[@]}",
  "    declare -i n=0\n    for i in $1; do\n        if (( i > 10 && ((i/10)%2!=0)\
    \ && (i%10)%2!=0 )); then\n            ((n++))\n        fi\n    done\n    echo\
    \ $n", "\t#TODO\n\ta=$1\n\tb=`echo $a | sed 's/ /\\n/g'`\n\tc=`echo $b | grep\
    \ -v -E \"^[0-9]*[13579][0-9]*$\"`\n\td=`echo $b | grep -v -E \"[0-9]*[13579][0-9]*$\"\
    `\n\te=`echo $b | grep -v -E \"^[0-9]*[13579][0-9]*\"`\n\tf=`echo $b | grep -v\
    \ -E \"[0-9]*[13579][0-9]*\"`\n\tg=`echo $b | grep -v -E \"^[0-9]*[13579][0-9]*$\"\
    `\n\th=`echo $b | grep -v -E \"[0-9]*[13579][0-9]*$\"`\n\ti=`echo $b | grep -v\
    \ -E \"^[0-9]*[13579][0-9]*\"`\n\tj=`echo $b | grep -v -E \"[0-9]*[13579][0-9]*\"\
    `\n\tk=`echo $b | grep -v -E \"^[0-9]*[13579][0-9]*$\"`\n\tl=`echo $b | grep -v\
    \ -E \"[0-9]*[13579][0-9]*$\"`\n\tm=`echo $b | grep -v -E \"^[0-9]*[13579][0-9]*\"\
    `\n\tn=`echo $b | grep -v -E \"[0-9]*[13579][0-9]*\"`\n\to=`echo $b | grep -v\
    \ -E \"^[0-9]*[13579][0-9]*$\"`\n\tp=`echo $b | grep -v -E \"[0-9]*[13579][0-9]*$\"\
    `\n\tq=`echo $b | grep -v -E \"^[0-9]*[13579", "  # calculate the number of elements\
    \ in the array that are \n  # greater than 10 and the both first and last digits\
    \ of a number are odd\n  local sum=0\n  for i in $1; do\n    # if first and last\
    \ digits are odd, if first and last digits > 10, if \n    # first and last digits\
    \ are positive, then sum + 1\n    if [ $(($i % 10))%2 -eq 1 ] && \\\n       [\
    \ $(($i / 10))%2 -eq 1 ] && \\\n       [ $(($i % 10)) -gt 10 ] && \\\n       [\
    \ $(($i / 10)) -gt 10 ] && \\\n       [ $(($i % 10)) -gt 0 ] && \\\n       [ $(($i\
    \ / 10)) -gt 0 ]; then\n      sum=$(($sum + 1))\n    fi\n  done\n  echo $sum",
  "    printf \"%s\\n\" $1 | tr ' ' '\\n' | grep -E '^[13579]|[13579]$' | grep -v\
    \ '[02468]' | wc -l", "    new_array=($1)\n    count=0\n    for i in ${new_array[@]};\
    \ do\n        first_digit=${i:0:1}\n        last_digit=${i: -1}\n        if [[\
    \ $i -gt 10 && $first_digit%2 -ne 0 && $last_digit%2 -ne 0 ]]; then\n        \
    \    count=$((count+1))\n        fi\n    done\n    echo $count", "\t# Your code\
    \ here\n\tfor n in $1\n\tdo\n\t\tif [[ $n -gt 10 ]] && [[ $(echo $n | cut -c1)%2\
    \ -ne 0 ]] && [[ $(echo $n | rev | cut -c1)%2 -ne 0 ]]\n\t\tthen\n\t\t\tcount=$((count+1))\n\
    \t\tfi\n\tdone\n\techo $count", "\t# the number of the elements that are greater\
    \ than 10\n\tnum_of_greater_than_10=0\n\t# the number of elements that are both\
    \ first and last digits of a number are odd\n\tnum_of_odd_first_and_last_digits=0\n\
    \tfor element in $1\n\tdo\n\t\tif [[ $element -gt 10 ]]\n\t\tthen\n\t\t\tnum_of_greater_than_10=$(($num_of_greater_than_10\
    \ + 1))\n\t\tfi\n\t\tfirst_digit=${element:0:1}\n\t\tlast_digit=${element:(-1)}\n\
    \t\tif [[ $first_digit -ge 1 && $first_digit -le 9 && $last_digit -ge 1 && $last_digit\
    \ -le 9 ]]\n\t\tthen\n\t\t\tif [[ $first_digit%2 -ne 0 && $last_digit%2 -ne 0\
    \ ]]\n\t\t\tthen\n\t\t\t\tnum_of_odd_first_and_last_digits=$(($num_of_odd_first_and_last_digits\
    \ + 1))\n\t\t\tfi\n\t\tfi\n\tdone\n\tif [[ $num_of_greater_than_10 -gt $num_of_odd_first_and_last_digits\
    \ ]]\n\tthen\n\t\techo $num_of_odd_first_and_last_digits\n\telse\n\t\techo $num_of_greater_than_10\n\
    \tfi", "    local num\n    local -i num2\n    local count=0\n    for num in $1;\
    \ do\n        num2=${num#-} # remove minus sign\n        # $num is greater than\
    \ 10 and both first and last digits are odd\n        if [[ $num -gt 10 && $num2\
    \ -gt 10 && $(($num2 % 2)) -eq 1 && $(($num2 % 10)) -eq 1 ]]; then\n         \
    \   ((count++))\n        fi\n    done\n    echo $count", "  filtered=0\n  for\
    \ number in $@; do\n    if [[ $number -gt 10 ]]; then\n      if [[ $(echo $number\
    \ | cut -c1) =~ ^[13579]$ ]]; then\n        if [[ $(echo $number | tail -c2) =~\
    \ ^[13579]$ ]]; then\n          filtered=$((filtered + 1))\n        fi\n     \
    \ fi\n    fi\n  done\n  echo $filtered", "    local result\n    # read each number\
    \ in $1 into array called myArray\n    local myArray=($1)\n    # perform operation\
    \ on each item of array\n    for i in ${myArray[@]}; do\n        # if number is\
    \ greater than 10 and number is odd\n        if [ \"$i\" -gt 10 ] && [ $(($i %\
    \ 2)) -eq 1 ]; then\n            # add 1 to result\n            result=$(($result\
    \ + 1))\n        fi\n    done\n    # finally print out result\n    echo $result",
  "\tfor num in $1; do\n\t\tfirstDigit=${num:0:1}\n\t\tlastDigit=${num: -1}\n\t\t\
    if [[ $num -gt 10 && $(($firstDigit % 2)) -eq 1 && $(($lastDigit % 2)) -eq 1 ]];\
    \ then\n\t\t\techo -e \"$num\"\n\t\tfi\n\tdone | wc -l", "    nums=\"$1\"\n  \
    \  nums=($nums)\n    count=0\n    for ((i=0; i<${#nums[@]}; i++)); do\n      \
    \  # Check if a number is greater than 10\n        if [ ${nums[$i]} -gt 10 ];\
    \ then\n            # Check if the first and last digits are odd\n           \
    \ first=${nums[$i]:0:1}\n            last=${nums[$i]: -1:1}\n            if [\
    \ $((first%2)) -ne 0 ] && [ $((last%2)) -ne 0 ]; then\n                ((count++))\n\
    \            fi\n        fi\n    done\n    echo $count", "    if [ $# -eq 0 ];\
    \ then\n        echo \"ERROR. A list of numbers should be provided\"\n       \
    \ return\n    fi\n    n=0\n    for i in $@; do\n        if [ $i -gt 10 ] && \\\
    \n            [ $(echo $i | cut -c1) -gt 1 ] && \\\n            [ $(echo $i |\
    \ cut -c1) -lt 9 ] && \\\n            [ $(echo $i | cut -c$((${#i}))) -gt 1 ]\
    \ && \\\n            [ $(echo $i | cut -c$((${#i}))) -lt 9 ]; then\n         \
    \   n=$(($n+1))\n        fi\n    done\n    echo $n", "    local IFS=\" \"\n  \
    \  local numbers=($1)\n    local count=0\n    for number in ${numbers[@]}; do\n\
    \        if [[ $number -gt 10 ]]; then\n            first_digit=${number:0:1}\n\
    \            last_digit=${number: -1}\n            if [[ $first_digit%2 -ne 0\
    \ && $last_digit%2 -ne 0 ]]; then\n                ((count++))\n            fi\n\
    \        fi\n    done\n    echo $count", "    # TODO: Write this function\n  \
    \  echo \"1\"", "\tlocal count=0;\n\t\n\tfor number in $@; do\n\t\tif [ $(($number\
    \ > 10)) -eq 1 ] && [ $(($(($number % 10)) % 2)) -eq 1 ] && [ $(($(($(($number\
    \ / 10)) % 10)) % 2)) -eq 1 ]; then\n\t\t\tcount=$(($count + 1));\n\t\tfi\n\t\
    done\n\t\n\techo $count;", "    local array=($1)\n    local num=0\n    local sum=0\n\
    \    for i in ${array[@]}; do\n        if [ $i -gt 10 ]; then\n            first=$(echo\
    \ $i | head -c 1)\n            last=$(echo $i | tail -c 1)\n            if [ $(($first%2))\
    \ -ne 0 ] && [ $(($last%2)) -ne 0 ]; then\n                let sum=sum+1\n   \
    \         fi\n        fi\n    done\n    echo $sum", "    local i n\n    for i\
    \ in $1; do\n        n=${i: -1}\n        if [[ \"${i:0:1}\" -eq 1 || \"${i:0:1}\"\
    \ -eq 3 || \"${i:0:1}\" -eq 5 || \"${i:0:1}\" -eq 7 || \"${i:0:1}\" -eq 9 ]] &&\n\
    \            [[ \"$n\" -eq 1 || \"$n\" -eq 3 || \"$n\" -eq 5 || \"$n\" -eq 7 ||\
    \ \"$n\" -eq 9 ]] &&\n            [[ \"$i\" -gt 10 ]]; then\n            echo\
    \ \"$i\"\n        fi\n    done | wc -l", "  declare -a arr\n  arr=($1)\n  echo\
    \ \"Array is ${arr[@]}\"\n  num_elements=${#arr[@]}\n  echo \"Array length is\
    \ $num_elements\"\n  count=0\n  for i in \"${arr[@]}\"\n  do\n    if [ \"$i\"\
    \ -gt 10 ] && [ $((i % 2)) -eq 1 ] && [ $((i % 10)) -eq 1 ]; then\n        ((count++))\n\
    \    fi\n  done\n  echo \"$count\"", "    # set up a counter for the amount of\
    \ elements that match our criteria\n    count=0\n    for i in $@\n    do\n   \
    \     # if the number is greater than 10\n        if [ \"$i\" -gt 10 ]\n     \
    \   then\n            # if it contains an odd digit in the first and last position\n\
    \            first=$(echo $i | cut -c1)\n            last=$(echo $i | rev | cut\
    \ -c1)\n            if [[ \"$first\" -eq 1 || \"$first\" -eq 3 || \"$first\" -eq\
    \ 5 || \"$first\" -eq 7 || \"$first\" -eq 9 ]] && [[ \"$last\" -eq 1 || \"$last\"\
    \ -eq 3 || \"$last\" -eq 5 || \"$last\" -eq 7 || \"$last\" -eq 9 ]]\n        \
    \    then\n                count=$(( $count + 1 ))\n            fi\n        fi\n\
    \    done\n    echo $count", "\techo \"${1}\" | awk 'BEGIN {\n\t\tFS = \"[ -]\"\
    \n\t\t}\n\t\t{\n\t\t\tfor (i = 1; i <= NF; i++) {\n\t\t\t\tif ($i > 10 && $i %\
    \ 2 == 1 && $i < 100) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tEND\
    \ {\n\t\t\tprint count;\n\t\t}'", "\tlocal -a array\n\tread -a array <<< \"$1\"\
    \n\t#echo ${array[*]}\n\tlocal counter=0\n\tfor element in ${array[*]}\n\tdo\n\
    \t\tif [ $element -gt 10 ] && [ $(($element % 2)) -eq 1 ]\n\t\tthen\n\t\t\tcounter=$(($counter\
    \ + 1))\n\t\tfi\n\tdone\n\techo $counter", "\techo \"$1\" | awk 'BEGIN {cnt=0}\
    \ {for (i=1; i<=NF; i++) \n\t\t\t\t  if (($i>10) && (substr($i, 1, 1)%2==1) &&\
    \ (substr($i, length($i), 1)%2==1)) cnt++;} END {print cnt}'", "\tlocal count=0\n\
    \tfor value in $1; do\n\t\techo \"Checking value $value\"\n\t\tif [ $(($value))\
    \ -gt 10 ]; then\n\t\t\tif [ $(($value%10)) -gt 1 ]; then\n\t\t\t\tif [ $(($value%2))\
    \ -eq 1 ]; then\n\t\t\t\t\techo \"OK\"\n\t\t\t\t\tcount=$(($count+1))\n\t\t\t\t\
    fi\n\t\t\tfi\n\t\tfi\n\tdone\n\techo \"$count\"", "\tdeclare -a data\n\tread -a\
    \ data <<<\"$@\"\n\t\n\tcount=0\n\tfor i in \"${data[@]}\"; do\n\t\tnum=${i#-}\n\
    \t\tif [[ $i -gt 10 && $num%2 -eq 1 && ${num: -1}%2 -eq 1 ]]; then\n\t\t\tcount=$((count+1))\n\
    \t\tfi\n\tdone\n\techo $count", "  \n  # Put your code here\n", "  local num_array\n\
    \  local -i i=0\n  local -i cnt=0\n  local -i num\n  local -i first\n  local -i\
    \ last\n  local -i digit\n  local -i pow=1\n  local -i size\n\n  num_array=($@)\n\
    \  echo \"input numbers: ${num_array[@]}\"\n  size=${#num_array[@]}\n  echo \"\
    size: $size\"\n  while ((i < size)); do\n    num=${num_array[i]}\n    if (( num\
    \ > 10 )); then\n      last=$(( num % 10 ))\n      first=$num\n      while ((\
    \ first >= 10 )); do\n        first=$(( first / 10 ))\n      done\n      if [[\
    \ (last % 2 -ne 0) && (first % 2 -ne 0) ]]; then\n        (( cnt++ ))\n      fi\n\
    \    fi\n    (( i++ ))\n  done\n  echo \"$cnt\"", "\tnums=$(echo $1 | tr ' ' '\\\
    n')\n\tfor i in $nums; do\n\t\tn1=$(echo $i | head -c 1)\n\t\tn2=$(echo $i | tail\
    \ -c 1)\n\t\tif [ $i -gt 10 ] && [ $(($n1 % 2)) -eq 1 ] && [ $(($n2 % 2)) -eq\
    \ 1 ]; then\n\t\t\techo \"$i\"\n\t\tfi\n\tdone | wc -l", "\tlocal count=0\n\t\
    for num in $1; do\n\t\tlocal numFirstDigit=$(firstDigit $num)\n\t\tlocal numLastDigit=$(lastDigit\
    \ $num)\n\t\t[ $(isOdd $numFirstDigit) -eq 1 ] && [ $(isOdd $numLastDigit) -eq\
    \ 1 ] && [ $num -gt 10 ] && ((count++))\n\tdone\n\techo $count", "    for number\
    \ in $1; do\n        if (($number > 10)); then\n            if [[ $(($number %\
    \ 2)) == 1 ]]; then\n                if [[ $(($(($number / 10)) % 2)) == 1 ]];\
    \ then\n                    count=$(($count + 1))\n                fi\n      \
    \      fi\n        fi\n    done\n    echo $count", "    array=( $1 )\n    for\
    \ i in ${array[@]}; do\n        odd_first=1\n        odd_last=1\n        if [\
    \ $(expr $i % 2) -eq 0 ]; then\n            odd_first=0\n        fi\n        if\
    \ [ $(expr ${i: -1} % 2) -eq 0 ]; then\n            odd_last=0\n        fi\n \
    \       if [ $i -gt 10 ] && [ $odd_first -eq 1 ] && [ $odd_last -eq 1 ]; then\n\
    \            count=$((count+1))\n        fi\n    done\n    echo $count", "   \
    \ list=$1\n    count=0\n    for i in $list; do\n        if [[ $i -gt 10 ]]; then\n\
    \            digit1=$(echo $i | cut -c1)\n            digit2=$(echo $i | cut -c2)\n\
    \            if [[ $digit1 -gt 9 ]]; then\n                digit1=$(echo $i |\
    \ cut -c2)\n                digit2=$(echo $i | cut -c3)\n            fi\n    \
    \        if [[ $(($digit1 % 2)) -ne 0 ]] && [[ $(($digit2 % 2)) -ne 0 ]]; then\n\
    \                count=$(($count + 1))\n            fi\n        fi\n    done\n\
    \    echo $count", "    echo \"$1\" | tr \" \" \"\\n\" | grep -E '^[13579][0-9]*[13579]$'\
    \ | wc -l", "    local myArray=($1)\n    local counter=0\n    local number\n \
    \   local firstDigit\n    local lastDigit\n    for number in ${myArray[@]}; do\n\
    \        firstDigit=${number:0:1}\n        lastDigit=${number: -1}\n        if\
    \ [[ $number -gt 10 && $(($firstDigit % 2)) -ne 0 && $(($lastDigit % 2)) -ne 0\
    \ ]]; then\n            counter=$(($counter + 1))\n        fi\n    done\n    echo\
    \ $counter", "    count=0\n    for num in $1\n    do\n        if [[ $num -gt 10\
    \ ]]\n        then\n            first=${num:0:1}\n            last=${num: -1}\n\
    \            if [[ $(($first % 2)) -eq 1 && $(($last % 2)) -eq 1 ]]\n        \
    \    then\n                ((count++))\n            fi\n        fi\n    done\n\
    \    echo $count", "\tlet count=0\n\tlet len=0\n\tfor element in $1\n\tdo\n\t\t\
    let len=$((${#element}))\n\t\tlet fd=${element:0:1}\n\t\tlet ld=${element:$len-1:1}\n\
    \t\tif [ \"${fd}\" -gt \"1\" ] && [ \"${ld}\" -gt \"1\" ] && [ \"${element}\"\
    \ -gt \"10\" ]\n\t\tthen\n\t\t\tlet count=$(($count+1))\n\t\tfi\n\tdone\n\techo\
    \ $count", '    echo "Not implemented"', "  local arr=($1)\n  local count=0\n\
    \  for i in ${arr[@]}; do\n    if [[ $i -gt 10 ]]; then\n      firstDigit=${i:0:1}\n\
    \      lastDigit=${i:${#i}-1:1}\n      if [[ $firstDigit -gt 0 && $lastDigit -gt\
    \ 0 ]]; then\n        if [[ $((firstDigit % 2)) -eq 1 && $((lastDigit % 2)) -eq\
    \ 1 ]]; then\n          (( count++ ))\n        fi\n      fi\n    fi\n  done\n\
    \  echo $count", "    printf \"%s\\n\" $1 | awk '{\n        for (i = 1; i <= NF;\
    \ i++) {\n            if ($i > 10 && (($i % 2 == 1 && $i / 10 % 2 == 1) || ($i\
    \ % 2 == 1 && $i / 10 == 0)))\n                count++;\n        }\n        print\
    \ count;\n    }'"]
stop_tokens:
- "\n}"
