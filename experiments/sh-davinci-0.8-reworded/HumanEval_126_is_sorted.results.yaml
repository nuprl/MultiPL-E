language: sh
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\t# YOUR CODE HERE\n\tlist=($1)\n\tfor((i=0;i<${#list[@]};i++))\n\
    \tdo\n\t\tif [ ${list[$i]} -lt ${list[$i-1]} ] 2>/dev/null\n\t\tthen\n\t\t\techo\
    \ \"false\"\n\t\t\texit 0\n\t\tfi\n\tdone\n\techo \"true\"\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  oldIFS=$IFS\n  IFS=' '\n  local -a sorted=($(echo -e\
    \ \"$1\" | sort -n))\n  IFS=$oldIFS\n  echo \"${sorted[@]}\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\t# set -x\n\tlocal SORTED=true\n\tlocal UNIQUE=true\n\t\
    local L\n\tlocal L1\n\tlocal L2\n\tlocal NUMS\n\t# parse the list into a space-separated\
    \ array\n\tNUMS=($1)\n\t# loop through the numbers and if any are out of order,\n\
    \t# mark the list as not sorted\n\tfor L in $(seq 1 $((${#NUMS[@]} - 1))); do\n\
    \t\tL1=$(($L - 1))\n\t\tL2=$L\n\t\t# compare 2 consecutive numbers and if out\
    \ of order,\n\t\t# mark sorted as false.\n\t\tif [[ ${NUMS[$L1]} -gt ${NUMS[$L2]}\
    \ ]]; then\n\t\t\tSORTED=false\n\t\t\tbreak\n\t\tfi\n\t\t# compare 2 consecutive\
    \ numbers to see if they are\n\t\t# identical. If they are, mark unique as false.\n\
    \t\tif [[ ${NUMS[$L1]} -eq ${NUMS[$L2]} ]]; then\n\t\t\tUNIQUE=false\n\t\tfi\n\
    \tdone\n\t# if the list is sorted, output true. Otherwise output false.\n\tif\
    \ [[ \"$SORTED\" == \"true\" && \"$UNIQUE\" == \"true\" ]]; then\n\t\techo \"\
    true\"\n\telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tcount=0\n\tlocal ary=($1)\n\n\tfor i in $(seq 0 $((${#ary[@]}\
    \ - 1))); do\n\t\tlet \"num = ary[$i]\"\n\t\tlet \"prev = ary[$i - 1]\"\n\t\t\
    if [[ -n $prev ]]; then\n\t\t\tif (( $num > $prev )); then\n\t\t\t\tlet \"count\
    \ += 1\"\n\t\t\telse\n\t\t\t\techo \"false\"\n\t\t\t\treturn\n\t\t\tfi\n\t\tfi\n\
    \tdone\n\n\tif (( $count + 1 == ${#ary[@]} )); then\n\t\techo \"true\"\n\telse\n\
    \t\techo \"false\"\n\tfi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    sorted=( $(printf \"%s\\n\" $1 | sort -nu) )\n    result=(\
    \ $(printf \"%s\\n\" $1) )\n    [ \"${result[*]}\" == \"${sorted[*]}\" ] && echo\
    \ \"true\" || echo \"false\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    result=\"true\"\n    for i in $(seq 1 $#); do\n   \
    \     for j in $(seq 1 $#); do\n            if [ $i -ne $j ] && [ ${!i} -eq ${!j}\
    \ ]; then\n                result=\"false\"\n            fi\n        done\n  \
    \  done\n    prev=$1\n    for i in $(seq 2 $#); do\n        if [ $prev -gt ${!i}\
    \ ]; then\n            result=\"false\"\n        fi\n        prev=${!i}\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  declare -a test_array\n  test_array=( $1 )\n\n  let last_element=${#test_array[@]}-1\n\
    \  for x in $(seq 0 $last_element); do\n    for y in $(seq $x $last_element);\
    \ do\n      [[ $x -ne $y ]] && [[ ${test_array[$x]} -eq ${test_array[$y]} ]] &&\
    \ return 1\n    done\n  done\n\n  let last_element=${#test_array[@]}-1\n  for\
    \ x in $(seq 0 $last_element); do\n    let next_element=$x+1\n    [[ $next_element\
    \ -le $last_element ]] && [[ ${test_array[$x]} -gt ${test_array[$next_element]}\
    \ ]] && return 1\n  done\n\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    [[ $# = 0 ]] && return 0\n    declare -A numbers\n\
    \    for ((i=1; i <= $#; i++)); do\n        num=\"${!i}\"\n        [[ ${numbers[$num]}\
    \ ]] && return 1\n        numbers[$num]=true\n    done\n    last=0\n    for num\
    \ in \"$@\"; do\n        ((num < last)) && return 1\n        last=$num\n    done\n\
    \    return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    input=$(echo $1 | tr \" \" \"\\n\")\n    for x in $input;\
    \ do\n        z=$(($z + 1))\n        if [ \"$x\" -eq \"$y\" ]; then\n        \
    \    echo \"false\"\n            return\n        fi\n        y=$x\n    done\n\
    \    echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp2epr8b5a.sh: line 28: [: : integer expression expected

    /tmp/tmp2epr8b5a.sh: line 28: [: : integer expression expected

    /tmp/tmp2epr8b5a.sh: line 28: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local temp\n  temp=$(echo \"$@\" | xargs -n1 | LC_ALL=C\
    \ sort -g -u | tr '\\n' ' ')\n  if [[ \"$@\" == \"$temp\" ]]; then\n    echo true\n\
    \  else\n    echo false\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # Your code here\n  # TODO: Return either \"true\" or\
    \ \"false\"\n  # Hint: Use \"test\" command\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsyxp07gn.sh: line 28: syntax error near unexpected token `}''

    /tmp/tmpsyxp07gn.sh: line 28: `}''

    '
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # Add code here...\n    echo \"not implemented\"\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    local numbers\n    numbers=$(echo \"$1\" | tr ' ' '\\\
    n' | sort -n | tr '\\n' ' ')\n    # echo \"$numbers\"\n    if [[ \"$1\" == \"\
    $numbers\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    if [ $# -eq 0 ]; then\n        return 0\n    fi\n \
    \   for i in \"$@\"; do\n        if [ \"$i\" -eq \"$j\" ]; then\n            echo\
    \ false\n            return 0\n        fi\n        j=$i\n    done\n    echo true\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwri_1x45.sh: line 29: [: : integer expression expected

    /tmp/tmpwri_1x45.sh: line 29: [: 1 2 3 4 5: integer expression expected

    /tmp/tmpwri_1x45.sh: line 29: [: 1 3 2 4 5: integer expression expected

    '
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    sort \"$@\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: 5: No such file or directory

    '
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  curr=$(echo $1 | cut -d' ' -f1)\n  shift\n  while [[\
    \ -n $1 ]]; do\n    prev=$curr\n    curr=$(echo $1 | cut -d' ' -f1)\n    if [[\
    \ $prev -ge $curr ]]; then\n      echo \"false\"\n      return\n    fi\n    shift\n\
    \  done\n  echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  if [ \"$1\" == \"\" ]; then\n    echo \"true\"\n    return\n\
    \  fi\n  LAST=$(echo \"$1\" | cut -d ' ' -f 1)\n  for number in $1; do\n    if\
    \ [ \"$number\" -le \"$LAST\" ]; then\n      echo \"false\"\n      return\n  \
    \  fi\n    LAST=$number\n  done\n  echo \"true\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # Convert space-separated string into an array\n  \
    \  local input=($1)\n    # Run through all numbers\n    for i in $(seq 1 $((${#input[@]}\
    \ - 1))); do\n        # Check if current number is the same as the previous one\n\
    \        if [[ ${input[$i]} -eq ${input[$(($i - 1))]} ]]; then\n            #\
    \ Return false\n            echo \"false\"\n            return\n        # If the\
    \ current number is smaller than the previous one\n        elif [[ ${input[$i]}\
    \ -lt ${input[$(($i - 1))]} ]]; then\n            # Return false\n           \
    \ echo \"false\"\n            return\n        fi\n    done\n    # Return true\n\
    \    echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # read string into array\n    arr=($1)\n    # iterate\
    \ and compare each element with the previous one\n    # using \"(( ))\" to evaluate\
    \ arithmetic comparison\n    # if any of the comparisons is greater than zero\
    \ then return false\n    # if all comparisons were zero, then we have ascending\n\
    \    for (( i=1; i<${#arr[@]}; i++ )); do\n        if (( ${arr[$i]} > ${arr[$i-1]}\
    \ )); then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # check to see if there is more than one instance of\
    \ a number in the sequence\n  if ! no_dupes $(echo $1); then\n    echo \"false\"\
    \n    return\n  fi\n\n  # convert each number in the sequence to an array and\n\
    \  # sort the array and convert it back to a sequence\n  sorted=$(echo $1 | tr\
    \ \" \" \"\\n\" | sort -n | tr \"\\n\" \" \")\n\n  # if the original sequence\
    \ is the same as the sorted sequence, it's sorted\n  if [ \"$1\" == \"$sorted\"\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9zofzxzz.sh: line 26: no_dupes: command not found

    '
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  if [[ -z \"${1// }\" ]]; then\n    echo \"false\"\n \
    \   return\n  fi\n  oldnum=0\n  for newnum in $@; do\n    if (( $newnum < $oldnum\
    \ )); then\n      echo \"false\"\n      return\n    fi\n    oldnum=$newnum\n \
    \ done\n  echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  vals=$(echo $1 | tr ' ' '\\n' | sort | tr '\\n' ' ')\n\
    \  duplicates=$(echo $vals | sed 's/ //g' | grep -o . | sort | uniq -d)\n  if\
    \ [ ${#duplicates} -gt 0 ]; then\n    echo \"false\"\n  else\n    echo \"true\"\
    \n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    if [ $# -eq 0 ]; then\n        # empty list is not\
    \ sorted\n        echo \"false\"\n        return 0\n    fi\n    if [ $# -eq 1\
    \ ]; then\n        # one element list is sorted\n        echo \"true\"\n     \
    \   return 0\n    fi\n    if [ $# -eq 2 ]; then\n        # two elements list may\
    \ be sorted\n        if [ $1 -gt $2 ]; then\n            echo \"false\"\n    \
    \    else\n            echo \"true\"\n        fi\n        return 0\n    fi\n \
    \   if [ $1 -gt $2 ]; then\n        # has at least 3 elements, and first 2 are\
    \ not ordered\n        echo \"false\"\n        return 0\n    fi\n    if [ $1 -eq\
    \ $2 ]; then\n        # first 2 elements are equal, so check the rest of the list\n\
    \        is_sorted $2 ${@:3}\n    else\n        # first 2 elements ordered, so\
    \ check the rest of the list\n        is_sorted $2 ${@:3}\n    fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tfor (( i=0; i<${#1}; i++ ))\n\tdo\n\t\t[[ ${1:$i} -gt\
    \ ${1:$(( i+1 ))} ]] && { echo false; return; }\n\tdone\n\techo true\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # TODO: Implement me!\n  # BEGIN SOLUTION\n  list=($1)\n\
    \  last=${list[0]}\n  for i in ${list[@]}; do\n    if [[ $i -le $last ]]; then\n\
    \      last=$i\n    else\n      echo \"false\"\n      return\n    fi\n  done\n\
    \  echo \"true\"\n  # END SOLUTION\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local -a arr=(\"$@\")\n  local first_num=${arr[0]}\n\
    \  local second_num=${arr[1]}\n  local sorted=1\n  if [ ${#arr[@]} -eq 1 ]; then\n\
    \    echo 'true'\n    return\n  fi\n  for ((i=0; i<${#arr[@]}; i++)); do\n   \
    \ if [ $i -eq 0 ]; then\n      continue\n    fi\n    if [ ${arr[$i]} -lt $first_num\
    \ ]; then\n      sorted=0\n      break\n    fi\n    first_num=${arr[$i]}\n  done\n\
    \  if [ $sorted -eq 1 ]; then\n    echo 'true'\n  else\n    echo 'false'\n  fi\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\t# for each space-separated value in the list\n\tfor each_number\
    \ in $1; do\n\t\t# if the number on the left is less than the number on the right\n\
    \t\tif [[ $each_number < ${1%% *} ]]; then\n\t\t\t# return false\n\t\t\techo false\n\
    \t\t\t# stop the function\n\t\t\treturn\n\t\tfi\n\t\t# keep the number on the\
    \ left\n\t\t1=${1#* }\n\tdone\n\t# if we make it through the entire list and it\
    \ is sorted, return true\n\techo true\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmparq54991.sh: line 35: 1=5: command not found

    /tmp/tmparq54991.sh: line 35: 1=2: command not found

    /tmp/tmparq54991.sh: line 35: 1=2: command not found

    /tmp/tmparq54991.sh: line 35: 1=2: command not found

    /tmp/tmparq54991.sh: line 35: 1=2: command not found

    /tmp/tmparq54991.sh: line 35: 1=2: command not found

    /tmp/tmparq54991.sh: line 35: 1=3: command not found

    /tmp/tmparq54991.sh: line 35: 1=3: command not found

    /tmp/tmparq54991.sh: line 35: 1=3: command not found

    /tmp/tmparq54991.sh: line 35: 1=3: command not found

    /tmp/tmparq54991.sh: line 35: 1=3: command not found

    '
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tres=\"true\"\n\tnums=($(echo $1 | tr \" \" \"\\n\"))\n\
    \tn=$((${#nums[@]} - 1))\n\tif [[ $n -le 0 ]]; then\n\t\tres=\"true\"\n\telse\n\
    \t\ti=0\n\t\twhile [[ $i -lt $n ]]; do\n\t\t\tif [[ ${nums[$i]} -gt ${nums[$i+1]}\
    \ ]]; then\n\t\t\t\tres=\"false\"\n\t\t\t\tbreak\n\t\t\tfi\n\t\t\ti=$(($i + 1))\n\
    \t\tdone\n\tfi\n\techo $res\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local list=$1\n  local prev=0\n  for i in $list; do\n\
    \    if [[ $i -lt $prev ]]; then\n      echo \"false\"\n      return\n    elif\
    \ [[ $i -eq $prev ]]; then\n      echo \"false\"\n      return\n    fi\n    prev=$i\n\
    \  done\n  echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # add code here\n  # 1. split the input by space\n  #\
    \ 2. shift off the first element\n  # 3. if [[ $1 -le $2 ]], then continue the\
    \ process\n  # 4. else return false\n  # 5. return true\n  inArray=($1)\n  for((i=0;i<${#inArray[@]};i++))\n\
    \  do\n    if [ $i -lt $(( ${#inArray[@]} - 1 )) ]\n    then\n      if [ ${inArray[$i]}\
    \ -gt ${inArray[$((i+1))]} ]\n      then\n        echo \"false\"\n        return\n\
    \      fi\n    fi\n  done\n  echo \"true\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tlist=( $1 )\n\tprev=${list[0]}\n\tfor n in ${list[@]:1};\
    \ do\n\t\tif [[ \"$n\" -le \"$prev\" ]]; then\n\t\t\techo \"false\"\n\t\t\treturn\n\
    \t\tfi\n\t\tprev=$n\n\tdone\n\techo \"true\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  for (( i=1; i<${#}; i++ )); do\n    if (( ${!i} < ${!(i-1)}\
    \ )); then\n      echo false\n      return\n    fi\n  done\n  echo true\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local x=0\n  local list=($1)\n  local prev=$(printf \"\
    %d\" ${list[0]})\n  while [ $x -lt ${#list[@]} ]; do\n    if [ $x -eq 0 ]; then\n\
    \      local x=$(($x + 1))\n      continue\n    fi\n    local current=$(printf\
    \ \"%d\" ${list[$x]})\n    if [ $current -lt $prev ]; then\n      echo \"false\"\
    \n      return\n    fi\n    local prev=$current\n    local x=$(($x + 1))\n  done\n\
    \  echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    echo \"$1\" | awk '{\n            for (i = 1; i <=\
    \ NF; i++) {\n                if (i != 1 && prev > $i) {\n                   \
    \ exit(1)\n                }\n                prev = $i\n            }\n     \
    \       exit(0)\n        }'\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    echo \"TODO\"\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tlocal ret=0\n\tlocal array=()\n\tIFS=' ' read -ra array\
    \ <<< \"$1\"\n\tlocal -i index\n\tfor (( index=0; index<${#array[@]}-1; index++\
    \ )); do\n\t\tif [[ ${array[$index]} -gt ${array[$index+1]} ]]; then\n\t\t\tret=1\n\
    \t\t\tbreak\n\t\tfi\n\tdone\n\tif [[ $ret -eq 0 ]]; then\n\t\techo \"true\"\n\t\
    else\n\t\techo \"false\"\n\tfi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  nums=()\n  old=9999\n  for n in $1; do\n    if [[ \"\
    $n\" -lt \"$old\" ]]; then\n      nums+=(\"$n\")\n      old=\"$n\"\n    else\n\
    \      echo \"false\"\n      return\n    fi\n  done\n  echo \"true\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # write your code here\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5sf29nc_.sh: line 26: syntax error near unexpected token `}''

    /tmp/tmp5sf29nc_.sh: line 26: `}''

    '
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    declare -A seen\n    nums=$(echo $1 | tr \" \" \"\\\
    n\")\n    for num in $nums; do\n        if [[ ${seen[$num]} ]]; then\n       \
    \     echo \"false\"\n            return\n        fi\n        seen[$num]=1\n \
    \   done\n    prev=0\n    for num in $nums; do\n        if ((num <= prev)); then\n\
    \            echo \"false\"\n            return\n        fi\n        prev=$num\n\
    \    done\n    echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local list=$1\n  local expected_next=$(echo $list | awk\
    \ '{print $1}')\n  local current=0\n  while read -r current; do\n    if [[ $current\
    \ != $expected_next ]]; then\n      echo \"false\"\n      return\n    fi\n   \
    \ expected_next=$((expected_next + 1))\n  done <<< \"$list\"\n  echo \"true\"\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local sorted_array=\n  local i=\n  local arr=($1)\n \
    \ for i in \"${arr[@]}\"; do\n    if [[ -z \"${sorted_array//[0-9]}\" ]]; then\n\
    \      sorted_array=\"$i\"\n    elif (( i < sorted_array )); then\n      printf\
    \ \"%s\\n\" \"false\"\n      return\n    elif (( i == sorted_array )); then\n\
    \      printf \"%s\\n\" \"false\"\n      return\n    else\n      sorted_array=\"\
    $i\"\n    fi\n  done\n  printf \"%s\\n\" \"true\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # Complete the function.\n  [[ \"$#\" = \"1\" ]] && [[\
    \ \"$1\" =~ ^[0-9]+( [0-9]+)*$ ]] && exit 0\n  echo \"false\"\n  exit 1\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local word=\"${@}\"\n  local list\n  local count\n  for\
    \ i in $word; do\n    list[$count]=$i\n    count=$((count+1))\n  done\n  local\
    \ is_sorted=true\n  for ((i=0; i<${#list[@]}-1; i++)); do\n    if [[ ${list[$i]}\
    \ -gt ${list[$i+1]} ]]; then\n      is_sorted=false\n      break\n    fi\n  done\n\
    \  if [[ $is_sorted == true ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local list=($1)\n  local sorted=0\n  local repeated=0\n\
    \  local i=0\n  while [ $i -lt ${#list[@]} ]\n  do\n    local j=$((i+1))\n   \
    \ while [ $j -lt ${#list[@]} ]\n    do\n      if [ ${list[$i]} -lt ${list[$j]}\
    \ ]\n      then\n        sorted=$((sorted+1))\n      fi\n      if [ ${list[$i]}\
    \ -eq ${list[$j]} ]\n      then\n        repeated=$((repeated+1))\n      fi\n\
    \      j=$((j+1))\n    done\n    i=$((i+1))\n  done\n  if [ $repeated -gt 0 ]\n\
    \  then\n    echo \"false\"\n  elif [ $sorted -eq $(((${#list[@]}-1) * (${#list[@]}-2)\
    \ / 2)) ]\n  then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # Take the argument and translate to an array\n  IFS='\
    \ ' read -r -a arr <<< \"$1\"\n  # Iterate over each element\n  for i in \"${!arr[@]}\"\
    ; do\n    # If we're on the last element, return true\n    if [ $i -eq $((${#arr[@]}\
    \ - 1)) ]; then\n      echo \"true\"\n      return\n    # If we're not on the\
    \ last element, check if we are\n    # greater than the next number\n    elif\
    \ [ \"${arr[$i]}\" -gt \"${arr[$(($i + 1))]}\" ]; then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # Remove duplicate numbers\n  list=\"$( echo \"$1\" |\
    \ tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\"\n  sorted=\"$( echo \"$list\"\
    \ | tr \" \" \"\\n\" | sort -n | tr \"\\n\" \" \")\"\n  [[ \"$list\" == \"$sorted\"\
    \ ]] && echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local index=0\n  local length=0\n  local previous=0\n\
    \  local current=0\n  for n in $1; do\n    length=$((length + 1))\n    current=$n\n\
    \    if [[ $index -ne 0 ]]; then\n      if [[ $current -lt $previous ]]; then\n\
    \        echo \"false\"\n        return\n      fi\n    fi\n    index=$((index\
    \ + 1))\n    previous=$current\n  done\n  if [[ $length -gt 1 ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\t# Strip spaces, then get all distinct numbers in the\
    \ array\n\tlocal ARRAY=$(tr ' ' '\\n' <<< $1 | sort -u)\n\t# Create a new array\
    \ which is sorted and contains no duplicates\n\t# (E.g. \"1 2 2 2 3 4\" becomes\
    \ \"1 2 3 4\")\n\t# If there are duplicates, the length of the original list\n\
    \t# and the length of the new list will not be the same.\n\tif [[ $1 != $ARRAY\
    \ ]]; then\n\t\techo \"false\"\n\telse\n\t\techo \"true\"\n\tfi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  curr_num=$(echo $1 | awk '{print $1}')\n  for num in\
    \ $1; do\n    if [[ $num -lt $curr_num ]]; then\n      echo \"false\"\n      return\n\
    \    fi\n    curr_num=$num\n  done\n  echo \"true\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tsorted_list=$(echo \"$1\" | tr \" \" \"\\n\" | sort -n\
    \ | tr \"\\n\" \" \")\n\tif [ \"$1\" == \"$sorted_list\" ]; then\n\t\techo \"\
    true\"\n\telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n   first=$(echo $1 | cut -d ' ' -f 1)\n   if [ -z \"$1\"\
    \ ] || [ -z \"$2\" ]; then\n      echo \"true\"\n   elif [ $first -eq $1 ]; then\n\
    \      echo \"false\"\n   else\n      is_sorted $1 $2\n   fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  for i in $1; do\n    for j in $1; do\n      if [ $i -lt\
    \ $j ]; then\n        sorted=false\n      fi\n    done\n  done\n  echo \"$sorted\"\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # your code here\n  arr=($1)\n  len=${#arr[@]}\n  for((i=0;i<len-1;i++))\n\
    \  do\n    if [ \"${arr[$i]}\" -ge \"${arr[$i+1]}\" ]\n    then\n      echo \"\
    false\"\n      return\n    fi\n  done\n  echo \"true\"\n}\n\ncandidate() {\n \
    \   is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # YOUR CODE HERE\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4w7f_8ht.sh: line 26: syntax error near unexpected token `}''

    /tmp/tmp4w7f_8ht.sh: line 26: `}''

    '
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # extract last two elements of list\n  test_elems=$(echo\
    \ $1 | awk '{print $(NF-1), $NF}')\n  # check if first is less than or equal to\
    \ second\n  if [[ $test_elems =~ ([[:digit:]]+)([[:space:]]+)([[:digit:]]+) ]];\
    \ then\n    first=${BASH_REMATCH[1]}\n    second=${BASH_REMATCH[3]}\n    if [[\
    \ $first -le $second ]]; then\n      # use awk to recursively call this function\
    \ on list\n      # without first element\n      echo $1 | awk '{$1=\"\"; print\
    \ $0}' | is_sorted\n    else\n      echo \"false\"\n    fi\n  else\n    echo \"\
    true\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: attempt to access field -1

    awk: cmd. line:1: (FILENAME=- FNR=1) fatal: attempt to access field -1

    awk: cmd. line:1: (FILENAME=- FNR=1) fatal: attempt to access field -1

    '
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local IFS=$' '\n  local sorted=($(echo \"$@\" | tr \"\
    \ \" \"\\n\" | sort -u | tr \"\\n\" \" \"))\n  [[ \"$@\" == \"${sorted[*]}\" ]]\
    \ && echo true || echo false\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tmax=0\n\tfor num in $1; do\n\t\t[ $num -lt $max ] &&\
    \ return 1 # not sorted\n\t\t[ $num -eq $max ] && return 1 # duplicate\n\t\tmax=$num\n\
    \tdone\n\treturn 0 # all numbers were sorted and had no duplicates\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    array=($@)\n    for i in `seq 1 $((${#array[@]} - 1))`;\
    \ do\n        if [[ ${array[$i]} -le ${array[$(($i - 1))]} ]]; then\n        \
    \    echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  n=$1\n  # Insert code here\n  nums=`echo $n | tr ' '\
    \ '\\n'`\n  for i in $nums; do\n    for j in $nums; do\n      if [ $i -lt $j ];\
    \ then\n        result=\"true\"\n      else\n        result=\"false\"\n      fi\n\
    \    done\n  done\n  echo $result\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local sorted=\"$(echo \"$1\" | sort -n)\"\n  local uniq=\"\
    $(echo \"$sorted\" | uniq)\"\n  [ \"$sorted\" = \"$uniq\" ] && echo \"true\" ||\
    \ echo \"false\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\t# TODO: implement this function\n\tlocal previous=0\n\
    \tlocal is_sorted=true\n\tfor number in $1\n\tdo\n\t\tif [ $number -le $previous\
    \ ]\n\t\tthen\n\t\t\tis_sorted=false\n\t\t\tbreak\n\t\tfi\n\t\tprevious=$number\n\
    \tdone\n\techo $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    for i in $(seq $((${#1}-1))); do\n        if [ \"${1:i:1}\"\
    \ -ge \"${1:i+1:1}\" ]; then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt7dugjby.sh: line 26: [:  : integer expression expected

    /tmp/tmpt7dugjby.sh: line 26: [:  : integer expression expected

    /tmp/tmpt7dugjby.sh: line 26: [:  : integer expression expected

    /tmp/tmpt7dugjby.sh: line 26: [:  : integer expression expected

    /tmp/tmpt7dugjby.sh: line 26: [:  : integer expression expected

    /tmp/tmpt7dugjby.sh: line 26: [:  : integer expression expected

    /tmp/tmpt7dugjby.sh: line 26: [:  : integer expression expected

    /tmp/tmpt7dugjby.sh: line 26: [: : integer expression expected

    /tmp/tmpt7dugjby.sh: line 26: [:  : integer expression expected

    /tmp/tmpt7dugjby.sh: line 26: [:  : integer expression expected

    /tmp/tmpt7dugjby.sh: line 26: [:  : integer expression expected

    /tmp/tmpt7dugjby.sh: line 26: [:  : integer expression expected

    /tmp/tmpt7dugjby.sh: line 26: [:  : integer expression expected

    /tmp/tmpt7dugjby.sh: line 26: [:  : integer expression expected

    /tmp/tmpt7dugjby.sh: line 26: [:  : integer expression expected

    /tmp/tmpt7dugjby.sh: line 26: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  arr=(\"$@\")\n  len=\"${#arr[@]}\"\n  # not sorted if\
    \ more than 1 element and first element is greater than second\n  if [[ len -gt\
    \ 1 && ${arr[0]} -gt ${arr[1]} ]]; then\n    echo \"false\"\n    return\n  fi\n\
    \  prev=${arr[0]}\n  for (( i=1; i<len; i++ )); do\n    curr=${arr[$i]}\n    if\
    \ [[ $curr -lt $prev ]]; then\n      echo \"false\"\n      return\n    fi\n  \
    \  prev=$curr\n  done\n  echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    nums=($1)\n    max=${nums[0]}\n    for i in $(seq 1\
    \ ${#nums[@]}); do\n        if [ \"${nums[$i]}\" -lt \"$max\" ]; then\n      \
    \      echo \"false\"\n            return\n        fi\n        max=${nums[$i]}\n\
    \    done\n    echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe2e8s3ck.sh: line 28: [: : integer expression expected

    /tmp/tmpe2e8s3ck.sh: line 28: [: : integer expression expected

    /tmp/tmpe2e8s3ck.sh: line 28: [: : integer expression expected

    /tmp/tmpe2e8s3ck.sh: line 28: [: : integer expression expected

    /tmp/tmpe2e8s3ck.sh: line 28: [: : integer expression expected

    /tmp/tmpe2e8s3ck.sh: line 28: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # initialize prev to 0 so it isn't undefined the first\
    \ time through\n  prev=0\n  for i in $1; do\n    # test if the current number\
    \ is less than the previous\n    if [ $i -lt $prev ]; then\n      # if so, exit\
    \ with false\n      echo \"false\"\n      return\n    fi\n    # set prev to current\
    \ number\n    prev=$i\n  done\n  # no false, return true\n  echo \"true\"\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tsorted=$(echo $1 | tr ' ' '\\n' | sort -n | tr '\\n'\
    \ ' ')\n\tif [ \"$1\" = \"$sorted\" ]; then\n\t\techo \"true\"\n\telse\n\t\techo\
    \ \"false\"\n\tfi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  list=$1\n\n  # sort the list and store it in a variable\n\
    \  # then check if the sorted version is the same as the initial list\n  if [\
    \ \"$list\" == \"$(echo \"$list\" | sort -n)\" ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # your code here\n  arr=($1)\n  for (( i=0; i<${#arr[@]}-1;\
    \ i++ )); do\n    if [[ ${arr[$i]} -gt ${arr[$i+1]} ]]; then\n      echo \"false\"\
    \n      return\n    fi\n  done\n  echo \"true\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  input=$(echo \"$1\" | tr \" \" \"\\n\")\n  count=0\n\
    \  for i in $input; do\n    new_count=$(echo \"$input\" | grep -c \"$i\")\n  \
    \  if [ $new_count -gt 1 ]; then\n      echo \"false\"\n      return\n    fi\n\
    \    if [ $count -gt 0 ] && [ $i -le $old_i ]; then\n      echo \"false\"\n  \
    \    return\n    fi\n    count=$(( $count + 1 ))\n    old_i=$i\n  done\n  echo\
    \ \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  sorted=$(echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\\
    n' ' ')\n  if [ \"$1\" = \"$sorted\" ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\t# convert to array\n\tIFS=' ' read -a arr <<< \"$1\"\n\
    \t# sort array\n\tsortedArr=($(printf '%s\\n' \"${arr[@]}\" | sort -n))\n\t# check\
    \ for duplicates\n\tfor i in \"${!arr[@]}\"; do\n\t\tfor j in \"${!arr[@]}\";\
    \ do\n\t\t\tif [[ $i != $j ]] && [[ ${arr[$i]} == ${arr[$j]} ]]; then\n\t\t\t\t\
    return 1\n\t\t\tfi\n\t\tdone\n\tdone\n\t# check if array is the same\n\t[[ \"\
    ${arr[*]}\" == \"${sortedArr[*]}\" ]]\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # test argument exists\n    if [ -z \"$1\" ]; then\n\
    \        echo \"false\"\n        return\n    fi\n\n    local input=($(echo \"\
    $1\" | tr ' ' '\\n' | sort))\n    # test only 1 number\n    if [ ${#input[@]}\
    \ -eq 1 ]; then\n        echo \"true\"\n        return\n    fi\n\n    # test each\
    \ number is in order\n    local i=0\n    while [ $i -lt $((${#input[@]} - 1))\
    \ ]; do\n        if [ ${input[$i]} -ge ${input[$(($i + 1))]} ]; then\n       \
    \     echo \"false\"\n            return\n        fi\n        ((i++))\n    done\n\
    \n    echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\t# check if there are enough numbers\n\tif [ $# -lt 1\
    \ ]; then\n\t\techo \"false\"\n\t\treturn\n\tfi\n\n\t# start with the first number\n\
    \tlargest=$1\n\tshift\n\n\t# for every number\n\tfor num in $@; do\n\t\t# if it's\
    \ greater than the largest\n\t\tif [ $num -gt $largest ]; then\n\t\t\t# update\
    \ the largest\n\t\t\tlargest=$num\n\t\telse\n\t\t\t# otherwise, it's not sorted\n\
    \t\t\techo \"false\"\n\t\t\treturn\n\t\tfi\n\tdone\n\n\t# didn't find any out\
    \ of order\n\techo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  if [ $# -ne 1 ]; then\n    echo \"usage: is_sorted <space\
    \ separated list>\"\n    return 1\n  fi\n  last=0\n  ret=true\n  for i in $1;\
    \ do\n    if [ $i -le $last ]; then\n      ret=false\n      break\n    fi\n  \
    \  last=$i\n  done\n  echo $ret\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # Your solution goes here\n  input=$1\n  store=\"\"\n\
    \  for i in ${input[@]}; do\n    num=${i}\n    len=${#store}\n    temp=0\n   \
    \ while [ $len -ne 0 ]; do\n      len=$(($len-1))\n      ((temp++))\n      c=${store:$len:1}\n\
    \      # echo $c\n      if [ $c -gt $num ]; then\n        echo \"false\"\n   \
    \     return\n      fi\n    done\n    store=\"$store$num\"\n  done\n  echo \"\
    true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tlocal is_sorted=$(echo \"$1\" | awk '{print ($1 < $2)\
    \ ? \"true\" : \"false\"}')\n\techo \"$is_sorted\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # check for empty list (empty string is not empty list)\n\
    \  if [ -z \"$1\" ]; then\n    echo \"true\"\n    return\n  fi\n\n  # convert\
    \ list to an array\n  IFS=\" \" read -a arr <<< \"$1\"\n\n  # flag for duplicate\
    \ numbers\n  duplicate_found=false\n\n  # check if list is sorted\n  for i in\
    \ $(seq 1 $((${#arr[@]} - 1))); do\n    if [ \"${arr[$(($i - 1))]}\" -gt \"${arr[$i]}\"\
    \ ]; then\n      echo \"false\"\n      return\n    fi\n    # check for duplicates\n\
    \    if [ \"${arr[$(($i - 1))]}\" -eq \"${arr[$i]}\" ]; then\n      duplicate_found=true\n\
    \    fi\n  done\n\n  # check for duplicate flag\n  if [ \"$duplicate_found\" =\
    \ true ]; then\n    echo \"false\"\n    return\n  fi\n\n  # if no duplicates or\
    \ out of order numbers found, return true\n  echo \"true\"\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tI=0\n\tcheck_dupes(){\n\t\tprev=0\n\t\tdupes=0\n\t\t\
    for item in $1; do\n\t\t\tif [ \"$item\" -eq \"$prev\" ]; then\n\t\t\t\tdupes=$((dupes+1))\n\
    \t\t\tfi\n\t\t\tprev=$item\n\t\tdone\n\t\tif [ \"$dupes\" -gt 0 ]; then\n\t\t\t\
    echo \"false\"\n\t\telse\n\t\t\techo \"true\"\n\t\tfi\n\t}\n\tcheck_sort(){\n\t\
    \twhile [ $I -lt $((${#1}-1)) ]; do\n\t\t\tif [ \"${1:$I:1}\" -ge \"${1:$(($I+1)):1}\"\
    \ ]; then\n\t\t\t\techo \"false\"\n\t\t\t\treturn\n\t\t\tfi\n\t\t\t((I++))\n\t\
    \tdone\n\t\techo \"true\"\n\t}\n\tif [ $(check_dupes \"$1\") = \"false\" ]; then\n\
    \t\techo \"false\"\n\telse\n\t\tcheck_sort \"$1\"\n\tfi\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp09bfnqof.sh: line 43: [:  : integer expression expected

    /tmp/tmp09bfnqof.sh: line 43: [:  : integer expression expected

    /tmp/tmp09bfnqof.sh: line 43: [:  : integer expression expected

    /tmp/tmp09bfnqof.sh: line 43: [:  : integer expression expected

    /tmp/tmp09bfnqof.sh: line 43: [:  : integer expression expected

    /tmp/tmp09bfnqof.sh: line 43: [:  : integer expression expected

    /tmp/tmp09bfnqof.sh: line 43: [:  : integer expression expected

    /tmp/tmp09bfnqof.sh: line 43: [:  : integer expression expected

    /tmp/tmp09bfnqof.sh: line 43: [:  : integer expression expected

    /tmp/tmp09bfnqof.sh: line 43: [:  : integer expression expected

    /tmp/tmp09bfnqof.sh: line 43: [:  : integer expression expected

    /tmp/tmp09bfnqof.sh: line 43: [:  : integer expression expected

    /tmp/tmp09bfnqof.sh: line 43: [:  : integer expression expected

    /tmp/tmp09bfnqof.sh: line 43: [:  : integer expression expected

    /tmp/tmp09bfnqof.sh: line 43: [:  : integer expression expected

    /tmp/tmp09bfnqof.sh: line 43: [:  : integer expression expected

    '
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  if [ $# -eq 0 ]; then\n    echo \"false\"\n    return\n\
    \  fi\n  # if [ $# -eq 1 ]; then\n  #   echo \"true\"\n  #   return\n  # fi\n\
    \  local is_sorted=\"true\"\n  declare -a vals\n  vals+=($1)\n  local prev=$(echo\
    \ \"${vals[0]}\")\n  for (( i=1; i<$#; i++ )); do\n    if [ \"${vals[$i]}\" -le\
    \ \"$prev\" ]; then\n      is_sorted=\"false\"\n      break\n    fi\n    prev=$(echo\
    \ \"${vals[$i]}\")\n  done\n  echo \"$is_sorted\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local num\n  local last_num\n  local sorted=true\n  for\
    \ num in $1; do\n    if [[ $num -le $last_num ]]; then\n      sorted=false\n \
    \     break\n    fi\n    last_num=$num\n  done\n  echo $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  if [ $# -eq 0 ]; then\n    echo \"true\"\n    return\n\
    \  fi\n  if [ $# -eq 1 ]; then\n    echo \"true\"\n    return\n  fi\n  local head=\"\
    $1\"\n  shift\n  local new_head=\"$1\"\n  shift\n  local tail=\"$@\"\n  if [ $head\
    \ -eq $new_head ]; then\n    echo \"false\"\n    return\n  fi\n  if [ $head -gt\
    \ $new_head ]; then\n    echo \"false\"\n    return\n  fi\n  is_sorted $new_head\
    \ $tail\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # write your solution here\n  return 0\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local list=($1)\n  local len=${#list[@]}\n  if [ \"$len\"\
    \ -le 1 ]; then\n    echo true\n    return\n  fi\n  local min=${list[0]}\n  local\
    \ max=${list[0]}\n  for i in ${list[@]}; do\n    if [ \"$i\" -lt \"$min\" ]; then\n\
    \      echo false\n      return\n    fi\n    if [ \"$i\" -gt \"$max\" ]; then\n\
    \      echo false\n      return\n    fi\n    if [ \"$i\" -eq \"$min\" ] || [ \"\
    $i\" -eq \"$max\" ]; then\n      echo false\n      return\n    fi\n  done\n  echo\
    \ true\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tlocal list=\"$1\"\n\tlocal -i dupe=0\n\tlocal -i cur=0\n\
    \tlocal -i prev=0\n\tlocal -i counter=0\n\tfor i in $list; do\n\t\tif [ $counter\
    \ -gt 0 ]; then\n\t\t\tcur=$i\n\t\t\tif [ $cur -le $prev ]; then\n\t\t\t\tdupe=1\n\
    \t\t\tfi\n\t\t\tprev=$cur\n\t\tfi\n\t\tcounter=$((counter+1))\n\tdone\n\tif [\
    \ $dupe -eq 0 ]; then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local array1=(${1})\n  for ((i=0; i<${#array1[@]}; i++));\
    \ do\n    for ((j=i+1; j<${#array1[@]}; j++)); do\n      if [[ ${array1[i]} -gt\
    \ ${array1[j]} ]]; then\n        echo \"false\"\n        return\n      fi\n  \
    \  done\n  done\n  echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # TODO: implement this method\n  IFS=$' ' read -r -a\
    \ list <<< \"$1\"\n\n  # Normalize list\n  # -------------\n  # Iterate over list\
    \ to get the min\n  min=0\n  for value in \"${list[@]}\"; do\n    if [[ $value\
    \ -lt $min ]]; then\n      min=$value\n    fi\n  done\n\n  # Subtract min value\
    \ from all elements in list\n  i=0\n  for value in \"${list[@]}\"; do\n    list[$i]=$((value\
    \ - min))\n    i=$((i + 1))\n  done\n\n  # Validate list\n  # -------------\n\
    \  length=${#list[@]}\n  i=0\n  while [[ $i -lt $length ]]; do\n    if [[ ${list[$i]}\
    \ -ne $i ]]; then\n      echo \"false\"\n      return\n    fi\n    i=$((i + 1))\n\
    \  done\n\n  echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    local len=$(echo $1 | wc -w)\n    local arr=($1)\n\
    \    for (( i=0; i<${len}-1; i++ ))\n    do\n      if [[ ${arr[$i]} -gt ${arr[$((i+1))]}\
    \ ]]\n      then\n        echo \"false\"\n        return\n      fi\n    done\n\
    \    echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  if [[ $# -eq 0 ]]; then return 1; fi\n\n  local arr=($@)\n\
    \  if [[ ${#arr[@]} -eq 1 ]]; then echo \"true\"; return 0; fi\n\n  for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n    # End of array\n    if [[ $i -eq $((${#arr[@]}\
    \ - 1)) ]]; then\n      echo \"true\"\n      return 0\n    fi\n\n    # Not sorted\n\
    \    if [[ ${arr[$i]} -gt ${arr[$(($i + 1))]} ]]; then\n      echo \"false\"\n\
    \      return 0\n    fi\n  done\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    local input_sorted=$(echo \"$1\" | tr \" \" \"\\n\"\
    \ | sort -n | tr \"\\n\" \" \")\n    if [ \"$1\" == \"$input_sorted\" ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  echo $(\n  IFS=\" \" read -a array <<< \"$1\"\n  for\
    \ i in ${!array[@]}; do\n    for j in $(seq \"$i\" $((${#array[@]} - 1))); do\n\
    \      if [[ ${array[$i]} -gt ${array[$j]} ]]; then\n        echo \"false\"\n\
    \        return\n      fi\n    done\n  done\n  echo \"true\"\n  )\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    if [ -z \"$1\" ]; then\n        echo \"true\"\n   \
    \     return\n    fi\n    sorted=$(echo \"$1\" | sort -n)\n    duplicates=$(echo\
    \ \"$sorted\" | uniq -d)\n    if [ -z \"$duplicates\" ]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  result=\"true\"\n  sorted=`echo $1 | tr ' ' '\\n' | sort\
    \ | tr '\\n' ' '`\n  if [ $1 != $sorted ]; then\n    result=\"false\"\n  fi\n\
    \  echo $result\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp1l5aqqug.sh: line 27: [: too many arguments

    /tmp/tmp1l5aqqug.sh: line 27: [: too many arguments

    '
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    local -a numbers=($1)\n    local previous=${numbers[0]}\n\
    \    local result=\"true\"\n    for number in ${numbers[@]}; do\n        if [\
    \ $number -eq $previous ]; then\n            result=\"false\"\n            break\n\
    \        elif [ $number -lt $previous ]; then\n            result=\"false\"\n\
    \            break\n        fi\n        previous=$number\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021361
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tlocal input=\"$1\"\n\tlocal input_len=0\n\tlocal i=0\n\
    \tlocal prev_num=0\n\tlocal curr_num=0\n\tlocal temp_num=0\n\tlocal is_sorted=true\n\
    \tlocal is_unique=true\n\t# find length of list\n\tfor num in $input; do\n\t\t\
    input_len=$((input_len + 1))\n\tdone\n\t# iterate through list\n\tfor ((i=0; i<input_len;\
    \ i++)); do\n\t\tcurr_num=${input%% *}\n\t\ttemp_num=$curr_num\n\t\tinput=${input#*\
    \ }\n\t\t# if current number is not bigger than previous number,\n\t\t# then it\
    \ is not sorted\n\t\tif ((temp_num < prev_num)); then\n\t\t\tis_sorted=false\n\
    \t\t\tbreak\n\t\tfi\n\t\tprev_num=$curr_num\n\tdone\n\tif [[ $is_sorted == true\
    \ ]]; then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # num_prev: the number we compared to before\n  # num_curr:\
    \ the number we are currently comparing\n  # num_next: the number we are comparing\
    \ to\n  local num_prev\n  local num_curr\n  local num_next\n  # array_nums: the\
    \ array of numbers given\n  local array_nums\n  # i: an index\n  local i\n  #\
    \ j: another index\n  local j\n  # bool_no_error: whether or not an error has\
    \ occurred\n  local bool_no_error\n\n  # Split the list into an array\n  array_nums=(\
    \ $1 )\n\n  # Set the initial number to compare to as the first number\n  num_prev=${array_nums[0]}\n\
    \n  # Set the boolean of whether or not an error has occurred to true\n  bool_no_error=true\n\
    \n  # Iterate through the rest of the array\n  for (( i=1; i<${#array_nums[@]};\
    \ i++ )); do\n    # Set the current number to the current index\n    num_curr=${array_nums[$i]}\n\
    \n    # If it is the last number in the array\n    if (( i == ${#array_nums[@]}\
    \ - 1 )); then\n      # If the current number is greater than the previous number\n\
    \      if (( num_curr > num_prev )); then\n        # Skip to the next index\n\
    \        continue\n      # Otherwise\n      else\n        # We have found an error\n\
    \        bool_no_error=false\n        # Break out of the loop\n        break\n\
    \      fi\n    # Otherwise\n    else\n      # Set the next number as the next\
    \ index\n      num_next=${array_nums[$(( i + 1 ))]}\n\n      # If the current\
    \ number is equal to the next number\n      if (( num_curr == num_next )); then\n\
    \        # We have found an error\n        bool_no_error=false\n        # Break\
    \ out of the loop\n        break\n      # Otherwise\n      else\n        # If\
    \ the current number is greater than the previous number and\n        # the current\
    \ number is greater than the next number\n        if (( num_curr > num_prev &&\
    \ num_curr > num_next\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn5nswpyw.sh: line 82: unexpected EOF while looking for matching
    `)''

    /tmp/tmpn5nswpyw.sh: line 107: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  check_sorted=$(echo $1 | sort -n -u | tr ' ' '\\n' |\
    \ sort -n -u | tr '\\n' ' ' | sed 's/ $//')\n  if [ \"$1\" == \"$check_sorted\"\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # create a list of duplicates\n  # then check if duplicate\
    \ list is empty\n  # if it's empty, then the list is sorted.\n  local num_list=\"\
    $1\"\n  local num_list_array=($num_list)\n  local dup_list=()\n  local dup_list_array=()\n\
    \  local num=0\n  local dup_cnt=0\n  local idx=0\n  local sorted=\"true\"\n\n\
    \  for ((i=0; i<${#num_list_array[@]}; i++))\n  do\n    num=${num_list_array[$i]}\n\
    \    dup_cnt=0\n    for ((j=0; j<${#num_list_array[@]}; j++))\n    do\n      if\
    \ [[ \"$num\" == \"${num_list_array[$j]}\" ]]\n      then\n        ((dup_cnt++))\n\
    \      fi\n    done\n    if [[ $dup_cnt -ge 2 ]]\n    then\n      dup_list+=(\"\
    $num\")\n    fi\n  done\n\n  if [[ ${#dup_list[@]} -gt 0 ]]\n  then\n    echo\
    \ \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # Write your code here\n    list=$@\n    len=${#list[@]}\n\
    \    counter=0\n    for i in $list\n    do\n        for j in $list\n        do\n\
    \            if [[ $i -eq $j ]]\n            then\n                counter=$(($counter+1))\n\
    \            fi\n        done\n        if [[ $counter -gt 1 ]]\n        then\n\
    \            echo \"false\"\n            exit 0\n        fi\n        counter=0\n\
    \    done\n    sorted=$(echo $list | awk 'BEGIN{RS=\" \"}{print}' | sort -n |\
    \ awk 'BEGIN{ORS=\" \"}{print}')\n    if [[ $list == $sorted ]]\n    then\n  \
    \      echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  if [[ $# -eq 0 ]]; then\n    echo \"No args passed\"\n\
    \    exit 1\n  fi\n  local input=(\"$@\")\n  local previous=${input[0]}\n  local\
    \ current\n  for((i=1; i<${#input[@]}; i++)); do\n    current=${input[$i]}\n \
    \   # echo \"prev: $previous, curr: $current\"\n    if (( $previous >= $current\
    \ )); then\n      echo \"false\"\n      return\n    fi\n    previous=$current\n\
    \  done\n  echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    local list=$(echo \"$1\" | tr \" \" \"\\n\" | sort\
    \ | tr \"\\n\" \" \")\n    list=$(echo \"$list\" | tr \" \" \"\\n\")\n    local\
    \ old=\"\"\n    local next=\"\"\n    for i in $list; do\n        if [ \"$old\"\
    \ != \"\" ]; then\n            if [ \"$old\" -eq \"$next\" ]; then\n         \
    \       echo \"false\"\n                return\n            fi\n        fi\n \
    \       old=$next\n        next=$i\n    done\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\t# First, remove the spaces using tr,\n\t# then sort the\
    \ numbers using the sort tool,\n\t# then remove any duplicates using the uniq\
    \ tool,\n\t# and return true if there are the same amount\n\t# of numbers in the\
    \ list, false otherwise.\n\t#\n\t# Use tr to remove the spaces\n\t# Use sort to\
    \ sort the numbers in ascending order\n\t# Use uniq to remove duplicates\n\t#\
    \ Compare the length of the two lists to see if they are the same\n\tif [[ \"\
    $(echo \"$1\" | tr -d ' ' | sort | uniq | wc -l)\" -eq \"$(echo \"$1\" | wc -w)\"\
    \ ]]; then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # Sort the list\n    sorted=$(echo \"$1\" | tr ' '\
    \ '\\n' | sort -n | tr '\\n' ' ')\n    # \"uniq -u\" strips the list of duplicates\n\
    \    # if there is a duplicate it will return an empty string\n    # which will\
    \ \"test\" to false\n    test \"$sorted\" = \"$1\" && test \"$(echo \"$1\" | tr\
    \ ' ' '\\n' | uniq -u)\" != \"\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    local nums=($1) # split the space-separated string\
    \ into an array\n\n    # test to see if any numbers appear twice\n    local result=$(echo\
    \ \"${nums[@]}\" | tr ' ' '\\n' | sort | uniq -d)\n    if [[ -n \"$result\" ]];\
    \ then\n        # there are duplicate numbers\n        echo \"false\"\n      \
    \  return\n    fi\n\n    # test to see if all numbers are ascending\n    if [[\
    \ \"${nums[*]}\" == $(echo \"${nums[*]}\" | tr ' ' '\\n' | sort -nu) ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local nums=( $1 )\n  local prev_num=${nums[0]}\n  local\
    \ num_count=${#nums[@]}\n  local num_count_incr=${#nums[@]}\n\n  for num in \"\
    ${nums[@]:1}\"; do\n    if [[ $num -eq $prev_num ]]; then\n      num_count_incr=$((num_count_incr-1))\n\
    \    fi\n    if [[ $num -lt $prev_num ]]; then\n      echo \"false\"\n      return\n\
    \    fi\n    prev_num=$num\n  done\n\n  # Check for duplicates\n  if [[ $num_count_incr\
    \ -lt $num_count ]]; then\n    echo \"false\"\n    return\n  fi\n\n  echo \"true\"\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local lst=($1)\n  local numbers=${#lst[@]}\n  local sorted=$(echo\
    \ ${lst[@]} | tr ' ' '\\n' | sort -g | tr '\\n' ' ')\n  if [[ $1 = \"$sorted\"\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local list=$1\n  local sorted=$(echo $list | tr ' ' '\\\
    n' | sort -n | tr '\\n' ' ')\n  local uniq=$(echo $sorted | tr ' ' '\\n' | uniq\
    \ -u | tr '\\n' ' ')\n  local sorted_uniq=$(echo $uniq | tr ' ' '\\n' | sort -n\
    \ | tr '\\n' ' ')\n  if [ \"$list\" = \"$sorted_uniq\" ]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    output=$(echo \"$1\" | tr \" \" \"\\n\" | sort -n |\
    \ tr \"\\n\" \" \")\n    if [ \"$1\" = \"$output\" ]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # Store list in an array\n    read -a arr <<< \"$1\"\
    \n    # Check to see if the current value is not less than the previous\n    #\
    \ value. If it is not, then \"false\" is returned; otherwise, \"true\"\n    #\
    \ is returned if we get through the whole array.\n    for i in \"${!arr[@]}\"\
    ; do\n        if [ $i -gt 0 ] && [ ${arr[$i]} -lt ${arr[$i-1]} ]; then\n     \
    \       echo \"false\"\n            exit 0\n        fi\n    done\n    echo \"\
    true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  seq -f \"$1\" -s \" \" | sort -C; echo $?\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'seq: missing operand

    Try ''seq --help'' for more information.

    '
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # TODO\n  return 0\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    local list=\"$1\"\n\n    # For example, if list=\"\
    1 2 3 4 5\", list=\"1 2 3 4 5\"\n    # and last_number=5\n    local list=\"$1\"\
    \n    local last_number=\"$1\"\n\n    # For example, if list=\"1 2 3 4 5\", then\
    \ IFS=\" \" (default)\n    # the loop body will execute 5 times, with number=1,\
    \ number=2,\n    # number=3, number=4, and number=5\n    #\n    # If list=\"1\
    \ 2 2 2 3 4\", then IFS=\" \" (default)\n    # the loop body will execute 6 times,\
    \ with number=1, number=2,\n    # number=2, number=2, number=3, and number=4\n\
    \    local IFS=\" \"\n    for number in $list; do\n        # If the last number\
    \ was > number, then list was\n        # not sorted, so return false\n       \
    \ if [[ $last_number -gt $number ]]; then\n            echo \"false\"\n      \
    \      return\n        fi\n\n        # Otherwise, update last_number and continue\
    \ through\n        # the for loop, checking that each subsequent number\n    \
    \    # is >= the previous number\n        last_number=\"$number\"\n    done\n\n\
    \    # If we made it through the for loop without returning false,\n    # then\
    \ the list was sorted, so return true\n    echo \"true\"\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjy5ix2k7.sh: line 43: [[: 1 2 3 4 5: syntax error in expression
    (error token is "2 3 4 5")

    /tmp/tmpjy5ix2k7.sh: line 43: [[: 1 3 2 4 5: syntax error in expression (error
    token is "3 2 4 5")

    /tmp/tmpjy5ix2k7.sh: line 43: [[: 1 2 3 4 5 6: syntax error in expression (error
    token is "2 3 4 5 6")

    /tmp/tmpjy5ix2k7.sh: line 43: [[: 1 2 3 4 5 6 7: syntax error in expression (error
    token is "2 3 4 5 6 7")

    /tmp/tmpjy5ix2k7.sh: line 43: [[: 1 3 2 4 5 6 7: syntax error in expression (error
    token is "3 2 4 5 6 7")

    /tmp/tmpjy5ix2k7.sh: line 43: [[: 3 2 1: syntax error in expression (error token
    is "2 1")

    /tmp/tmpjy5ix2k7.sh: line 43: [[: 1 2 2 2 3 4: syntax error in expression (error
    token is "2 2 2 3 4")

    '
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  if [ $# -lt 1 ]; then\n    echo \"false\"\n    return\
    \ 1\n  fi\n  if [ $# -eq 1 ]; then\n    echo \"true\"\n    return 0\n  fi\n  local\
    \ lst=(\"$@\")\n  local last=$((${#lst[@]} - 1))\n  for (( i = 0; i < last; i++\
    \ )); do\n    for (( j = $((i + 1)); j <= last; j++ )); do\n      if [ ${lst[$i]}\
    \ -eq ${lst[$j]} ]; then\n        echo \"false\"\n        return 1\n      fi\n\
    \      if [ ${lst[$i]} -gt ${lst[$j]} ]; then\n        echo \"false\"\n      \
    \  return 1\n      fi\n    done\n  done\n  echo \"true\"\n  return 0\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # Your code here\n  echo \"Your code here\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local count=0\n  local temp=0\n  local sorted=true\n\
    \  for num in $1; do\n    if [ \"$count\" -eq 0 ]; then\n      temp=$num\n   \
    \ else\n      if [ \"$num\" -lt \"$temp\" ]; then\n        sorted=false\n    \
    \  fi\n      temp=$num\n    fi\n    ((count++))\n  done\n  echo \"$sorted\"\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    prev=$(echo $1 | awk '{print $1}')\n    for i in $1;\
    \ do\n        if [ \"$i\" != \"$prev\" ]; then\n            if [ \"$i\" -lt \"\
    $prev\" ]; then\n                return 1\n            fi\n        fi\n      \
    \  prev=$i\n    done\n    return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local IFS=$' '\n  local prev=\n  local curr=\n  for num\
    \ in $1; do\n    if [ -z \"$prev\" ]; then\n      prev=$num\n      continue\n\
    \    else\n      curr=$num\n    fi\n    if [ $prev -ge $curr ]; then\n      echo\
    \ \"false\"\n      return\n    fi\n    prev=$curr\n  done\n  echo \"true\"\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # Your code here\n    python is_sorted.py $1\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'python: can''t open file ''is_sorted.py'': [Errno 2] No such file or directory

    '
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  declare -a arr=$@\n  local prev=${arr[0]}\n  local num=1\n\
    \  while [ $num -lt ${#arr[@]} ]; do\n    if [ ${arr[$num]} -le $prev ]; then\n\
    \      return 0\n    fi\n    prev=${arr[$num]}\n    num=$((num+1))\n  done\n \
    \ return 1\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # Write your code here\n  array=()\n  while read -r line\
    \ || [[ -n \"$line\" ]]; do\n    array+=($line)\n  done <<< \"$1\"\n  flag=0\n\
    \  for ((i=0; i<${#array[@]}; i++)); do\n    for ((j=i+1; j<${#array[@]}; j++));\
    \ do\n      if [[ ${array[i]} -gt ${array[j]} ]]; then\n        flag=1\n     \
    \   break\n      fi\n    done\n  done\n  if [[ flag -eq 0 ]]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tlocal count=$#\n\tlocal current=-1\n\tfor i in $@; do\n\
    \t\tif [ $i -le $current ]; then\n\t\t\techo \"false\"\n\t\t\treturn\n\t\tfi\n\
    \t\tcurrent=$i\n\tdone\n\techo \"true\"\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\ta=($1)\n\tn=${#a[@]}\n\tfor ((i=0; i<n-1; i++)); do\n\
    \t\tif (( ${a[i]} > ${a[i+1]} )); then\n\t\t\techo \"false\"\n\t\t\treturn\n\t\
    \tfi\n\tdone\n\techo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  declare -a nums=(\"$@\") # all args into an array\n \
    \ declare -i len=${#nums[@]} # array length\n  declare -i sorted=1 # set up as\
    \ true\n  declare -i i=0 # start a loop counter\n  declare -i last=0 # last number\
    \ of a duplicate\n  # loop through all array indices\n  while [ $i -lt $len ];\
    \ do\n    # if this number is less than last number\n    if [[ ${nums[$i]} -lt\
    \ $last ]]; then\n      sorted=0 # this number less than last number\n      break\
    \ # no need to keep looping\n    fi\n    # if this number is equal to the next\
    \ number\n    if [[ ${nums[$i]} -eq ${nums[$i+1]} ]]; then\n      # if this number\
    \ is equal to the next number\n      if [[ ${nums[$i]} -eq ${nums[$i+2]} ]]; then\n\
    \        sorted=0 # more than 2 duplicates of this number\n        break # no\
    \ need to keep looping\n      fi\n      i=$((i+1)) # skip next number\n    fi\n\
    \    last=${nums[$i]} # remember last number\n    i=$((i+1)) # advance loop counter\n\
    \  done\n  if [[ $sorted -eq 1 ]]; then # true if list is sorted\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptfmgyzax.sh: line 33: [[: 1 2 3 4 5: syntax error in expression
    (error token is "2 3 4 5")

    /tmp/tmptfmgyzax.sh: line 38: [[: 1 2 3 4 5: syntax error in expression (error
    token is "2 3 4 5")

    /tmp/tmptfmgyzax.sh: line 46: 1 2 3 4 5: syntax error in expression (error token
    is "2 3 4 5")

    '
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # sort list of integers and then check for duplicates\n\
    \  sorted_list=`echo \"$1\" | sort -n | uniq -d`\n  if [ -z \"$sorted_list\" ];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # loop through each number\n  declare -i previous_num=-1\n\
    \  for i in $1; do\n    # if previous number is -1 then we're still on the first\n\
    \    # number. There's nothing to check\n    if [[ $previous_num -eq -1 ]]; then\n\
    \      previous_num=$i\n      continue\n    fi\n    # if current number is less\
    \ than previous number, then we\n    # can stop here. If not, keep iterating\n\
    \    if [[ $i -lt $previous_num ]]; then\n      echo \"false\"\n      return\n\
    \    fi\n    previous_num=$i\n  done\n  echo \"true\"\n}\n\ncandidate() {\n  \
    \  is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local N=\"$#\"\n  local prev=\"$1\"\n  for i in $(seq\
    \ 2 $N); do\n    if [ $prev -ge \"${!i}\" ]; then\n      return 1\n    fi\n  \
    \  prev=\"${!i}\"\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  a=($1)\n  n=${#a[@]}\n  i=0\n  while [ $i -lt $n ]\n\
    \  do\n    j=$((i+1))\n    while [ $j -lt $n ]\n    do\n      if [ ${a[$i]} -ge\
    \ ${a[$j]} ]\n      then\n        return 1\n      fi\n      j=$((j+1))\n    done\n\
    \    i=$((i+1))\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  echo \"$1\" | awk '\n  BEGIN {FS=\" \"}\n  {\n    first\
    \ = 0\n    duplicate = 0\n    previous = 0\n    for (i=1; i<=NF; i++) {\n    \
    \  if (first == 0) {\n        previous = $i\n        first = 1\n      } else {\n\
    \        if ($i == previous) {\n          duplicate = 1\n        } else if ($i\
    \ < previous) {\n          printf \"false\"\n          exit\n        }\n     \
    \   previous = $i\n      }\n    }\n    if (duplicate == 1) {\n      printf \"\
    false\"\n    } else {\n      printf \"true\"\n    }\n  }'\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  prev=$(echo $1 | cut -d \" \" -f 1)\n  while read num\n\
    \  do\n    if [ \"$num\" -le \"$prev\" ]\n    then\n      return 1\n    fi\n \
    \   prev=$num\n  done < <(echo $1 | cut -d \" \" -f 2-)\n  return 0\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # Create an array of integers from the $1 list\n  \
    \  # with the \"read\" command, which takes a string\n    # and uses white-space\
    \ separators.\n    read -a arr <<< \"$1\"\n    # Start loop at index 1, get length\
    \ of array with\n    # ${#arr[@]}, and increment by 1.\n    for (( i=1; i<${#arr[@]};\
    \ i++ )); do\n        # Is the value at this index less than the previous index?\n\
    \        if [[ ${arr[$i]} -lt ${arr[$i-1]} ]]; then\n            # Yes, it's not\
    \ sorted, return \"false\"\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    # No, it's sorted, return \"true\"\n    echo \"true\"\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # SOLUTION - BEGIN\n  awk 'BEGIN {\n    split($0, arr)\n\
    \    sorted = 1\n    # Loop over the array, if we find any element that is\n \
    \   # less than the previous then the list is not sorted\n    for (i=2; i<=length(arr);\
    \ i++) {\n      if (arr[i] < arr[i-1]) {\n        sorted = 0\n        break\n\
    \      }\n    }\n    # Loop over the array, if we find any two elements that are\n\
    \    # equal then the list is not sorted\n    for (i=2; i<=length(arr); i++) {\n\
    \      if (arr[i] == arr[i-1]) {\n        sorted = 0\n        break\n      }\n\
    \    }\n    print sorted\n  }' $1\n  # SOLUTION - END\n}\n\ncandidate() {\n  \
    \  is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # Fill this in\n  # nah\n  # return \"true\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppu8n6zje.sh: line 28: syntax error near unexpected token `}''

    /tmp/tmppu8n6zje.sh: line 28: `}''

    '
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # remove spaces and sort\n  sorted=$(printf \"%s\" \"\
    $1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n  # add back spaces and see if\
    \ result is same as input\n  if [ \"$1\" == \"$sorted\" ]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    count=$(echo \"$1\" | wc -w)\n    count=$((count-1))\n\
    \    i=0\n    while [ $i -lt $count ]\n    do\n        i=$((i+1))\n        left=$(echo\
    \ \"$1\" | cut -d' ' -f$i)\n        right=$(echo \"$1\" | cut -d' ' -f$((i+1)))\n\
    \        if [ $left -ge $right ]\n        then\n            echo \"false\"\n \
    \           exit\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local nums=($1) # split into array of numbers\n  local\
    \ num_nums=${#nums[@]} # number of numbers\n  local is_sorted=true\n  for (( i=0;\
    \ i<${num_nums}-1; i++ )); do\n    if [[ $is_sorted == true ]]; then\n      if\
    \ [[ ${nums[$i]} -gt ${nums[$i+1]} ]]; then\n        is_sorted=false\n      fi\n\
    \    fi\n  done\n  echo \"$is_sorted\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    test -z \"$1\" && echo \"false\" && return\n    last=$1\n\
    \    shift\n    for i in $@; do\n        test $i -lt $last && echo \"false\" &&\
    \ return\n        last=$i\n    done\n    echo \"true\"\n}\n\ncandidate() {\n \
    \   is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  if (( $# == 1 )); then\n    echo \"true\"\n  else\n \
    \   for i in $(seq 2 $#); do\n      prev=$(echo \"$@\" | cut -d ' ' -f $(($i -\
    \ 1)))\n      curr=$(echo \"$@\" | cut -d ' ' -f $i)\n      if (( $prev >= $curr\
    \ )); then\n        echo \"false\"\n        return\n      fi\n    done\n    echo\
    \ \"true\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  t=($1)\n  max=${#t[@]}\n  for ((i=0; i<max; i++)); do\n\
    \    for ((j=i+1; j<max; j++)); do\n      if [ ${t[$i]} -gt ${t[$j]} ]; then\n\
    \        echo \"false\"\n        return\n      fi\n    done\n  done\n  echo \"\
    true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # Assume success\n  local result=\"true\"\n  # Read the\
    \ input string into an array named \"items\"\n  IFS=' ' read -r -a items <<< \"\
    $1\"\n  # This implementation uses a single loop over the items\n  # going forward\
    \ and backward simultaneously.\n  # See if you can improve on it!\n  for ((i=0;\
    \ i<${#items[@]}/2; i++)); do\n    if [[ \"${items[$i]}\" > \"${items[$((items.length-i-1))]}\"\
    \ ]]; then\n      result=\"false\"\n      break\n    fi\n  done\n  echo \"$result\"\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp819wafe2.sh: line 33: items.length-i-1: syntax error: invalid arithmetic
    operator (error token is ".length-i-1")

    '
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  i=0\n  j=0\n  while [ \"$i\" -lt \"$(echo \"$1\" | wc\
    \ -w)\" ]; do\n    while [ \"$j\" -lt \"$(echo \"$1\" | wc -w)\" ]; do\n     \
    \ if [ \"$i\" -ne \"$j\" ]; then\n        if [ \"$(echo \"$1\" | cut -d' ' -f$(($i+1)))\"\
    \ -lt \"$(echo \"$1\" | cut -d' ' -f$(($j+1)))\" ]; then\n          return 1\n\
    \        fi\n      fi\n      j=$(($j+1))\n    done\n    i=$(($i+1))\n    j=0\n\
    \  done\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    words=\"$@\"\n    while read word; do\n        if [[\
    \ -z $previous ]]; then\n            previous=$word\n        else\n          \
    \  if (( word <= previous )); then\n                printf 'false'\n         \
    \       return\n            fi\n            previous=$word\n        fi\n    done\
    \ <<< \"$words\"\n    printf 'true'\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tlocal last_num=0\n\tlocal dups=0\n\tfor num in $1; do\n\
    \t\tif [ $num -eq $last_num ]; then\n\t\t\tdups=$((dups + 1))\n\t\t\tif [ $dups\
    \ -gt 1 ]; then\n\t\t\t\techo \"false\"\n\t\t\t\treturn\n\t\t\tfi\n\t\telif [\
    \ $num -lt $last_num ]; then\n\t\t\techo \"false\"\n\t\t\treturn\n\t\tfi\n\t\t\
    last_num=$num\n\tdone\n\techo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    local sorted=false\n    for i in $1; do\n        if\
    \ [[ $i -gt $last_item ]]; then\n            sorted=true\n        else\n     \
    \       sorted=false\n            break\n        fi\n        last_item=$i\n  \
    \  done\n    echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tdeclare -a numbers=$1;\n\n\tdeclare -i -a uniqueNumbers=(\
    \ $(echo ${numbers[@]} | tr ' ' '\\n' | sort -u | tr '\\n' ' ') );\n\tdeclare\
    \ -i -a sortedNumbers=( $(echo ${numbers[@]} | tr ' ' '\\n' | sort -n | tr '\\\
    n' ' ') );\n\n\tif [[ ${#uniqueNumbers[@]} -ne ${#numbers[@]} ]]; then\n\t\techo\
    \ \"false\";\n\t\treturn;\n\tfi\n\n\tfor (( i=0; i<${#numbers[@]}; i++ )); do\n\
    \t\tif [[ ${numbers[$i]} -ne ${sortedNumbers[$i]} ]]; then\n\t\t\techo \"false\"\
    ;\n\t\t\treturn;\n\t\tfi\n\tdone\n\n\techo \"true\";\n}\n\ncandidate() {\n   \
    \ is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tstr=\"$1\"\n\tnumbers=($str)\n\ti=0\n\tfor n in \"${numbers[@]}\"\
    ; do\n\t\tif [[ ${numbers[i]} -lt ${numbers[i+1]} ]]; then\n\t\t\tlet i++\n\t\t\
    \tcontinue\n\t\telse\n\t\t\techo \"false\"\n\t\t\treturn\n\t\tfi\n\tdone\n\techo\
    \ \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local list=\"$1\"\n\n  # Write your code here\n  sort\
    \ <<< \"$list\" | tr ' ' '\\n' | uniq -u | wc -l | grep '^[01]$' > /dev/null\n\
    \  if [ $? -eq 0 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  declare -a list=($1)\n  for((i=0;i<${#list[@]}-1;i++));\
    \ do\n    if (( ${list[$i]} >= ${list[$i+1]} )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  echo \"true\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    if [[ $# -lt 1 ]]; then\n        echo 'Error: give\
    \ space-separated list of numbers'\n        exit 1\n    fi\n    OLDIFS=$IFS\n\
    \    IFS=$' '\n    numbers=( $1 )\n    i=0\n    while [[ $i -lt ${#numbers[@]}\
    \ - 1 ]]; do\n        if [[ ${numbers[$i]} -gt ${numbers[$i+1]} ]]; then\n   \
    \         echo \"false\"\n            exit 0\n        fi\n        i=$((i+1))\n\
    \    done\n    echo \"true\"\n    IFS=$OLDIFS\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyfpbmb04.sh: line 33: syntax error in conditional expression

    /tmp/tmpyfpbmb04.sh: line 33: syntax error near `-''

    /tmp/tmpyfpbmb04.sh: line 33: `    while [[ $i -lt ${#numbers[@]} - 1 ]]; do''

    '
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\t# invert the meaning of -gt and -lt so that the program\
    \ can be \n\t# used as a sort comparator\n\t#\n\t# If a and b are the two numbers\
    \ being compared, then\n\t#   * If a < b and a does not equal b, then a is printed\
    \ to stdout\n\t#   * If a = b, then 'false' is printed to stdout\n\t#   * If a\
    \ > b, then b is printed to stdout\n\t#\n\t# After the sort, grep is used to remove\
    \ any lines that contained\n\t# false. Thus, only numbers that are out of order\
    \ will remain\n\t# in the result.\n\t\n\t# normal case\n\tif ! [[ \"$1\" =~ \"\
    false\" ]]; then\n\t\techo \"true\"\n\t# special case\n\telse\n\t\techo \"false\"\
    \n\tfi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    local -a array\n    local sorted\n    array=( $1 )\n\
    \    sorted=( $(echo \"${array[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\
    \ )\n    if [[ \"${array[*]}\" = \"${sorted[*]}\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\t# Loop through string\n\twhile read -r num\n\tdo\n\t\t\
    # Confirm no duplicates\n\t\tif [[ $seen =~ (^| )$num($| ) ]]\n\t\tthen\n\t\t\t\
    # If we have a duplicate return false\n\t\t\techo \"false\"\n\t\t\treturn\n\t\t\
    fi\n\t\t# If we have more than 1 number, check if previous is less than current\n\
    \t\tif [[ -n $prev ]]\n\t\tthen\n\t\t\tif [[ $prev -gt $num ]]\n\t\t\tthen\n\t\
    \t\t\t# If number is not greater than the previous, return false\n\t\t\t\techo\
    \ \"false\"\n\t\t\t\treturn\n\t\t\tfi\n\t\tfi\n\t\t# Add number to seen string\n\
    \t\tseen=\"$seen $num\"\n\t\t# Save current number as previous\n\t\tprev=$num\n\
    \tdone <<< \"$1\"\n\t# If loop completes, return true\n\techo \"true\"\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    n=$(echo \"$1\" | wc -w)\n    arr=($1)\n    ((n--))\n\
    \    for ((i=0; i<n; i++)); do\n        if ((arr[i] > arr[i+1])); then\n     \
    \       echo \"false\"\n            return\n        fi\n    done\n    echo \"\
    true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  if [[ $# -eq 0 ]]; then\n    echo \"false\"\n    return\
    \ 0\n  fi\n  local nums=\"$1\"\n  local input=($nums)\n  local last=$((${#input[@]}\
    \ - 1))\n  local index=0\n  local sorted=true\n  for ((i=0; i < $last; i++));\
    \ do\n    if [[ ${input[$i]} -gt ${input[$i+1]} ]]; then\n      echo \"false\"\
    \n      return 0\n    fi\n  done\n  echo \"true\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  list=$1\n  len=$(echo \"$list\" | wc -w)\n  if [ \"$len\"\
    \ -lt 2 ]; then\n    echo \"true\"\n    return\n  fi\n  prev=$(echo \"$list\"\
    \ | awk '{print $1}')\n  for n in $(echo \"$list\" | awk '{for (i=2; i<=NF; i++)\
    \ print $i}'); do\n    if [ \"$n\" -lt \"$prev\" ]; then\n      echo \"false\"\
    \n      return\n    fi\n    prev=$n\n  done\n  echo \"true\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    OLDIFS=$IFS\n    IFS=\" \"\n    for i in $1; do\n \
    \       if [[ $i =~ ^[0-9]+$ ]]; then\n            arr=(\"${arr[@]}\" $i)\n  \
    \      fi\n    done\n    IFS=$OLDIFS\n    if [[ ${#arr[@]} -lt 2 ]]; then\n  \
    \      echo \"true\"\n        return\n    fi\n    for ((i=0; i<$((${#arr[@]}-1));\
    \ i++)); do\n        if [[ ${arr[$i]} -gt ${arr[$(($i+1))]} ]]; then\n       \
    \     echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # Same as is_sorted_one_liner\n    # but with fewer\
    \ pipes and bashisms\n    # and so slightly faster\n\n    # Split up the input\
    \ into an array\n    IFS=\" \" read -r -a arr <<< \"$1\"\n\n    # Not sorted if\
    \ there's only one element\n    if [[ ${#arr[@]} -eq 1 ]]; then\n        echo\
    \ \"false\"\n        return\n    fi\n\n    for (( i=0; i<${#arr[@]}-1; i++ ));\
    \ do\n        # If previous > next, not sorted\n        if [[ ${arr[$i]} -gt ${arr[$i+1]}\
    \ ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \n    # if you get to the end, it must be sorted\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local numbers=$1\n  local count=0\n  local current_number\n\
    \  local last_number\n  local sorted=true\n  for current_number in ${numbers};\
    \ do\n    if [[ ${count} -eq 0 ]]; then\n      count=$((count + 1))\n      last_number=${current_number}\n\
    \      continue\n    fi\n    if [[ ${current_number} -lt ${last_number} ]]; then\n\
    \      sorted=false\n      break\n    fi\n    last_number=${current_number}\n\
    \  done\n  echo ${sorted}\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    numbers=($1)\n    sorted=$(printf \"%s\\n\" \"${numbers[@]}\"\
    \ | sort -g)\n    last_num=\"\"\n    for num in \"${numbers[@]}\"; do\n      \
    \  if [[ \"$num\" == \"$last_num\" ]]; then\n            echo \"false\"\n    \
    \        return\n        fi\n        last_num=\"$num\"\n    done\n    if [[ \"\
    ${numbers[*]}\" == \"${sorted[*]}\" ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tif [ -z \"$1\" ]; then\n\t\techo \"true\"\n\t\treturn\n\
    \tfi\n\t\n\tlocal list=( $1 )\n\tfor (( i=0; i<${#list[@]}-1; i++ )); do\n\t\t\
    if [ \"${list[$i]}\" -gt \"${list[$i+1]}\" ]; then\n\t\t\techo \"false\"\n\t\t\
    \treturn\n\t\tfi\n\tdone\n\techo \"true\"\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # Check if list is length 1\n  if [ $(echo $1 | wc -w)\
    \ -eq 1 ]; then\n    echo \"true\"\n    return\n  fi\n\n  # Check if list is sorted\
    \ with no duplicate numbers\n  has_duplicates=$(echo $1 | tr \" \" \"\\n\" | uniq\
    \ -c | grep -v \"1 \")\n  if [ -z \"$has_duplicates\" ]; then\n    sorted=$(echo\
    \ \"$1\" | awk '{ for (i=1; i<=NF; i++) a[i]=$i; asort(a); for (i=1; i<=NF; i++)\
    \ print a[i]; }')\n    if [ \"$1\" = \"$sorted\" ]; then\n      echo \"true\"\n\
    \      return\n    fi\n  fi\n\n  echo \"false\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    local list=$1\n    local last=0\n    local good=1\n\
    \    local curr=0\n    for num in $list; do\n        curr=$num\n        if [ $curr\
    \ -lt $last ]; then\n            good=0\n            break\n        fi\n     \
    \   last=$curr\n    done\n    echo $good\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # TODO: your code here\n    temp=${1// /}\n    length=${#temp}\n\
    \    j=0\n    unique=()\n    while [ $j -lt $length ]\n    do\n        unique+=(${temp:$j:1})\n\
    \        j=$((j+1))\n    done\n    unique=$(printf \"%s\\n\" \"${unique[@]}\"\
    \ | sort -u)\n    for (( i=0; i<${#unique[@]}; i++ ))\n    do\n        if [[ $1\
    \ == *\" ${unique[$i]} ${unique[$i]} \"* ]]\n        then\n            echo \"\
    false\"\n            return\n        fi\n    done\n    if [[ $1 == *\"${unique[$i]}\"\
    * ]]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tlocal str=$1\n\tlocal a b c\n\twhile read a b c; do\n\
    \t\tif [ \"$a\" -ge \"$b\" ]; then\n\t\t\techo \"false\"\n\t\t\treturn\n\t\tfi\n\
    \tdone <<< $str\n\techo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1e2gwmqt.sh: line 28: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  echo $1 | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | xargs\
    \ echo -n | grep -q \"^ *1 *2 *3 *4 *5 *6 *7 *8 *9 *$\"\n  if [ $? -eq 0 ]; then\n\
    \    # test for 2 or more of the same number\n    echo $1 | tr ' ' '\\n' | sort\
    \ -n | uniq -d | wc -l | grep -q \"^ *[2-9]*$\"\n    if [ $? -eq 0 ]; then\n \
    \     echo \"false\"\n    else\n      echo \"true\"\n    fi\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # Print the input list, sorted, and store it\n  # for\
    \ comparison to the input.\n  # Replace spaces with newlines and sort.\n  sorted=\"\
    $(echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\"\n  # Check if the input\
    \ and sorted lists are the same.\n  if [ \"$1\" = \"$sorted\" ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  declare -A numbers\n  read -a numbers <<< \"$1\"\n  for\
    \ ((i=0; i<${#numbers[@]}; i++)); do\n    # echo \"${numbers[$i]}\"\n    if [[\
    \ \"${numbers[$i]}\" -ne \"$i\" ]]; then\n      echo \"false\"\n      return\n\
    \    fi\n  done\n  echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp07uckrof.sh: line 26: read: numbers: cannot convert associative
    to indexed array

    /tmp/tmp07uckrof.sh: line 26: read: numbers: cannot convert associative to indexed
    array

    /tmp/tmp07uckrof.sh: line 26: read: numbers: cannot convert associative to indexed
    array

    '
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  for ((i=1; i<$#; i++)); do\n    if (($i > $(($i+1))));\
    \ then\n      echo \"false\"\n      return\n    fi\n  done\n  echo \"true\"\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    local -a vals\n    local i=0\n\n    # Read all input\
    \ into an array\n    for val in $1; do\n        vals[$i]=$val\n        (( i++\
    \ ))\n    done\n\n    # Check for duplicates\n    for (( i=0; i<${#vals[@]}; i++\
    \ )); do\n        for (( j=i+1; j<${#vals[@]}; j++ )); do\n            if [ \"\
    ${vals[$i]}\" == \"${vals[$j]}\" ]; then\n                echo \"false\"\n   \
    \             return\n            fi\n        done\n    done\n\n    # Now check\
    \ that the numbers are in order\n    for (( i=0; i<${#vals[@]}-1; i++ )); do\n\
    \        if [ \"${vals[$i]}\" -gt \"${vals[$i+1]}\" ]; then\n            echo\
    \ \"false\"\n            return\n        fi\n    done\n\n    echo \"true\"\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    if [[ -z \"$1\" ]]; then\n        echo \"true\"\n \
    \       return\n    fi\n    local numbers=$1\n    local sorted=true\n    local\
    \ sorted_number\n    local prev_number=0\n    for number in $numbers; do\n   \
    \     if (( \"$number\" <= \"$prev_number\" )); then\n            sorted=false\n\
    \            break\n        fi\n        prev_number=$number\n    done\n    echo\
    \ \"$sorted\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local i=0\n  local arg_count=$#\n  local sorted=\"true\"\
    \n  local prev_arg=\"\"\n  local current_arg=\"\"\n  local dup_args=\"\"\n  local\
    \ dup_count=0\n  if [[ $arg_count -gt 0 ]]; then\n    prev_arg=$1\n    ((i++))\n\
    \    while [[ $i -lt $arg_count ]]; do\n      current_arg=$(eval echo \\$$i)\n\
    \      if [[ $current_arg -lt $prev_arg ]]; then\n        sorted=\"false\"\n \
    \       break\n      elif [[ $current_arg -eq $prev_arg ]]; then\n        dup_args=\"\
    $dup_args $current_arg\"\n        ((dup_count++))\n      fi\n      prev_arg=$current_arg\n\
    \      ((i++))\n    done\n    if [[ $dup_count -gt 1 ]]; then\n      sorted=\"\
    false\"\n    fi\n  fi\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    local arr=(\"$@\")\n    local sorted=$(printf '%s\\\
    n' \"${arr[@]}\" | sort -g)\n    if [[ ${arr[*]} == ${sorted[*]} ]]; then\n  \
    \      echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  if [[ $# == 0 ]]; then\n    echo \"false\"\n    return\n\
    \  fi\n  # read into a bash array\n  read -a arr <<< \"$@\"\n  # get number of\
    \ elements in the array\n  num_elts=${#arr[@]}\n  # iterate through the array\n\
    \  for (( i=0; i<$num_elts-1; i++ )); do\n    # if element at i is not less than\
    \ element at i+1\n    if [[ ${arr[$i]} -ge ${arr[$i+1]} ]]; then\n      # then\
    \ this is not an ascending list\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  # made it through the loop, so this is an ascending list\n  echo \"\
    true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    local nums=(\"$@\")\n    local current=${nums[0]}\n\
    \    local last=\n    for num in \"${nums[@]}\"; do\n        if [[ $num -le $current\
    \ ]]; then\n            last=$current\n            current=$num\n        else\n\
    \            echo \"false\"\n            return 0\n        fi\n    done\n    if\
    \ [[ \"$last\" == \"$current\" ]]; then\n        echo \"false\"\n    else\n  \
    \      echo \"true\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  check_items=\"\"\n  for item in $1; do\n    if [[ \"\
    \ $check_items \" =~ \" $item \" ]]; then\n      echo \"false\"\n      return\
    \ 0\n    fi\n    check_items=\"$check_items $item\"\n  done\n  echo \"true\"\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # Your code here\n    prev=$(echo $1 | cut -d \" \"\
    \ -f 1)\n    for i in $1; do\n        if [ $i -lt $prev ]; then\n            echo\
    \ \"false\"\n            return\n        fi\n        prev=$i\n    done\n    echo\
    \ \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    local previous\n    for i in $1; do\n        if [[\
    \ $previous -eq $i ]]; then\n            # We have more than one of the same number\n\
    \            echo \"false\"\n            return\n        fi\n        if [[ $previous\
    \ -gt $i ]]; then\n            # The current number is less than the previous\
    \ one\n            echo \"false\"\n            return\n        fi\n        previous=$i\n\
    \    done\n    echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local prev=0\n  local prev_set=false\n  for num in $1;\
    \ do\n    if [ $prev_set = true ]; then\n      if [ $num -lt $prev ]; then\n \
    \       echo \"false\"\n        return\n      fi\n    fi\n    prev=$num\n    prev_set=true\n\
    \  done\n  echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  list=($1) # array\n  length=${#list[@]} # list length\n\
    \  for ((i=0; i<$length-1; i++)); do\n    if [ ${list[$i]} -ge ${list[$i+1]} ];\
    \ then\n      return 0\n    fi\n  done\n  return 1\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    list=$(echo $1 | tr ' ' '\\n' | sort -n) # Sort the\
    \ list\n    prev=\"\"\n    for num in $list; do\n        # Return false if previous\
    \ number is equal to current number\n        # and false if previous number is\
    \ greater than current number\n        if [ -n \"$prev\" ] && [ \"$prev\" -eq\
    \ \"$num\" ] || [ \"$prev\" -gt \"$num\" ]; then\n            echo \"false\"\n\
    \            return\n        fi\n        prev=$num\n    done\n    echo \"true\"\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpo3ecw1he.sh: line 30: [: : integer expression expected

    /tmp/tmpo3ecw1he.sh: line 30: [: : integer expression expected

    /tmp/tmpo3ecw1he.sh: line 30: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local array=($1)\n  len=${#array[@]}\n  for (( i=0; i<len-1;\
    \ i++ )); do\n    if [[ \"${array[$i]}\" -ge \"${array[$i+1]}\" ]]; then\n   \
    \   echo \"false\"\n      return\n    fi\n  done\n  echo \"true\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\tunset -v checked\n\tfor num in \"$@\"; do\n\t\tif [ -z\
    \ $prev ]; then\n\t\t\tprev=$num\n\t\t\tcontinue\n\t\tfi\n\t\tif [ $num -le $prev\
    \ ]; then\n\t\t\tif [ -n \"${checked[$num]}\" ]; then\n\t\t\t\techo \"false\"\n\
    \t\t\t\treturn\n\t\t\tfi\n\t\t\tchecked[$num]=true\n\t\t\tprev=$num\n\t\telse\n\
    \t\t\techo \"false\"\n\t\t\treturn\n\t\tfi\n\tdone\n\techo \"true\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # Code goes here\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkh_6xy8e.sh: line 26: syntax error near unexpected token `}''

    /tmp/tmpkh_6xy8e.sh: line 26: `}''

    '
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # perform the task here\n    declare -a array=()\n\
    \    declare -i len=0\n    declare -i count=0\n    declare -i len=$(echo \"$1\"\
    \ | wc -w)\n    for i in $1; do\n        array+=($i)\n    done\n    if [ ${#array[@]}\
    \ -eq 1 ]; then\n        echo \"true\"\n    else\n        for((i=0;i<$(($len-1));i++));\
    \ do\n            if [ ${array[$i]} -le ${array[$(($i+1))]} ]; then\n        \
    \        count=$(($count+1))\n            fi\n        done\n        if [ $count\
    \ -eq $(($len-1)) ]; then\n            echo \"true\"\n        else\n         \
    \   echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local s v=$1\n  local -a a=()\n  while IFS=' ' read -r\
    \ -a a; do\n    if (( ${#a[@]} == 1 )); then\n      s+=( \"${a[0]}\" )\n    else\n\
    \      for (( i=0; i<${#a[@]}; i++ )); do\n        (( ${a[i]} >= ${s[-1]} )) ||\
    \ return 1\n        s+=( \"${a[i]}\" )\n      done\n    fi\n  done <<< \"$v\"\n\
    \  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  answer=\"true\"\n  # Generate a sorted version of the\
    \ list, and compare it to the original\n  sorted=$(echo \"$@\" | tr \" \" \"\\\
    n\" | sort -n | tr \"\\n\" \" \")\n  original=$(echo \"$@\" | tr \" \" \"\\n\"\
    \ | tr \"\\n\" \" \")\n  if [ \"$sorted\" != \"$original\" ]; then\n    answer=\"\
    false\"\n  fi\n  # Make sure there are no duplicates\n  repeated=$(echo \"$@\"\
    \ | tr \" \" \"\\n\" | sort | uniq -d)\n  if [ \"$repeated\" != \"\" ]; then\n\
    \    answer=\"false\"\n  fi\n  echo \"$answer\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  numbers=$1\n  sorted=$(echo $numbers | tr \" \" \"\\\
    n\" | sort -n | tr \"\\n\" \" \")\n  if [ \"$numbers\" = \"$sorted\" ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local sorted=true\n  local n=\n  local last=\n  for n\
    \ in $1; do\n    if [ \"$last\" -a \"$n\" -le \"$last\" ]; then\n      sorted=false\n\
    \      break\n    fi\n    last=$n\n  done\n  echo $sorted\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt5fzfxim.sh: line 29: [: : integer expression expected

    /tmp/tmpt5fzfxim.sh: line 29: [: : integer expression expected

    /tmp/tmpt5fzfxim.sh: line 29: [: : integer expression expected

    /tmp/tmpt5fzfxim.sh: line 29: [: : integer expression expected

    /tmp/tmpt5fzfxim.sh: line 29: [: : integer expression expected

    /tmp/tmpt5fzfxim.sh: line 29: [: : integer expression expected

    /tmp/tmpt5fzfxim.sh: line 29: [: : integer expression expected

    /tmp/tmpt5fzfxim.sh: line 29: [: : integer expression expected

    /tmp/tmpt5fzfxim.sh: line 29: [: : integer expression expected

    /tmp/tmpt5fzfxim.sh: line 29: [: : integer expression expected

    /tmp/tmpt5fzfxim.sh: line 29: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  \tlocal str=\"$1\"\n\tlocal str2=\"$1\"\n\tlocal str_sorted=$(echo\
    \ \"$str\" | tr ' ' '\\n' | sort -n)\n\tlocal str_sorted_no_dup=$(echo \"$str_sorted\"\
    \ | uniq)\n\tif [ \"$str\" == \"$str_sorted\" ] && [ \"$str\" == \"$str_sorted_no_dup\"\
    \ ]; then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  echo \"is_sorted is not implemented\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    prev=$(echo $1 | cut -d ' ' -f 1)\n    for i in $(echo\
    \ $1 | cut -d ' ' -f 2-); do\n        if [ $i -lt $prev ]; then\n            echo\
    \ \"false\"\n            return\n        fi\n        prev=$i\n    done\n    echo\
    \ \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  _is_sorted \"$1\" $2\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsg8e3yky.sh: line 25: _is_sorted: command not found

    '
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # TODO: Write your implementation here\n    return\
    \ 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    last_num=0\n    prev_num=0\n    for num in $1; do\n\
    \        if [[ $num -le $prev_num ]]; then\n            echo \"false\"\n     \
    \       return\n        fi\n        prev_num=$num\n    done\n    echo \"true\"\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    local list=\"$1\"\n    local prev=\"$(echo \"${list}\"\
    \ | cut -d ' ' -f 1)\"\n    local curr=\"$(echo \"${list}\" | cut -d ' ' -f 2)\"\
    \n    for curr in $list; do\n        if [[ $prev -ge $curr ]]; then\n        \
    \    echo \"false\"\n            return\n        fi\n        prev=$curr\n    done\n\
    \    echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n\t# Implement me!\n\techo \"true\"\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  # $1 is a space-separated list\n  local nums=$1\n  #\
    \ $2 is the variable to set\n  local result=$2\n  local output=1\n  local prev=0\n\
    \  local curr=0\n  for n in $nums; do\n    curr=$n\n    if [[ $curr -eq $prev\
    \ ]]; then\n      output=0\n      break\n    elif [[ $curr -lt $prev ]]; then\n\
    \      output=0\n      break\n    fi\n    prev=$curr\n  done\n  eval $result=\"\
    '$output'\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp0dr4vrgn.sh: line 43: =1: command not found

    '
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # Define a simple function to convert a string to an\
    \ array\n    # (limited to 10 values)\n    list_to_array() {\n        echo $1\
    \ | awk '{print $1, $2, $3, $4, $5, $6, $7, $8, $9, $10}'\n    }\n    # Use that\
    \ function to convert our input to an array\n    my_array=( $(list_to_array $1)\
    \ )\n    # If the list had fewer than two values, don't do any more work\n   \
    \ if [ ${#my_array[@]} -lt 2 ]; then\n        echo \"true\"\n        return\n\
    \    fi\n    my_array=( $(list_to_array $1) )\n    # Loop through the numbers\
    \ and return false if they are not all sorted\n    for (( i=0; i<${#my_array[@]}-1;\
    \ i++ )); do\n        if [ ${my_array[$i]} -gt ${my_array[$i+1]} ]; then\n   \
    \         echo \"false\"\n            return\n        fi\n    done\n    # If we\
    \ get to the end of the list, return true\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    # An array to hold the values\n    local -a sorted\n\
    \    # A variable to hold the previous value\n    local prev=0\n    for item in\
    \ $1; do\n        # If the current value is less than the previous value,\n  \
    \      # the list is not sorted.\n        if [[ $item -lt $prev ]]; then\n   \
    \         echo \"false\"\n            return 0\n        fi\n        # Store the\
    \ current value in the previous value.\n        prev=$item\n        # Check if\
    \ there are any duplicates by checking if the\n        # current value is already\
    \ in the array.\n        if [[ \" ${sorted[@]} \" =~ \" ${item} \" ]]; then\n\
    \            echo \"false\"\n            return 0\n        fi\n        # Store\
    \ the current value in the array.\n        sorted+=($item)\n    done\n    echo\
    \ \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local numbers=$1\n  local last_number=-1\n\n  for num\
    \ in $numbers; do\n    if [ $num -le $last_number ]; then\n      echo \"false\"\
    \n      return\n    fi\n    last_number=$num\n  done\n\n  echo \"true\"\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n    local words=($1)\n    local i\n    local length\n \
    \   local prev_num\n    local prev_length\n    for ((i=0; i<${#words[@]}; i++));\
    \ do\n        length=${#words[$i]}\n        if [[ $i != 0 ]]; then\n         \
    \   if [[ ${#words[$i]} != ${#words[$i-1]} ]]; then\n                echo \"false\"\
    \n                return\n            fi\n        fi\n        for ((j=0; j<$length;\
    \ j++)); do\n            current_num=${words[$i]:$j:1}\n            if [[ $i !=\
    \ 0 ]]; then\n                if [[ $j != 0 ]]; then\n                    if [[\
    \ $current_num -lt $prev_num ]]; then\n                        echo \"false\"\n\
    \                        return\n                    fi\n                fi\n\
    \            fi\n            prev_num=$current_num\n        done\n    done\n \
    \   echo \"true\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return false. Assume no negative numbers and only integers.\n# Examples\n\
    # >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5\
    \ 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted\
    \ \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\
    \n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated\
    \ list\nis_sorted() {\n  local sorted\n  sorted=\"$(echo \"$1\" | sort -n | tr\
    \ \"\\n\" \" \")\"\n  [ \"$sorted\" = \"$1\" ]\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021362
