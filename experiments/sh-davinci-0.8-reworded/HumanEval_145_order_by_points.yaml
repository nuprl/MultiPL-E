name: HumanEval_145_order_by_points
language: sh
prompt: "#!/bin/bash\n# Write a function which sorts the given list of integers\n\
  # in ascending order according to the sum of their digits.\n# Note: if there are\
  \ several items with similar sum of their digits,\n# order them based on their index\
  \ in original list.\n# For example:\n# >>> $(order_by_points \"1 11 -1 -11 -12\"\
  )\n# ['\"-1\"', '\"-11\"', '\"1\"', '\"-12\"', '\"11\"']\n# >>> $(order_by_points\
  \ \"\")\n# []\n#\n# $1 is a space-separated list\norder_by_points() {\n"
tests: "}\n\ncandidate() {\n    order_by_points \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"1 11 -1 -11 -12\") = \"-1 -11 1 -12 11\" ]]\n    [[ $(candidate\
  \ \"1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46\") = \"0 2 3 6 53 423 423\
  \ 423 1234 145 37 46 56 463 3457\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
  \ $(candidate \"1 -11 -32 43 54 -98 2 -3\") = \"-3 -32 -98 -11 1 2 43 54\" ]]\n\
  \    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10 11\") = \"1 10 2 11 3 4 5 6 7 8 9\" ]]\n\
  \    [[ $(candidate \"0 6 6 -76 -21 23 4\") = \"-76 -21 0 4 23 6 6\" ]]\n}\n\nrun_test"
completions: ['    # Write your code here', "\tTMP=()\n\tOUTPUT=()\n\tfor i in $@;\
    \ do\n\t\tTMP+=($(echo $i | tr -cd '-0123456789' | awk '{ s=0; for(i=1;i<=NF;i++)\
    \ s=s+$i; print s\" \"i }'))\n\tdone\n\twhile [[ ${#TMP[@]} -gt 0 ]]; do\n\t\t\
    min=10000000000\n\t\tmin_idx=0\n\t\tfor i in ${!TMP[@]}; do\n\t\t\tif [[ ${TMP[$i]}\
    \ -lt $min ]]; then\n\t\t\t\tmin=${TMP[$i]}\n\t\t\t\tmin_idx=$i\n\t\t\tfi\n\t\t\
    done\n\t\tOUTPUT+=(${TMP[$min_idx]##* })\n\t\tunset TMP[$min_idx]\n\tdone\n\t\
    TMP=()\n\tfor i in ${OUTPUT[@]}; do\n\t\tTMP+=($(echo $@ | cut -d ' ' -f $i))\n\
    \tdone\n\techo ${TMP[@]}", "  local list=\"$1\"\n  local item=''\n  local sum=0\n\
    \  local sums=()\n  local indexes=()\n  local item_sum_pair=''\n  local pairs=()\n\
    \  local sorted_pairs=()\n  local sorted_indexes=()\n  local result=''\n\n  #\
    \ Getting sums\n  for item in $list; do\n    sum=0\n    for c in $(echo $item\
    \ | grep -o .); do\n      sum=$(( $sum + ${c} ))\n    done\n    sums+=($sum)\n\
    \  done\n\n  # Getting indexes\n  indexes=($(seq $(echo \"$list\" | wc -w)))\n\
    \n  # Pairs\n  for i in ${!sums[@]}; do\n    pairs+=($i,${sums[$i]})\n  done\n\
    \n  # Sorting pairs\n  for i in ${!pairs[@]}; do\n    if [ \"${pairs[$i]}\" \\\
    > \"${pairs[$(( $i + 1 ))]}\" ]; then\n      item_sum_pair=${pairs[$i]}\n    \
    \  pairs[$i]=${pairs[$(( $i + 1 ))]}\n      pairs[$(( $i + 1 ))]=$item_sum_pair\n\
    \    fi\n  done\n\n  # Getting sorted indexes\n  for pair in ${pairs[@]}; do\n\
    \    sorted_indexes+=($(echo $pair | cut -d ',' -f 1))\n  done\n\n  # Getting\
    \ result\n  for index in ${sorted_indexes[@]}; do\n    result+=\" \\\"${list[$index]}\\\
    \"\"\n  done\n\n  echo -e \"[${result:1}]\"", "    sum_digit() {\n        local\
    \ num=$1\n        local sum=0\n        while [[ $num -gt 0 ]]; do\n          \
    \  sum=$(( sum + num % 10 ))\n            num=$(( num / 10 ))\n        done\n\
    \        echo $sum\n    }\n\n    # Convert string to array.\n    local numbers=($1)\n\
    \    local num_count=${#numbers[@]}\n    local sums=()\n    local digits=()\n\
    \    local min\n    local min_idx\n\n    # Calculate sum of digits for each number.\n\
    \    for (( i = 0; i < num_count; i++ )); do\n        sums[$i]=$(sum_digit ${numbers[$i]})\n\
    \    done\n\n    # Sort numbers by sum of digits.\n    for (( i = 0; i < num_count;\
    \ i++ )); do\n        min=${sums[$i]}\n        min_idx=$i\n        for (( j =\
    \ i + 1; j < num_count; j++ )); do\n            if [[ ${sums[$j]} -lt $min ]];\
    \ then\n                min=${sums[$j]}\n                min_idx=$j\n        \
    \    fi\n        done\n        digits[$i]=${numbers[$min_idx]}\n        sums[$min_idx]=${sums[$i]}\n\
    \        numbers[$min_idx]=${numbers[$i]}\n    done\n\n    # Format result\n \
    \   echo -n \"[\"\n    for (( i = 0; i < num_count; i++ )); do\n        echo -n\
    \ \"\\\"${digits[$i]}\\\"\"\n        if [[ $i -lt $(( num_count - 1 )) ]]; then\n\
    \            echo -n \", \"\n        fi\n    done\n    echo \"]\"", "    if [\
    \ -z \"$1\" ]; then\n        echo \"[]\"\n        return 0\n    fi\n    local\
    \ arr\n    arr=($(echo \"$1\" | tr ' ' '\\n'))\n    local idx\n    local sum\n\
    \n    local sum_dict=()\n    local count_dict=()\n    for idx in \"${!arr[@]}\"\
    ; do\n        sum=$(perl -E \"say join '+', split //, q{${arr[$idx]}}\")\n   \
    \     eval \"sum=\\$(( $sum ))\"\n        if [ -z \"${sum_dict[$sum]}\" ]; then\n\
    \            sum_dict[$sum]=\"${arr[$idx]}\"\n            count_dict[$sum]=1\n\
    \        else\n            sum_dict[$sum]=\"${sum_dict[$sum]} ${arr[$idx]}\"\n\
    \            count_dict[$sum]=$(( count_dict[$sum] + 1 ))\n        fi\n    done\n\
    \n    local unique_sums\n    unique_sums=($(printf \"%s\\n\" \"${!sum_dict[@]}\"\
    \ | sort -n))\n\n    local idx\n    local ordered_list=()\n    for idx in \"${!unique_sums[@]}\"\
    ; do\n        if [ \"${count_dict[${unique_sums[$idx]}]}\" -eq 1 ]; then\n   \
    \         ordered_list+=(\"${sum_dict[${unique_sums[$idx]}]}\")\n        else\n\
    \            local nums\n            nums=($(echo \"${sum_dict[${unique_sums[$idx]}]}\"\
    \ | tr ' ' '\\n'))\n            local idx2\n            for idx2 in \"${!nums[@]}\"\
    ; do\n                ordered_list+=(\"${nums[$idx2]}\")\n            done\n \
    \       fi\n    done\n\n    echo \"['\\\"${ordered_list[*]}\\\"']\"", "  # Write\
    \ your code here\n  local res=()\n  local items=($1)\n  local len=${#items[@]}\n\
    \  if [ $len -eq 0 ]; then\n    echo '[]'\n    return\n  fi\n  # init res\n  for\
    \ ((i=0; i<$len; i++)); do\n    res[$i]=$i\n  done\n  # quick sort\n  for ((i=0;\
    \ i<$len; i++)); do\n    for ((j=$((i+1)); j<$len; j++)); do\n      if (( $(cal_sum_digits\
    \ ${items[$i]}) > $(cal_sum_digits ${items[$j]}) )); then\n        temp=${res[$i]}\n\
    \        res[$i]=${res[$j]}\n        res[$j]=$temp\n      fi\n    done\n  done\n\
    \  # build result\n  local final=\"[\"\n  for ((i=0; i<$len; i++)); do\n    idx=${res[$i]}\n\
    \    final=$final\"\\\"${items[$idx]}\\\"\"\n    if [ $i -lt $((len-1)) ]; then\n\
    \      final=$final\", \"\n    fi\n  done\n  final=$final\"]\"\n  echo $final",
  "    #TODO: don't be case-sensitive (11 == 11); sort by sum of digits\n    local\
    \ list=(\"$@\")\n    local sum\n    sum=()\n    new_sum=()\n    index=()\n   \
    \ count=0\n    for i in ${list[@]}; do\n        new_sum[$count]=$(echo ${i} |\
    \ awk '{ split($0,a,\"\"); result=0;\n                                       \
    \     for (i in a) {result=result+a[i]} print result}')\n        sum[$count]=${new_sum[$count]}\n\
    \        index[$count]=$count\n        count=$(($count+1))\n    done\n    for\
    \ ((i=0; i<${#sum[@]}; i++)); do\n        for ((j=i+1; j<${#sum[@]}; j++)); do\n\
    \            if [[ ${sum[$i]} -gt ${sum[$j]} ]]; then\n                temp=${sum[$i]}\n\
    \                sum[$i]=${sum[$j]}\n                sum[$j]=$temp\n         \
    \       temp=${index[$i]}\n                index[$i]=${index[$j]}\n          \
    \      index[$j]=$temp\n            fi\n        done\n    done\n    for i in ${index[@]};\
    \ do\n        echo -n \"\\\"${list[$i]}\\\" \"\n    done", "    local sorted=\n\
    \    for i in $1; do\n        # Sum of digits of the current number\n        local\
    \ sum=0\n        for j in $(seq 0 $((${#i} - 1))); do\n            sum=$(($sum\
    \ + ${i:$j:1}))\n        done\n        # Append to the sorted list\n        sorted+=\"\
    $sum:$i \"\n    done\n    # Sort the list in ascending order\n    echo \"$sorted\"\
    \ | sort -n -t: -k1 -k2 | cut -d: -f2-", '    # Write your code here', "    local\
    \ -A points_map  # declare associative array\n    local input_items=($1)\n   \
    \ local points\n    local idx\n    for (( idx=0; idx<${#input_items[@]}; idx++\
    \ )); do\n        points=$(echo \"${input_items[$idx]}\" | tr -d '-' | grep -o\
    \ '.' | tr -d '\\n' | awk '{sum+=$1} END {print sum}')\n        points_map[\"\
    $points\"]=\"${points_map[$points]} ${input_items[$idx]}\"\n    done\n    echo\
    \ $(for i in \"${!points_map[@]}\"; do\n        sort -r --numeric-sort <<< \"\
    ${points_map[$i]}\"\n    done | tr -d '\\n')", "    local -n list=$1\n\n    #\
    \ For each item in the list, we compute the sum of its digits.\n    # The array\
    \ 'list_points' contains the \"points\" of each item.\n    # The array 'item_idx'\
    \ contains the index of each item in the original list.\n    # To be able to sort\
    \ both arrays at the same time according to the \"points\",\n    # we zip them\
    \ in an associative array.\n    # Finally, we sort the array by the \"points\"\
    \ and unzip the items.\n    local i=0\n    local list_points\n    local item_idx\n\
    \    local list_length=$(echo \"$list\" | wc -w)\n    while read -r item; do\n\
    \        list_points[$i]=$(echo \"$item\" | grep -o . | paste -sd+ | bc)\n   \
    \     item_idx[$i]=$i\n        ((i++))\n    done <<< \"$list\"\n\n    local sorted\n\
    \    local points\n    local i=0\n    while read -r points; do\n        sorted[$i]=$points\n\
    \        ((i++))\n    done <<< \"$(printf \"%s\\n\" \"${list_points[@]}\" | sort\
    \ -n | tr '\\n' ' ')\"\n\n    local sorted_list\n    local i=0\n    for points\
    \ in \"${sorted[@]}\"; do\n        for ((j=0; j<$list_length; j++)); do\n    \
    \        if [[ \"${list_points[$j]}\" -eq \"$points\" ]]; then\n             \
    \   sorted_list[$i]=$j\n                ((i++))\n            fi\n        done\n\
    \    done\n\n    # Print the sorted list of items.\n    # The quotes around the\
    \ items are necessary so that the brackets are not evaluated.\n    echo \"[$(for\
    \ i in \"${sorted_list[@]}\"; do\n        echo \"'\\\"${list_points[$i]}\\\"'\"\
    \n    done | tr '\\n' ' ')]\"", "    echo $1 | awk 'BEGIN { FS = \" \" } { for\
    \ (i = 1; i <= NF; i++) print $i; }' | sort -k 1,1n -k 2,2n", "  new_list=\"\"\
    \n  for i in $1; do\n    digits_sum=0\n    for digit in $(echo $i | grep -o .);\
    \ do\n      digits_sum=$((digits_sum + digit))\n    done\n    new_list=\"$new_list\
    \ $digits_sum:$i\"\n  done\n  sorted_list=$(echo $new_list | tr \" \" \"\\n\"\
    \ | sort -n | cut -d \":\" -f 2)\n  echo \"\\\"$(echo $sorted_list | tr \" \"\
    \ \"\\\", \\\"\")\\\"\"", "  if [ -z \"$1\" ]; then\n    echo \"[]\"\n    return\n\
    \  fi\n  local LIST=${1// /\",\"}\n  jq -cRs \". as \\$orig | $LIST | [.[]] |\
    \ sort_by(length * -1) | sort_by(reduce (\\$i | split(\\\"\\\")) as \\$digit (0;\
    \ . + tonumber(\\$digit))) | map(.[]) | map(\\$orig[.]) | map(@sh)\"", "  local\
    \ -a arr=(\"$@\")\n  local sum=0\n  local -a res=()\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sum=0\n    for ((j=0; j<${#arr[$i]}; j++)); do\n      sum=$((sum\
    \ + ${arr[$i]:$j:1}))\n    done\n    res+=(\"$sum+${arr[$i]}\")\n  done\n  echo\
    \ \"${res[@]}\" | tr ' ' '\\n' | sort -n | cut -d+ -f2 | tr '\\n' ' '", "  [[\
    \ $# -gt 0 ]] || return\n\n  declare -A sum_dict  # empty hash\n  for item in\
    \ $1; do\n    sum_dict[$item]=$(echo $item | sed 's/[^0-9]/ /g' | tr -s ' ' '\\\
    n' |\n        awk '{sum += $1} END {print sum}')\n  done\n\n  while read -r key;\
    \ do\n    echo -n '\"'$key'\" '\n  done < <(printf '%s\\n' \"${!sum_dict[@]}\"\
    \ | sort -n -k1)", "    local list=($1)\n    local list_len=\"${#list[@]}\"\n\
    \    if [[ ${list_len} -eq 0 ]]; then\n        echo \"[]\"\n        return\n \
    \   fi\n    local sums=()\n    for i in \"${!list[@]}\"; do\n        local item=${list[i]}\n\
    \        local sum=0\n        for (( j=0; j<${#item}; j++ )); do\n           \
    \ (( sum+=${item:$j:1} ))\n        done\n        sums+=(\"${sum} ${i}\")\n   \
    \ done\n    local new_list=()\n    for sum in \"${sums[@]}\"; do\n        new_list+=(\"\
    ${list[${sum#* }]}\")\n    done\n    echo \"${new_list[@]}\" | sort -n | tr \"\
    \ \" \"\\n\" | awk '{print \"\\\"\"$0\"\\\"\"}' | tr \"\\n\" \" \" | sed -e 's/^/\\\
    [/' -e 's/$/\\]/'", "    if [ -z \"$1\" ]; then\n        echo []\n        return\n\
    \    fi\n    # TODO: implement me\n    # Hint: use `xargs` and `sort`\n    output=\"\
    [\"\n    for number in $1; do\n        points=$(echo \"$number\" | sed 's/-//g'\
    \ | grep -o . | tr -d \"\\n\" | wc -m)\n        output=\"$output\"'\"'$number':'\"\
    $points\"'\"',\n    done\n    echo \"${output::-1}]\" | sed 's/ /, /g' | xargs\
    \ -n1 | sort -t':' -k2 -n | sed 's/:/, /g' | sed 's/\\\"//g' | xargs -n1 | tr\
    \ \"\\n\" ' ' | sed 's/ $//' | sed 's/^/[/' | sed 's/$/]/'", "    IFS=' ' read\
    \ -r -a input_list <<< \"$1\"\n    IFS=' ' read -r -a output_list <<< \"$1\"\n\
    \    max_index=$((${#input_list[@]} - 1))\n    while true; do\n        swap_made=false\n\
    \        for (( i = 0; i < max_index; i++ )); do\n            first=${input_list[$i]}\n\
    \            second=${input_list[$(($i + 1))]}\n            if [[ $first -lt $second\
    \ ]]; then\n                if [[ $(get_sum $first) -lt $(get_sum $second) ]];\
    \ then\n                    temp=$first\n                    input_list[$i]=$second\n\
    \                    input_list[$(($i + 1))]=$temp\n                    output_list[$i]=$second\n\
    \                    output_list[$(($i + 1))]=$temp\n                    swap_made=true\n\
    \                fi\n            fi\n        done\n        if [[ $swap_made ==\
    \ false ]]; then\n            break\n        fi\n    done\n    IFS=' ' echo \"\
    ${output_list[*]}\"", "  declare -a list=()\n  local tmp\n  # convert space separated\
    \ arguments to a list array\n  # IFS = input field separator\n  IFS=' ' read -r\
    \ -a list <<< \"$1\"\n  tmp=\"$(printf \"import re\\n\\\n                l = [%s]\\\
    n\\\n                def sum_of_digits(x):\\n\\\n                return sum(map(int,\
    \ re.split(r'\\D', str(x))))\\n\\\n                print(l.sort(key=sum_of_digits))\"\
    \\\n                \"$(IFS=,; echo \"${list[*]}\")\")\"\n  python3 -c \"$tmp\"\
    \ | tr -d \"[]\" | tr , \" \"", "  local -a array=($1)\n  local list_len=${#array[@]}\n\
    \  if [[ list_len == 0 ]]; then\n    echo '[]'\n    return\n  fi\n  local -a digits_sum_list=()\n\
    \  local sum=0\n  for (( i = 0; i < list_len; i++ )); do\n    sum=0\n    for ((\
    \ j = 0; j < ${#array[$i]}; j++ )); do\n      sum=$(( sum + ${array[$i]:$j:1}\
    \ ))\n    done\n    digits_sum_list+=($sum)\n  done\n  local key=0\n  local tmp=0\n\
    \  for (( i = 0; i < list_len; i++ )); do\n    key=$i\n    for (( j = i + 1; j\
    \ < list_len; j++ )); do\n      if [[ digits_sum_list[$j] -lt digits_sum_list[$key]\
    \ ]]; then\n        key=$j\n      fi\n    done\n    if [[ key -ne $i ]]; then\n\
    \      tmp=${digits_sum_list[$i]}\n      digits_sum_list[$i]=${digits_sum_list[$key]}\n\
    \      digits_sum_list[$key]=$tmp\n      tmp=${array[$i]}\n      array[$i]=${array[$key]}\n\
    \      array[$key]=$tmp\n    fi\n  done\n  for (( i = 0; i < list_len; i++ ));\
    \ do\n    array[$i]=\"\\\"${array[$i]}\\\"\"\n  done\n  echo \"${array[@]}\"",
  "\t#sort -n \n\tprintf \"[\"\n\tfor i in $1; do\n\t\tprintf \"\\'\\\"$i\\\"\\',\"\
    \n\tdone\n\tprintf \"]\"", "    declare -i points\n\n    # TODO: Write your function's\
    \ body here.\n    # Function must return a string.\n    # eg.\n    # points=0\n\
    \    # for i in ${1}; do\n    #     points+=${i}\n    # done\n    # echo \"${points}\"\
    \n    #\n    #\n    declare -a array=(\"$@\")\n    for ((i=0; i<${#array[@]};\
    \ i++)); do\n        unset -v points\n        for ((j=0; j<${#array[$i]}; j++));\
    \ do\n            num=${array[$i]:$j:1}\n            points+=$num\n        done\n\
    \        points+=($i)\n        array[$i]=\"$points\"\n    done\n    printf '%s\\\
    n' \"${array[@]}\" | sort -n | while read -r line; do\n        printf '%s ' \"\
    ${array[$line]}\"\n    done\n    echo", "  local -a arr=()\n  arr=($1)\n  local\
    \ -a out=()\n  for i in \"${arr[@]}\"; do\n    out+=($(printf \"%d %s\" \"$(digits_sum\
    \ $i)\" \"$i\"))\n  done\n  IFS=$'\\n'\n  out=($(sort -n <<<\"${out[*]}\"))\n\
    \  unset IFS\n  echo \"${out[*]}\"", "    # Write your code here\n    local list=$1\n\
    \    local sums=( )\n    local items=( )\n    local i=0\n    local sum=0\n   \
    \ for item in $list; do\n        sum=0\n        for ((i=0; i<${#item}; i++));\
    \ do\n            sum=$((sum + ${item:$i:1}))\n        done\n        sums[$sum]=$sum\n\
    \        items[$sum]=$item\n    done\n    sorted=$(echo ${sums[@]} | tr \" \"\
    \ \"\\n\" | sort -nu)\n    for sum in $sorted; do\n        echo -n \\\"${items[$sum]}\\\
    \"\\ \n    done", "    if [ $# -eq 0 ]; then\n        echo \"[]\"\n        return\n\
    \    fi\n    echo \"$@\" | tr \" \" \"\\n\" | # Split string by spaces into lines\n\
    \        python3 -c '\nimport math\nimport sys\n\ndef sum_of_digits(number):\n\
    \    return sum(map(int, str(number)))\n\ndef full_sort(numbers):\n    if len(numbers)\
    \ <= 1:\n        return numbers\n    pivot = numbers[-1]\n    less = []\n    greater\
    \ = []\n    for i in range(len(numbers) - 1):\n        if sum_of_digits(numbers[i])\
    \ <= sum_of_digits(pivot):\n            less.append(numbers[i])\n        else:\n\
    \            greater.append(numbers[i])\n    return full_sort(less) + [pivot]\
    \ + full_sort(greater)\n\nnumbers = list(map(int, sys.stdin.readlines()))\nresult\
    \ = full_sort(numbers)\nprint(\"[%s]\" % \", \".join(\"\\\"%s\\\"\" % str(item)\
    \ for item in result))\n'", "    # echo $1 | tr ' ' '\\n' | sort -n -k2 | tr '\\\
    n' ' '\n    echo $1 | tr ' ' '\\n' | awk 'BEGIN{ORS=\" \"}{print $1}' | sort -k2\
    \ -n | tr '\\n' ' '", "    local list=($1)\n    local result=()\n    for el in\
    \ \"${list[@]}\"; do\n        local el_sign=${el#-}\n        if [[ ${el} == ${el_sign}\
    \ ]]; then\n            el_sign=''\n        fi\n        local el_number=${el#[+-]}\n\
    \        local el_abs=${el_number}\n        for i in $(seq 0 $((${#el_number}\
    \ - 1))); do\n            el_abs=$((${el_abs} + ${el_number:$i:1}))\n        done\n\
    \        result+=($(printf \"\\\"%s%d%s\\\"\\n\" \"${el_sign}\" \"${el_abs}\"\
    \ \"${el}\"))\n    done\n    IFS=$'\\n' sorted=($(sort <<<\"${result[*]}\"))\n\
    \    IFS=$' '\n    echo \"${sorted[*]}\"", "    local input_array=($1)\n    local\
    \ result=()\n    for (( i=0; i<${#input_array[@]}; i++ )); do\n        if [ \"\
    ${input_array[$i]}\" -lt 0 ]; then\n            local sum=${input_array[$i]#-}\n\
    \        else\n            local sum=${input_array[$i]}\n        fi\n        while\
    \ [ \"$sum\" -gt 0 ]; do\n            (( sum+=$((sum%10)) ))\n            (( sum/=10\
    \ ))\n        done\n        if [ \"${input_array[$i]}\" -lt 0 ]; then\n      \
    \      result+=( \"-$sum:$i\" )\n        else\n            result+=( \"$sum:$i\"\
    \ )\n        fi\n    done\n    result=($(printf \"%s\\n\" \"${result[@]}\" | sort\
    \ -n | cut -d: -f2))\n    for (( i=0; i<${#result[@]}; i++ )); do\n        echo\
    \ -n \"${input_array[${result[$i]}]} \"\n    done", "    my_list=($1)\n    printf\
    \ '%s\\n' \"${my_list[@]}\" | sort -n", "    if [ $# -eq 0 ]; then\n        echo\
    \ \"[]\"\n        return\n    fi\n    input_array=($*)\n    # echo $*\n    # echo\
    \ $#\n    # echo ${input_array[@]}\n    # echo ${#input_array[@]}\n    # echo\
    \ ${input_array[0]}\n    # echo ${input_array[1]}\n    # \u8FD9\u91CC\u5982\u679C\
    \u4E0D\u7528\u53D8\u91CF\u4FDD\u5B58\u4E2D\u95F4\u8FC7\u7A0B\u7ED3\u679C\uFF0C\
    \u6BCF\u6B21\u6267\u884C\u7684\u7ED3\u679C\u90FD\u662F\u4E00\u6837\u7684\u3002\
    \n    sum_array=()\n    for item in ${input_array[@]}; do\n        sum=0\n   \
    \     for (( i=0; i<${#item}; i++ )); do\n            sum=$((sum+${item:$i:1}))\n\
    \        done\n        sum_array=(${sum_array[@]} $sum)\n    done\n    # echo\
    \ ${sum_array[@]}\n    # echo ${#sum_array[@]}\n    # echo ${sum_array[0]}\n \
    \   # echo ${sum_array[1]}\n    out_array=()\n    for (( i=0; i<${#input_array[@]};\
    \ i++ )); do\n        # \u7528\u811A\u672C\u83B7\u53D6\u6700\u5C0F\u503C\uFF0C\
    \u4E0D\u7528bash\u6392\u5E8F\u547D\u4EE4\u662F\u4E3A\u4E86\u9002\u5E94\u591A\u79CD\
    shell\u73AF\u5883\n        min=${sum_array[0]}\n        for (( j=1; j<${#sum_array[@]};\
    \ j++ )); do\n            if [ ${sum_array[$j]} -lt $min ]; then\n           \
    \     min=${sum_array[$j]}\n            fi\n        done\n        index=$(echo\
    \ \"${sum_array[@]}\" | grep -b -o $min | cut -d: -f1)\n        out_array=(${out_array[@]}\
    \ \"\\\"${input_array[$index]}\\\"\")\n        sum_array[$index]=9999\n    done\n\
    \   ", "    # Declare array to store original elements\n    local -a array=()\n\
    \    # Declare array to store sums of digit\n    local -a sums=()\n    # Declare\
    \ current sum of digits of the current element\n    local curr_sum=0\n    # Declare\
    \ current element\n    local curr_element=0\n    # Declare the index of the current\
    \ element\n    local curr_idx=0\n    # Declare the index of the newly added element\n\
    \    local new_idx=0\n    # Declare a constant for the number of items in the\
    \ array\n    local const_len=0\n    # Declare the index\n    local idx=0\n   \
    \ # Split elements of the original array\n    array=($1)\n    # Get the number\
    \ of items in the array\n    const_len=${#array[@]}\n    # Iterate through the\
    \ array of original elements\n    for idx in $(seq 0 $((const_len - 1))); do\n\
    \        # Set the current element\n        curr_element=${array[$idx]}\n    \
    \    # Set the sum of the digits of the current element\n        curr_sum=$(echo\
    \ $curr_element | grep -o '[0-9]' | wc -l)\n        # Iterate through the array\
    \ of sums\n        for curr_idx in $(seq 0 $((const_len - 1))); do\n         \
    \   # If the current index is out of the range of the array of sums\n        \
    \    if [ $curr_idx -ge ${#sums[@]} ]; then\n                # Add a new item\
    \ to the array of sums\n                sums+=(\"$curr_sum\")\n              \
    \  # Add a new item to the array of original elements\n                array+=(\"\
    $curr_element\")\n                # Break out the loop\n                break\n\
    \            # If the current sum is less than the sum of digits of the current\
    \ element\n            elif [ ${sums[$curr_idx]} -lt $curr_sum ]; then\n     \
    \           # Shift every element of the array of sums\n                # and\
    \ the array of original elements right by one position\n                for new_idx\
    \ in $(seq $((const_len - 1)) -1 $curr_idx); do\n                    # Set", " \
    \   # write your solution here\n    local sum=0\n    local sum_sort=()\n    for\
    \ x in $1; do\n        for i in $(echo $x | grep -o .); do\n            sum=$((sum\
    \ + i))\n        done\n        sum_sort+=($sum,$x)\n        sum=0\n    done\n\
    \    sort -n -t ',' -k 1 <<< $(echo ${sum_sort[@]})", '    echo "$1"', "    sum(){\n\
    \        number=$1\n        sum=0\n        while [ $number -gt 0 ]; do\n     \
    \       (( sum+=number%10 ))\n            (( number/=10 ))\n        done\n   \
    \     echo $sum\n    }\n    IFS=$' ' read -r -a array <<< \"$1\"\n    for (( i=0;\
    \ i<${#array[@]}; i++ )); do\n        array[$i]=\"$(sum ${array[$i]}):${array[$i]}\"\
    \n    done\n    IFS=$'\\n' sorted=($(sort -n <<<\"${array[*]}\"))\n    IFS=$'\
    \ ' read -r -a array <<< \"${sorted[*]}\"\n    for (( i=0; i<${#array[@]}; i++\
    \ )); do\n        array[$i]=${array[$i]//*:}\n    done\n    echo \"[$(IFS=, ;\
    \ echo \"${array[*]}\")]\"", "\tlocal list=($1)\n\tlocal mapping=()\n\tlocal -i\
    \ i sum\n\tfor ((i=0; i<${#list[@]}; i++)); do\n\t\tsum=0\n\t\tfor ((j=0; j<${#list[i]};\
    \ j++)); do\n\t\t\t((sum += ${list[i]:j:1}))\n\t\tdone\n\t\tmapping+=($sum)\n\t\
    done\n\tlocal -i max\n\tfor ((i=0; i<${#list[@]}; i++)); do\n\t\tmax=0\n\t\tfor\
    \ ((j=0; j<${#list[@]}; j++)); do\n\t\t\tif ((mapping[j] > mapping[max])); then\n\
    \t\t\t\tmax=$j\n\t\t\tfi\n\t\tdone\n\t\tprintf \"%s\\n\" \"${list[max]}\"\n\t\t\
    mapping[max]=-1\n\tdone", "\tlocal -n array=\"($1)\"\n\tlocal sum=0\n\tlocal dict=()\n\
    \tfor (( i=0; i<${#array[@]}; i++ ))\n\tdo\n\t\tsum=0\n\t\tfor (( j=0; j<${#array[$i]};\
    \ j++ ))\n\t\tdo\n\t\t\tsum=$(( sum + ${array[$i]:$j:1} ))\n\t\tdone\n\t\tdict+=(\
    \ \"$sum\":\"$i\" )\n\tdone\n\tlocal -a dict1=()\n\tfor (( i=0; i<${#dict[@]};\
    \ i++ ))\n\tdo\n\t\tdict1+=( \"${dict[$i]}\" )\n\tdone\n\tIFS=':'\n\tprintf '%s\\\
    n' \"${dict1[*]}\" | sort -t: -k1n -k2n | cut -d: -f2", "    local arr=($1)\n\
    \    local sum_arr=()\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        sum_arr+=(\
    \ \"${arr[$i]} $(( $(echo \"${arr[$i]}\" | sed 's/-//g') ))\" )\n    done\n  \
    \  IFS=$'\\n' sorted=($(sort -k2 <<<\"${sum_arr[*]}\"))\n    unset IFS\n    echo\
    \ ${sorted[*]}", "\techo \"$1\" | tr \" \" \"\\n\" | awk '{sum = 0; for (i = 1;\
    \ i <= length($1); i++) {sum += substr($1, i, 1)}; print sum, $1}' | sort -nk1\
    \ | cut -d' ' -f2- | tr \"\\n\" \" \"", "   local -a list=($1)\n   local -a result=()\n\
    \   local -a arr=()\n   local -a tmp=()\n   local sum\n   local i\n\n   for ((i=0;\
    \ i<${#list[@]}; i++)); do\n      sum=0\n      tmp=(${list[$i]})\n      for c\
    \ in ${tmp[@]}; do\n         sum=$((sum + c))\n      done\n      arr[$i]=$sum\n\
    \   done\n\n   for ((i=0; i<${#list[@]}; i++)); do\n      min_ind=$(index_of_min\
    \ ${arr[@]})\n      result[$i]=${list[$min_ind]}\n      arr[$min_ind]=999999\n\
    \   done\n\n   echo \"${result[@]}\"", "  local sum=0\n  local result=()\n  for\
    \ i in \"$@\"; do\n    sum=0\n    for (( j=0; j<${#i}; j++ )); do\n      sum=$((sum\
    \ + ${i:$j:1}))\n    done\n    result+=(\"$sum-$i\")\n  done\n  # Pythonic way\
    \ to sort the elements\n  # We transform the list to a string first\n  # so it\
    \ can be executed as bash command\n  # (list cannot be run as command)\n  result=$(IFS=$'\\\
    n'; echo \"${result[*]}\")\n  echo \"$(\n    python3 -c '\nimport sys\nresult\
    \ = sys.stdin.readlines()\n\ndef sort(l):\n  return sorted(l, key=lambda x: int(x.split(\"\
    -\")[0]))\n\nprint(\"[\" + \", \".join([\n  f\"{x}\" for x in sort(result)\n])\
    \ + \"]\")\n    '\n  )\"", '  echo ${@}', "    local list=\"$1\"\n    local result=()\n\
    \    local line\n    local number\n    local sum\n    local i\n    local j\n \
    \   for line in $list; do\n        sum=0\n        for i in $(seq 0 $((${#line}\
    \ - 1))); do\n            number=${line:$i:1}\n            if [[ $number == \"\
    -\" ]]; then\n                continue\n            fi\n            sum=$((sum\
    \ + number))\n        done\n        result+=(\"$sum-$line\")\n    done\n    result=($(for\
    \ item in \"${result[@]}\"; do echo \"$item\"; done | sort -n -t \"-\" -k 1))\n\
    \    for i in $(seq 0 $((${#result[@]} - 1))); do\n        for j in $(seq 0 $((${#result[$i]}\
    \ - 1))); do\n            if [[ ${result[$i]:$j:1} == \"-\" ]]; then\n       \
    \         result[$i]=${result[$i]:$(($j + 1))}\n                break\n      \
    \      fi\n        done\n    done\n    echo \"${result[@]}\"", '    # Your code
    here...', "  # Python version:\n  # [print(x) for x in sorted(input().split(),\
    \ key=lambda x: (sum(map(int, x)), x))]\n  # bash version:\n  printf '%s\\n' \"\
    $1\" | tr ' ' '\\n' | sort -t $'\\t' -k 2,2 -k 1,1nr | sort -t $'\\t' -k 2,2n\
    \ | cut -f 1 | tr '\\n' ' ' | sed 's/\\s*$//'", "    # your code here\n    res=()\n\
    \    for i in $1; do\n        res+=(\"$i $(( $(echo $i | tr '-' '+' | fold -w1\
    \ | paste -sd+ - | bc) ))\")\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n'\
    \ | sort -n -k2 -t' ' | cut -d' ' -f1", '    # your code here', "  local list=\"\
    $@\"\n  echo \"[$(echo \"$list\" | awk '{for(i=1;i<=NF;i++) {sums[$i] += $(i)};}\
    \ END {for(s in sums) {print \"\\\"\" s \"\\\"\"}}' | sort -rnk1 -t\" \")]\"",
  "    local list=$(echo $1 | tr ' ' '\\n')\n    local -A points=()\n    local -a\
    \ sorted=()\n    local i=0\n\n    for number in $list; do\n        local point=0\n\
    \        for digit in $(echo \"$number\" | grep -o .); do\n            point=$((point\
    \ + $digit))\n        done\n        points[$number]=$point\n    done\n\n    for\
    \ number in \"${!points[@]}\"; do\n        sorted[${points[$number]}]=$number\n\
    \    done\n\n    for i in \"${sorted[@]}\"; do\n        if [ \"$i\" ]; then\n\
    \            echo -n \"\\\"$i\\\" \"\n        fi\n    done", "  declare -a arr\n\
    \  arr=($1)\n  len=${#arr[@]}\n  for ((i=0; i<len; i++))\n  do\n    sum=0\n  \
    \  for ((j=0; j<${#arr[$i]}; j++))\n    do\n      sum=$((sum + ${arr[$i]:$j:1}))\n\
    \    done\n    arr[$i]=$sum\n  done\n  temp=$(for ((i=0; i<len; i++))\n  do\n\
    \    echo ${arr[$i]} $i\n  done)\n  temp=$(echo \"$temp\" | sort -n)\n  for ((i=0;\
    \ i<len; i++))\n  do\n    temp_sum=$(echo \"$temp\" | head -n $((i+1)) | tail\
    \ -n 1 | awk '{print $1}')\n    for ((j=0; j<len; j++))\n    do\n      if [ ${arr[$j]}\
    \ -eq $temp_sum ]\n      then\n        temp_idx=$(echo \"$temp\" | head -n $((i+1))\
    \ | tail -n 1 | awk '{print $2}')\n        echo ${arr[$temp_idx]}\n        arr[$temp_idx]=\"\
    *\"\n        break\n      fi\n    done\n  done", "    arr=($@)\n    mapping=()\n\
    \    for ((i=0; i<${#arr[@]}; i++)); do\n        sum=0\n        for ((j=0; j<${#arr[$i]};\
    \ j++)); do\n            if [[ ${arr[$i]:$j:1} =~ [0-9] ]]; then\n           \
    \     sum=$((sum + ${arr[$i]:$j:1}))\n            fi\n        done\n        mapping+=(\"\
    $sum:$i\")\n    done\n    IFS=$'\\n' sorted=($(sort <<<\"${mapping[*]}\"))\n \
    \   unset IFS\n    result=()\n    for item in ${sorted[@]}; do\n        result+=(\"\
    ${arr[${item##*:}]}\")\n    done\n    echo \"${result[@]}\"", "    echo $1 | tr\
    \ ' ' '\\n' | sort -n -t ' ' -k1 -r | tr '\\n' ' '", "    if [ -z \"$1\" ]; then\n\
    \        echo '[]'\n        return 0\n    fi\n    local array=($1)\n    local\
    \ sums_and_indexes=()\n    for (( i = 0; i < ${#array[@]}; i++ )); do\n      \
    \  local number=\"${array[$i]}\"\n        local sum=0\n        for (( j = 0; j\
    \ < ${#number}; j++ )); do\n            local digit=\"${number:$j:1}\"\n     \
    \       sum=$(( sum + digit ))\n        done\n        sums_and_indexes+=(\"$sum:$i\"\
    )\n    done\n    IFS=$'\\n' sorted=($(sort <<<\"${sums_and_indexes[*]}\"))\n \
    \   unset IFS\n    local sorted_arr=()\n    for i in \"${sorted[@]}\"; do\n  \
    \      sorted_arr+=(\"${array[${i##*:}]}\")\n    done\n    echo \"['$(printf \"\
    %s', '\" \"${sorted_arr[@]}\")']\"", "    local delimiter=\";\"\n    local number\n\
    \    local value\n    local numbers_without_digits=()\n    local numbers_with_digits=()\n\
    \    local sums=()\n    local sums_and_indexes=()\n    local sums_and_indexes_sorted=()\n\
    \    local numbers_with_digits_sorted=()\n    # Splitting the numbers into two\
    \ separate arrays - one with only integers,\n    # and one with integers and other\
    \ chars.\n    for number in $1; do\n        # If the number has a digit in it,\
    \ push it to the array with numbers\n        # that have digits.\n        if [[\
    \ $number =~ [0-9] ]]; then\n            numbers_with_digits+=(\"$number\")\n\
    \        # If the number only has numbers, push it to the array with numbers\n\
    \        # that have only numbers.\n        elif [[ $number =~ ^[0-9]+$ ]]; then\n\
    \            numbers_without_digits+=(\"$number\")\n        fi\n    done\n   \
    \ # Create an array with sums of the digits of each number.\n    for number in\
    \ \"${numbers_with_digits[@]}\"; do\n        value=0\n        for (( i=0; i<${#number};\
    \ i++ )); do\n            (( value+=$((${number:$i:1})) ))\n        done\n   \
    \     sums+=(\"$value\")\n    done\n    # If the array is empty, print [] and\
    \ exit the script.\n    if [[ ${#sums[@]} -eq 0 ]]; then\n        echo []\n  \
    \      exit\n    fi\n    # Create an array with sorted sums, as well as their\
    \ original index.\n    # This is done using the \"for\" loop, as \"for i in $(sort\
    \ -n ...)\" doesn't\n    # give the original indexes of the numbers.\n    for\
    \ (( i=0; i<${#sums[@]}; i++ )); do\n        sums_and_indexes+=(\"${sums[$i]}${delimiter}${i}\"\
    )\n    done\n    IFS=$'\\n' sums_and_indexes_sorted=($(sort -n <<<\"${sums_and_indexes[*]",
  "    local result=()\n    local num=()\n    local sum=()\n    local i=0\n    local\
    \ j=0\n    local size=$(echo \"$1\" | wc -w)\n    for ((i=0; i<size; i++)); do\n\
    \        num[$i]=$(echo \"$1\" | cut -d' ' -f$((i+1)))\n        sum[$i]=0\n  \
    \      for ((j=0; j<${#num[$i]}; j++)); do\n            sum[$i]=$((sum[$i]+${num[$i]:$j:1}))\n\
    \        done\n    done\n    for ((i=0; i<size; i++)); do\n        for ((j=i+1;\
    \ j<size; j++)); do\n            if [[ ${sum[$i]} -gt ${sum[$j]} ]]; then\n  \
    \              tmp=${sum[$i]}\n                sum[$i]=${sum[$j]}\n          \
    \      sum[$j]=$tmp\n                tmp=${num[$i]}\n                num[$i]=${num[$j]}\n\
    \                num[$j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<size; i++)); do\n        result[$i]=\"\\\"${num[$i]}\\\"\"\n    done\n\
    \    echo \"[${result[*]}]\"", "    local list=\"$1\"\n    local points=()\n \
    \   local result=()\n    local i=0\n    for num in $list; do\n        local sum=0\n\
    \        for (( n=0; n<${#num}; n++ )); do\n            sum=$(( $sum + ${num:$n:1}\
    \ ))\n        done\n        points[$i]=$sum\n        result[$i]=$num\n       \
    \ (( i++ ))\n    done\n    local len=${#points[@]}\n    for (( i=0; i<len; i++\
    \ )); do\n        for (( j=i+1; j<len; j++ )); do\n            if [[ ${points[$i]}\
    \ -gt ${points[$j]} ]]; then\n                local tmp=${points[$i]}\n      \
    \          points[$i]=${points[$j]}\n                points[$j]=$tmp\n       \
    \         tmp=${result[$i]}\n                result[$i]=${result[$j]}\n      \
    \          result[$j]=$tmp\n            fi\n        done\n    done\n    for num\
    \ in ${result[@]}; do\n        echo -n \"\\\"$num\\\" \"\n    done\n    echo",
  "    # Split input string into array by ' '\n    string=($1)\n    # Create array\
    \ with index, value and sum of digits\n    unset array_index\n    for (( i=0;\
    \ i<${#string[@]}; i++ ))\n    do\n        sum=0\n        value=${string[$i]}\n\
    \        digit=0\n        # Loop over each digit in the value\n        while [\
    \ $value -ne 0 ]\n        do\n            # Get last digit\n            digit=$((\
    \ value % 10 ))\n            # Add it to the sum\n            sum=$(( sum + digit\
    \ ))\n            # Remove last digit\n            value=$(( value / 10 ))\n \
    \       done\n        # Append new element to the array\n        array_index[$i]=\"\
    $i $value $sum\"\n    done\n    # Sort the array\n    unset sorted_array\n   \
    \ for (( i=0; i<${#array_index[@]}; i++ ))\n    do\n        index=0\n        sum=0\n\
    \        # Loop over each element in the array\n        for (( j=0; j<${#array_index[@]};\
    \ j++ ))\n        do\n            # Check if element has smallest sum of digits\n\
    \            if [ -z \"$sum\" ] || [ $sum -gt $(echo ${array_index[$j]} | cut\
    \ -d' ' -f3) ]\n            then\n                index=$j\n                sum=$(echo\
    \ ${array_index[$j]} | cut -d' ' -f3)\n            # Check if element has same\
    \ sum of digits\n            elif [ $sum -eq $(echo ${array_index[$j]} | cut -d'\
    \ ' -f3) ]\n            then\n                # Check if element is older\n  \
    \              if [ $index -gt $(echo ${array_index[$j]} | cut -d' ' -f1) ]\n\
    \                then\n                    index=$j\n                    sum=$(echo\
    \ ${array_index[$j]} | cut -d' ' -f3)\n                fi\n            fi\n  \
    \      done\n        # Add current smallest element to the sorted array\n    \
    \    sorted_array[$i]=$(echo ${array_index[$index]} | cut -d' ' -f2)\n       ",
  "    arr=$(echo \"$@\" | tr \" \" \"\\n\")\n    sum=0\n    len=0\n    result=\"\"\
    \n    # Loop over the array using the count variable\n    while IFS= read -r line;\
    \ do\n        len=$((len+1))\n        #sum=$(echo $line | grep -o . | awk '{sum+=$1}\
    \ END {print sum}')\n        for ((i=0; i<${#line}; i++)); do\n            sum=$((sum+${line:$i:1}))\n\
    \        done\n        result+=\"'\\\"\"$line\"\\\"' \"\n    done <<< \"$arr\"\
    \n    echo \"$result\"", "\tlocal list=$1\n\tlocal result_line=\n\tfor element\
    \ in $list; do\n\t\tlocal element_sum=0\n\t\tlocal element_digits=($(echo $element\
    \ | grep -o .))\n\t\tfor digit in ${element_digits[@]}; do\n\t\t\tlet element_sum+=digit\n\
    \t\tdone\n\t\tresult_line=\"$result_line $element:$element_sum\"\n\tdone\n\tlocal\
    \ result_lines=($(echo $result_line | sed -e 's/  */\\n/g' | sort))\n\tfor result_line\
    \ in ${result_lines[@]}; do\n\t\tlocal element=${result_line%:*}\n\t\techo -n\
    \ '\"'$element'\"'\n\t\tif [ \"$result_line\" != \"${result_lines[${#result_lines[@]}-1]}\"\
    \ ]; then\n\t\t\techo -n ', '\n\t\tfi\n\tdone", "    local sum_of_digits_of_items=(\
    \ $(for i in $1; do\n        local sum=0\n        local item=$i\n        while\
    \ [ \"$item\" -ne 0 ]; do\n            local digit=$(( item % 10 ))\n        \
    \    (( sum += digit ))\n            (( item /= 10 ))\n        done\n        echo\
    \ \"${sum}_${i}\"\n    done) )\n    IFS=$'\\n' sorted=( $(sort -g <<< \"${sum_of_digits_of_items[*]}\"\
    ) )\n    echo \"[\"$(sed 's/^[0-9]*_\\(.*\\)$/\"\\1\"/' <<< \"${sorted[*]}\")\"\
    ]\"", "  echo $1 | tr ' ' '\\n' | sort -n -k1.1 | tr '\\n' ' '", "  list_to_sort=$1\n\
    \  sorted_list=()\n  for item in ${list_to_sort}; do\n    current_index=$(get_index\
    \ \"${item}\")\n    digits_sum=$(get_digits_sum \"${item}\")\n    sorted_list+=(\"\
    ${digits_sum}_${current_index}_${item}\")\n  done\n  echo \"${sorted_list[@]}\"\
    \ | tr ' ' '\\n' | sort -n | tr '\\n' ' '", "  if [ $# -eq 0 ]; then\n    echo\
    \ \"[]\"\n    return\n  fi\n  sums=()\n  for num in $@; do\n    sums+=(\"$(echo\
    \ \"$num\" | grep -o . | paste -sd+ | bc) $num\")\n  done\n  for i in \"${!sums[@]}\"\
    ; do\n    sums[$i]=\"$(echo \"${sums[$i]}\" | awk '{ print $2 \" \" $1 }')\"\n\
    \  done\n  printf '[\"%s\"]\\n' \"$(printf '%s\\n' \"${sums[@]}\" | sort -k2n\
    \ | cut -d' ' -f1 | tr '\\n' ' ')\"", "    local -n integer_list=$1\n    local\
    \ sum_of_digits=()\n    local index_number=()\n    local index=0\n    local sum=0\n\
    \    local number=0\n    local result=()\n    local counter=0\n    local temp=0\n\
    \    local temp_index=0\n    local temp_result=()\n    local numbers_in_list=$(echo\
    \ $integer_list | wc -w)\n    for i in $integer_list; do\n        number=${i##*-}\n\
    \        sum=0\n        while [ $number -gt 0 ]; do\n            temp=$(($number\
    \ % 10))\n            sum=$(($sum + $temp))\n            number=$(($number / 10))\n\
    \        done\n        sum_of_digits[$index]=$sum\n        index_number[$index]=$i\n\
    \        index=$(($index + 1))\n    done\n    temp_index=0\n    for i in ${sum_of_digits[@]};\
    \ do\n        temp_result[$temp_index]=${index_number[$temp_index]}\n        temp_index=$(($temp_index\
    \ + 1))\n    done\n    while [ $counter -lt $numbers_in_list ]; do\n        for\
    \ i in $(seq 1 $(($numbers_in_list - 1))); do\n            if [ \"${sum_of_digits[$i]}\"\
    \ -gt \"${sum_of_digits[$(($i - 1))]}\" ]; then\n                temp=${sum_of_digits[$(($i\
    \ - 1))]}\n                sum_of_digits[$(($i - 1))]=${sum_of_digits[$i]}\n \
    \               sum_of_digits[$i]=$temp\n                temp=${temp_result[$(($i\
    \ - 1))]}\n                temp_result[$(($i - 1))]=${temp_result[$i]}\n     \
    \           temp_result[$i]=$temp\n            elif [ \"${sum_of_digits[$i]}\"\
    \ -eq \"${sum_of_digits[$(($i - 1))]}\" ]; then\n                if [ \"${temp_result[",
  "  local result=($1)\n  local sums=($(echo $1 | tr ' ' '\\n' | awk '{print gensum($1)}'))\n\
    \  # echo ${sums[@]}\n  local indexes=($(seq 0 $((${#result[@]} - 1))))\n  # echo\
    \ ${indexes[@]}\n  local index_sum=()\n  for idx in ${indexes[@]}; do\n    index_sum+=(\"\
    $idx ${sums[$idx]}\")\n  done\n  # echo ${index_sum[@]}\n  # local index_sum=($(echo\
    \ ${sums[@]} | tr ' ' '\\n' | awk '{print NR, $1}'))\n  # echo ${index_sum[@]}\n\
    \  local tmp_file=$(mktemp)\n  for e in ${index_sum[@]}; do\n    echo $e >> $tmp_file\n\
    \  done\n  # sort -rnk 2,2 $tmp_file > $tmp_file.sorted\n  sort -nk 2,2 $tmp_file\
    \ > $tmp_file.sorted\n  local sorted_index=$(awk '{print $1}' $tmp_file.sorted)\n\
    \  rm $tmp_file*\n  local sorted_list=()\n  for idx in $sorted_index; do\n   \
    \ sorted_list+=(\"${result[$idx]}\")\n  done\n  echo ${sorted_list[@]}", "   \
    \ local numbers=($1)\n    local digits=()\n    local sums=()\n    local digitsSum=0\n\
    \    local sumIndex=0\n    local length=${#numbers[@]}\n    local result=()\n\
    \    if [ $length -eq 0 ]; then\n        echo []\n        return\n    fi\n   \
    \ for (( i=0; i<$length; i++ )); do\n        digitsSum=0\n        for (( j=0;\
    \ j<${#numbers[$i]}; j++ )); do\n            (( digitsSum+=${numbers[$i]:$j:1}\
    \ ))\n        done\n        digits[$i]=$digitsSum\n        (( sumIndex++ ))\n\
    \    done\n    for (( i=0; i<$length; i++ )); do\n        for (( j=0; j<$length;\
    \ j++ )); do\n            if [ \"${digits[$i]}\" -lt \"${digits[$j]}\" ]; then\n\
    \                local temp1=${digits[$i]}\n                local temp2=${numbers[$i]}\n\
    \                digits[$i]=${digits[$j]}\n                numbers[$i]=${numbers[$j]}\n\
    \                digits[$j]=$temp1\n                numbers[$j]=$temp2\n     \
    \       fi\n        done\n    done\n    for (( i=0; i<$length; i++ )); do\n  \
    \      result[$i]=\"\\\"${numbers[$i]}\\\"\"\n    done\n    echo ${result[@]}",
  "    declare -a list=($1)\n\n    # Get sum of digits of each item and store in list_with_sum.\n\
    \    # Use the sum as key and index of the list as value.\n    declare -A list_with_sum\n\
    \    for (( i=0; i<${#list[@]}; i++ )); do\n        list_with_sum[$(sum \"${list[$i]}\"\
    )]=\"$i\"\n    done\n\n    # Sort the list in the ascending order of the sum.\n\
    \    echo \"${list[@]}\" | sort -n -k2\n\n    # Use the sorted order to reorder\
    \ the list\n    declare -a sorted_list\n    for key in \"${!list_with_sum[@]}\"\
    ; do\n        sorted_list[${list_with_sum[$key]}]=\"${list[$key]}\"\n    done\n\
    \n    echo \"${sorted_list[@]}\"", "  local sum_list=()\n  local key=0\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local temp=0\n  local result=()\n\
    \  for element in $1; do\n    sum_list[$i]=$(($(echo $element | fold -w1 | paste\
    \ -sd+ | bc)))\n    i=$i+1\n  done\n  for ((j=0; j<=$i; j++)); do\n    key=${sum_list[$j]}\n\
    \    for ((k=j-1; k>=0; k--)); do\n      if [ ${sum_list[$k]} -gt $key ]; then\n\
    \        temp=${sum_list[$k]}\n        sum_list[$k]=$key\n        sum_list[$((k+1))]=$temp\n\
    \      fi\n    done\n  done\n  echo ${sum_list[@]}", "    # write your code here\n\
    \    inputArray=()\n    resultArray=()\n    sumArray=()\n    # converting input\
    \ to an array\n    while IFS=' ' read -ra inputArray; do\n        for i in \"\
    ${inputArray[@]}\"; do\n            # process \"$i\"\n            if [ \"$i\"\
    \ -gt 0 ]; then\n                # positive number\n                sum=0\n  \
    \              for((; $i > 0; i=i/10)); do\n                    let \"sum+=$i%10\"\
    \n                done\n            else\n                # negative number\n\
    \                sum=0\n                for((; $i < 0; i=i/10)); do\n        \
    \            let \"sum-=$i%10\"\n                done\n            fi\n      \
    \      sumArray+=($sum)\n        done\n    done\n    #sorting arrays by sum of\
    \ digits\n    for i in \"${sumArray[@]}\"; do\n        IFS=$'\\n' sorted=($(sort\
    \ -r <<<\"${sumArray[*]}\"))\n        unset IFS\n    done\n    # sorting the input\
    \ array by same order as the sorted sum array\n    for i in \"${sorted[@]}\";\
    \ do\n        for j in \"${sumArray[@]}\"; do\n            if [ \"$i\" -eq \"\
    $j\" ]; then\n                resultArray+=($(echo \"${inputArray[@]}\" | tr '\
    \ ' '\\n' | grep -n \"${inputArray[@]:${sumArray[@]}}\" | cut -d: -f1))\n    \
    \        fi\n        done\n    done\n    #printing the result array\n    for i\
    \ in \"${resultArray[@]}\"; do\n        echo \"${inputArray[$i-1]}\"\n    done",
  "  echo \"\\\"$(echo \"$@\" | sed 's/\\s+/-1/g' | tr ' ' '\\n' | awk '{sum=0;for(i=1;i<=length($1);i++)sum+=$1;printf(\"\
    %s %s\\n\",$1,sum)}' | sort -k2 -n | cut -d' ' -f1 | sed 's/-1/ /g')\\\"\"", " \
    \   # Write the following code\n    declare -A s\n    i=0\n    for n in $@; do\n\
    \        n=${n#-}\n        s[$i]=$((${s[$i]:-0}+$n))\n        i=$((i+1))\n   \
    \ done\n    i=0\n    for n in $@; do\n        echo \"$i ${s[$i]}\"\n        i=$((i+1))\n\
    \    done | sort -n -k2 | cut -d' ' -f1 | while read -r line; do\n        echo\
    \ -n \"\\\"${@:$((line+1)):1}\\\" \"\n    done", "  # create an array, because\
    \ I can\n  local array=($1)\n  # map the values to their indices, digits and sums\n\
    \  local indices=()\n  local digits=()\n  local sums=()\n  for i in \"${!array[@]}\"\
    ; do\n    indices+=($i)\n    digits+=($(echo ${array[$i]} | sed 's/\\(.\\)/\\\
    1 /g'))\n    sums+=($(echo ${array[$i]} | sed 's/\\(.\\)/\\1 /g' | sed 's/\\(\\\
    +\\|-\\)//g' | \\\n             tr -d \" \" | wc -m))\n  done\n  # sort the indices\
    \ by their sums\n  local oi=()\n  oi=($(echo ${sums[@]} | tr \" \" \"\\n\" | sort\
    \ -n | tr \"\\n\" \" \"))\n  # and according to their indices, if equal\n  for\
    \ i in \"${!oi[@]}\"; do\n    for j in \"${!oi[@]}\"; do\n      if [ \"$i\" -ne\
    \ \"$j\" ] && [ \"${oi[$i]}\" = \"${oi[$j]}\" ]; then\n        if [ \"${indices[$i]}\"\
    \ -gt \"${indices[$j]}\" ]; then\n          oi[$i]=${oi[$j]}\n          oi[$j]=${oi[$i]}\n\
    \        fi\n      fi\n    done\n  done\n  # map the indices to their values\n\
    \  local result=()\n  for i in \"${!oi[@]}\"; do\n    result+=($(echo ${array[${oi[$i]}]}))\n\
    \  done\n  # return the result\n  echo ${result[@]}", "    # Write your code here.\n\
    \    local input=($1)\n    local result=()\n    for idx in ${!input[@]}; do\n\
    \        result[idx]=$(echo \"${input[idx]} ${idx}\" | awk '{print $1,$2,($1<0\
    \ ? -1 : 1)*($1%10+($1/10)%10+($1/100)%10+($1/1000)%10+($1/10000)%10+($1/100000)%10+($1/1000000)%10+($1/10000000)%10+($1/100000000)%10+($1/1000000000)%10)}')\n\
    \    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -n -k3 -k2 | awk '{print\
    \ $1}' | tr '\\n' ' '", "    local -a arr=($1)\n    local -a sums=($(for n in\
    \ ${arr[@]}; do\n        s=0\n        while [ \"$n\" -gt 0 ]; do\n           \
    \ s=$(( s + n % 10 ))\n            n=$(( n / 10 ))\n        done\n        echo\
    \ $s\n    done))\n    for i in $(seq 0 $((${#arr[@]} - 1))); do\n        for j\
    \ in $(seq $((i + 1)) $((${#arr[@]} - 1))); do\n            if [ ${sums[$i]} -gt\
    \ ${sums[$j]} ] || \\\n               [ ${sums[$i]} -eq ${sums[$j]} ] && [ ${arr[$i]}\
    \ -gt ${arr[$j]} ]; then\n                local t=${arr[$i]}\n               \
    \ arr[$i]=${arr[$j]}\n                arr[$j]=$t\n                t=${sums[$i]}\n\
    \                sums[$i]=${sums[$j]}\n                sums[$j]=$t\n         \
    \   fi\n        done\n    done\n    echo ${arr[@]}", "    INPUT=\"$1\"\n    echo\
    \ $INPUT | tr ' ' '\\n' | sort -n -k1.1 -k2 | sed 's/^/-\"/g' | sed 's/$/\"/g'\
    \ | tr '\\n' ' '", "    local -a nums=($1)\n    local -a sums\n    local -a out\n\
    \    for ((i=0; i<${#nums[@]}; i++)); do\n        local sum=0\n        for ((j=0;\
    \ j<${#nums[$i]}; j++)); do\n            sum=$((sum + ${nums[$i]:$j:1}))\n   \
    \     done\n        sums[$i]=$sum\n    done\n    for ((i=0; i<${#nums[@]}; i++));\
    \ do\n        local min_index=$i\n        for ((j=$i; j<${#nums[@]}; j++)); do\n\
    \            if ((${sums[$j]} < ${sums[$min_index]})); then\n                min_index=$j\n\
    \            fi\n        done\n        out[$i]=${nums[$min_index]}\n        nums[$min_index]=${nums[$i]}\n\
    \        sums[$min_index]=${sums[$i]}\n    done\n    echo \"${out[@]}\"", "  \
    \  local new_list=\"\"\n    for i in $1; do\n        local digits=$(get_digits\
    \ $i)\n        local sum=$(get_sum_of_digits $digits)\n        new_list=\"$new_list\
    \ $sum:$i\"\n    done\n    new_list=$(echo $new_list | tr ' ' '\\n' | sort | tr\
    \ '\\n' ' ')\n    echo -n \"[\"\n    for i in $new_list; do\n        local sum=${i%:*}\n\
    \        local val=${i#*:}\n        if [ \"$val\" == \"$new_list\" ]; then\n \
    \           echo -n \"'\\\"$val\\\"'\"\n        else\n            echo -n \"'\\\
    \"$val\\\"', \"\n        fi\n    done\n    echo -n \"]\"", "  local list=$1\n\
    \  local arr=($list)\n  local i j\n  local tmp\n  local sum_arr=()\n  local index=0\n\
    \  local sum\n  local sum_last\n\n  for i in ${arr[@]}; do\n    sum=0\n    for\
    \ (( j=0; j<${#i}; j++ )); do\n      sum=$((sum + ${i:$j:1}))\n    done\n    sum_arr[$index]=$sum\n\
    \    index=$((index + 1))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n\
    \    for (( j=i+1; j<${#arr[@]}; j++ )); do\n      if [[ ${sum_arr[$i]} -gt ${sum_arr[$j]}\
    \ ]]; then\n        tmp=${arr[$i]}\n        arr[$i]=${arr[$j]}\n        arr[$j]=$tmp\n\
    \        sum_last=${sum_arr[$i]}\n        sum_arr[$i]=${sum_arr[$j]}\n       \
    \ sum_arr[$j]=$sum_last\n      fi\n    done\n  done\n\n  printf \"[\"\n  for ((\
    \ i=0; i<${#arr[@]}; i++ )); do\n    printf \"\\\"%s\\\"\" \"${arr[$i]}\"\n  \
    \  if [[ $i -lt $(( ${#arr[@]} - 1 )) ]]; then\n      printf \", \"\n    fi\n\
    \  done\n  printf \"]\"", "  local result=();\n  for i in ${@}; do\n    result+=($(printf\
    \ \"%04d%s\" $(echo ${i} | sed -e 's/-//g' | sed -e 's/[[:digit:]]//g' | wc -c)\
    \ ${i}));\n  done;\n  echo ${result[@]} | tr ' ' '\\n' | sort -n | sed -e 's/\\\
    (^0*\\)\\(.*$\\)/\\2/' | tr '\\n' ' ';", "    local -a array\n    array=($1)\n\
    \    local -a new_array\n    local -i sum\n    local -i i\n    for item in \"\
    ${array[@]}\"; do\n        sum=0\n        for ((i=0; i<${#item}; i++)); do\n \
    \           sum=$((sum + 10#${item:$i:1}))\n        done\n        new_array+=(\"\
    $sum:$item\")\n    done\n    sort -n <<< \"${new_array[*]}\" | cut -d: -f2-",
  "  # sort -n is for numerical sort\n  # | tr will convert each element into string\n\
    \  # sort -k1 -n will sort based on digit's sum\n  # sort -k2 is for secondary\
    \ sort\n\n  echo $1 | tr \" \" \"\\n\" | \\\n    while read num; do\n      echo\
    \ $(($(echo $num | grep -o . | tr -d \"\\n\" | wc -m) + 10)) \"$num\"\n    done\
    \ | \\\n    sort -k1 -n | \\\n    sort -k2 | \\\n    cut -d \" \" -f 2 | \\\n\
    \    tr \"\\n\" \" \"", "    test -z \"$1\" && exit 0\n    my_list=$1\n    my_list_item_count=$(echo\
    \ $my_list | wc -w)\n    index=1\n    while [ $index -le $my_list_item_count ]\n\
    \    do\n        my_item=$(echo $my_list | cut -d ' ' -f $index)\n        #my_item_sum_digits=$(echo\
    \ $my_item | grep -o -E '-?[0-9]+' | sed 's/-//g' | fold -w1 | sort | paste -sd+\
    \ | bc)\n        my_item_sum_digits=$(echo $my_item | grep -o -E '-?[0-9]+' |\
    \ sed 's/-//g' | awk '{sum=0; for(i=1;i<=NF;i++) sum+=$i; print sum}')\n     \
    \   #echo $my_item_sum_digits\n        my_item_sum_digits_list+=\" $my_item_sum_digits\"\
    \n        #echo $my_item_sum_digits_list\n        index=$(( $index + 1 ))\n  \
    \  done\n    #echo $my_item_sum_digits_list\n    my_item_sum_digits_list=$(echo\
    \ $my_item_sum_digits_list | sort -n)\n    #echo $my_item_sum_digits_list\n  \
    \  index=1\n    while [ $index -le $my_list_item_count ]\n    do\n        my_item_sum_digits=$(echo\
    \ $my_item_sum_digits_list | cut -d ' ' -f $index)\n        #echo $my_item_sum_digits\n\
    \        index_my_item=$(echo $my_list | grep -n -E -w \"[^ ]*$my_item_sum_digits[^\
    \ ]*\" | sed 's/:.*//g')\n        #echo $index_my_item\n        my_item=$(echo\
    \ $my_list | cut -d ' ' -f $index_my_item)\n        #echo $my_item\n        my",
  "    if [ -z \"$1\" ]; then\n        echo \"[]\"\n        return\n    fi\n    echo\
    \ -n \"[\"\n    local FIRST=true\n    for word in $1; do\n        local SUM=0\n\
    \        for ((i=0; i<${#word}; i++)); do\n            SUM=$((SUM + ${word:$i:1}))\n\
    \        done\n        if [ \"$FIRST\" = false ]; then\n            echo -n \"\
    , \"\n        fi\n        FIRST=false\n        echo -n \"\\\"${word}-${SUM}\\\"\
    \"\n    done\n    echo \"]\"", "    nums=($1)\n    reordered=()\n    for i in\
    \ ${!nums[@]}; do\n        sorted=0\n        for j in ${!reordered[@]}; do\n \
    \           if [ $(sum_digits ${nums[$i]}) -lt $(sum_digits ${reordered[$j]})\
    \ ]; then\n                reordered=(\"${reordered[@]:0:$j}\" ${nums[$i]} \"\
    ${reordered[@]:$j}\")\n                sorted=1\n                break\n     \
    \       fi\n        done\n        if [ $sorted -eq 0 ]; then\n            reordered+=(\"\
    ${nums[$i]}\")\n        fi\n    done\n    echo ${reordered[@]}", "    [ $# -eq\
    \ 0 ] && echo \"[]\" && return\n\n    local sorted_list=()\n    while read item;\
    \ do\n        sorted_list+=(\"$item\")\n    done < <(\n        echo $@ | tr '\
    \ ' '\\n' | sort -n -k 1 -s\n    )\n\n    echo \"[$(\n        for item in \"${sorted_list[@]}\"\
    ; do\n            echo \"\\\"$item\\\"\"\n        done | tr '\\n' ',' | sed 's/,$//'\n\
    \    )]", "    list=$1\n    sorted_list=$(echo $list | tr \" \" \"\\n\" | \\\n\
    \        while read num; do\n            sum=0\n            while (( num > 0 ));\
    \ do\n                sum=$(( $sum + $num % 10 ))\n                num=$(( $num\
    \ / 10 ))\n            done\n            echo \"$sum $num\"\n        done | sort\
    \ -n | awk '{print $2}')\n    echo \"[$(echo $sorted_list | tr \" \" \",\" | sed\
    \ 's/,/\", \"/g')]\"", "    a=($1)\n    result=()\n    len=${#a[@]}\n    while\
    \ [ $len -gt 0 ]; do\n        index=$(( len - 1 ))\n        max=-1\n        for\
    \ ((i=0; i<len; i++)); do\n            value=${a[$i]}\n            sum=0\n   \
    \         for ((j=0; j<${#value}; j++)); do\n                sum=$(( sum + ${value:$j:1}\
    \ ))\n            done\n            if [ $sum -gt $max ]; then\n             \
    \   max=$sum\n                index=$i\n            fi\n        done\n       \
    \ result[${#result[@]}]=${a[$index]}\n        for ((i=index; i<len-1; i++)); do\n\
    \            a[$i]=${a[$(( i + 1 ))]}\n        done\n        unset a[$(( len -\
    \ 1 ))]\n        len=$(( len - 1 ))\n    done\n    echo \"[$( IFS=','; echo \"\
    ${result[*]}\" )]\"", "\tp='s/.*/& 1/'\n\t# Sort the list with sed\n\torder_by_points=$(echo\
    \ $1 | sed \"$p\" | sort -nk2)\n\t# Replace '1' by '\\n' and delete the last character\n\
    \torder_by_points=$(echo $order_by_points | sed 's/1/\\n/g' | head -c -1)\n\t\
    echo \"$order_by_points\"", "  # check if the given string is empty\n  if [ -z\
    \ \"$1\" ]; then\n    echo '[]'\n    return 0\n  fi\n\n  # store the given arguments\
    \ in array\n  args=(\"$@\")\n\n  # store the indexes of the arguments\n  indexes=()\n\
    \  for i in \"${!args[@]}\"; do\n    indexes+=(\"$i\")\n  done\n\n  # store the\
    \ sums of the elements in array\n  sums=()\n  for arg in \"${args[@]}\"; do\n\
    \    sum=0\n    for char in $(echo \"$arg\" | sed -e 's/\\-//g'); do\n      ((sum+=char))\n\
    \    done\n    sums+=(\"$sum\")\n  done\n\n  # sorting the sums and indexes\n\
    \  for i in \"${!sums[@]}\"; do\n    for j in \"${!sums[@]}\"; do\n      if [\
    \ \"${sums[$i]}\" -lt \"${sums[$j]}\" ]; then\n        temp=${sums[$i]}\n    \
    \    sums[$i]=${sums[$j]}\n        sums[$j]=$temp\n        temp2=${indexes[$i]}\n\
    \        indexes[$i]=${indexes[$j]}\n        indexes[$j]=$temp2\n      fi\n  \
    \  done\n  done\n\n  # sorting the array of arguments based on the indexes\n \
    \ res=()\n  for i in \"${indexes[@]}\"; do\n    res+=(\"\\\"${args[$i]}\\\"\"\
    )\n  done\n\n  echo \"[\"$(IFS=, ; echo \"${res[*]}\")\"]\"", "  local sorted=()\n\
    \  for n in $1; do\n    # Define a pseudo-array which contains $n and the sum\
    \ of its digits.\n    sorted+=(\"$n $(($(echo $n | sed 's/[^0-9]/ /g' | tr ' '\
    \ '+')))\" )\n  done\n  # Sort the list.\n  sorted=($(echo \"${sorted[@]}\" |\
    \ tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n  # Build the result.\n  local result=\"\
    [\"\n  for s in \"${sorted[@]}\"; do\n    result+=\"'\\\"$s\\\"', \"\n  done\n\
    \  result=\"${result%??}]\"\n  echo $result", "    local -a list=($1)\n    local\
    \ -a sorted_list\n    for i in \"${!list[@]}\"; do\n        local sum=0\n    \
    \    for (( j=0; j<${#list[$i]}; j++ )); do\n            (( sum += ${list[$i]:$j:1}\
    \ ))\n        done\n        local -i d=$(( 10**(${#list[$i]}-1) ))\n        sorted_list[$((\
    \ 10**5*sum + d*$i ))]=${list[$i]}\n    done\n    echo $(printf \"%s\\n\" \"${sorted_list[@]}\"\
    \ | sort -n | cut -d' ' -f2-)", "    list=$@\n    echo ${list[@]} | sed -E \"\
    s/[ ]+/\\n/g\" | sort -k 1 | sed -E \"s/[ ]+/\\n/g\"", "  arr=($1)\n  len=${#arr[@]}\n\
    \  for (( i=0; i<len; i++ ))\n  do\n    sum=0\n    for (( j=0; j<${#arr[$i]};\
    \ j++ ))\n    do\n      sum=$(( sum + ${arr[$i]:$j:1} ))\n    done\n    arr_sum[$i]=$sum\n\
    \  done\n  index_arr=($(for i in \"${!arr_sum[@]}\"; do echo \"$i ${arr_sum[$i]}\"\
    ; done | sort -k2 -n | cut -d \" \" -f1))\n  str=\"\"\n  for i in \"${index_arr[@]}\"\
    \n  do\n    str=\"$str ${arr[$i]}\"\n  done\n  echo $str", "    declare -a nums=($(echo\
    \ $@))\n    for (( i=0; i<${#nums[@]}; i++ )); do\n        n=${nums[$i]}\n   \
    \     sum=0\n        for (( j=0; j<${#n}; j++ )); do\n            sum=$(( $sum\
    \ + ${n:$j:1} ))\n        done\n        echo $sum ${nums[$i]}\n    done | sort\
    \ -nk1 | awk '{print $2}' | awk '{$1=$1};1'", "    local input\n    input=( $1\
    \ )\n    local list\n    list=()\n    local sums\n    sums=()\n    for ((i=0;\
    \ i<${#input[@]}; i++)); do\n        local number=\"${input[$i]}\"\n        local\
    \ sum=0\n        for ((j=0; j<${#number}; j++)); do\n            (( sum+=${number:$j:1}\
    \ ))\n        done\n        list+=(\"$number\")\n        sums+=(\"$sum\")\n  \
    \  done\n    local order\n    order=($(for i in ${!sums[@]}; do echo $i ${sums[$i]};\
    \ done | sort -n -k2 -k1 | cut -d\" \" -f1))\n    local sorted\n    sorted=()\n\
    \    for index in ${order[@]}; do\n        sorted+=(\"${list[$index]}\")\n   \
    \ done\n    echo ${sorted[@]}", "    local items=($1)\n    local sum_of_digits=($(for\
    \ item in \"${items[@]}\"; do echo \"${item//[^0-9]/}\"; done | \\\n        awk\
    \ '{sum=0; for(i=1;i<=NF;i++) sum+=$i; print sum}'))\n    local sort_order=($(paste\
    \ <(echo \"${sum_of_digits[@]}\") <(echo \"${!sum_of_digits[@]}\") | \\\n    \
    \    sort -k 1,1n -k 2,2n | awk '{print $2}'))\n    local sorted_items=($(for\
    \ i in \"${sort_order[@]}\"; do echo \"${items[$i]}\"; done))\n    echo \"${sorted_items[@]}\"",
  "  sum_list=()\n  list=()\n  for i in $1; do\n    sum=0\n    for((j=0;j<${#i};j++));\
    \ do\n      sum=$((sum+${i:$j:1}))\n    done\n    list+=($i)\n    sum_list+=($sum)\n\
    \  done\n  for((i=0;i<${#sum_list[@]};i++)); do\n    for((j=i+1;j<${#sum_list[@]};j++));\
    \ do\n      if [ ${sum_list[$i]} -gt ${sum_list[$j]} ]; then\n        tmp=${sum_list[$i]}\n\
    \        sum_list[$i]=${sum_list[$j]}\n        sum_list[$j]=$tmp\n        tmp=${list[$i]}\n\
    \        list[$i]=${list[$j]}\n        list[$j]=$tmp\n      fi\n    done\n  done\n\
    \  echo ${list[@]}", "    # TODO\n    local list=($1)\n    local len=${#list[@]}\n\
    \    for (( i=0; i<$len; i++ )) do\n        local num=${list[$i]}\n        local\
    \ sum=0\n        local digit\n        while [ $num -gt 0 ]; do\n            digit=$((\
    \ $num % 10 ))\n            sum=$(( $sum + $digit ))\n            num=$(( $num\
    \ / 10 ))\n        done\n        point[$i]=$sum\n    done\n    for (( i=0; i<$len;\
    \ i++ )) do\n        for (( j=i+1; j<$len; j++ )) do\n            if [ ${point[$i]}\
    \ -gt ${point[$j]} ]; then\n                local temp=${point[$i]}\n        \
    \        point[$i]=${point[$j]}\n                point[$j]=$temp\n           \
    \     temp=${list[$i]}\n                list[$i]=${list[$j]}\n               \
    \ list[$j]=$temp\n            fi\n        done\n    done\n    echo ${list[@]}",
  "    local -a sorted\n    local sum\n\n    for i in ${1}; do\n        sum=$(sum_digits\
    \ ${i})\n        sorted[${sum}]=${i}\n    done\n\n    for j in \"${sorted[@]}\"\
    ; do\n        if [ -n \"${j}\" ]; then\n            echo \"${j}\"\n        fi\n\
    \    done", "  if [ -z \"$1\" ]; then\n    echo \"[]\"\n    return\n  fi\n  sorted_list=()\n\
    \  for item in \"$@\"; do\n    sum=0\n    for digit in $(echo $item | grep -o\
    \ .); do\n      sum=$((sum + digit))\n    done\n    sorted_list+=(\"$sum $item\"\
    )\n  done\n  echo \"${sorted_list[@]}\" | sort -n | tr ' ' '\\n' | tr '\\n' '\
    \ ' | tr -d '\"'", "    # split all input elements into an array\n    input_array=($1)\n\
    \    # initialize\n    output_array=()\n    # iterate over the indices of input\
    \ array\n    for i in ${!input_array[@]}; do\n        # for each element, calculate\
    \ the sum of its digits\n        sum=0\n        for ((j=0; j<${#input_array[$i]};\
    \ j++)); do\n            sum=$((sum + ${input_array[$i]:$j:1}))\n        done\n\
    \        # write the result to the output array at the index sum + input index,\n\
    \        # so that we can sort the output array by index (key) to achieve the\
    \ sort order\n        output_array[$((sum + i))]=${input_array[$i]}\n    done\n\
    \    # print output\n    echo ${output_array[@]}", "\tlocal list=()\n\tfor element\
    \ in $1; do\n\t\tif [[ $element =~ [\\-]*[0-9]+ ]]; then\n\t\t\tlocal sum=0\n\t\
    \t\tfor number in $(seq 0 $((${#element} - 1))); do\n\t\t\t\tsum=$(($sum + ${element:$number:1}))\n\
    \t\t\tdone\n\t\t\tlist+=(\"$sum:$element\")\n\t\tfi\n\tdone\n\techo \"${list[@]}\"\
    \ | tr ' ' '\\n' | sort -k 1 -t ':' | cut -d ':' -f 2 | tr '\\n' ' '", "    local\
    \ digits=\"\"\n    local tmp=\"\"\n    local arr=\"\"\n    local i=0\n    digits=$(echo\
    \ \"$1\" | sed -e 's/\\s+/\\n/g' | sed -e 's/\\([0-9-]\\+\\)/\\1\\n/g' | grep\
    \ -e '[0-9-]' | sed -e 's/-//g')\n    for i in $digits; do\n        arr=$(printf\
    \ '%s\\n%s' \"$arr\" $i)\n    done\n    arr=$(echo \"$arr\" | sort -n)\n    i=0\n\
    \    for i in $arr; do\n        tmp=$(printf '%s\\n%s' \"$tmp\" \"$i\")\n    done\n\
    \    digits=$(echo \"$1\" | sed -e 's/\\s+/\\n/g' | sed -e 's/\\([0-9-]\\+\\)/\\\
    1\\n/g' | grep -e '[0-9-]' | sed -e 's/-//g')\n    arr=\"\"\n    for i in $digits;\
    \ do\n        arr=$(printf '%s\\n%s' \"$arr\" \"$(echo \"$tmp\" | grep -n \"^$i$\"\
    \ | awk -F: '{print $1}')\")\n    done\n    arr=$(echo \"$arr\" | sort -n)\n \
    \   i=0\n    tmp=\"\"\n    for i in $arr; do\n        tmp=$(printf '%s\\n%s' \"\
    $tmp\" \"$(echo \"$1\" | sed -e 's/\\s+/\\n/g' | sed -e 's/\\([0-9-]\\+\\)/\\\
    1\\n/g' | grep -e '[0-9-]' | grep -n \"^$(echo \"$tmp\" | sed -n \"$i\"p)$\" |\
    \ awk -F: '{print $1}')\")\n    done\n    arr=\"\"\n    for i in $tmp; do\n  \
    \      arr=$(printf '%s\\n%s' \"$arr\" \"$(echo \"$1\" | sed -e 's/\\s+/\\n/g'\
    \ | sed -e '", "    # sort list by sum of digits\n    # sort -nrk 2,2 - means\
    \ sort by second column in order from higher to lower\n    # '-k 1,1 -' - means\
    \ sort by first column in order from lower to higher\n    echo \"$1\" | awk '{\n\
    \        for (i = 1; i <= NF; i++) {\n            sum = 0;\n            for (j\
    \ = 1; j <= length($i); j++) {\n                sum += substr($i, j, 1);\n   \
    \         }\n            print sum, i, $i;\n        }\n    }' | sort -nrk 2,2\
    \ -k 1,1 - | awk '{ print $3 }' | awk '{$1=$1};1'", "    echo $1 | sed -E 's/\\\
    s/\\n/g' |\n        awk 'BEGIN {\n        }\n        {\n            digitsum =\
    \ 0;\n            for (i = 1; i <= length($1); i++) {\n                digitsum\
    \ += substr($1, i, 1);\n            }\n            print digitsum\"\\t\"$1;\n\
    \        }\n        END {\n        }' | sort -n | awk 'BEGIN {\n            printf\
    \ \"[\";\n        }\n        {\n            printf \"\\\"\"$2\"\\\"\";\n     \
    \       if (!eof()) {\n                printf \", \";\n            }\n       \
    \ }\n        END {\n            printf \"]\";\n        }'", "\tpython -c \"import\
    \ sys\ndef sum(x):\n    res = 0\n    while x:\n        res += x % 10\n       \
    \ x /= 10\n    return res\nprint ' '.join(sorted(sys.argv[1:], key=lambda x: (sum(abs(int(x))),\
    \ int(x))))\" $@", "  #use <() to get input stream\n  cat <(echo $1) | while read\
    \ line\n  do\n    #just read lines in the input stream\n    sum=0\n    for i in\
    \ $line\n    do\n      #use bc to get sum of a number, then add to sum\n     \
    \ sum=$(echo \"$sum + $i\" | bc)\n    done\n    #echo the sum of a number\n  \
    \  echo \"$sum  $line\"\n  done | sort -n -k1 | cut -d \" \" -f 2", "    local\
    \ nums=($(echo \"$1\" | tr ' ' '\\n'))\n    local sums=()\n    for ((i=0; i<${#nums[@]};\
    \ i++)); do\n        sums[i]=$(echo \"${nums[i]}\" | sed 's/[^0-9]//g' | grep\
    \ -o . | grep -v 0 | wc -L)\n    done\n    local res=()\n    while [ ${#nums[@]}\
    \ -gt 0 ]; do\n        local min=\n        local min_index=\n        for ((i=0;\
    \ i<${#nums[@]}; i++)); do\n            if [ -z \"$min\" ] || [ ${sums[i]} -lt\
    \ $min ]; then\n                min=\"${sums[i]}\"\n                min_index=$i\n\
    \            fi\n        done\n        sums[$min_index]=\n        res+=(\"${nums[$min_index]}\"\
    )\n        unset nums[$min_index]\n        nums=(${nums[@]})\n    done\n    for\
    \ ((i=0; i<${#res[@]}; i++)); do\n        echo \"${res[i]}\"\n    done", "  items=\"\
    $1\"\n  if [ -z \"$items\" ]; then\n    echo \"[]\"\n    return\n  fi\n  items=$(echo\
    \ \"$items\" | tr ' ' '\\n' | sort -n)\n  echo \"$items\" | while read item; do\n\
    \    num=0\n    while [ \"$item\" -gt 0 ]; do\n      num=$((num + item % 10))\n\
    \      item=$((item / 10))\n    done\n    echo $num:$item\n  done | sort -n |\
    \ cut -d: -f2 | tr '\\n' ' ' | sed -e 's/\\s/\\n/g' | sed -e 's/^/[/' -e 's/$/]/'",
  "  # Write your implementation here\n  exit 0 # don't forget to remove this line",
  "\tlocal i a s\n\tfor i in ${*}; do\n\t\ta=0\n\t\tfor s in $(echo \"${i}\" | sed\
    \ 's/[^[:digit:]]//g'); do\n\t\t\t(( a += ${s} ))\n\t\tdone\n\t\techo \"${a}:${i}\"\
    \n\tdone | sort -n | sed 's/^[^:]*://'", "    ret=\"\"\n    a=($1)\n    for s\
    \ in \"${a[@]}\"; do\n        echo \"$s\"\n    done | sort -n -k 1,1 -s", "\t\
    for i in $1; do\n\t\t# convert numbers to string\n\t\ti=$(printf %s $i)\n\t\t\
    # sum of the digits\n\t\tsum=0\n\t\tfor j in $(seq 0 $((${#i}-1))); do\n\t\t\t\
    sum=$(($sum + ${i:$j:1}))\n\t\tdone\n\t\t# append the pair to the list\n\t\tnumbers=\"\
    $numbers $sum:$i\"\n\tdone\n\t# sort by a key, i.e. sum of the digits\n\t# and\
    \ then by the values, i.e. the numbers\n\techo $(echo $numbers | sed 's/ /\\n/g'\
    \ | sort -k1,1n -k2,2n | cut -d':' -f2 | sed 's/$/\"/g' | sed 's/^/\"/g' | tr\
    \ '\\n' ' ')", "    local array=($1)\n    local res=()\n    local key_value=($(for\
    \ x in \"${array[@]}\"; do echo $x,$(sum_of_digits $x); done))\n    for ((i=0;\
    \ i<${#key_value[@]}; i++)); do\n        res[$i]=${key_value[$i]}\n    done\n\
    \    echo ${res[@]} | tr ' ' '\\n' | sort -n -k2 | cut -d',' -f1 | tr '\\n' '\
    \ '", "\tlocal -a array=($1)\n\tlocal s\n\t# 2-pass algo\n\tfor i in \"${!array[@]}\"\
    ; do\n\t\ts=0\n\t\tfor (( j=0; j<${#array[i]}; j++ )); do\n\t\t\t[ \"${array[i]:j:1}\"\
    \ -eq \"${array[i]:j:1}\" ] 2>/dev/null &&\n\t\t\t\ts=$(( $s + ${array[i]:j:1}\
    \ ))\n\t\tdone\n\t\teval \"point$i=$s\"\n\tdone\n\tfor (( i=0; i<${#array[@]};\
    \ i++ )); do\n\t\tfor (( j=i+1; j<${#array[@]}; j++ )); do\n\t\t\t[[ $(eval \"\
    echo \\$point$i\") -gt $(eval \"echo \\$point$j\") ]] && {\n\t\t\t\teval \"point$i=$(eval\
    \ \"echo \\$point$j\")\"\n\t\t\t\teval \"point$j=$(eval \"echo \\$point$i\")\"\
    \n\t\t\t\ts=\"${array[i]}\"\n\t\t\t\tarray[i]=\"${array[j]}\"\n\t\t\t\tarray[j]=\"\
    $s\"\n\t\t\t}\n\t\tdone\n\tdone\n\techo \"${array[@]}\"", "  sum_digit() {\n \
    \   if [ $1 -ge 0 ]; then\n      expr $1 '%' 10 + $(expr $1 / 10 '%' 10)\n   \
    \ else\n      expr $1 '%' 10 - $(expr $1 / 10 '%' 10)\n    fi\n  }\n\n  echo \"\
    $@\" | tr ' ' '\\n' | sort -nk1 | while read line; do\n    echo -n '\"'$line'\"\
    \ '\n  done | sed -e 's/ $//'", "  local input=($1)\n  local ret=\"\"\n  local\
    \ i\n  local j\n  local sum=0\n  local sum1=0\n  local index=0\n  local index1=0\n\
    \  local temp=\"\"\n  local list_of_sums=\"\"\n  local list_of_indices=\"\"\n\
    \  local list_of_items=\"\"\n  local list_of_ints=\"\"\n  local sorted_list=\"\
    \"\n  local item=\"\"\n  local index_of_item=0\n  local index_of_index=0\n  for\
    \ i in ${input[@]}; do\n    sum=0\n    for j in $(seq 0 $((${#i} - 1))); do\n\
    \      sum=$(($sum + ${i:$j:1}))\n    done\n    # echo \"$sum:$i\"\n    list_of_sums+=\"\
    \ $sum\"\n    list_of_indices+=\" $index\"\n    list_of_items+=\" $i\"\n    index=$(($index\
    \ + 1))\n  done\n  list_of_sums=($list_of_sums)\n  list_of_indices=($list_of_indices)\n\
    \  list_of_items=($list_of_items)\n  for i in ${!list_of_sums[@]}; do\n    index1=0\n\
    \    sum1=${list_of_sums[$i]}\n    index_of_item=$i\n    for j in ${!list_of_sums[@]};\
    \ do\n      if [[ \"${list_of_sums[$j]}\" -lt \"$sum1\" ]]; then\n        sum1=${list_of_sums[$j]}\n\
    \        index_of_item=$j\n      fi\n    done\n    list_of_sums[$index_of_item]=9999\n\
    \    list_of_ints+=\"${list_of_items[$index_of_item]} \"\n  done\n  for i in ${!list_of_sums[@]};\
    \ do\n    index1=0\n    sum1=${list_of_sums[$i]}\n    index_of_item=$i\n    for\
    \ j in ${!", "    local list=$1\n    local -a result\n\n    for item in $list;\
    \ do\n        local sum=0\n        for (( i=0; i<${#item}; i++ )); do\n      \
    \      local digit=${item:$i:1}\n            if [[ ! $digit =~ ^[0-9]$ ]]; then\n\
    \                echo \"Error\" >&2\n                exit 1\n            fi\n\
    \            (( sum += digit ))\n        done\n        result[$item]=$sum\n  \
    \  done\n\n    # Sort the array by indices.\n    # http://linuxcommand.org/lc3_adv_tput.php\n\
    \    local -a sorted_indices=$(for i in \"${!result[@]}\"; do echo $i; done |\
    \ sort -n)\n    # Sort the array by values.\n    # http://stackoverflow.com/questions/11287861/how-to-sort-an-associative-array-in-bash\n\
    \    # http://www.thegeekstuff.com/2010/06/bash-array-tutorial/\n    # local -a\
    \ sorted_values=($(printf \"%s\\n\" \"${result[@]}\" | sort -n))\n\n    local\
    \ output=\"\"\n    for index in \"${sorted_indices[@]}\"; do\n        output+=\"\
    $index \"\n    done\n    echo $output", "    local result=\"\"\n    local -A parts=(\
    \ )\n    for item in $1; do\n        local sum=$(echo $item | tr -d -c \"1234567890\"\
    \ | fold -w1 | paste -sd+ | bc)\n        local item_idx=$(echo $1 | tr \" \" \"\
    \\n\" | grep -n \"^$item$\" | cut -d \":\" -f 1)\n        parts[$sum]=\"${parts[$sum]}\
    \ $item_idx\"\n    done\n    local sums=( $(printf \"%s\\n\" \"${!parts[@]}\"\
    \ | sort -n) )\n    for sum in ${sums[@]}; do\n        local -a item_idx=( $(echo\
    \ ${parts[$sum]} | tr \" \" \"\\n\" | sort -n) )\n        for idx in ${item_idx[@]};\
    \ do\n            local item=$(echo $1 | tr \" \" \"\\n\" | sed -n ${idx}p)\n\
    \            result=\"$result $item\"\n        done\n    done\n    echo $result",
  "    local list=($1)\n    local i=0\n    local len=${#list[@]}\n    local n=0\n\
    \    local sum\n    local sums=()\n    local result=()\n    local o_list=($1)\n\
    \    while [ $i -lt $len ]; do\n        n=${list[$i]}\n        sum=0\n       \
    \ while [ $n -ne 0 ]; do\n            sum=$((sum + n % 10))\n            n=$((n\
    \ / 10))\n        done\n        sums[$i]=$sum\n        i=$((i + 1))\n    done\n\
    \    i=0\n    while [ $i -lt $len ]; do\n        j=0\n        min=${sums[0]}\n\
    \        min_ind=0\n        while [ $j -lt $len ]; do\n            if [ ${sums[$j]}\
    \ -lt $min ]; then\n                min=${sums[$j]}\n                min_ind=$j\n\
    \            fi\n            j=$((j + 1))\n        done\n        result[$i]=${o_list[$min_ind]}\n\
    \        sums[$min_ind]=$((sums[$min_ind] + 1))\n        i=$((i + 1))\n    done\n\
    \    echo ${result[@]}", "  # Your code here\n  if [ $# == 0 ]; then\n    echo\
    \ \"[]\"\n  else\n    # make new list\n    declare -a newList\n    for number\
    \ in \"$@\"; do\n      newList+=(\"$number\")\n    done\n    # sort from 0\n \
    \   for ((i = 0; i < ${#newList[@]}; i++)); do\n      min=$i\n      for ((j =\
    \ i + 1; j < ${#newList[@]}; j++)); do\n        if [ $(sumDigits ${newList[$j]})\
    \ -lt $(sumDigits ${newList[$min]}) ]; then\n          min=$j\n        elif [\
    \ $(sumDigits ${newList[$j]}) -eq $(sumDigits ${newList[$min]}) ]; then\n    \
    \      if [ $j -lt $min ]; then\n            min=$j\n          fi\n        fi\n\
    \      done\n      if [ $min -ne $i ]; then\n        temp=${newList[$i]}\n   \
    \     newList[$i]=${newList[$min]}\n        newList[$min]=$temp\n      fi\n  \
    \  done\n    listString=\"\"\n    for ((i = 0; i < ${#newList[@]}; i++)); do\n\
    \      if [ $i -eq $((${#newList[@]} - 1)) ]; then\n        listString+=\"\\\"\
    ${newList[$i]}\\\"\"\n      else\n        listString+=\"\\\"${newList[$i]}\\\"\
    \"\n        listString+=\", \"\n      fi\n    done\n    echo \"[$listString]\"\
    \n  fi", "  if [ -z \"$1\" ]; then\n    echo \"\"\n    return 0\n  fi\n  echo\
    \ $1 | tr \" \" \"\\n\" | awk '{ print $1, sum(split($1, a, \"\")) }' |\n    sort\
    \ -n -k2,2 |\n    awk '{ print \"\\\"\"$1\"\\\"\" }' |\n    tr \"\\n\" \" \"",
  '    # your code here', "    echo \"$1\" | sed 's/\\([-]\\{0,1\\}[0-9]\\+\\)/sum\
    \ \\1|&/g' | bc | sort -n | sed 's/\\([0-9]\\+\\)[^0-9].*/\\1/g' | paste -d \"\
    \ \" - - - - - - - - - - - - - - - - - - - - - - - -", "  local -r numbers=\"\
    $1\"\n  local -r input=\"${numbers// /\\\\n}\"\n  local -r mapped=\"$(echo \"\
    $input\" | while read number; do echo $(($(echo \"$number\" | tr -d '-' | grep\
    \ -o . | tr -d '\\n' | wc -m)) $number); done)\"\n  local -r sorted=\"$(echo \"\
    $mapped\" | sort -n | cut -d ' ' -f 2-)\"\n  echo \"[$(echo \"$sorted\" | tr '\\\
    n' ',' | tr -d '\\n' | sed 's/,$//')]\"", "    echo $1 | xargs -n1 | sort -g -k1,1\
    \ | xargs | sed -e 's/ /\", \"/g' | sed -e 's/^/\"/' -e 's/$/\"/'", "    local\
    \ arr=()\n    while IFS= read -r elem; do\n        local sum=0\n        local\
    \ word\n        for word in ${elem}; do\n            local n\n            (( n\
    \ = word ))\n            local last\n            while (( n )); do\n         \
    \       (( last = n % 10 ))\n                (( sum += last ))\n             \
    \   (( n /= 10 ))\n            done\n        done\n        arr+=(\"$sum $elem\"\
    )\n    done <<< \"$1\"\n    local -a arr_sorted=($(\n        for elem in \"${arr[@]}\"\
    ; do\n            echo \"$elem\"\n        done | sort -n\n    ))\n    for elem\
    \ in \"${arr_sorted[@]}\"; do\n        local sum\n        elem=\"${elem% *}\"\n\
    \        echo \"${elem##* }\"\n    done", "\tlocal sum=()\n\tlocal list=()\n\t\
    local item\n\tlocal item_len\n\tlocal char\n\tlocal index=0\n\tfor item in $1;\
    \ do\n\t\titem_len=${#item}\n\t\tsum[$index]=0\n\t\tfor ((i=0; i<$item_len; i++));\
    \ do\n\t\t\tchar=${item:$i:1}\n\t\t\tsum[$index]=$((sum[$index] + char))\n\t\t\
    done\n\t\tlist[$index]=$item\n\t\tindex=$((index + 1))\n\tdone\n\tsort_array list\
    \ sum\n\tindex=0\n\tfor item in ${list[@]}; do\n\t\techo -n \"\\\"$item\\\" \"\
    \n\t\tindex=$((index + 1))\n\tdone", "    # put your code here\n    declare -a\
    \ arr=()\n    arr=(\"$@\")\n    echo ${arr[@]} | tr ' ' '\\n' | sort -nr | tr\
    \ '\\n' ' '", "    # TODO\n    local lst=($1)\n    for ((i=0; i<${#lst[@]}; i++));\
    \ do\n        local sum=0\n        local elem=${lst[$i]}\n        for ((j=0; j<${#elem};\
    \ j++)); do\n            sum=$((sum + ${elem:$j:1}))\n        done\n        lst[$i]=\"\
    $sum:$elem\"\n    done\n    echo \"${lst[@]}\" | tr ' ' '\\n' | sort -n | cut\
    \ -d: -f2 | tr '\\n' ' '", "    if [ \"$1\" == \"\" ]; then\n        echo \"[]\"\
    \n        return 0\n    fi\n    local array=()\n    for element in $1; do\n  \
    \      local number=\"$element\"\n        local sum=0\n        for ((digit=0;\
    \ digit<${#number}; digit++)); do\n            local digit_char=\"${number:$digit:1}\"\
    \n            sum=$((sum + ${digit_char}))\n        done\n        array+=(\"$sum|$element\"\
    )\n    done\n    IFS=$'\\n' sorted=($(sort <<<\"${array[*]}\"))\n    unset IFS\n\
    \    local strings=\"\"\n    for element in \"${sorted[@]}\"; do\n        local\
    \ element_string=$(echo \"$element\" | cut -d \"|\" -f 2)\n        strings+=\"\
    \\\"$element_string\\\" \"\n    done\n    echo \"[$strings]\"", "  local list=($1)\n\
    \  for (( i = 0; i < ${#list[@]}; i++ ))\n  do\n    sum=0\n    for (( j = 0; j\
    \ < ${#list[$i]}; j++ ))\n    do\n      sum=$((sum + ${list[$i]:$j:1}))\n    done\n\
    \    list[$i]=$(printf \"%04d\" $sum)${list[$i]}\n  done\n  IFS=$'\\n' sorted=($(sort\
    \ <<<\"${list[*]}\"))\n  for (( i = 0; i < ${#sorted[@]}; i++ ))\n  do\n    sorted[$i]=${sorted[$i]:4}\n\
    \  done\n  echo $(printf \"'%s', \" \"${sorted[@]}\")", "    SORTED=$(echo $1\
    \ | tr \" \" \"\\n\" | sort -k2 | tr \"\\n\" \" \")\n    echo $SORTED", "    local\
    \ -a arr1=($1)\n    local i=0 j=0 k=0 len=${#arr1[@]}\n    local ans=() tmp=()\n\
    \n    for ((i=0; i<len; i++)); do\n        tmp[i]=0\n        for ((j=0; j<${#arr1[i]};\
    \ j++)); do\n            if [[ ${arr1[i]:j:1} =~ [0-9] ]]; then\n            \
    \    tmp[i]=$((tmp[i] + ${arr1[i]:j:1}))\n            fi\n        done\n    done\n\
    \n    while ((k<len)); do\n        local min=${tmp[0]}\n        local idx=0\n\
    \        for ((i=1; i<len; i++)); do\n            if [[ ${tmp[i]} -lt $min ]];\
    \ then\n                min=${tmp[i]}\n                idx=$i\n            fi\n\
    \        done\n        ans[k]=\"\\\"${arr1[idx]}\\\"\"\n        tmp[idx]=1111111111111111\n\
    \        ((k++))\n    done\n\n    echo ${ans[@]}", "    local list=\"$1\"\n  \
    \  echo \"$list\" | tr ' ' '\\n' | awk '{sum=0; for(i=1;i<=length($0);i++) {sum+=$i;};print\
    \ sum,$0}' | sort -n | awk '{print $2}' | tr '\\n' ' '", "    local result=()\n\
    \    for num in $1; do\n        result+=(\"$num\")\n    done\n    echo \"${result[@]}\"\
    \ | tr ' ' '\\n' | sort -n -k1,1", "    if [ -z \"$1\" ]; then\n        echo '[]'\n\
    \        return\n    fi\n    local input=($1)\n    local size=${#input[@]}\n \
    \   for (( i = 0; i < $size; i++ )); do\n        local sum=0\n        for (( j\
    \ = 0; j < ${#input[$i]}; j++ )); do\n            sum=$(( $sum + ${input[$i]:$j:1}\
    \ ))\n        done\n        local result=\"${result}${input[$i]} ${sum} \"\n \
    \   done\n    local output=($(echo ${result} | tr ' ' '\\n' | sort -k2 -n -t '\
    \ ' | tr '\\n' ' '))\n    echo '[' $(for ((i = 0; i < $size; i++)); do echo \"\
    '\\\"${output[$i]}\\\"'\"; done) ']'", "    local ints=($1)\n    local digits\n\
    \    local points\n    local res=()\n    local j k\n\n    for((i=0; i<${#ints[@]};\
    \ i++)); do\n        digits=($(echo ${ints[$i]} | grep -o [0-9]))\n        points=0\n\
    \        for((j=0; j<${#digits[@]}; j++)); do\n            points=$((points +\
    \ ${digits[$j]}))\n        done\n        res[$i]=\"$points\"\n    done\n\n   \
    \ for((i=0; i<${#res[@]}; i++)); do\n        for((j=i+1; j<${#res[@]}; j++));\
    \ do\n            if [[ ${res[$i]} -gt ${res[$j]} ]]; then\n                temp=${res[$i]}\n\
    \                res[$i]=${res[$j]}\n                res[$j]=$temp\n         \
    \       temp=${ints[$i]}\n                ints[$i]=${ints[$j]}\n             \
    \   ints[$j]=$temp\n            fi\n        done\n    done\n\n    for((i=0; i<${#ints[@]};\
    \ i++)); do\n        echo -n \"\\\"${ints[$i]}\\\" \"\n    done", "  local digits_sums\
    \ indexes\n  digits_sums=$(echo \"$1\" | tr ' ' '\\n' | awk '{\n    len = length($1);\n\
    \    sum = 0;\n    for (i = 1; i <= len; i++) {\n      sum += substr($1, i, 1);\n\
    \    }\n    print sum \"|\" $1;\n  }' | sort)\n  indexes=$(echo \"$digits_sums\"\
    \ | awk -F'|' '{print $2}' | paste -sd' ' -)\n  echo \"$1\" | tr ' ' '\\n' | tr\
    \ '\\n' ' ' | cut -d' ' -f$indexes", "    local -a list_=()\n    for item in $1;\
    \ do\n        local -i sum=0\n        for (( i=0; i<${#item}; i++ )); do\n   \
    \         (( sum += $(expr substr \"$item\" $i 1) ))\n        done\n        list_+=(\"\
    $sum:$item\")\n    done\n    #echo \"${list_[@]}\" #debug\n    IFS=$'\\n' sorted=($(sort\
    \ <<<\"${list_[*]}\"))\n    unset IFS\n    #echo \"${sorted[@]}\" #debug\n   \
    \ printf \"\\\"%s\\\" \" \"${sorted[@]##*:}\"", "    local list=$1\n    for item\
    \ in $list; do\n        local tmp=0\n        for (( i=0; i<${#item}; i++ )); do\n\
    \            local val=${item:$i:1}\n            if [ \"$val\" == \"-\" ]; then\n\
    \                continue\n            fi\n            (( tmp += val ))\n    \
    \    done\n        echo \"$item:$tmp\"\n    done | sort -n -t ':' -k 2 | cut -d\
    \ ':' -f 1", '    python -c "import sys; x = [(-sum(map(int,x)),x) for x in sys.argv[1].split()];
    x.sort(); print x" "$@" | cut -d " " -f2', "  local res=\"\"\n  for el in $1;\
    \ do\n    res=\"$res $(echo $el | tr -d - | awk '{print sum = sum + substr($0,\
    \ i, 1) } END { print sum }') $el\"\n  done\n  echo \"$(echo $res | sed 's/\\\
    ([0-9]\\+\\) \\([^ ]\\+\\)/\\2 \\1/g' | sort -n | sed 's/\\([^ ]\\+\\) \\([0-9]\\\
    +\\)/\\2 \\1/g' | sed 's/^/[/g' | sed 's/[0-9]\\+ $/&]/g' | sed 's/[^ ]\\+ /\"\
    &\"/g')\"", "    export input=\"$1\"\n    env | grep input | sort -t '=' -k 2\
    \ -n -r | awk -F'input=' '{print $2}'", "    declare -a list\n    list=($1)\n\
    \    declare -a sums\n    sums=()\n    declare -a sum_and_indexes\n    sum_and_indexes=()\n\
    \    declare -a indexes\n    indexes=()\n    sum=0\n    j=0\n    k=0\n    if [[\
    \ ${#list[@]} -eq 0 ]]; then\n        echo -e \"[]\"\n    else\n        for i\
    \ in ${list[@]}; do\n            for (( l=0; l<${#i}; l++ )); do\n           \
    \     sum=$(( sum + ${i:$l:1} ))\n            done\n            sums[j]=$sum\n\
    \            sum=0\n            j=$(( j + 1 ))\n        done\n        for i in\
    \ ${!sums[@]}; do\n            sum_and_indexes[k]=\"${sums[$i]} ${i}\"\n     \
    \       k=$(( k + 1 ))\n        done\n        IFS=$'\\n' sorted=($(sort -n <<<\"\
    ${sum_and_indexes[*]}\"))\n        unset IFS\n        for i in ${sorted[@]}; do\n\
    \            indexes[j]=${i: -1}\n            j=$(( j + 1 ))\n        done\n \
    \       echo -e \"[$(IFS=, ; echo \"${list[*]}\" | sed 's/\\([\\\"\\']\\)/\\1\\\
    1/g' | xargs -n1 | sed 's/^/\"/g' | sed 's/$/\"/g' | sed \"s/^/${IFS}/g\" | xargs\
    \ -n1 | sed 's/\\([\\\"\\']\\)\\1/\\1/g' | paste -sd' ' - | sed \"s/^/${IFS}/g\"\
    \ | sed 's/^,//g')]\"\n    fi", "  # Write your solution here...\n  echo $1 |\
    \ sed -e 's/[ ]\\+/\\n/g' | sort -n | sed -e 's/^/\\\"/' -e 's/$/\\\"/' | tr \"\
    \\n\" \" \"", "\tlocal list_sorted\n\tlocal item_list\n\tlocal sum_list\n\tlocal\
    \ new_list\n\tfor item in \"$@\"; do\n\t\tsum=0\n\t\tfor digit in $(echo \"$item\"\
    \ | grep -o .); do\n\t\t\tsum=$((sum + digit))\n\t\tdone\n\t\titem_list=\"$item_list\
    \ $item\"\n\t\tsum_list=\"$sum_list $sum\"\n\tdone\n\tfor sum in $(echo \"$sum_list\"\
    \ | tr ' ' '\\n' | sort -n | tr '\\n' ' '); do\n\t\tfor i in $(echo \"$item_list\"\
    \ | tr ' ' '\\n' | grep -n \"$sum\"); do\n\t\t\tnew_list=\"$new_list $(echo \"\
    $i\" | cut -d: -f1)\"\n\t\tdone\n\tdone\n\tlist_sorted=$(echo \"$@\" | tr ' '\
    \ '\\n' | sort -n)\n\tfor i in $new_list; do\n\t\tlist_sorted=\"$list_sorted $(echo\
    \ \"$@\" | cut -d' ' -f$i)\"\n\tdone\n\techo \"$list_sorted\" | tr ' ' '\\n' |\
    \ sort -n | tr '\\n' ' '", "    # the sed command should be written here\n   \
    \ # and return a space-separated list\n    echo \"$1\" | sed -e 's/ /\\n/g' |\n\
    \        sed -e 's/-//g' |\n        awk '{ s += $1 } END { print s }' |\n    \
    \    sort -n", "    sorted=($(\n        for item in $1; do\n            sum=0\n\
    \            for ((i=0; i<${#item}; i++)); do\n                ((sum+=${item:$i:1}))\n\
    \            done\n            echo \"$item:$sum\"\n        done | sort -t':'\
    \ -k2,2 -n | cut -d':' -f1\n    ))\n    echo ${sorted[@]}", '  echo "Not implemented"',
  "    local string\n    local int\n\n    string=$(printf \"%s\" \"$1\" | tr ' ' '\\\
    n' | cat -n | sort -t$'\\t' -k2 -nr | sed 's/^ *//' | cut -f1 | sed 's/^/-/' |\
    \ tr '\\n' ' ')\n    int=$(printf \"%s\" \"$1\" | tr ' ' '\\n' | sed 's/^ *//'\
    \ | cut -f1 | sort -nr | tr '\\n' ' ')\n    printf \"[%s]\" \"${string//$int/\\\
    \"$int\\\"}\"", "  # uses string join/split to save integer as a string of its\
    \ digits\n  # then sorts by that string\n  echo \"$1\" | sed 's/ /\\n/g' | awk\
    \ '\n    BEGIN {FS=\"\"}\n    {\n      sum = 0\n      for (i=1; i<=NF; i++) {\n\
    \        sum += $i\n      }\n      print sum \" \" $0\n    }' | sort -nk1 | cut\
    \ -d \" \" -f 2-", "    # Write your code here\n    sum_of_digits() {\n      \
    \  local num=$1\n        local sum=0\n        while [ $num -gt 0 ]; do\n     \
    \       local digit=$((num % 10))\n            sum=$((sum + digit))\n        \
    \    num=$((num / 10))\n        done\n        echo $sum\n    }\n\n    local nums=($1)\n\
    \    local sums=()\n    for ((i = 0; i < ${#nums[@]}; i++)); do\n        sums[i]=$(sum_of_digits\
    \ ${nums[i]})\n    done\n\n    for ((i = 0; i < ${#nums[@]}; i++)); do\n     \
    \   for ((j = i + 1; j < ${#nums[@]}; j++)); do\n            if [ ${sums[i]} -gt\
    \ ${sums[j]} ]; then\n                local temp=${sums[i]}\n                sums[i]=${sums[j]}\n\
    \                sums[j]=$temp\n                temp=${nums[i]}\n            \
    \    nums[i]=${nums[j]}\n                nums[j]=$temp\n            fi\n     \
    \   done\n    done\n\n    echo \"${nums[@]}\"", "    declare -A items\n    declare\
    \ -a out\n\n    # Get all items\n    for item in $1; do\n        # Get sum of\
    \ digits\n        sum=0\n        for char in ${item//[^0-9]/}; do\n          \
    \  (( sum += char ))\n        done\n\n        # Insert to hash table\n       \
    \ items[$sum]=${items[$sum]}\" $item\"\n    done\n\n    # Get sorted keys\n  \
    \  for key in $(printf \"%s\\n\" ${!items[@]} | sort -n); do\n        # Concatenate\
    \ values\n        out=(${out[@]} ${items[$key]})\n    done\n\n    echo ${out[@]}",
  "  local input_str=$1\n  local new_str=\"\"\n  local new_str_b=\"\"\n  local base_str=\"\
    \"\n  local tmp_str=\"\"\n  local i=0\n  local sum=0\n  local str_len=0\n  local\
    \ min_sum=0\n  local min_idx=0\n  local min_num=0\n  local res_str=\"\"\n  local\
    \ arr_len=0\n  arr=($(echo $input_str | tr ' ' '\\n'))\n  arr_len=${#arr[@]}\n\
    \  base_str=$input_str\n  for ((i=0; i<arr_len; i++))\n  do\n    str_len=${#arr[$i]}\n\
    \    for ((j=0; j<str_len; j++))\n    do\n      tmp_str=\"${arr[$i]:$j:1}\"\n\
    \      sum=$((sum + tmp_str))\n    done\n    if [ $sum -lt $min_sum ] || [ $i\
    \ -eq 0 ]\n    then\n      min_sum=$sum\n      min_idx=$i\n      min_num=${arr[$i]}\n\
    \    fi\n    sum=0\n  done\n  res_str=\"'\"\"$min_num\"\"'\"\n  new_str=\"${base_str/$min_num/}\"\
    \n  new_str_b=$(order_by_points \"$new_str\")\n  if [ \"$new_str_b\" == \"\" ]\n\
    \  then\n    echo \"$res_str\"\n  else\n    echo \"$res_str, $new_str_b\"\n  fi",
  "    eval \"echo $(echo $1 | tr \" \" \"\\\\n\" | grep -v \"^$\" | python3 -c 'import\
    \ sys\nfor l in sys.stdin:\n    print(\"({}, \\\"{}\\\")\".format(sum(map(int,\
    \ l.split(\" \"))), l))' | sort -n | cut -d \",\" -f 2)\"", "    local total_sum=0\n\
    \    local sum=0\n    local digits=0\n    local total_diff=0\n    local cur_diff=0\n\
    \    for i in $1; do\n        sum=0\n        digits=$(echo $i | tr -d -)\n   \
    \     for (( j=0; j<${#digits}; j++ )); do\n            digit=${digits:$j:1}\n\
    \            sum=$((sum+digit))\n        done\n        total_sum=\"$total_sum\
    \ $sum\"\n    done\n    # Now sort the total_sum, according to digits\n    local\
    \ total_sum_sorted=$(echo $total_sum | tr \" \" \"\\n\" | sort -n | tr \"\\n\"\
    \ \" \")\n    # Now get the diff to restore the original ordering\n    total_diff=0\n\
    \    total_diff=$(echo $total_sum_sorted | tr \" \" \"\\n\" | diff -u <(echo $total_sum\
    \ | tr \" \" \"\\n\") - | tail -n +3 | sed -e 's/^+//' | sed -e 's/^-//' | tr\
    \ \"\\n\" \" \")\n    local diff_sorted=$(echo $total_diff | tr \" \" \"\\n\"\
    \ | sort -n | tr \"\\n\" \" \")\n    local cur_diff=0\n    local elem_diff=0\n\
    \    local pos=0\n    for i in $1; do\n        cur_diff=$(echo $total_diff | cut\
    \ -d \" \" -f $pos)\n        elem_diff=$(echo $diff_sorted | cut -d \" \" -f $pos)\n\
    \        echo ${1//$cur_diff/$elem_diff} | cut -d \" \" -f $pos\n        pos=$((pos+1))\n\
    \    done", "    echo \"$1\" | sed 's/[^ ]*/-&/g' | sort -n | sed 's/-\\(.*\\\
    )/\"\\1\"/g'", "    arr=($1)\n    if [ ${#arr[@]} -eq 0 ]; then\n        echo\
    \ \"[]\"\n        return\n    fi\n    len=${#arr[@]}\n    keys=()\n    for i in\
    \ \"${arr[@]}\"; do\n        sum=0\n        for j in $(echo $i | sed -e 's/-//g');\
    \ do\n            sum=$((sum + j))\n        done\n        keys+=(\"$sum$i\")\n\
    \    done\n    keys=($(printf '%s\\n' \"${keys[@]}\" | sort -g))\n    res=()\n\
    \    for i in \"${keys[@]}\"; do\n        res+=(\"\\\"${i: -${#i}}\\\"\")\n  \
    \  done\n    echo [${res[@]}]", "  # https://www.cyberciti.biz/faq/bash-for-loop/\n\
    \  # https://linuxize.com/post/bash-arrays/\n  # https://stackoverflow.com/questions/893585/how-to-parse-xml-in-bash\n\
    \  declare -a arr=(\"$@\")\n  declare -a sum_arr=()\n  # https://linuxhint.com/bash_string_operations/\n\
    \  # https://stackoverflow.com/questions/41110106/how-to-append-a-character-to-a-string-in-bash\n\
    \  # https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-spaces-in-bash-functions\n\
    \  for i in \"${arr[@]}\"\n  do\n    # https://stackoverflow.com/questions/28543956/how-to-split-a-string-into-array-of-characters-in-bash\n\
    \    # https://gist.github.com/npearce/4705381\n    # https://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash\n\
    \    # https://stackoverflow.com/questions/4121492/split-string-into-characters-in-bash\n\
    \    declare -a char_arr=($(echo $i | grep -o .))\n    total=0\n    for j in \"\
    ${char_arr[@]}\"\n    do\n      total=$(( $total + $j ))\n    done\n    sum_arr+=(\"\
    $total\")\n  done\n  # https://unix.stackexchange.com/questions/128977/sort-an-array-of-numbers-in-bash\n\
    \  # https://stackoverflow.com/questions/15601452/bash-sort-array-using-another-array-as-index\n\
    \  # https://stackoverflow.com/questions/10842485/bash-using-another-array-as-index\n\
    \  # http://tldp.org/LDP", "    local list=($1)\n    local sums=()\n    local\
    \ i\n    for ((i=0; i<${#list[@]}; i++)); do\n        sums+=($(echo ${list[$i]}\
    \ | grep -o . | paste -sd+ | bc))\n    done\n    local ordered_indexes=$(echo\
    \ ${sums[@]} | sed -e 's/ /\\n/g' | \\\n        paste -d' ' - <(seq 1 ${#sums[@]})\
    \ | sort -n -k1,1 -k2,2n | cut -d' ' -f2)\n    local ordered_sums=()\n    for\
    \ i in ${ordered_indexes[@]}; do\n        ordered_sums+=(${sums[$i-1]})\n    done\n\
    \    for ((i=0; i<${#list[@]}; i++)); do\n        echo -e \"\\t\\\"${list[$(echo\
    \ ${ordered_indexes[@]} | grep -o $((i+1)) | head -n1)-1]}\\\"\"\n    done", " \
    \   declare -a arr\n    arr=($1)\n    for((i=0;i<${#arr[@]};i++))\n    do\n  \
    \      declare -i a\n        declare -i b\n        a=${arr[$i]}\n        a=${a#-}\n\
    \        b=0\n        while [[ $a -gt 0 ]]\n        do\n            b=$((b+a%10))\n\
    \            a=$((a/10))\n        done\n        b=${b}x${i}\n        arr[$i]=$b\n\
    \    done\n    IFS=$'\\n' sorted=($(sort -V <<<\"${arr[*]}\"))\n    unset IFS\n\
    \    for((i=0;i<${#sorted[@]};i++))\n    do\n        sorted[$i]=${sorted[$i]#*x}\n\
    \    done\n    for((i=0;i<${#sorted[@]};i++))\n    do\n        sorted[$i]=${arr[${sorted[$i]}]}\n\
    \    done\n    printf \"'%s' \" \"${sorted[@]}\"", "    local input=\"$1\"\n \
    \   local output=\"\"\n    local sum_of_digits=0\n    local index_of_item=0\n\
    \    local current_item=0\n    local sorted_list=()\n    local sorted_item=\"\"\
    \n    for current_item in $input; do\n        sum_of_digits=$(echo $current_item\
    \ | awk '{x=0; for(i=1;i<=NF;i++) {x+=substr($i,i,1)}; print x}')\n        sorted_list+=(\"\
    \\\"$current_item:$sum_of_digits:$index_of_item\\\"\")\n        index_of_item=$((index_of_item+1))\n\
    \    done\n    IFS=$'\\n' sorted_list=($(sort -t : -k 2,2n -k 3,3n <<<\"${sorted_list[*]}\"\
    ))\n    unset IFS\n    for sorted_item in \"${sorted_list[@]}\"; do\n        output=\"\
    $output,\\\"${sorted_item%%:*}\\\"\"\n    done\n    echo \"[${output:1}]\"", " \
    \ if [ $# -eq 0 ]; then\n    echo \"[]\"\n    return 0\n  fi\n  r=()\n  for i\
    \ in $@; do\n    d=0\n    for j in $(echo $i | sed -e 's/\\(.\\)/\\1 /g'); do\n\
    \      d=$((d + j))\n    done\n    r+=($d,$i)\n  done\n  echo \"${r[@]}\" | tr\
    \ ' ' '\\n' | sort -n | sed -e 's/^.*,//' | tr '\\n' ' ' | sed -e 's/\\(.*\\)/[\"\
    \\1\"]/'", "    declare -a an_array=(${1})\n    mapfile -t an_array < <(printf\
    \ '%s\\n' \"${an_array[@]}\" | sort -n -k2 -t, -r)\n    # for i in \"${an_array[@]}\"\
    ; do\n    #     printf '%s\\n' \"$i\"\n    # done\n    echo \"${an_array[@]}\"",
  "  # Write your code here\n  # Feel free to add more functions and variables if\
    \ you need them\n  t=\"\"\n  for i in $1; do\n    t=\"$t $i\";\n  done\n  python\
    \ -c \"print('[%s]' % ','.join('\\\"%s\\\"' % i for i in sorted(map(int, list(input().split())),\
    \ key=lambda x: sum(map(int, list(str(x)))))))\";\n  echo $t | python -c \"print('[%s]'\
    \ % ','.join('\\\"%s\\\"' % i for i in sorted(map(int, list(input().split())),\
    \ key=lambda x: sum(map(int, list(str(x)))))))\";", "    # write your solution\
    \ here\n    arr=($1)\n    length=${#arr[@]}\n    result=()\n    while [ $length\
    \ -gt 0 ]\n    do\n        index=0\n        temp=0\n        for i in ${arr[@]}\n\
    \        do\n            sum=0\n            for j in ${i//-/}\n            do\n\
    \                sum=$((sum+j))\n            done\n            if [ $sum -gt $temp\
    \ ]\n            then\n                temp=$sum\n                max_index=$index\n\
    \            fi\n            index=$((index+1))\n        done\n        result+=(${arr[$max_index]})\n\
    \        arr=(${arr[@]:0:$max_index} ${arr[@]:$((max_index+1))})\n        length=$((length-1))\n\
    \    done\n    printf \"%s\\n\" \"${result[@]}\"", "  declare -a list=($@)\n \
    \ declare -a sum_of_digits=(0)\n  declare -a results=(0)\n  sum_of_digits+=(0)\n\
    \  declare i=0\n  for elem in \"${list[@]}\"; do\n    sum_of_digits[$((i+1))]=$(($(sum_of_digits[$i])\
    \ + $elem))\n    i=$((i+1))\n  done\n  sum_of_digits=(\"${sum_of_digits[@]:1}\"\
    )\n  results=($(for i in \"${!sum_of_digits[@]}\"; do echo ${sum_of_digits[$i]}\
    \ $i; done | sort -n | cut -d' ' -f2))\n  declare result=\"\"\n  for i in \"${results[@]}\"\
    ; do\n    result+=\"\\\"${list[$i]}\\\" \"\n  done\n  echo \"[${result:0:-1}]\"",
  "  points=(${@// / })\n  for i in ${!points[@]}; do\n    p=0\n    for((j=0;j<${#points[$i]};j++));\
    \ do\n      ((p+=$((${points[$i]:$j:1}))))\n    done\n    points[$i]=\"$p:${points[$i]}\"\
    \n  done\n  echo \"${points[@]}\" | tr ' ' '\\n' | sort -t: -n | tr '\\n' ' '\
    \ | tr ':' '\\n' | tr ' ' ',' | sed 's/^/\\[/' | sed 's/,$/\\]/'", "    local\
    \ list=($1)\n    [ ${#list[@]} -eq 0 ] && echo [] && return 0\n    local i res=\"\
    \"\n    for i in ${!list[@]}; do\n        res=\"$res ('$(echo ${list[$i]} | \\\
    \n            sed 's/-//g; s/[0-9]/&+/g; s/\\+$//')','${list[$i]}')\"\n    done\n\
    \    echo $res | sort -V -k1 -t',' | \\\n        tr -d \\( | tr -d \\) | sed 's/^/\\\
    [/' | sed 's/$/\\]/'", "    local oldlist=$@\n    local newlist\n    local base_sum=0\n\
    \    local new_sum=0\n    local old_sum=0\n    local old_index=0\n    local new_index=0\n\
    \    local old_num=0\n    local new_num=0\n    local sum_sum=0\n    local point_sum=0\n\
    \    local point_index=0\n    local point_num=0\n    local j=0\n    local k=0\n\
    \    local i=0\n    local old_num_list=()\n    local new_num_list=()\n    local\
    \ sum_list=()\n    local index_list=()\n    local num_list=()\n    for i in $oldlist;\
    \ do\n        sum_sum=0\n        for j in $(echo $i | sed 's/-//g'); do\n    \
    \        ((sum_sum+=$j))\n        done\n        old_num_list+=($i)\n        sum_list+=($sum_sum)\n\
    \        index_list+=($i)\n    done\n    for ((i=0; i<${#old_num_list[@]}; i++));\
    \ do\n        ((point_sum=0))\n        ((point_index=0))\n        ((point_num=0))\n\
    \        for ((j=0; j<${#old_num_list[@]}; j++)); do\n            if [[ ${sum_list[$j]}\
    \ -gt $point_sum ]]; then\n                ((point_sum=${sum_list[$j]}))\n   \
    \             ((point_index=${index_list[$j]}))\n                ((point_num=${old_num_list[$j]}))\n\
    \            elif [[ ${sum_list[$j]} -eq $point_sum ]]; then\n               \
    \ if [[ ${index_list[$j]} -lt $point_index ]]; then\n                    ((point_sum=${sum_list[$j]}))\n\
    \                    ((point_index=${index_list[$j]}))\n                    ((point_num=${old_num_list[$j]}))\n\
    \                fi\n            fi\n        done\n        new_num_list+=($point_num)\n",
  '    echo "NYI"', "    local input_values=(${1})\n    local i=0\n    local length=${#input_values[@]}\n\
    \    local tmparr=()\n    local tmpvar=0\n    local sum_of_digits=0\n    local\
    \ sum_of_digits_2=0\n    local index_of_min=0\n    local current_min=0\n    local\
    \ index_of_max=0\n    local current_max=0\n    local j=0\n    local k=0\n    local\
    \ dup_ind=0\n    local dup_val=0\n    local tmp_val=0\n    local tmp_ind=0\n \
    \   local result=()\n    local tmp_arr=()\n    local n=0\n    local print_count=0\n\
    \    local print_ind=0\n    local print_val=0\n    local s=0\n    local tmp_length=0\n\
    \    for ((i=0; i<length; i++))\n    do\n        sum_of_digits=0\n        current_val=${input_values[i]}\n\
    \        for ((j=0; j<${#current_val}; j++))\n        do\n            if [[ \"\
    ${current_val:$j:1}\" != \"-\" ]]\n            then\n                sum_of_digits=$((sum_of_digits\
    \ + ${current_val:$j:1}))\n            fi\n        done\n        tmparr[i]=$sum_of_digits\"\
    _\"$i\"_\"$current_val\n    done\n    for ((i=0; i<length; i++))\n    do\n   \
    \     current_min=100\n        current_max=0\n        for ((j=i; j<length; j++))\n\
    \        do\n            sum_of_digits_2=${tmparr[j]%%_*}\n            if ((sum_of_digits_2\
    \ < current_min))\n            then\n                current_min=$sum_of_digits_2\n\
    \                index_of_min=$j\n            fi\n            if ((sum_of_digits_2\
    \ > current_max))\n            then\n                current_max=$sum_of_digits_2\n\
    \               ", "    local ret\n    for i in $1; do\n        local sum=0\n\
    \        for c in `echo $i | sed -e 's/\\-/ /g'`; do\n            sum=$(( $sum\
    \ + $c ))\n        done\n        ret=\"$ret $sum:$i\"\n    done\n    echo \"$ret\"\
    \ | tr ' ' '\\n' | sort -t ':' -k 1n -k 2 | cut -d ':' -f 2 | tr '\\n' ' '", " \
    \   local integers=\"$@\"\n    local sum=0\n\n    # summing the digits of each\
    \ integer\n    for num in $integers; do\n        local digits=$(echo $num | sed\
    \ -e 's/-//g')\n        local sum_of_digits=0\n        for digit in $(echo $digits\
    \ | sed -e 's/./& /g'); do\n            local sum_of_digits=$((sum_of_digits +\
    \ digit))\n        done\n        echo $num $sum_of_digits\n    done | sort -nk2\
    \ | cut -d' ' -f1 | sed -e 's/^/- /' | tr -d '\\n' | sed -e 's/^/- [\\n/; s/ /,\\\
    n/g; s/$/\\n]/'", "    local result=()\n    for i in $@; do\n        local sum=0\n\
    \        for j in $(echo $i | fold -w1); do\n            ((sum+=j))\n        done\n\
    \        result+=(\"$i:$sum\")\n    done\n    # Sort by sum of digits and append\
    \ digit to each element\n    IFS=$'\\n'\n    result=($(printf '%s\\n' \"${result[@]}\"\
    \ | sort -k2n -t:))\n    # Strip off sum and join with space\n    result=$(IFS=$'\
    \ '; echo \"${result[*]##*:}\")\n    echo \"$result\"", "    local tmp_file=\"\
    $(mktemp)\"\n    local -i i=0\n    for word in $1; do\n        local -i point=$(echo\
    \ \"$word\" | grep -o . | paste -sd+ | bc)\n        echo \"$point:$i:$word\" >>\
    \ \"$tmp_file\"\n        ((i++))\n    done\n    sort -n \"$tmp_file\" | awk -F:\
    \ '{print $3}' | paste -sd ' '\n    rm \"$tmp_file\"", "    declare -a array=($1)\n\
    \    declare -a sum=()\n    declare -a sum_sum=()\n    declare -a items=()\n \
    \   declare -a ids=()\n    declare -a order=()\n    declare -a sort=()\n    for\
    \ i in ${array[@]}; do\n        sum[$i]=0\n        for((j=0;j<${#i};j++)); do\n\
    \            sum[$i]=$((${sum[$i]}+${i:$j:1}))\n        done\n        sum_sum[$i]=${sum[$i]}\n\
    \        items[$i]=$i\n        ids[$i]=$i\n    done\n    order=($(for i in ${!sum[@]};\
    \ do echo $i; done | sort -n -k1))\n    for i in ${order[@]}; do\n        sort[$i]=${items[$i]}\n\
    \    done\n    printf \"[\"\n    for i in ${sort[@]}; do\n        printf '\"%s\"\
    , ' $i\n    done\n    printf \"]\"", '    # Your code here', "  if [ $# -gt 0\
    \ ]; then\n    arr=(\"$@\")\n    echo ${arr[@]} | tr \" \" \"\\n\" |  sort -n\
    \ -k 1 -t \"\" | tr \"\\n\" \" \"\n  else\n    echo \"Empty array\"\n  fi", " \
    \ tmp=$(for n in $1; do\n    echo ${n} $(echo ${n} | fold -w1 | paste -sd+ | bc)\n\
    \  done | sort -n -k2 -k1 | awk '{print $1}')\n  echo \"[$(tr '\\n' ',' <<< \"\
    ${tmp}\" | sed -e 's/,$//')]\"", '    echo "$1" | tr " " "\n" | sort -n -t. -k
    1,1 -k 2,2 | tr "\n" " "', "    local list\n    local sum\n    local re='^-?[0-9]+$'\n\
    \    for elem in $1; do\n        if [[ $elem =~ $re ]]; then\n            sum=0\n\
    \            for digit in $(echo $elem | grep -o .); do\n                ((sum\
    \ += digit))\n            done\n            list+=($sum:$elem)\n        fi\n \
    \   done\n    echo ${list[@]} | tr ' ' '\\n' | sort -k1 | cut -d: -f2", "    echo\
    \ $(\n        for i in $1; do\n            echo -n \"\\\"$i\\\" \"\n        done\
    \ | sort -n -k1.1 -t' ' | tr -d '\"'\n    )", "\t# IMPLEMENT HERE\n\tif [ -z \"\
    $1\" ]; then\n\t\techo \"[]\"\n\telse\n\t\techo \"$1\" | tr \" \" \"\\n\" | awk\
    \ '{print length($0) \" \" $0}' | sort -k1n -k2 | cut -d \" \" -f2- | tr \"\\\
    n\" \" \" | awk '{print \"[\" \"'\\\"\" $0 \"\\\"\" \"]\"}'\n\tfi", "  local list=\"\
    $1\"\n  local index=0\n  for item in $list; do\n    sum=0\n    for (( i=0; i<${#item};\
    \ i++ )); do\n      sum=$(( 10*sum + $(echo ${item:$i:1}) ))\n    done\n    echo\
    \ \"$sum $index $item\"\n    index=$((index+1))\n  done | sort -n | awk '{print\
    \ $3}' | tr '\\n' ' '", "  local nums=($1)\n  local n=${#nums[@]}\n  for ((i=0;\
    \ i<n; i++)); do\n    for ((j=i+1; j<n; j++)); do\n      local sum_i=$(sum_of_digits\
    \ ${nums[i]})\n      local sum_j=$(sum_of_digits ${nums[j]})\n      if [[ $sum_i\
    \ -gt $sum_j ]]; then\n        local temp=${nums[i]}\n        nums[i]=${nums[j]}\n\
    \        nums[j]=$temp\n      fi\n    done\n  done\n  echo ${nums[@]}", "\t# Check\
    \ that $1 is a not empty\n\t# and contains at least one integer\n\tif [ -z \"\
    $1\" ] || ! [[ \"$1\" =~ ^[-]?[0-9]+[[:space:]]?([-]?[0-9]+[[:space:]]?)*$ ]];\
    \ then\n\t\techo \"[]\"\n\t\treturn\n\tfi\n\n\t# Perform the job\n\t# Save the\
    \ given list\n\traw_list=\"$1\"\n\t# Create an empty list to append results\n\t\
    result=\"\"\n\t# Get the length of the raw list\n\tlength=${#raw_list}\n\t# Iterate\
    \ over the raw list\n\twhile [ $length -gt 0 ]; do\n\t\t# Get the first value\
    \ from the given list\n\t\tcurrent_value=${raw_list%%[[:space:]]*}\n\t\t# Calculate\
    \ the sum of digits\n\t\tcurrent_sum=$(printf '%s' \"$current_value\" | tr -dc\
    \ '0-9' | fold -w1 | sort | paste -sd+ | bc)\n\t\t# Append the current value to\
    \ the result list\n\t\tresult=\"$result ${current_sum}_${current_value}\"\n\t\t\
    # Remove the first value from the given list\n\t\traw_list=${raw_list#*[[:space:]]}\n\
    \t\t# Decrease the length of the given list\n\t\tlength=${#raw_list}\n\tdone\n\
    \t# Sort the result list\n\tresult=$(printf '%s\\n' \"$result\" | sort -t'_' -nk1)\n\
    \t# Remove the calculated sum from the result list\n\tresult=${result//[[:digit:]]_/}\n\
    \t# Return result\n\techo \"[$(printf '\"%s\", ' \"${result[@]}\" | sed 's/, $//')]\"",
  "    sum_of_digits() {\n        local n=\"$1\"\n        local sum=0\n        for\
    \ digit in $(echo \"$n\" | sed 's/./& /g'); do\n            sum=$((sum + digit))\n\
    \        done\n        echo \"$sum\"\n    }\n\n    sort_by_point() {\n       \
    \ local list=\"$1\"\n        local points_str\n        for num in $list; do\n\
    \            local point=$(sum_of_digits \"$num\")\n            points_str=\"\
    $points_str;$point:$num\"\n        done\n        local sorted_points_str=$(echo\
    \ \"$points_str\" | sed -r 's/;/\\n/g' | sort -k1 -n -r | tr '\\n' ';')\n    \
    \    echo \"$sorted_points_str\" | sed -r 's/.+://g'\n    }\n\n    #\n    # Test\n\
    \    #\n    echo \"$(sort_by_point \"$1\")\"", "    local result=()\n    local\
    \ i=0\n    local sum\n    for num in $@; do\n        let sum=0\n        for d\
    \ in $(echo ${num} | grep -o .); do\n            let sum+=${d}\n        done\n\
    \        result[${i}]=\"${sum} ${num}\"\n        let i++\n    done\n    local\
    \ map=($(echo ${result[@]} | sed 's/\\s/\\n/g' | sort -n | sed 's/\\s/\\s+/g'))\n\
    \    for p in ${map[@]}; do\n        echo \"${p%% *}\"\n    done", "    nums=($@)\n\
    \    nums=(\"${nums[@]// /\\\\ }\")\n    printf '%s\\n' \"${nums[@]}\" | sort\
    \ -t ' ' -k 2 -g", "    # Put your solution here\n    # [[ $1 =~ ^[-]?[[:digit:]]+$\
    \ ]]\n    # echo \"$1\" | grep -E '^[-]?[[:digit:]]+$'\n    # echo \"$1\" | grep\
    \ -E '^[-]?[[:digit:]]+$'\n    # [[ $1 -eq 0 ]]\n    arr=($(echo \"$1\" | grep\
    \ -E '^[-]?[[:digit:]]+$'))\n    size=${#arr[@]}\n    echo \"$size\"\n    for\
    \ (( i=0; i<$size; i++ ))\n    do\n        echo \"${arr[$i]}\"\n    done", " \
    \ local array\n  read -a array <<< \"$@\"\n  # first sort by sum of digits, then\
    \ by index\n  IFS=$'\\n' sorted=($(sort -n -k2 <<< \"${array[*]}\"))\n  echo \"\
    ${sorted[*]}\"", "    for i in $1; do\n        sum=0\n        for digit in $(echo\
    \ $i | sed 's/-//'); do\n            ((sum+=digit))\n        done\n        echo\
    \ -e \"$sum $i\"\n    done | sort -n | awk '{print $2}' | awk '{printf(\"%s\"\
    ,$0)}'", "    words=(\"$@\")\n    mapfile -t < <(\n        for word in \"${words[@]}\"\
    ; do\n            word_digits_sum=$(sed 's/\\([0-9]\\)/+\\1/g' <<<\"$word\" |\
    \ tail -c +2)\n            if ((word_digits_sum == 0)); then\n               \
    \ word_digits_sum=1\n            fi\n            word_digits_sum=\"$(tr -d '-'\
    \ <<<\"$word_digits_sum\")\"\n            printf '%s\\t%s\\n' \"$word_digits_sum\"\
    \ \"$word\"\n        done\n    ) | sort -n | cut -f2", "    if [ -z \"$1\" ];\
    \ then\n        echo \"[]\"\n        return\n    fi\n    output=$(for i in $1;\
    \ do\n                sum=0\n                for ((n=0; n<${#i}; n++)); do\n \
    \                   sum=$((sum + ${i:$n:1}))\n                done\n         \
    \       echo \"$i:$sum\"\n            done | sort -k2 -n -r | sed 's/^\\([0-9-]*\\\
    ):\\([0-9]*\\)$/\"\\1\"/g')\n    echo \"[$output]\"", "    # code here\n    declare\
    \ -a array\n    array=(\"$@\")\n    for i in \"${!array[@]}\"; do\n        array[$i]=$(sum_digits\
    \ \"${array[$i]}\")\"|\"$i\"|\"${array[$i]}\n    done\n    sorted=($(printf '%s\\\
    n' \"${array[@]}\" | sort -t \"|\" -k 1,1n))\n    for i in \"${!sorted[@]}\";\
    \ do\n        sorted[$i]=$(echo \"${sorted[$i]}\" | cut -d \"|\" -f 3)\n    done\n\
    \    echo \"${sorted[@]}\"", "  # Consider empty input\n  if [ $# -eq 0 ]; then\n\
    \    echo '[]'\n    return\n  fi\n\n  # Create an array of 'value:index' strings\
    \ for each input\n  mapfile -t values < <(echo \"$@\" | sed 's/ /\\n/g')\n  mapfile\
    \ -t indexes < <(seq 0 $(( ${#values[@]} - 1 )))\n  mapfile -t tuples < <(paste\
    \ -d: <(printf \"%s\\n\" \"${values[@]}\") <(printf \"%s\\n\" \"${indexes[@]}\"\
    ))\n\n  # Iterate over each tuple and calculate the sum of its digits\n  # Store\
    \ the result in 'values_sums' array\n  declare -a values_sums\n  for value_and_index\
    \ in \"${tuples[@]}\"; do\n    value=$(echo \"$value_and_index\" | cut -d: -f1)\n\
    \    if [ \"$value\" -eq \"$value\" ] 2>/dev/null; then\n      values_sums+=(\"\
    $value_and_index:$(echo \"$value\" | sed 's/-//g' | grep -o . | awk '{s+=$1} END\
    \ {print s}')\")\n    else\n      values_sums+=(\"$value_and_index:$(echo \"$value\"\
    \ | grep -o . | awk '{s+=$1} END {print s}')\")\n    fi\n  done\n\n  # Sort the\
    \ array by the last column and extract the first one\n  # Join the array elements\
    \ with ' ' to get the final output\n  echo \"[$(echo \"${values_sums[@]}\" | sort\
    \ -t: -k3n -k2n | cut -d: -f1 | tr '\\n' ' ' | sed 's/ $//')]\"", "    # Fill\
    \ in the implementation here\n    # You can add other functions and variables\n\
    \    # as long as they are not global\n    # You can add other functions and variables\n\
    \    # as long as they are not global\n    # You can add other functions and variables\n\
    \    # as long as they are not global\n    ##\n    ##  \u0424\u0443\u043D\u043A\
    \u0446\u0438\u044F \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0443\u043C\
    \u043C\u0443 \u0446\u0438\u0444\u0440 \u0432 \u0447\u0438\u0441\u043B\u0435\n\
    \    ##\n    sum() {\n        local -i sum=0\n        local char=\"\"\n      \
    \  for (( i=0; i<${#1}; i++ )); do\n            char=\"${1:$i:1}\"\n         \
    \   ((sum+=char))\n        done\n        echo $sum\n    }\n    ##\n    ##  \u0424\
    \u0443\u043D\u043A\u0446\u0438\u044F \u0444\u043E\u0440\u043C\u0438\u0440\u0443\
    \u0435\u0442 \u0432\u044B\u0445\u043E\u0434\u043D\u043E\u0439 \u043C\u0430\u0441\
    \u0441\u0438\u0432\n    ##\n    get_output() {\n        local var=$1\n       \
    \ local output=\"\"\n        for (( i=0; i<${#var[@]}; i++ )); do\n          \
    \  output+=\"\\\"${var[$i]}\\\" \"\n        done\n        echo $output\n    }\n\
    \    ##\n    ##  \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u0444\u043E\u0440\
    \u043C\u0438\u0440\u0443\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0438\
    \u0437 \u043F\u0435\u0440\u0435\u0434\u0430\u043D\u043D\u043E\u0439 \u0441\u0442\
    \u0440\u043E\u043A\u0438\n    ##\n    parse_input() {\n        local var=$1\n\
    \        local parse=\"\"\n        local -a input\n        for (( i=0; i<${#var};\
    \ i++ )); do\n            if [[ \"${var:$i:1}\" != \" \" ]]; then\n          \
    \      parse+=\"${var:$i:1}\"\n            else\n                input[${#input[@]}]=$parse\n\
    \                parse=\"\"\n            fi\n        done\n        input[${#input[@]}]=$parse\n\
    \        echo \"${input[@]}\"\n    }\n    ##\n    ##  \u0424\u0443\u043D\u043A\
    \u0446\u0438\u044F \u0441\u043E\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043C\
    \u0430\u0441\u0441\u0438", "  echo \"\n    def order_by_points(lst):\n       \
    \ lst = list(lst)\n        def sum_digits(x):\n            return sum(int(d) for\
    \ d in str(x))\n        lst.sort(key=lambda x: [sum_digits(x), lst.index(x)])\n\
    \        return lst\n    print(order_by_points($1))\n  \" | python3"]
stop_tokens:
- "\n}"
