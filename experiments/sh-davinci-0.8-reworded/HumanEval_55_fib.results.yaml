language: sh
name: HumanEval_55_fib
results:
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n=${1:-1}\n    local i=1 a=0 b=1\n    while [ $i\
    \ -lt $n ]; do\n        a=$((b))\n        b=$((a+b))\n        i=$((i+1))\n   \
    \ done\n    echo $a\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ \"$1\" -eq 0 ]; then\n    echo 0\n  elif [ \"$1\" -eq\
    \ 1 ]; then\n    echo 1\n  else\n    echo $(( $(fib \"$(( $1 - 1 ))\") + $(fib\
    \ \"$(( $1 - 2 ))\") ))\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    ) = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [[ \"$1\" -eq 1 ]]; then\n    echo 1\n  elif [[ \"$1\"\
    \ -eq 2 ]]; then\n    echo 1\n  else\n    # $1 is an integer, but $(fib \"1+1\"\
    ) produces \"1+1\"\n    # we can't pass $1 to bc\n    # bc: (standard_in) 1: parse\
    \ error\n    # so we need to use bc -l\n    # bc -l deals with floating point\
    \ numbers\n    # but bc -l can't deal with large numbers\n    # bc: (standard_in)\
    \ 1: parse error\n    # we can't even display fib(500)\n    # so we need to use\
    \ python3\n    python3 -c \"from math import sqrt; print(((1+sqrt(5))**$1-(1-sqrt(5))**$1)/(2**$1*sqrt(5)))\"\
    \n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[\
    \ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n   \
    \ [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n=$1 i j result=0 result_tmp=1\n  (( n >= 2 )) &&\
    \ {\n    while (( n-- )); do\n      (( result = result + result_tmp ))\n     \
    \ (( result_tmp = result - result_tmp ))\n    done\n  }\n  echo \"$result\"\n\
    }\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  integer=$1\n  if [ $integer -eq 0 ]; then\n    printf \"\
    0\"\n  elif [ $integer -eq 1 ]; then\n    printf \"1\"\n  else\n    printf \"\
    $(($(fib \"$(($integer - 1))\") + $(fib \"$(($integer - 2))\")))\"\n  fi\n}\n\n\
    candidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"\
    8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"\
    12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n=$1\n    if [ $n -le 2 ]; then\n        echo 1\n\
    \    else\n        local n2=$(fib \"$((n-2))\")\n        local n1=$(fib \"$((n-1))\"\
    )\n        echo $((n1+n2))\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [[ $1 -lt 2 ]]; then\n    echo $1\n  else\n    local\
    \ prev1=$(fib \"$(( $1 - 1 ))\")\n    local prev2=$(fib \"$(( $1 - 2 ))\")\n \
    \   echo \"$(( $prev1 + $prev2 ))\"\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ \"$1\" -eq \"1\" ]]; then\n        echo \"1\"\n\
    \    elif [[ \"$1\" -eq \"2\" ]]; then\n        echo \"1\"\n    else\n       \
    \ echo \"$(bc <<< \"$(fib \"$(($1 - 1))\") + $(fib \"$(($1 - 2))\")\")\"\n   \
    \ fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local -i n=$1 i=1 j=0\n  until [ $i -gt $n ]; do\n    i=$(($i+1))\n\
    \    j=$(($i+$j))\n  done\n  echo $j\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  n=$1\n  if [ \"$n\" -eq 0 ]; then\n    echo 0\n  elif [\
    \ \"$n\" -eq 1 ]; then\n    echo 1\n  else\n    echo $(($(fib \"$(($n - 1))\"\
    ) + $(fib \"$(($n - 2))\")))\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n=\"$1\"\n  case \"$n\" in\n    \"1\")  echo 1;;\n\
    \    \"2\")  echo 1;;\n    \"\")   echo \"error\";;\n    *[!0-9]*)  echo \"error\"\
    ;;\n    *)  echo \"$(( $(fib \"$((n-1))\") + $(fib \"$((n-2))\") ))\";;\n  esac\n\
    }\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    # read command-line argument\n    local n=\"$1\"\n   \
    \ # check if $n is an integer\n    [[ \"$n\" =~ ^[0-9]+$ ]] || return 1\n    case\
    \ \"$n\" in\n        0) echo 0;;\n        1) echo 1;;\n        *) echo $(( $(fib\
    \ $((n-1))) + $(fib $((n-2))) ))\n    esac\n}\n\ncandidate() {\n    fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  # assume input is an integer\n  local input=$1\n  # set\
    \ up\n  [ \"$input\" -eq 0 ] && echo \"0\" && return\n  [ \"$input\" -eq 1 ] &&\
    \ echo \"1\" && return\n  [ \"$input\" -eq 2 ] && echo \"1\" && return\n  # main\n\
    \  local pre1=1\n  local pre2=1\n  local i\n  for ((i=3; i<=input; i++)); do\n\
    \    local curr=$(( pre1 + pre2 ))\n    pre2=$pre1\n    pre1=$curr\n  done\n \
    \ echo \"$curr\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    # We don't want to deal with negative numbers,\n    #\
    \ hence abs\n    local i=${1#-}\n    local current=0\n    local next=1\n    while\
    \ (( i-- > 0 )); do\n        local old_current=$current\n        current=$next\n\
    \        next=$((old_current + current))\n    done\n    echo $current\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local a b c=\"0\"\n  for ((i=1; i<=$1; i++)); do\n    a=$c\n\
    \    b=$(($c+1))\n    c=$(($a+$b))\n  done\n  echo \"$a\"\n}\n\ncandidate() {\n\
    \    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\"\
    \ ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"\
    144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local -r n=\"$1\"\n  local    a=0 b=1\n  local    i=0\n\
    \  while [ \"$i\" -lt \"$n\" ]; do\n    local c=$((a + b))\n    a=$b\n    b=$c\n\
    \    i=$((i + 1))\n  done\n  echo \"$a\"\n}\n\ncandidate() {\n    fib \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n=\"$1\"\n  local a=0\n  local b=1\n  local c\n  while\
    \ [ \"$n\" -gt 0 ]; do\n    c=$((a + b))\n    a=$b\n    b=$c\n    n=$((n - 1))\n\
    \  done\n  echo \"$a\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ];\
    \ then\n    echo 1\n  else\n    echo $(( $(fib $(( $1 - 1 ))) + $(fib $(( $1 -\
    \ 2 ))) ))\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tlocal a=0\n\tlocal b=1\n\tlocal num=0\n\tlocal i\n\tfor\
    \ i in $(seq $1); do\n\t\tlet \"num = a + b\"\n\t\tlet \"a = b\"\n\t\tlet \"b\
    \ = num\"\n\tdone\n\techo \"$a\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if (($1 < 1)); then\n        exit 1\n    fi\n    if (($1\
    \ == 1)); then\n        echo \"1\"\n    else\n        [ \"$2\" == \"\" ] && set\
    \ -- \"$1\" \"0\" \"1\"\n        fib \"$(($1 - 1))\" \"$2\" \"$(($2 + $3))\"\n\
    \    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[\
    \ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n   \
    \ [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tlocal n=$1\n\tif [ $n -le 0 ]; then\n\t\treturn 0\n\telif\
    \ [ $n -eq 1 ]; then\n\t\treturn 1\n\tfi\n\tlocal n1=$(($n-1))\n\tlocal n2=$(($n-2))\n\
    \tfib $n1\n\tlocal f1=$?\n\tfib $n2\n\tlocal f2=$?\n\treturn $(($f1+$f2))\n}\n\
    \ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ \"$1\" -lt 2 ]; then\n        echo \"$1\"\n    else\n\
    \        echo $(( $(fib $(( $1 - 1 ))) + $(fib $(( $1 - 2 ))) ))\n    fi\n}\n\n\
    candidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"\
    8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"\
    12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ \"$1\" -le \"1\" ]]; then\n        echo \"$1\"\n\
    \    else\n        echo $(( $(fib $(( $1 - 1 )) ) + $(fib $(( $1 - 2 )) ) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[\
    \ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n   \
    \ [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n=\"$1\"\n    if (( n <= 2 )); then\n        echo\
    \ 1\n    else\n        echo $(( fib $(( n - 1 )) + fib $(( n - 2 )) ))\n    fi\n\
    }\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr63ex5lw.sh: line 16: fib 9 + fib 8 : syntax error in expression
    (error token is "9 + fib 8 ")

    '
  stdout: ''
  timestamp: 1660021166
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    f_1=1\n    f_2=1\n    n=$1\n    if [[ $n -eq 1 ]]; then\n\
    \        echo \"1\"\n    elif [[ $n -eq 2 ]]; then\n        echo \"1\"\n    else\n\
    \        i=3\n        while [[ $i -le $n ]]; do\n            f_3=$((f_1 + f_2))\n\
    \            f_1=$f_2\n            f_2=$f_3\n            i=$((i + 1))\n      \
    \  done\n        echo \"$f_3\"\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ $1 -eq 0 ]; then\n    echo \"0\"\n  elif [ $1 -eq 1\
    \ ]; then\n    echo \"1\"\n  else\n    local a=$(fib \"$(($1 - 1))\")\n    local\
    \ b=$(fib \"$(($1 - 2))\")\n    echo $((a + b))\n  fi\n}\n\ncandidate() {\n  \
    \  fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\"\
    \ ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"\
    144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local -i n=\"$1\"\n  local -i a=0 b=1 i=0\n\n  while ((\
    \ i < n )); do\n    (( i++ ))\n    (( a, b = b, a + b ))\n  done\n\n  echo \"\
    $a\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local i=1\n    local j=1\n    local n=$1\n    for (( c=0;\
    \ c<n; c++ ))\n    do\n        i=$((i+j))\n        j=$((i-j))\n    done\n    echo\
    \ $j\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ $1 -eq 1 ]]; then\n        echo \"1\"\n    elif\
    \ [[ $1 -eq 2 ]]; then\n        echo \"1\"\n    else\n        echo $(expr $(fib\
    \ \"2\") + $(fib \"1\"))\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tif [[ $1 == 0 ]]; then\n\t\techo 0\n\telif [[ $1 == 1 ]];\
    \ then\n\t\techo 1\n\telse\n\t\techo $(($(fib \"$(($1 - 1))\") + $(fib \"$(($1\
    \ - 2))\")))\n\tfi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  n=$1\n  a=0\n  b=1\n  for i in $(seq $n); do\n    c=$((a+b))\n\
    \    a=$b\n    b=$c\n  done\n  echo $a\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  [[ -z \"$1\" ]] && return 1\n  [[ \"$1\" -eq \"0\" ]] &&\
    \ echo \"0\" && return 0\n  [[ \"$1\" -eq \"1\" ]] && echo \"1\" && return 0\n\
    \  local f_2=\"0\"\n  local f_1=\"1\"\n  local tmp=\n  local i=2\n  while [[ \"\
    $i\" -le \"$1\" ]]; do\n    tmp=\"$f_1\"\n    f_1=$((f_1 + f_2))\n    f_2=\"$tmp\"\
    \n    ((i++))\n  done\n  echo \"$f_1\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ $1 -lt 2 ]; then\n        echo 1\n    else\n    \
    \    echo $(( $(fib $(( $1 - 1 )) ) + $(fib $(( $1 - 2 )) ) ))\n    fi\n}\n\n\
    candidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"\
    8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"\
    12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n=$1\n    local i=0\n    local fib1=0\n    local\
    \ fib2=1\n    local fib_i=0\n    # Need to add another check for n is an integer\n\
    \    if [[ $n -eq 0 ]]; then\n        echo \"0\"\n    elif [[ $n -eq 1 ]]; then\n\
    \        echo \"1\"\n    else\n        while [[ $i -lt $n ]]; do\n           \
    \ fib_i=$(($fib1 + $fib2))\n            fib1=$fib2\n            fib2=$fib_i\n\
    \            ((i++))\n        done\n        echo \"$fib_i\"\n    fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n=$1\n    local i=1\n    local j=0\n    local k=1\n\
    \    local tmp=0\n    while ((n>0)); do\n        ((n--))\n        tmp=$i\n   \
    \     i=$((i+j))\n        j=$tmp\n    done\n    echo $j\n}\n\ncandidate() {\n\
    \    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\"\
    \ ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"\
    144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ $1 -le 2 ]]; then\n        echo \"1\"\n    else\n\
    \        echo \"$(bc <<< \"scale=0; ($(fib \"$(bc <<< \"$1 - 1\")\") + $(fib \"\
    $(bc <<< \"$1 - 2\")\"))\")\"\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ \"$1\" -eq \"0\" ]; then\n        echo \"0\"\n  \
    \  elif [ \"$1\" -eq \"1\" ]; then\n        echo \"1\"\n    else\n        echo\
    \ $(( $(fib \"$(( $1 - 1 ))\") + $(fib \"$(( $1 - 2 ))\") ))\n    fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n\n    (( n = $1 ))\n    if (( n < 2 )); then\n\
    \        echo $n\n    else\n        echo $(( $(fib $(( n - 1 ))) + $(fib $(( n\
    \ - 2 ))) ))\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n=\"$1\"\n    local a=0\n    local b=1\n    local\
    \ i=0\n    while [[ $i -lt $n ]]; do\n        local tmp=\"$a\"\n        a=\"$b\"\
    \n        b=$(( a + tmp ))\n        i=$(( i + 1 ))\n    done\n    echo \"$a\"\n\
    }\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\ta=\"0\"\n\tb=\"1\"\n\tfor ((i=1; i<=$1; i++)); do\n\t\t\
    #echo -n \"$a \"\n\t\tc=$((a+b))\n\t\ta=$b\n\t\tb=$c\n\tdone\n\techo \"$a\"\n\
    }\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021166
- exit_code: -1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if (($1 < 1)); then\n        echo 0\n    elif (($1 ==\
    \ 1)); then\n        echo 1\n    else\n        ((--1))\n        n1=$(fib \"$REPLY\"\
    )\n        ((--1))\n        n2=$(fib \"$REPLY\")\n        echo $((n1 + n2))\n\
    \    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[\
    \ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n   \
    \ [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=74 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=41 encoding='utf-8'>
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tf=$1\n\tif [ $f -eq 0 ]; then\n\t\techo \"0\"\n\telif [\
    \ $f -eq 1 ]; then\n\t\techo \"1\"\n\telse\n\t\tlet \"f1 = $f - 1\"\n\t\tlet \"\
    f2 = $f - 2\"\n\t\tf1=$(fib $f1)\n\t\tf2=$(fib $f2)\n\t\tlet \"f = $f1 + $f2\"\
    \n\t\techo $f\n\tfi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tif [ $1 -le 2 ]; then\n\t\techo \"1\"\n\telse\n\t\techo\
    \ \"$(($(fib $(($1-1))) + $(fib $(($1-2)))))\"\n\tfi\n}\n\ncandidate() {\n   \
    \ fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n\
    \    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n\
    \    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ $1 -eq 1 ]\n    then\n        echo 1\n    elif [\
    \ $1 -eq 2 ]\n    then\n        echo 1\n    else\n        expr $(fib $(expr $1\
    \ - 1)) + $(fib $(expr $1 - 2))\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ \"$1\" -eq \"0\" ] || [ \"$1\" -eq \"1\" ]; then\n\
    \    echo $1\n  else\n    fib $(($1 - 1)) + $(fib $(($1 - 2)))\n  fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local x=$1\n  if [ $x -le 2 ]; then\n    echo $1\n  else\n\
    \    local f1=$(fib \"$(( x - 1 ))\")\n    local f2=$(fib \"$(( x - 2 ))\")\n\
    \    echo \"$(( f1 + f2 ))\"\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  f1=\"0\"\n  f2=\"1\"\n  if [ $1 -lt \"2\" ]; then\n    echo\
    \ \"$1\"\n  else\n    for (( i=2; i<=$1; i++ )); do\n      if [ $i -eq \"2\" ];\
    \ then\n        echo \"$((f1+f2))\"\n      else\n        f1=\"$f2\"\n        f2=\"\
    $((f1+f2))\"\n        echo \"$f2\"\n      fi\n    done\n  fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ \"$1\" -lt 2 ]; then\n        echo \"$1\"\n    else\n\
    \        echo $((`fib $(( $1 - 1 ))` + `fib $(( $1 - 2 ))`))\n    fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n=$1\n    local p=0\n    local q=1\n    local i\n\
    \    for ((i=1; i<n; i++)); do\n        local tmp=$q\n        q=$((p+q))\n   \
    \     p=$tmp\n    done\n    echo $q\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local f1=0\n    local f2=1\n    local fn=0\n    local\
    \ ix=0\n    local i=$1\n    while [ $ix -lt $i ]; do\n        fn=$((f1 + f2))\n\
    \        f1=$f2\n        f2=$fn\n        ix=$((ix + 1))\n    done\n    echo \"\
    $fn\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ \"$1\" -lt \"3\" ]]; then\n        echo \"$1\"\n\
    \    else\n        echo \"$(( $(fib \"$(( $1 - 1 ))\") + $(fib \"$(( $1 - 2 ))\"\
    ) ))\"\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n\
    \    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ \"$#\" -ne 1 ]; then\n        echo \"Usage: fib n\"\
    \n        return 1\n    fi\n    declare -i n=$1\n    if [ \"$n\" -lt 0 ]; then\n\
    \        echo \"Error: argument $n is negative\"\n        return 1\n    fi\n \
    \   declare -a arr\n    arr[0]=0\n    arr[1]=1\n    if [ \"$n\" -lt 2 ]; then\n\
    \        echo \"${arr[$n]}\"\n        return 0\n    fi\n    declare -i i\n   \
    \ for ((i=2; i<=n; i++)); do\n        arr[$i]=$((arr[i-1]+arr[i-2]))\n    done\n\
    \    echo \"${arr[$n]}\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local -i i\n  local -i n1=0\n  local -i n2=1\n  local -i\
    \ n\n  for ((i=1; i<=${1}; i++)); do\n    n=$((n1+n2))\n    n1=$n2\n    n2=$n\n\
    \  done\n  echo \"$n\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n=\"$1\"\n    local m=2\n    local result=1\n  \
    \  local a=1\n    local b=1\n    while (( m < n )); do\n        (( a = b, b =\
    \ result, result = a + b, m = m + 1 ))\n    done\n    echo \"$result\"\n}\n\n\
    candidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"\
    8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"\
    12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [[ $1 -le 0 ]]; then\n    return 0\n  fi\n  local i=0\n\
    \  local res=0\n  local n=1\n  while [[ $i -lt $1 ]]; do\n    let i++\n    local\
    \ tmp=$res\n    res=$n\n    n=$((n+tmp))\n  done\n  echo $res\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ $1 -le 0 ]; then\n    echo \"0\"\n  elif [ $1 -eq 1\
    \ ]; then\n    echo \"1\"\n  else\n    a=$(fib $(($1 - 1)))\n    b=$(fib $(($1\
    \ - 2)))\n    echo $(($a + $b))\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ \"$1\" -eq 0 ] || [ \"$1\" -eq 1 ]; then\n    echo\
    \ \"$1\"\n  else\n    echo $(( $(fib \"$(( $1 - 1 ))\") + $(fib \"$(( $1 - 2 ))\"\
    ) ))\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n\
    \    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1\
    \ -eq 1 ]]; then\n        echo 1\n    else\n        echo $(($(fib $(($1-1))) +\
    \ $(fib $(($1-2)))))\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    ) = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    f1=1\n    f2=0\n    ret=$1\n    case $ret in\n       \
    \ 0) echo \"$f2\" ;;\n        1) echo \"$f1\" ;;\n        *)\n            for\
    \ i in $(seq 2 $ret); do\n                f1=$((f1+f2))\n                f2=$((f1-f2))\n\
    \            done\n            echo \"$f1\"\n            ;;\n    esac\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local _fib_arg=\"$1\"\n    local _fib_ret\n    if [[ \"\
    $_fib_arg\" -le \"0\" ]]; then\n        echo \"0\"\n    elif [[ \"$_fib_arg\"\
    \ -le \"2\" ]]; then\n        echo \"1\"\n    else\n        _fib_ret=$((\"$_fib_arg\"\
    \ - 1))\n        _fib_ret=$((\"$_fib_ret\" + $(fib \"$_fib_ret\")))\n        echo\
    \ \"$_fib_ret\"\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n\n  n=$1\n  if [ $n -eq 0 ] || [ $n -eq 1 ]; then\n\
    \    echo \"$n\"\n  else\n    echo \"$(( $(fib $((n-1))) + $(fib $((n-2))) ))\"\
    \n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[\
    \ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n   \
    \ [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ \"$1\" -eq 1 ]]; then\n        echo \"1\"\n    elif\
    \ [[ \"$1\" -eq 2 ]]; then\n        echo \"1\"\n    else\n        echo $(( $(fib\
    \ \"$(( $1 - 1 ))\") + $(fib \"$(( $1 - 2 ))\") ))\n    fi\n}\n\ncandidate() {\n\
    \    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\"\
    \ ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"\
    144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  case $1 in\n    \"0\") echo \"0\";;\n    \"1\") echo \"\
    1\";;\n    *)\n      local fib_prev_2=$(fib \"0\")\n      local fib_prev_1=$(fib\
    \ \"1\")\n      local i\n      for ((i=2; i<=$1; i++)); do\n        local fib=$((fib_prev_1\
    \ + fib_prev_2))\n        fib_prev_2=$fib_prev_1\n        fib_prev_1=$fib\n  \
    \    done\n      echo \"$fib\"\n      ;;\n  esac\n}\n\ncandidate() {\n    fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n\
    \    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n\
    \    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n=$1\n\n    local last=0\n    local next=1\n   \
    \ local current=0\n\n    while [ \"$n\" -gt \"0\" ]; do\n        (( current =\
    \ last + next ))\n        (( last = next ))\n        (( next = current ))\n  \
    \      (( n-- ))\n    done\n\n    echo \"$last\"\n}\n\ncandidate() {\n    fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n\
    \    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n\
    \    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n=$1\n    if [[ $n -lt 2 ]]; then\n        printf\
    \ \"%d\" $n\n    else\n        printf \"%d\" $(($(fib \"$(($n - 1))\") + $(fib\
    \ \"$(($n - 2))\")))\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    ) = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ \"$1\" -le \"2\" ]; then\n    echo \"1\"\n  else\n\
    \    echo $(( $(fib $(( $1 - 1 )) ) + $(fib $(( $1 - 2 )) ) ))\n  fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [[ $1 -eq 0 ]]; then\n    echo 0\n  elif [[ $1 -eq 1\
    \ ]]; then\n    echo 1\n  else\n    echo $(( $(fib $(( $1 - 1 )) ) + $(fib $((\
    \ $1 - 2 )) ) ))\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n=${1}\n  if [ \"${n}\" -lt 2 ]; then\n    echo \"\
    ${n}\"\n  else\n    local a=$(fib $((n-1)))\n    local b=$(fib $((n-2)))\n   \
    \ local c=$((a+b))\n    echo \"${c}\"\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n=\"$1\"\n    local a=0\n    local b=1\n    while\
    \ [ \"$n\" -gt 0 ]; do\n        a=$(($a + $b))\n        b=$(($a - $b))\n     \
    \   n=$(($n - 1))\n    done\n    echo \"$a\"\n}\n\ncandidate() {\n    fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021167
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [[ \"${1:-}\" =~ ^[0-9]+$ ]]; then\n    if [ \"$1\" -eq\
    \ 0 ]; then\n      echo 0\n    elif [ \"$1\" -eq 1 ]; then\n      echo 1\n   \
    \ else\n      local a=0\n      local b=1\n      for (( n=2; n<=${1}; n++ )); do\n\
    \        local c=$((a+b))\n        a=$b\n        b=$c\n      done\n      echo\
    \ $c\n    fi\n  else\n    return\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    n=$1\n    if [ $n -le 0 ]; then\n        echo \"0\"\n\
    \    elif [ $n -eq 1 ]; then\n        echo \"1\"\n    else\n        fib_nm1=$(fib\
    \ $((n-1)))\n        fib_nm2=$(fib $((n-2)))\n        echo $((fib_nm1 + fib_nm2))\n\
    \    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[\
    \ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n   \
    \ [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    # Check argument\n    if [[ $1 =~ ^[0-9]+$ ]]; then\n\
    \        # Initialize variables\n        x=0\n        y=1\n        for (( i=0;\
    \ i<$1; i++ )); do\n            # Initialize variables\n            tmpx=$x\n\
    \            tmpy=$y\n            # Calculate\n            x=$((tmpy))\n     \
    \       y=$((tmpx+tmpy))\n        done\n        # Return result\n        echo\
    \ \"$x\"\n    else\n        # Return error\n        echo \"Argument must be an\
    \ integer.\"\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n=$1\n  if (( n <= 2 )); then\n    echo 1\n  else\n\
    \    echo $(($(fib $((n-1))) + $(fib $((n-2)))))\n  fi\n}\n\ncandidate() {\n \
    \   fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\"\
    \ ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"\
    144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  echo $1 | awk '{ f[1]=1; f[2]=1; for (i=3; i<=$1; i++) {\
    \ f[i]=f[i-1]+f[i-2]; }; print f[$1] }'\n}\n\ncandidate() {\n    fib \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tlocal n=\"$1\"\n\t[ \"$n\" -gt \"0\" ] || return 0\n\techo\
    \ \"$n\" | awk '{print int(($1*(($1+1)/2)+0.5))}'\n}\n\ncandidate() {\n    fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n\
    \    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n\
    \    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local input=$1\n    local a=0\n    local b=1\n    local\
    \ i=0\n    while [ $i -lt $input ]; do\n        echo $a\n        local a=$(( $a\
    \ + $b ))\n        local b=$(( $a - $b ))\n        local i=$(( $i + 1 ))\n   \
    \ done\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[\
    \ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n   \
    \ [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\t# First two fibonacci numbers.\n\tlocal a=\"1\"\n\tlocal\
    \ b=\"1\"\n\t# Last fibonacci number (to check if we are done).\n\tlocal c=\"\
    0\"\n\t# Counter.\n\tlocal n=\"1\"\n\t# Loop.\n\twhile (( c <= $1 )); do\n\t\t\
    if (( n == $1 )); then\n\t\t\techo $c\n\t\t\treturn\n\t\tfi\n\t\tlet \"a=b, b=c,\
    \ c=a+b, n+=1\"\n\tdone\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ $1 -eq 1 ]; then\n        echo 1\n    elif [ $1 -eq\
    \ 2 ]; then\n        echo 1\n    else\n        echo $(($(fib $(($1-1))) + $(fib\
    \ $(($1-2)))))\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n=$1\n  if [[ $n -eq 1 ]]; then\n    echo \"1\"\n\
    \  elif [[ $n -eq 2 ]]; then\n    echo \"1\"\n  else\n    local a=1\n    local\
    \ b=1\n    for ((i=3; i<=$n; i++)); do\n      local c=$((a+b))\n      a=$b\n \
    \     b=$c\n    done\n    echo \"$c\"\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n\n    n=$1\n    [ \"$n\" -eq \"0\" ] && echo \"\
    0\" && return\n    local i j a b\n    i=1\n    j=1\n    a=1\n    b=1\n    while\
    \ [ \"$i\" -lt \"$n\" ]; do\n        b=$(($a + $b))\n        a=$b\n        i=$(($i\
    \ + 1))\n    done\n    echo \"$b\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: -1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n=\"$1\"\n  if [[ n == \"0\" ]]; then\n    echo 0\n\
    \  elif [[ n == \"1\" ]]; then\n    echo 1\n  else\n    echo $(( $(fib $((n-1)))\
    \ + $(fib $((n-2))) ))\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    ) = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=53 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=47 encoding='utf-8'>
  timestamp: 1660021173
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ \"$1\" -le 0 ]; then\n        echo 0\n    elif [\
    \ \"$1\" -eq 1 ]; then\n        echo 1\n    else\n        echo $(($(fib $(($1-1)))\
    \ + $(fib $(($1-2)))))\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    ) = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [[ $1 -eq 0 ]]; then\n    echo 0\n  elif [[ $1 -eq 1\
    \ ]]; then\n    echo 1\n  else\n    echo $(($(fib $(($1 - 1))) + $(fib $(($1 -\
    \ 2)))))\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n\
    \    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n\n\n  if [[ $1 =~ ^-?[0-9]+$ ]]; then\n    n=$1\n\
    \  else\n    return 1\n  fi\n\n  if [[ n -le 0 ]]; then\n    echo 0\n  elif [[\
    \ n -le 2 ]]; then\n    echo 1\n  else\n    echo $(( $(fib $((n - 1))) + $(fib\
    \ $((n - 2))) ))\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ \"$1\" -eq \"0\" ]; then\n        echo \"0\"\n  \
    \  elif [ \"$1\" -eq \"1\" ]; then\n        echo \"1\"\n    else\n        prev1=$(fib\
    \ \"$(($1 - 1))\")\n        prev2=$(fib \"$(($1 - 2))\")\n        echo \"$(($prev1\
    \ + $prev2))\"\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n=${1}\n    local n_1=1\n    local n_2=1\n    local\
    \ f=1\n    if [[ $n -eq 1 ]]; then\n        echo $n_1\n    elif [[ $n -eq 2 ]];\
    \ then\n        echo $n_2\n    else\n        while [[ $n -gt 2 ]]; do\n      \
    \      let f=$n_1+$n_2\n            let n_1=$n_2\n            let n_2=$f\n   \
    \         let n=$n-1\n        done\n        echo $f\n    fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ \"$1\" == \"1\" ]]; then\n        echo \"1\"\n \
    \   elif [[ \"$1\" == \"2\" ]]; then\n        echo \"1\"\n    else\n        echo\
    \ \"$(($(fib \"$(($1 - 1))\") + $(fib \"$(($1 - 2))\")))\"\n    fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    # Return n-th Fibonacci number\n    if [[ $1 -eq 1 ]];\
    \ then\n        echo 1\n    elif [[ $1 -eq 2 ]]; then\n        echo 1\n    else\n\
    \        n=$(($1-1))\n        n_1=$(fib \"$n\")\n        n=$(($1-2))\n       \
    \ n_2=$(fib \"$n\")\n        echo $(($n_1+$n_2))\n    fi\n}\n\ncandidate() {\n\
    \    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\"\
    \ ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"\
    144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ $1 -le 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ];\
    \ then\n    echo 1\n  else\n    echo $(($(fib $(($1 - 1))) + $(fib $(($1 - 2)))))\n\
    \  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ $1 -lt 2 ]; then\n        echo \"$1\"\n    else\n\
    \        echo $(( $(fib \"$(( $1 - 1 ))\") + $(fib \"$(( $1 - 2 ))\") ))\n   \
    \ fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tlocal FIB=$(factorial \"$1\")\n\n\t# Doing local here is\
    \ crucial. Otherwise the value of $FIB\n\t# will be the same in the two subshells\
    \ which is clearly\n\t# not what we want.\n\tlocal X=$(factorial $(( $1 - 1 )))\n\
    \tlocal Y=$(factorial $(( $1 - 2 )))\n\n\tlocal RET=$(( $FIB / $X / $Y ))\n\t\
    echo \"$RET\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n\
    \    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy3o54lb2.sh: line 12: factorial: command not found

    /tmp/tmpy3o54lb2.sh: line 17: factorial: command not found

    /tmp/tmpy3o54lb2.sh: line 18: factorial: command not found

    /tmp/tmpy3o54lb2.sh: line 20: /  /  : syntax error: operand expected (error token
    is "/  /  ")

    '
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n=$1\n    local a=0\n    local b=1\n    while ((\
    \ n > 0 )); do\n        let \"a=a+b\"\n        let \"b=a-b\"\n        let \"n=n-1\"\
    \n    done\n    echo $a\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  n=\"$1\"\n  if [ \"$n\" == \"0\" ]\n  then\n    echo 0\n\
    \  elif [ \"$n\" == \"1\" ]\n  then\n    echo 1\n  else\n    echo \"$(($(fib \"\
    $(($n - 1))\") + $(fib \"$(($n - 2))\")))\"\n  fi\n}\n\ncandidate() {\n    fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n\
    \    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n\
    \    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tlocal n=$1\n\t\n\tif [ $n -eq 0 ]\n\tthen\n\t\techo 0\n\t\
    elif [ $n -eq 1 ]\n\tthen\n\t\techo 1\n\telse\n\t\tlocal k=$(($n-1))\n\t\tlocal\
    \ j=$(($n-2))\n\t\tlocal fib1\n\t\tlocal fib2\n\t\t\n\t\tfib1=$(fib $k)\n\t\t\
    fib2=$(fib $j)\n\t\t\n\t\techo $((fib1+fib2))\n\tfi\n}\n\ncandidate() {\n    fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n\
    \    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n\
    \    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local i x\n  i=0\n  x=1\n  while [[ $i -lt $1 ]]; do\n \
    \   i=$((i+1))\n    ((x=$x+$i))\n  done\n  echo \"$x\"\n}\n\ncandidate() {\n \
    \   fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\"\
    \ ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"\
    144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  echo \"$1\" | awk '{\n    fib[0] = 0;\n    fib[1] = 1;\n\
    \    n = $1;\n    if (n > 1) {\n      for (i = 2; i <= n; i++) {\n        fib[i]\
    \ = fib[i-1] + fib[i-2];\n      }\n    }\n    print fib[n];\n  }'\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n=$1\n  local i=1\n  local j=0\n  local k=1\n  while\
    \ (( k <= n )); do\n    (( i = i + j ))\n    (( j = i - j ))\n    (( k = k + 1\
    \ ))\n  done\n  echo \"$j\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    ) = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ $1 -lt 1 ]; then\n    printf \"%d\" 1\n  else\n   \
    \ pre=$(fib \"$(($1 - 1))\")\n    pre_pre=$(fib \"$(($1 - 2))\")\n    printf \"\
    %d\" \"$(($pre + $pre_pre))\"\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n\n  if [[ \"$1\" =~ ^[0-9]+$ ]]; then\n    n=$1\n\
    \  else\n    echo \"Error: fib() arg not an integer\" >&2\n    return 1\n  fi\n\
    \  if [[ $n == 0 ]]; then\n    echo \"0\"\n  elif [[ $n == 1 ]]; then\n    echo\
    \ \"1\"\n  else\n    fibPrev=0\n    fib=1\n    for ((i=2; i<n; i++)); do\n   \
    \   fibNext=$((fibPrev + fib))\n      fibPrev=$fib\n      fib=$fibNext\n    done\n\
    \    echo \"$fib\"\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [[ $1 -eq 0 ]]; then\n    echo 0\n  elif [[ $1 -eq 1\
    \ ]]; then\n    echo 1\n  else\n    echo $((`fib $(( $1 - 1 ))` + `fib $(( $1\
    \ - 2 ))`))\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ $1 -eq 1 ]; then\n        echo \"1\"\n    elif [\
    \ $1 -eq 2 ]; then\n        echo \"1\"\n    else\n        echo \"$(($(fib \"$(($1\
    \ - 1))\") + $(fib \"$(($1 - 2))\")))\"\n    fi\n}\n\ncandidate() {\n    fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[\
    \ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\
    \nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tlocal iter=1\n\tlocal cur=1\n\tlocal prev=0\n\tlocal max=$1\n\
    \twhile [[ iter -lt $max ]]; do\n\t\tlocal tmp=$cur\n\t\tcur=$((cur+prev))\n\t\
    \tprev=$tmp\n\t\titer=$((iter+1))\n\tdone\n\techo $cur\n}\n\ncandidate() {\n \
    \   fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\"\
    \ ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"\
    144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021168
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ \"$1\" -eq \"1\" ]]; then\n        echo \"1\"\n\
    \    elif [[ \"$1\" -eq \"2\" ]]; then\n        echo \"1\"\n    else\n       \
    \ echo $(( $(fib $(( $1 - 1 ))) + $(fib $(( $1 - 2 ))) ))\n    fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local input=$1\n  local sign\n  if [[ \"${input:0:1}\" ==\
    \ \"-\" ]]; then\n    sign=\"-\"\n    input=${input:1}\n  fi\n  if (( input ==\
    \ 0 || input == 1 )); then\n    echo $input\n  else\n    local n2=0\n    local\
    \ n1=1\n    local n=0\n    while (( input > 1 )); do\n      n=$(( n2 + n1 ))\n\
    \      n2=$n1\n      n1=$n\n      input=$(( input - 1 ))\n    done\n    echo $n\n\
    \  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    n=$1\n\n    if [[ ${n} -le 0 ]]; then\n        echo 1\n\
    \    elif [[ ${n} -eq 1 ]]; then\n        echo 1\n    else\n        curr=1\n \
    \       prev=1\n        i=2\n        while [[ ${i} -lt ${n} ]]; do\n         \
    \   result=$(( ${curr} + ${prev} ))\n            prev=${curr}\n            curr=${result}\n\
    \            i=$(( ${i} + 1 ))\n        done\n        echo ${result}\n    fi\n\
    }\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    index=\"$1\"\n    a=0\n    b=1\n    for ((i=0; i<$index;\
    \ i++)); do\n        temp=$a\n        a=$(echo \"$a + $b\" | bc)\n        b=$temp\n\
    \    done\n    echo $b\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tlocal a=0 b=1 x=\"$1\"\n\twhile [ \"$x\" -gt \"0\" ]; do\n\
    \t\tlet \"a=a+b\"\n\t\tlet \"b=a-b\"\n\t\tlet \"x=x-1\"\n\tdone\n\techo \"$a\"\
    \n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ -z \"$1\" ]; then\n    echo \"Need integer argument.\"\
    \n    return 1\n  fi\n  if [ \"$1\" -le \"0\" ]; then\n    echo \"Need positive\
    \ integer argument.\"\n    return 1\n  fi\n  if [ \"$1\" -eq \"1\" ]; then\n \
    \   echo \"1\"\n    return 0\n  fi\n  if [ \"$1\" -eq \"2\" ]; then\n    echo\
    \ \"1\"\n    return 0\n  fi\n  a=1\n  b=1\n  i=3\n  while [ \"$i\" -le \"$1\"\
    \ ]; do\n    c=$((a+b))\n    a=$b\n    b=$c\n    i=$((i+1))\n  done\n  echo \"\
    $c\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tif [[ $1 -le 0 ]]; then\n\t\techo \"0\"\n\t\treturn\n\t\
    fi\n\tif [[ $1 -eq 1 ]]; then\n\t\techo \"1\"\n\t\treturn\n\tfi\n\tn1=0\n\tn2=1\n\
    \tfor ((i=2; i<=$1; i++)); do\n\t\tn3=$((n1+n2))\n\t\tn1=$n2\n\t\tn2=$n3\n\tdone\n\
    \techo \"$n3\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n\
    \    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\t# a, b, c are integer\n\t# a, b - previous and current values\n\
    \t# c - next value\n\ta=0\n\tb=1\n\t# $1 is an index of Fibonacci number to return\n\
    \tfor ((i=0; i<$1; i++)); do\n\t\tc=$((a+b))\n\t\ta=$b\n\t\tb=$c\n\tdone\n\techo\
    \ $a\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tlocal number=\"$1\"\n\tif [ $number -lt 0 ]; then\n\t\t\
    echo \"Error: Argument must be non-negative.\"\n\t\treturn 1\n\tfi\n\tif [ $number\
    \ -eq 0 ]; then\n\t\techo \"0\"\n\t\treturn 0\n\tfi\n\tif [ $number -eq 1 ]; then\n\
    \t\techo \"1\"\n\t\treturn 0\n\tfi\n\tlocal n2=\"0\"\n\tlocal n1=\"1\"\n\tlocal\
    \ n\n\tfor ((i=1; i<number; i++)); do\n\t\tn=$((n1+n2))\n\t\tn2=$n1\n\t\tn1=$n\n\
    \tdone\n\techo \"$n\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [[ \"$1\" == \"1\" ]]; then\n    echo \"1\"\n  elif [[\
    \ \"$1\" == \"2\" ]]; then\n    echo \"1\"\n  else\n    expr $(fib \"$(expr \"\
    $1\" - 1)\") + $(fib \"$(expr \"$1\" - 2)\")\n  fi\n}\n\ncandidate() {\n    fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n\
    \    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n\
    \    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\techo \"scale=2;1/sqrt(5)*((1+sqrt(5))/2)^$1-(1-sqrt(5))/2^$1\"\
    \ | bc -l\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n \
    \   [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n\
    \    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  n=\"$1\"\n  if [ \"$n\" -lt \"3\" ]; then\n    echo \"$n\"\
    \n  else\n    echo $(( $(fib $(( n - 1 ))) + $(fib $(( n - 2 ))) ))\n  fi\n}\n\
    \ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ $1 -le 0 ]]; then\n        echo \"0\"\n    elif\
    \ [[ $1 -eq 1 ]]; then\n        echo \"1\"\n    else\n        echo $(($(fib $(($1\
    \ - 1))) + $(fib $(($1 - 2)))))\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ -z \"$1\" ]; then\n    return 1\n  fi\n  local -i n=$1\n\
    \n  if [ $n -le 0 ]; then\n    echo \"0\"\n  elif [ $n -le 2 ]; then\n    echo\
    \ \"1\"\n  else\n    fib $(($n - 1)) + $(fib $(($n - 2)))\n  fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local value=0\n  local x=0\n  local y=1\n  local i\n  [[\
    \ \"$1\" =~ ^[0-9]+$ ]] || return\n  for ((i=1; i<=$1; i++)); do\n    ((value=x+y))\n\
    \    ((x=y))\n    ((y=value))\n  done\n  echo \"$value\"\n}\n\ncandidate() {\n\
    \    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\"\
    \ ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"\
    144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ \"$1\" -le \"1\" ]; then\n    echo \"1\"\n  else\n\
    \    echo \"$(($(fib \"$(($1 - 1))\") + $(fib \"$(($1 - 2))\")))\";\n  fi\n}\n\
    \ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    # $0 is the program name\n    # $1 is the argument\n \
    \   if [ \"$1\" -lt \"2\" ]; then\n        echo \"1\"\n    else\n        echo\
    \ $(( $(fib $(( $1 - 1 ))) + $(fib $(( $1 - 2 ))) ))\n    fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ \"$1\" -lt 1 ]; then\n        echo 0\n    elif [\
    \ \"$1\" -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(fib \"$((\
    \ $1 - 1 ))\") + $(fib \"$(( $1 - 2 ))\") ))\n    fi\n}\n\ncandidate() {\n   \
    \ fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n\
    \    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n\
    \    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ $1 -eq 1 ] || [ $1 -eq 2 ]; then\n    echo \"1\"\n\
    \  else\n    echo \"$(($(fib $(($1-1))) + $(fib $(($1-2)))))\"\n  fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ \"$1\" -lt 2 ]; then\n    echo \"$1\"\n  else\n   \
    \ echo \"$(($(fib \"$(($1 - 1))\") + $(fib \"$(($1 - 2))\")))\"\n  fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tif [ $1 -lt 3 ]; then\n\t\techo \"1\"\n\telse\n\t\techo\
    \ \"$(( $(fib $(( $1 - 1 ))) + $(fib $(( $1 - 2 ))) ))\"\n\tfi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n=$1\n  if [[ $n -eq 0 ]]; then\n    echo \"0\"\n\
    \  elif [[ $n -eq 1 ]]; then\n    echo \"1\"\n  else\n    echo $(( $(fib \"$((n-1))\"\
    ) + $(fib \"$((n-2))\") ))\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tif [[ \"$1\" -eq \"1\" ]]; then\n\t\techo \"1\"\n\telif\
    \ [[ \"$1\" -eq \"2\" ]]; then\n\t\techo \"1\"\n\telse\n\t\tlocal n=$(($1-1))\n\
    \t\tlocal n1=$(fib \"$n\")\n\t\tlocal n2=$(($n-1))\n\t\tlocal n3=$(fib \"$n2\"\
    )\n\t\techo $(($n1+$n3))\n\tfi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    ) = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local -i i max=${1?No argument}\n    local -i result=0\n\
    \n    if (( $max < 0 )); then\n        echo \"Fibonacci is defined only for natural\
    \ numbers\" >&2\n        return 1\n    fi\n\n    if (( $max == 0 )); then\n  \
    \      echo \"0\"\n        return 0\n    fi\n\n    if (( $max == 1 )); then\n\
    \        echo \"1\"\n        return 0\n    fi\n\n    if (( $max > 2 )); then\n\
    \        let --max\n        local -i pre_pre_fib=\"$(fib $max)\"\n        let\
    \ --max\n        local -i pre_fib=\"$(fib $max)\"\n        let --max\n       \
    \ result=\"$pre_pre_fib\"\n\n        for (( i=max; i>0; i-- )); do\n         \
    \   let result+=\"$pre_fib\"\n            pre_pre_fib=\"$pre_fib\"\n         \
    \   pre_fib=\"$result\"\n        done\n    fi\n\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n=\"$1\"\n    local a=0\n    local b=1\n    local\
    \ i=0\n    while [ $i -lt $n ]; do\n        i=$(($i + 1))\n        a=$(($a + $b))\n\
    \        b=$(($a - $b))\n    done\n    echo $a\n}\n\ncandidate() {\n    fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[\
    \ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\
    \nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\t# First Fibonacci number is 0 and second is 1.\n\tlocal\
    \ fib1=\"0\"\n\tlocal fib2=\"1\"\n\tlocal fibn=\"0\"\n\t\n\t# Loop to the n-th\
    \ Fibonacci number.\n\tfor (( i=1; i<\"$1\"; i++ )); do\n\t\t# Sum of previous\
    \ two numbers.\n\t\tfibn=$(( $fib1 + $fib2 ))\n\t\t\n\t\t# Remember current numbers.\n\
    \t\tfib1=$fib2\n\t\tfib2=$fibn\n\tdone\n\t\n\t# Echo n-th Fibonacci number.\n\t\
    echo \"$fibn\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n\
    \    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ \"$1\" -eq \"0\" ]; then\n        echo \"0\"\n  \
    \  elif [ \"$1\" -eq \"1\" ]; then\n        echo \"1\"\n    else\n        echo\
    \ $(($(fib $(($1-1))) + $(fib $(($1-2)))))\n    fi\n}\n\ncandidate() {\n    fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n\
    \    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n\
    \    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    # TODO: Error handling\n    if [[ $1 == 1 ]]; then\n \
    \       echo \"1\"\n    elif [[ $1 == 2 ]]; then\n        echo \"1\"\n    else\n\
    \        echo $(($(fib $(($1 - 1))) + $(fib $(($1 - 2)))))\n    fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local -i a=\"1\" b=\"1\" c=\"0\" i\n    for ((i=2; i<$1;\
    \ i++)); do\n        ((c=a+b))\n        ((a=b))\n        ((b=c))\n    done\n \
    \   echo $c\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n\
    \    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: -1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if (($1 < 2)); then\n        echo \"$1\"\n    else\n \
    \       local f0=0\n        local f1=1\n        local f2\n        while (($1 >\
    \ 1)); do\n            f2=$((f0 + f1))\n            f0=$f1\n            f1=$f2\n\
    \            ((--$1))\n        done\n        echo \"$f2\"\n    fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=60 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=44 encoding='utf-8'>
  timestamp: 1660021174
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tlocal n=\"$1\"\n\tlocal c_1=1\n\tlocal c_2=1\n\tlocal c_3=0\n\
    \tlocal c=0\n\twhile [[ \"$c\" -lt \"$n\" ]]; do\n\t\tlet c_3=\"$c_1+$c_2\"\n\t\
    \tlet c_1=\"$c_2\"\n\t\tlet c_2=\"$c_3\"\n\t\tlet c=\"$c+1\"\n\tdone\n\techo \"\
    $c_1\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[\
    \ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n   \
    \ [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local i\n  local i_1=1\n  local i_2=1\n  local result=1\n\
    \  if [ \"$1\" -le 0 ]; then\n    echo \"1\"\n  else\n    for ((i=2; i<$1; i++));\
    \ do\n      result=$((i_1 + i_2))\n      i_2=$i_1\n      i_1=$result\n    done\n\
    \    echo \"$result\"\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    ) = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local num=${1:-0}\n\n    case $num in\n        0) echo\
    \ \"0\" ;;\n        1) echo \"1\" ;;\n        *)\n            local pre=0\n  \
    \          local cur=1\n            local tmp\n\n            while (( num > 1\
    \ )); do\n                tmp=$pre\n                pre=$cur\n               \
    \ cur=$((tmp + cur))\n                num=$((num - 1))\n            done\n\n \
    \           echo \"$cur\"\n            ;;\n    esac\n}\n\ncandidate() {\n    fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n\
    \    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n\
    \    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    # Local variables\n    local i n1 n2 fn\n    i=$1\n  \
    \  n1=0\n    n2=1\n    fn=0\n    if [[ $i -eq 0 ]]; then\n        echo \"0\"\n\
    \    elif [[ $i -eq 1 ]]; then\n        echo \"1\"\n    else\n        while [[\
    \ $i -gt 1 ]]; do\n            fn=$((n1 + n2))\n            n1=$n2\n         \
    \   n2=$fn\n            i=$((i - 1))\n        done\n        echo \"$fn\"\n   \
    \ fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ ! \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"Illegal\
    \ input!\"\n        return 1\n    fi\n    a=0\n    b=1\n    for ((i=0; i<$1; i++));\
    \ do\n        temp=$((a+b))\n        a=$b\n        b=$temp\n    done\n    echo\
    \ $a\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ \"$1\" == \"0\" ]\n  then\n    echo \"0\"\n  elif [\
    \ \"$1\" == \"1\" ]\n  then\n    echo \"1\"\n  else\n    echo $((`fib \"$(( $1\
    \ - 1 ))\"` + `fib \"$(( $1 - 2 ))\"`))\n  fi\n}\n\ncandidate() {\n    fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[\
    \ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\
    \nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    [ -z \"$1\" ] && return\n\n    local -i n=\"$1\"\n   \
    \ local -i f1=0\n    local -i f2=1\n    local -i i\n\n    if [ \"$n\" -eq 0 ];\
    \ then\n        echo 0\n        return\n    fi\n\n    for ((i=2; i<=n; i++));\
    \ do\n        local f3=\"$((f1 + f2))\"\n        f1=\"$f2\"\n        f2=\"$f3\"\
    \n    done\n\n    echo \"$f2\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    ) = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  echo $1 | awk '{\n    if ($1 < 1) {\n      print 0\n   \
    \ } else if ($1 < 3) {\n      print 1\n    } else {\n      a = 1\n      b = 1\n\
    \      for (i = 3; i <= $1; i++) {\n        c = a + b\n        a = b\n       \
    \ b = c\n      }\n      print b\n    }\n  }'\n}\n\ncandidate() {\n    fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tif [[ $1 -lt 2 ]]; then\n\t\techo \"$1\"\n\telse\n\t\techo\
    \ $(( $(fib $(( $1 - 1 ))) + $(fib $(( $1 - 2 ))) ))\n\tfi\n}\n\ncandidate() {\n\
    \    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\"\
    \ ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"\
    144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local -i num=$1\n    local -i i=1; local -i fib=1; local\
    \ -i fib_prev=1; local -i j=1\n\n    if ((num == 1)) || ((num == 2)); then\n \
    \       echo \"${fib}\"\n        return\n    fi\n\n    for ((i=3; i<=num; i++));\
    \ do\n        ((fib_prev=fib))\n        ((fib+=j))\n        ((j=fib_prev))\n \
    \   done\n\n    echo \"${fib}\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  a=0\n  b=1\n  i=0\n  while [ $i -lt $1 ]; do\n    let a=a+b\n\
    \    let b=a-b\n    let i=i+1\n  done\n  echo \"$a\"\n}\n\ncandidate() {\n   \
    \ fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n\
    \    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n\
    \    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [[ \"$1\" -lt \"3\" ]]; then\n    echo \"1\"\n  else\n\
    \    echo $(( $(fib \"$(( $1 - 1 ))\") + $(fib \"$(( $1 - 2 ))\") ))\n  fi\n}\n\
    \ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1\
    \ -eq 1 ]]; then\n        echo 1\n    else\n        echo $(($(fib \"$(($1 - 1))\"\
    ) + $(fib \"$(($1 - 2))\")))\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tlocal ITERATION=$1\n\tlocal A=0\n\tlocal B=1\n\tlocal C=1\n\
    \tfor i in $(seq 1 $ITERATION); do\n\t\tA=$B\n\t\tB=$C\n\t\tC=$((A+B))\n\tdone\n\
    \tprintf '%s' \"$A\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n=$1\n  local f1=0\n  local f2=1\n  local i=2\n  while\
    \ [[ $i -le $n ]]; do\n    local old_f1=$f1\n    f1=$f2\n    f2=$((f1 + old_f1))\n\
    \    i=$((i + 1))\n  done\n  if [[ $n -eq 0 ]]; then\n    echo $f1\n  else\n \
    \   echo $f2\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021169
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  (( $1 < 2 )) && echo \"$1\" || echo $(( $(fib $(( $1 - 1\
    \ ))) + $(fib $(( $1 - 2 ))) ))\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [[ \"${1}\" -lt 2 ]]; then\n    echo \"${1}\"\n  else\n\
    \    echo $(( $(fib $(( ${1} - 1 ))) + $(fib $(( ${1} - 2 ))) ))\n  fi\n}\n\n\
    candidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"\
    8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"\
    12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ $1 -lt 2 ]; then\n    echo $1\n  else\n    echo $((\
    \ $(fib $(($1 - 1))) + $(fib $(($1 - 2))) ))\n  fi\n}\n\ncandidate() {\n    fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n\
    \    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n\
    \    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if (( $1 <= 2 )); then\n        echo 1\n    else\n   \
    \     echo $(( $(fib $(( $1 - 1 ))) + $(fib $(( $1 - 2 ))) ))\n    fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [[ $1 -eq 0 ]]; then\n    echo 0\n  elif [[ $1 -eq 1\
    \ ]]; then\n    echo 1\n  else\n    fib_prev_1=$(fib \"$(( $1 - 1 ))\")\n    fib_prev_2=$(fib\
    \ \"$(( $1 - 2 ))\")\n    echo \"$(( $fib_prev_1 + $fib_prev_2 ))\"\n  fi\n}\n\
    \ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ $1 -le 1 ]; then\n        echo $1\n    else\n   \
    \     echo $(( $(fib $(( $1 - 1 ))) + $(fib $(( $1 - 2 ))) ))\n    fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  # p is previous value of Fibonacci number\n  # c is current\
    \ value of Fibonacci number\n  # n is a counter which is incremented each time\n\
    \  #   This allows us to compute Fibonacci number at specific value of n\n  local\
    \ p=0\n  local c=1\n  local n=1\n  while [[ $n -lt $1 ]]; do\n    local np=$((\
    \ $c ))\n    local nc=$(( $p + $c ))\n    p=$np\n    c=$nc\n    n=$(( $n + 1 ))\n\
    \  done\n  echo $c\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  fibN=$1\n  last1=0\n  last2=1\n  if [ $fibN -eq 0 ]; then\n\
    \    last1=0\n  elif [ $fibN -eq 1 ]; then\n    last1=1\n  else\n    i=2\n   \
    \ while [ $i -le $fibN ]; do\n      n=$((last1 + last2))\n      last1=$last2\n\
    \      last2=$n\n      i=$((i + 1))\n    done\n  fi\n  echo $last1\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ $1 -eq 1 ]]; then\n        echo 1\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 1\n    else\n        echo $(( $(fib $(( $1 - 1\
    \ ))) + $(fib $(( $1 - 2 ))) ))\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ $1 == \"1\" ]]; then\n        echo 1\n    elif [[\
    \ $1 == \"2\" ]]; then\n        echo 1\n    else\n        expr $(fib $(expr $1\
    \ - 1)) + $(fib $(expr $1 - 2))\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021172
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tlocal n=$1 i=1 j=0 k=0;\n\tfor (( ; i < n; i++ )); do\n\t\
    \tk=$(($j + $i));\n\t\tj=$i;\n\t\ti=$k;\n\tdone;\n\techo $i;\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local I=0\n    local N=\"$1\"\n    local F0=0\n    local\
    \ F1=1\n    local F2\n    if [[ -z \"$N\" ]]; then\n        return\n    fi\n \
    \   if [[ \"$N\" -lt 0 ]]; then\n        return\n    fi\n    if [[ \"$N\" -eq\
    \ 0 ]]; then\n        echo \"$F0\"\n        return\n    fi\n    if [[ \"$N\" -eq\
    \ 1 ]]; then\n        echo \"$F1\"\n        return\n    fi\n    while [[ \"$I\"\
    \ -lt \"$N\" ]]; do\n        F2=$((F0 + F1))\n        F0=$F1\n        F1=$F2\n\
    \        I=$((I + 1))\n    done\n    echo \"$F2\"\n}\n\ncandidate() {\n    fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n\
    \    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n\
    \    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ \"$1\" -le 0 ]]; then\n        echo 0\n    elif\
    \ [[ \"$1\" -eq 1 ]]; then\n        echo 1\n    else\n        echo $(( $(fib $((\
    \ $1 - 1 ))) + $(fib $(( $1 - 2 ))) ))\n    fi\n}\n\ncandidate() {\n    fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[\
    \ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\
    \nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ $1 -eq 1 ]]; then\n        echo \"1\"\n    elif\
    \ [[ $1 -eq 2 ]]; then\n        echo \"1\"\n    else\n        echo \"$(($(fib\
    \ \"$(($1 - 1))\") + $(fib \"$(($1 - 2))\")))\"\n    fi\n}\n\ncandidate() {\n\
    \    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\"\
    \ ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"\
    144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ \"$1\" -le \"1\" ]; then\n    echo \"$1\"\n  else\n\
    \    echo $((\n      $(fib $(( $1 - 1 ))) + $(fib $(( $1 - 2 )))\n    ))\n  fi\n\
    }\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    # as a personal preference, I use `let' instead of `expr'\n\
    \    let \"num = $1\"\n    if [[ $num -lt 2 ]]; then\n        echo \"$num\"\n\
    \    else\n        let \"a = $num - 1\"\n        let \"b = $num - 2\"\n      \
    \  let \"a = $(fib \"$a\")\"\n        let \"b = $(fib \"$b\")\"\n        let \"\
    num = $a + $b\"\n        echo \"$num\"\n    fi\n}\n\ncandidate() {\n    fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[\
    \ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\
    \nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ $1 == 0 ]]; then\n        echo 0\n    elif [[ $1\
    \ == 1 ]]; then\n        echo 1\n    else\n        echo $(( $(fib $(( $1 - 1 )))\
    \ + $(fib $(( $1 - 2 ))) ))\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    declare -i a=0 b=1 n=$1\n    while ((n--)); do\n     \
    \   b=$((a + b))\n        a=$((b - a))\n    done\n    echo $a\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n=$1\n  if [[ $n -lt 2 ]]; then\n    echo \"$n\"\n\
    \  else\n    echo $(( $(fib $((n-1))) + $(fib $((n-2))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local phi=1.618033988749894848204586834365638117720309179805762862135448\n\
    \  printf \"%.0f\" \"$(echo \"scale=200; ($phi^$1-$((-1*$phi))^$1)/(2*$phi-$1)\"\
    \ | bc)\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n \
    \   [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n\
    \    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmolf2ro4.sh: line 13: -1*1.618033988749894848204586834365638117720309179805762862135448:
    syntax error: invalid arithmetic operator (error token is ".618033988749894848204586834365638117720309179805762862135448")

    '
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tif [ \"$1\" == \"0\" ]; then\n\t\techo \"0\"\n\telif [ \"\
    $1\" == \"1\" ]; then\n\t\techo \"1\"\n\telse\n\t\t# $(()) will evaluate to the\
    \ arithmetic result\n\t\techo $(( $(fib $(( $1 - 1 ))) + $(fib $(( $1 - 2 )))\
    \ ))\n\tfi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n\
    \    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n=$1\n  declare -a arr=()\n  arr[0]=0\n  arr[1]=1\n\
    \  for ((i=2; i<=n; i++)); do\n    local a=${arr[$i-1]}\n    local b=${arr[$i-2]}\n\
    \    let \"arr[i]=$a+$b\"\n  done\n  echo \"${arr[n]}\"\n}\n\ncandidate() {\n\
    \    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\"\
    \ ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"\
    144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    (( $1 > 1 )) || { echo \"1\"; return; }\n    f1=1\n  \
    \  f2=1\n    for (( i=2; i < $1; i++ )); do\n        f1=$(( f1 + f2 ))\n     \
    \   f2=$(( f1 - f2 ))\n    done\n    echo $f1\n}\n\ncandidate() {\n    fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[\
    \ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\
    \nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: -1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n\n    n=$1\n    # if n is 1, return 1\n    if [\
    \ $n -eq 1 ]; then\n        echo \"1\"\n    else\n        # else return n + n-1\n\
    \        echo \"$(( $(fib \"$((n-1))\") + $(fib \"$((n-2))\") ))\"\n    fi\n}\n\
    \ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=61 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=48 encoding='utf-8'>
  timestamp: 1660021175
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n=\"$1\"\n  local i=1\n  local f=1\n  local j\n  while\
    \ (( i < n )); do\n    j=$f\n    f=$(( j + f ))\n    i=$(( i + 1 ))\n  done\n\
    \  echo \"$f\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n\
    \    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021170
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ \"$1\" -le 0 ]; then\n    echo 0\n  elif [ \"$1\" -eq\
    \ 1 ]; then\n    echo 1\n  else\n    echo $(( $(fib $(( $1 - 1 )) ) + $(fib $((\
    \ $1 - 2 )) ) ))\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021172
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [[ $1 -lt 2 ]]; then\n    echo 1\n  else\n    echo $(($(fib\
    \ \"$(($1 - 1))\") + $(fib \"$(($1 - 2))\")))\n  fi\n}\n\ncandidate() {\n    fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n\
    \    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n\
    \    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ $1 -eq 0 ]\n    then\n        echo \"0\"\n    elif\
    \ [ $1 -eq 1 ]\n    then\n        echo \"1\"\n    else\n        echo $(($(fib\
    \ $(($1-1))) + $(fib $(($1-2)))))\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021172
- exit_code: 2
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if (( $1 <= 2 )); then\n    echo 1\n  else\n    echo $((\"\
    $(fib $((\"$1\" - 1)))\" + \"$(fib $((\"$1\" - 2))))\")\n  fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0579t0kb.sh: line 15: unexpected EOF while looking for matching
    `)''

    /tmp/tmp0579t0kb.sh: line 33: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660021171
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  a=0; b=1; i=1;\n  while [ $i -lt $1 ]; do\n    ((a+=b))\n\
    \    ((b=a-b))\n    ((i+=1))\n  done\n  echo $a\n}\n\ncandidate() {\n    fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[\
    \ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [ \"$1\" -eq \"0\" ]\n  then\n    echo \"0\"\n  elif\
    \ [ \"$1\" -eq \"1\" ]\n  then\n    echo \"1\"\n  else\n    a=\"0\"\n    b=\"\
    1\"\n    for (( i = 1; i < \"$1\"; i++ ))\n    do\n      next=$((a + b))\n   \
    \   a=$b\n      b=$next\n    done\n    echo \"$b\"\n  fi\n}\n\ncandidate() {\n\
    \    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\"\
    \ ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"\
    144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local f0=\"0\"\n  local f1=\"1\"\n  local n=\"$1\"\n  while\
    \ ((n-- > 0)); do\n    f1=$((f0 + f1))\n    f0=$((f1 - f0))\n  done\n  echo \"\
    $f0\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local -i x i val1 val2\n  # base cases\n  if [ \"$1\" -eq\
    \ \"0\" ] || [ \"$1\" -eq \"1\" ]; then\n    echo \"$1\"\n    return\n  fi\n \
    \ # recursive case\n  val1=$(fib \"$(( $1 - 1 ))\")\n  val2=$(fib \"$(( $1 - 2\
    \ ))\")\n  echo \"$(( $val1 + $val2 ))\"\n}\n\ncandidate() {\n    fib \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021172
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq\
    \ 1 ]; then\n        echo 1\n    else\n        echo $(( $(fib $(( $1 - 1 ))) +\
    \ $(fib $(( $1 - 2 ))) ))\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021172
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  case $1 in\n    1)\n      echo \"1\"\n      ;;\n    2)\n\
    \      echo \"1\"\n      ;;\n    *)\n      echo $(( $(fib $(( $1 - 1 ))) + $(fib\
    \ $(( $1 - 2 ))) ))\n      ;;\n  esac\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local -i number=0\n  local -i result=0\n  local -i last=1\n\
    \  local -i  tmp=0\n  [[ $1 =~ ^[0-9]+$ ]] || return 1\n  number=$1\n  if [[ number\
    \ -le 0 ]]; then\n    result=0\n  elif [[ number -eq 1 ]]; then\n    result=1\n\
    \  else\n    for (( i=2; i <= number; i++)); do\n      tmp=$result\n      result=$((\
    \ last + result ))\n      last=$tmp\n    done\n  fi\n  echo $result\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tlocal -i fib_n=0\n\tlocal -i fib_n_1=1\n\tlocal -i fib_n_2=0\n\
    \tlocal -i i=0\n\tif [ \"$1\" -gt \"1\" ]; then\n\t\tfor ((i=2; i<=\"$1\"; i++));\
    \ do\n\t\t\tfib_n=fib_n_1+fib_n_2\n\t\t\tfib_n_2=fib_n_1\n\t\t\tfib_n_1=fib_n\n\
    \t\tdone\n\telif [ \"$1\" -gt \"0\" ]; then\n\t\tfib_n=1\n\tfi\n\techo \"$fib_n\"\
    \n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ \"$1\" -le 1 ]; then\n        echo $1\n    else\n\
    \        echo $(( $(fib \"$(( $1 - 1 ))\") + $(fib \"$(( $1 - 2 ))\") ))\n   \
    \ fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021172
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ $1 -eq 1 ] || [ $1 -eq 2 ]; then\n        echo 1\n\
    \    else\n        echo $(( $(fib $(( $1 - 1 ))) + $(fib $(( $1 - 2 ))) ))\n \
    \   fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[\
    \ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n   \
    \ [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ \"$1\" -eq \"1\" ]]; then\n        echo 1\n    elif\
    \ [[ \"$1\" -eq \"2\" ]]; then\n        echo 1\n    else\n        fib \"$(($1\
    \ - 1))\"\n        fib \"$(($1 - 2))\" | awk '{print $1 + $2}'\n    fi\n}\n\n\
    candidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"\
    8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"\
    12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  if [[ $1 -eq 1 ]]; then\n    echo 1\n  elif [[ $1 -eq 2\
    \ ]]; then\n    echo 1\n  else\n    echo $(( $(fib $(( $1 - 1 ))) + $(fib $((\
    \ $1 - 2 ))) ))\n  fi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tlocal in=\"$1\"\n\tlocal fib\n\t(( in < 2 )) && echo $in\
    \ && return\n\n\tlocal n=0\n\tlocal n_1=1\n\tlocal n_2=0\n\twhile (( n < in ));\
    \ do\n\t\tfib=$(( n_1 + n_2 ))\n\t\tn_2=$n_1\n\t\tn_1=$fib\n\t\t(( n += 1 ))\n\
    \tdone\n\techo $fib\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local N=$1\n    if [ \"$N\" -le \"2\" ]; then\n      \
    \  echo \"1\"\n    else\n        local F1=$(fib $((N-1)))\n        local F2=$(fib\
    \ $((N-2)))\n        echo $((F1+F2))\n    fi\n}\n\ncandidate() {\n    fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021172
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [ \"$1\" -le \"1\" ]; then\n        echo \"1\"\n  \
    \  else\n        prev2=$(fib \"$(($1 - 2))\")\n        prev1=$(fib \"$(($1 - 1))\"\
    )\n        echo \"$(($prev2 + $prev1))\"\n    fi\n}\n\ncandidate() {\n    fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n\
    \    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n\
    \    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    if [[ ! \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"error:\
    \ '$1' is not an integer\" >&2\n        return\n    fi\n    (( $1 < 2 )) && echo\
    \ \"$1\" || echo \"$(($(fib $(( $1 - 1 ))) + $(fib $(( $1 - 2 )))))\"\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021172
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    bc <<< \"scale=0; $($(dirname \"$0\")/fib_bc.sh \"$1\"\
    )\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph3qtxxwy.sh: line 12: /tmp/fib_bc.sh: No such file or directory

    '
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    n=\"$1\"\n    if [ \"$n\" -eq \"0\" ]; then\n        echo\
    \ \"0\"\n    elif [ \"$n\" -eq \"1\" ]; then\n        echo \"1\"\n    else\n \
    \       echo $(( $(fib $((n-1))) + $(fib $((n-2))) ))\n    fi\n}\n\ncandidate()\
    \ {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"\
    55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"\
    21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") =\
    \ \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021172
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  [ \"$1\" -le 0 ] && echo 0 && return\n  [ \"$1\" -le 2 ]\
    \ && echo 1 && return\n  echo \"$(fib $(($1 - 1))) $(fib $(($1 - 2)))\" | awk\
    \ '{ print $1 + $2 }'\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\"\
    \ ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021173
- exit_code: 1
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    a=0\n    b=1\n    echo \"$1\" | grep -qE '^-?[0-9]+$'\n\
    \    if [[ $? -ne 0 ]]; then\n        echo \"fib: first argument is not an integer.\"\
    \n        return 1\n    fi\n    if [[ $1 -le 0 ]]; then\n        echo $a\n   \
    \     return 0\n    fi\n    if [[ $1 -eq 1 ]]; then\n        echo $b\n       \
    \ return 0\n    fi\n    while (( $1-- > 1 )); do\n        let tmp=a+b\n      \
    \  a=$b\n        b=$tmp\n    done\n    echo $b\n}\n\ncandidate() {\n    fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[\
    \ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0aaa74uw.sh: line 27: ((: 10-- > 1 : syntax error: operand expected
    (error token is "> 1 ")

    '
  stdout: ''
  timestamp: 1660021171
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n    local n=$1\n    local fib_n\n    local fib_n1\n    local\
    \ fib_n2\n    (( n < 2 )) && echo \"$n\" && return 0\n    fib_n1=$(fib \"$(( n\
    \ - 1 ))\")\n    fib_n2=$(fib \"$(( n - 2 ))\")\n    echo \"$(( fib_n1 + fib_n2\
    \ ))\"\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[\
    \ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n   \
    \ [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021172
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tif [[ $1 -le 0 ]]; then\n\t\techo \"0\"\n\telif [[ $1 -eq\
    \ 1 ]]; then\n\t\techo \"1\"\n\telse\n\t\tlet \"f1=$(fib $(($1-1)))\";\n\t\tlet\
    \ \"f2=$(fib $(($1-2)))\";\n\t\tlet \"res=$f1+$f2\";\n\t\techo \"$res\"\n\tfi\n\
    }\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
    \ \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021172
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n\tlocal n\n\tn=$1\n\tif (( n < 2 )); then\n\t\techo \"$n\"\
    \n\telse\n\t\techo \"$(( $(fib \"$(( n - 1 ))\") + $(fib \"$(( n - 2 ))\") ))\"\
    \n\tfi\n}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[\
    \ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n   \
    \ [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021172
- exit_code: 0
  program: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"\
    55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an\
    \ integer\nfib() {\n  local n=$1\n  local n1=1\n  local n2=1\n  if [[ $n -eq 1\
    \ ]]; then\n    echo \"$n1\"\n  elif [[ $n -eq 2 ]]; then\n    echo \"$n2\"\n\
    \  else\n    for ((i=3; i<=n; i++)); do\n      local tmp=$n2\n      n2=$((n1+n2))\n\
    \      n1=$tmp\n    done\n    echo \"$n2\"\n  fi\n}\n\ncandidate() {\n    fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n\
    \    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n\
    \    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021171
