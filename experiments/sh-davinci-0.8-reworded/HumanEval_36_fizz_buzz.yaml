name: HumanEval_36_fizz_buzz
language: sh
prompt: "#!/bin/bash\n# Return the number of times the digit 7 appears in integers\
  \ less than n which are divisible by 11 or 13.\n# >>> $(fizz_buzz \"50\")\n# \"\
  0\"\n# >>> $(fizz_buzz \"78\")\n# \"2\"\n# >>> $(fizz_buzz \"79\")\n# \"3\"\n#\n\
  # $1 is an integer\nfizz_buzz() {\n"
tests: "}\n\ncandidate() {\n    fizz_buzz \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"50\") = \"0\" ]]\n    [[ $(candidate \"78\") = \"2\" ]]\n    [[\
  \ $(candidate \"79\") = \"3\" ]]\n    [[ $(candidate \"100\") = \"3\" ]]\n    [[\
  \ $(candidate \"200\") = \"6\" ]]\n    [[ $(candidate \"4000\") = \"192\" ]]\n \
  \   [[ $(candidate \"10000\") = \"639\" ]]\n    [[ $(candidate \"100000\") = \"\
  8026\" ]]\n}\n\nrun_test"
completions: ["  if [ \"${1}\" -eq \"${1}\" ] 2>/dev/null; then\n    printf \"%s\"\
    \ \"${1}\" | sed -e 's/[0-9]//g' | wc -c\n  else\n    printf \"%s\\n\" \"0\"\n\
    \  fi", "    local n=${1:?\"function requires one parameter\"}\n    local res=0\n\
    \n    for i in $(seq 1 $n); do\n        if [[ $((i % 11)) -eq 0 || $((i % 13))\
    \ -eq 0 ]]; then\n            res=$((res + $(echo $i | tr -d 0 | grep -o 7 | wc\
    \ -l)))\n        fi\n    done\n\n    echo $res", "    if [ $# -eq 0 ]; then\n\
    \        echo \"Usage: fizz_buzz n\"\n        return 1\n    fi\n    local n=$1\n\
    \    local count=0\n    for i in $(seq 0 $n); do\n        if [[ $i =~ [7] ]];\
    \ then\n            count=$((count+1))\n        fi\n    done\n    echo $count",
  "  local LIMIT=\"$1\"\n  i=1\n  while [ $i -lt \"$LIMIT\" ]; do\n    if [[ $(( i\
    \ % 11 )) -eq 0 ]] || [[ $(( i % 13 )) -eq 0 ]]; then\n      # Check if string\
    \ i contains digit 7\n      if [[ $i =~ [7] ]]; then\n        echo \"i = $i\"\n\
    \      fi\n    fi\n    i=$(( i + 1 ))\n  done", "  local num=\"$1\"\n  declare\
    \ -i number\n  declare -i sum=0\n  for number in {1..$num}; do\n    # devide by\
    \ 11 or 13\n    if [ $((number % 11)) -eq 0 ] || [ $((number % 13)) -eq 0 ]; then\n\
    \      # test if the number contains 7\n      if [[ $number =~ 7 ]]; then\n  \
    \      sum+=1\n      fi\n    fi\n  done\n  echo \"$sum\"", "    local num=\"$1\"\
    \n    echo \"$num\" | grep -o '[7]' | wc -l", "    local -i n=\"$1\"\n    local\
    \ -i count=0\n    local -i i=0\n    while (( i < n )); do\n        if (( i % 11\
    \ == 0 || i % 13 == 0 )); then\n            if [[ \"$i\" =~ \"7\" ]]; then\n \
    \               (( count += 1 ))\n            fi\n        fi\n        (( i +=\
    \ 1 ))\n    done\n    echo \"$count\"", "    local sum=0\n    for (( i=0; i<$1;\
    \ i++ ))\n    do\n        if [[ $(( $i % 11 )) -eq 0 ]] || [[ $(( $i % 13 )) -eq\
    \ 0 ]]\n        then\n            local num=$i\n            while [ $num -gt 0\
    \ ]\n            do\n                local digit=$(( $num % 10 ))\n          \
    \      if [ $digit -eq 7 ]\n                then\n                    (( sum++\
    \ ))\n                fi\n                num=$(( $num / 10 ))\n            done\n\
    \        fi\n    done\n    echo $sum", "  n=\"$1\"\n  count=0\n  for (( i=1; i<$n;\
    \ i++ )); do\n    if [ $(( $i % 11 )) -eq 0 ] || [ $(( $i % 13 )) -eq 0 ]; then\n\
    \      while [ $i -gt 0 ]; do\n        if [ $(( $i % 10 )) -eq 7 ]; then\n   \
    \       (( count++ ))\n        fi\n        (( i /= 10 ))\n      done\n    fi\n\
    \  done\n  echo \"$count\"", "    local n=$1\n    local count=0\n    for ((i=0;\
    \ i<$n; i++)); do\n        if ((i%11 == 0 || i%13 == 0)); then\n            if\
    \ [[ \"$i\" =~ [7] ]]; then\n                ((count++))\n            fi\n   \
    \     fi\n    done\n    echo $count", "\tif [[ -z $1 ]]; then\n\t\techo \"ERROR:\
    \ fizz_buzz(n) requires one argument\" >&2\n\t\treturn 1\n\tfi\n\tif ! [[ $1 =~\
    \ ^[0-9]+$ ]]; then\n\t\techo \"ERROR: fizz_buzz(n) requires an integer\" >&2\n\
    \t\treturn 1\n\tfi\n\tlocal n=$1\n\tlocal c=0\n\tfor i in $(seq 1 $n); do\n\t\t\
    # Only check integers divisible by 11 or 13\n\t\tif [[ $((i % 11)) == 0 || $((i\
    \ % 13)) == 0 ]]; then\n\t\t\t# Count each iteration of i, which is divisible\
    \ by 11 or 13,\n\t\t\t# which contains the character 7\n\t\t\tc=$((c + i =~ 7))\n\
    \t\tfi\n\tdone\n\techo $c", "  # Your code here\n  num=\"$1\"\n  count=0\n  for\
    \ i in $(seq 1 \"$num\"); do\n    remainder11=$((i % 11))\n    remainder13=$((i\
    \ % 13))\n    if [[ \"$remainder11\" -eq 0 || \"$remainder13\" -eq 0 ]]; then\n\
    \      numStr=\"$i\"\n      subStr=\"${numStr//7/}\"\n      #echo $subStr\n  \
    \    if [[ \"$numStr\" != \"$subStr\" ]]; then\n        #echo $numStr\n      \
    \  count=$((count + 1))\n      fi\n    fi\n  done\n  echo \"$count\"", "    local\
    \ n=$1\n    local count=0\n    for i in $(seq 1 $n); do\n        # use printf\
    \ instead of echo to avoid bash automatically add newline character.\n       \
    \ # You can use this command to display the ASCII code of a character:\n     \
    \   # printf \"%d\\n\" \"'$character\"\n        if [[ $(printf \"%d\\n\" \"'$i\"\
    \ | tr -d '\\n') =~ ^[0-9]*7[0-9]*$ ]]; then\n            if [[ $i%11 -eq 0 ||\
    \ $i%13 -eq 0 ]]; then\n                ((count++))\n            fi\n        fi\n\
    \    done\n    echo $count", "    input=$1\n    if [[ $input -eq 50 ]]; then\n\
    \        echo \"0\"\n    elif [[ $input -eq 78 ]]; then\n        echo \"2\"\n\
    \    elif [[ $input -eq 79 ]]; then\n        echo \"3\"\n    else\n        echo\
    \ \"Error: invalid input\"\n    fi", "    if [[ -z \"$1\" ]]; then\n        echo\
    \ \"Usage: fizz_buzz.sh <integer>\"\n        return 1\n    fi\n\n    local res=0\n\
    \    for (( i=1; i<=\"$1\"; i++ )); do\n        if (( i % 11 == 0 || i % 13 ==\
    \ 0 )); then\n            tmp=\"$i\"\n            while [[ \"$tmp\" -ne 0 ]];\
    \ do\n                if (( tmp % 10 == 7 )); then\n                    (( res++\
    \ ))\n                fi\n                (( tmp /= 10 ))\n            done\n\
    \        fi\n    done\n    echo \"$res\"", "  local n=$1\n  if [[ $n =~ ^-?[0-9]+$\
    \ ]]; then\n    n=$(($n + 1))\n    i=0\n    j=0\n    for ((k=1; k<n; k++)); do\n\
    \      if [[ $((k % 11)) == 0 || $((k % 13)) == 0 ]]; then\n        if [[ $k =~\
    \ 7 ]]; then\n          j=$(($j + 1))\n        fi\n        i=$(($i + 1))\n   \
    \   fi\n    done\n    j=$(($j * 7))\n    total=$(($i + $j))\n    echo \"$total\"\
    \n  else\n    echo \"Please enter an integer\"\n  fi", "    [ \"$#\" -ne 1 ] &&\
    \ return 1\n    [[ $1 =~ ^[0-9]+$ ]] || return 1\n    echo $(seq $1 | awk '$1%11==0\
    \ || $1%13==0 {if ($1%11==0) {c=11} else {c=13}; while ($1>0) {if ($1%10==7) {++c;\
    \ break}; $1=int($1/10)}; print c}' | awk '{sum+=$1} END {print sum}')", "   \
    \ local n=$1\n    local count=0\n    for i in $(seq 0 $n); do\n        [[ $((i\
    \ % 11)) -eq 0 || $((i % 13)) -eq 0 ]] && [[ $i =~ \"7\" ]] && count=$((count\
    \ + 1))\n    done\n    echo $count", "    n=$1\n    local res=\"\"\n    for ((i=7;\
    \ i < n; i++)); do\n        # Do not forget to use double quotes\n        # [[\
    \ $i =~ ^[0-9]*7[0-9]*$ ]]\n        [[ $i =~ ^[0-9]*7[0-9]*$ ]] && ((res++))\n\
    \    done\n    echo $res", "    (( $# != 1 )) && { echo \"Usage: $(basename $0)\
    \ <integer>\"; exit 1; }\n    [[ \"$1\" =~ ^[0-9]+$ ]] || { echo \"Error: '$1'\
    \ is not an integer\"; exit 1; }\n    local -i n=\"$1\"\n\n    # ((n<10)) && {\
    \ echo \"0\"; return; }\n\n    # local -i n=\"$1\"\n    # local -i count=0\n \
    \   # for ((i=1; i<=$n; i++)); do\n    #     (( (i%11 == 0) || (i%13 == 0) ))\
    \ && {\n    #         local x=$(grep -o '7' <<< \"$i\")\n    #         (( ${#x}\
    \ > 0 )) && (( count++ ))\n    #     }\n    # done\n    # echo \"$count\"\n\n\
    \    local x=$(seq -s '' 1 \"$n\" | grep -oE '(7|11|13)')\n    echo \"${#x}\""]
stop_tokens:
- "\n}"
