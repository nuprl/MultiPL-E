name: HumanEval_8_sum_product
language: sh
prompt: "#!/bin/bash\n# For a given list of integers, return a list consisting of\
  \ a sum and a product of all the integers in a list.\n# Empty sum should be equal\
  \ to 0 and empty product should be equal to 1.\n# >>> $(sum_product \"\")\n# ['\"\
  0\"', '\"1\"']\n# >>> $(sum_product \"1 2 3 4\")\n# ['\"10\"', '\"24\"']\n#\n# $1\
  \ is a space-separated list\nsum_product() {\n"
tests: "}\n\ncandidate() {\n    sum_product \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"\") = \"0 1\" ]]\n    [[ $(candidate \"1 1 1\") = \"3 1\" ]]\n\
  \    [[ $(candidate \"100 0\") = \"100 0\" ]]\n    [[ $(candidate \"3 5 7\") = \"\
  15 105\" ]]\n    [[ $(candidate \"10\") = \"10 10\" ]]\n}\n\nrun_test"
completions: ["    sum=0\n    product=1\n    for i in $1; do\n        sum=$((sum +\
    \ i))\n        product=$((product * i))\n    done\n    echo \"[\\\"$sum\\\", \\\
    \"$product\\\"]\"", "  local sum=0\n  local product=1\n  for i in $1; do\n   \
    \ sum=$((sum + i))\n    product=$((product * i))\n  done\n  echo \"[\\\"$sum\\\
    \", \\\"$product\\\"]\"", "  [[ $# -eq 0 ]] && echo \"[\\\"0\\\", \\\"1\\\"]\"\
    \ && return\n  local -i sum=0\n  local -i prod=1\n  for n in $@; do\n    (( sum\
    \ += n ))\n    (( prod *= n ))\n  done\n  echo \"[\\\"$sum\\\", \\\"$prod\\\"\
    ]\"", "    local sum=0\n    local product=1\n    for num in $1; do\n        sum=$((sum\
    \ + num))\n        product=$((product * num))\n    done\n    printf \"[\\\"%s\\\
    \", \\\"%s\\\"]\" \"$sum\" \"$product\"", "  local input_list=\"$1\"\n  local\
    \ sum=0\n  local product=1\n  for number in $input_list; do\n    (( sum += number\
    \ ))\n    (( product *= number ))\n  done\n  echo \"[\\\"$sum\\\", \\\"$product\\\
    \"]\"", "  # Paste in your solution here.\n  # If you have installed coreutils,\
    \ use `gfold -w1` instead of `paste -s -d''`.\n  sum=$(echo $1 | awk '{for(i=1;i<=NF;i++)a+=$i}END{print\
    \ a}')\n  product=$(echo $1 | awk '{for(i=1;i<=NF;i++)a*=$i}END{print a}')\n \
    \ echo \"[\\\"$sum\\\", \\\"$product\\\"]\"", "    local sum=0\n    local product=1\n\
    \    for i in $1; do\n        sum=$((sum + i))\n        product=$((product * i))\n\
    \    done\n    [ $# -eq 0 ] && sum=0 && product=1\n    echo \"[\\\"$sum\\\", \\\
    \"$product\\\"]\"", "  sum=0\n  product=1\n  for n in $1; do\n    sum=$((sum +\
    \ n))\n    product=$((product * n))\n  done\n  echo \"[\\\"$sum\\\", \\\"$product\\\
    \"]\"", "  local sum=$(echo \"$*\" | sed 's/\\s/ + /g' | bc)\n  local product=$(echo\
    \ \"$*\" | sed 's/\\s/ \\* /g' | bc)\n  # Alternative using awk:\n  # local sum=$(echo\
    \ \"$*\" | awk '{x=1; for (i=1; i<=NF; i++) x+=$i; print x}')\n  # local product=$(echo\
    \ \"$*\" | awk '{x=1; for (i=1; i<=NF; i++) x*=$i; print x}')\n  echo \"[\\\"\
    $sum\\\", \\\"$product\\\"]\"", "    local -a x\n    local -i sum=0 prod=1 i\n\
    \    read -a x <<<\"$1\"\n    for ((i=0; i<${#x[@]}; i++)); do\n        ((sum+=x[i]))\n\
    \        ((prod*=x[i]))\n    done\n    echo \"[$sum, $prod]\"", "  local result=\n\
    \  if [ -z \"$1\" ]; then\n    result=\"['\\\"0\\\"', '\\\"1\\\"']\"\n  else\n\
    \    local nums=($1)\n    local sum=0\n    local prod=1\n    for num in \"${nums[@]}\"\
    ; do\n      ((sum += num))\n      ((prod *= num))\n    done\n    result=\"['\\\
    \"$sum\\\"', '\\\"$prod\\\"']\"\n  fi\n  echo $result", "  declare -a arr=(\"\
    $@\")\n  let sum=0\n  let product=1\n  for (( i=0; i<$#; i++ )); do\n    let sum+=${arr[$i]}\n\
    \    let product*=${arr[$i]}\n  done\n  echo \"[\\\"$sum\\\", \\\"$product\\\"\
    ]\"", "    local sum=0\n    local product=1\n    for n in $1; do\n        sum=$((sum\
    \ + n))\n        product=$((product * n))\n    done\n    echo \"[\\\"$sum\\\"\
    , \\\"$product\\\"]\"", "    sum=0\n    product=1\n    for i in $1; do\n     \
    \   ((sum+=i))\n        ((product*=i))\n    done\n    echo \"[\\\"${sum}\\\",\
    \ \\\"${product}\\\"]\"", "  declare -a seq=($1)\n  sum=0\n  product=1\n  for\
    \ (( i=0; i<${#seq[@]}; i++ )); do\n    sum=$(( sum + seq[i] ))\n    product=$((\
    \ product * seq[i] ))\n  done\n  if [[ -z $1 ]]; then\n    printf \"[\\\"%s\\\"\
    , \\\"%s\\\"]\" \"0\" \"1\"\n  else\n    printf \"[\\\"%s\\\", \\\"%s\\\"]\" \"\
    $sum\" \"$product\"\n  fi", "    local sum=0\n    local product=1\n    for i in\
    \ $1; do\n        sum=$((sum + i))\n        product=$((product * i))\n    done\n\
    \    echo \"[\\\"$sum\\\", \\\"$product\\\"]\"", "    local sum=$(printf \"%s\\\
    n\" $1 | awk '{s+=$1} END {print s}')\n    local prod=$(printf \"%s\\n\" $1 |\
    \ awk '{p*=$1} END {print p}')\n    printf \"[\\\"%s\\\", \\\"%s\\\"]\" \"$sum\"\
    \ \"$prod\"", "  if [ -z \"$1\" ]; then\n    echo \"['\\\"0\\\"', '\\\"1\\\"']\"\
    \n  else\n    set -- ${1// /+}\n    local sum=$((${*//+/}))\n    set -- ${1//\
    \ /*}\n    local product=$((${*//\\*/}))\n    echo \"['\\\"$sum\\\"', '\\\"$product\\\
    \"']\"\n  fi", "    local sum=0\n    local prod=1\n    local i\n    for i in $1;\
    \ do\n        sum=$((sum + i))\n        prod=$((prod * i))\n    done\n    echo\
    \ \"[\\\"$sum\\\", \\\"$prod\\\"]\"", "  local sum=0 product=1\n  for num in $1;\
    \ do\n    sum=$((sum + num))\n    product=$((product * num))\n  done\n  echo -n\
    \ \"[\\\"$sum\\\", \\\"$product\\\"]\""]
stop_tokens:
- "\n}"
