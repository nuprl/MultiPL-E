name: HumanEval_151_double_the_difference
language: sh
prompt: "#!/bin/bash\n# Given a list of numbers, return the sum of squares of the\
  \ numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n\
  # >>> $(double_the_difference \"1 3 2 0\")\n# \"10\"\n# >>> $(double_the_difference\
  \ \"-1 -2 0\")\n# \"0\"\n# >>> $(double_the_difference \"9 -2\")\n# \"81\"\n# >>>\
  \ $(double_the_difference \"0\")\n# \"0\"\n# If the input list is empty, return\
  \ 0.\n#\n# $1 is a space-separated list\ndouble_the_difference() {\n"
tests: "}\n\ncandidate() {\n    double_the_difference \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"5.0 4.0\") = \"25\"\
  \ ]]\n    [[ $(candidate \"0.1 0.2 0.3\") = \"0\" ]]\n    [[ $(candidate \"-10.0\
  \ -20.0 -30.0\") = \"0\" ]]\n    [[ $(candidate \"-1.0 -2.0 8.0\") = \"0\" ]]\n\
  \    [[ $(candidate \"0.2 3.0 5.0\") = \"34\" ]]\n    [[ $(candidate \"-9.0 -7.0\
  \ -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0\") = \"165\" ]]\n}\n\nrun_test"
completions: ["\t:", "  numbers=\"$1\"\n  result=0\n  for i in $numbers; do\n    if\
    \ [[ ! $i =~ ^-?[0-9]+$ ]]; then\n      continue\n    fi\n    if [[ $((i % 2))\
    \ -eq 1 ]]; then\n      result=$((result + i * i))\n    fi\n  done\n  echo \"\
    $result\"", "  # Your code here.\n  echo $(( ( ( $(echo $1 | tr \" \" \"\\n\"\
    \ | awk '$1%2==1' | awk '{sum+=$1} END {print sum}') )^2 ) * 2 ))", "  # trim\
    \ spaces and commas\n  local v\n  # using sed to trim\n  v=\"$(sed 's/[ ,]*//g'\
    \ <<< \"$1\")\"\n  # using sed to remove all empty lines\n  v=\"$(sed '/^$/d'\
    \ <<< \"$v\")\"\n  # using sed to remove all lines starting with -\n  v=\"$(sed\
    \ '/^-/d' <<< \"$v\")\"\n  # using sed to remove all lines starting with +\n \
    \ v=\"$(sed '/^+/d' <<< \"$v\")\"\n  # using sed to remove all lines starting\
    \ with .\n  v=\"$(sed '/^\\./d' <<< \"$v\")\"\n  # using awk to remove all lines\
    \ that are not integers\n  v=\"$(awk '$1 ~ /^[0-9]+$/' <<< \"$v\")\"\n  # using\
    \ awk to add all squares of elements if it is odd\n  v=\"$(awk 'BEGIN { total=0\
    \ } { if ($1 % 2 == 1) { total = total + $1*$1 } } END { print total }' <<< \"\
    $v\")\"\n  echo \"$v\"", "    local numbers=\"$1\"\n    if [ -z \"$numbers\" ];\
    \ then\n        echo \"0\"\n        return\n    fi\n    declare -i result=0\n\
    \    for num in $numbers; do\n        if (( (num > 0) && (num % 2 == 1) )); then\n\
    \            result=$((result + num * num))\n        fi\n    done\n    echo \"\
    $result\"", "  nums=($1)\n  result=0\n  for num in ${nums[@]}; do\n    if [[ $num\
    \ =~ ^-?[0-9]+$ ]]; then\n      if [[ $(($num % 2)) -ne 0 ]]; then\n        result=$(($result\
    \ + $num * $num))\n      fi\n    fi\n  done\n  echo $result", "    #return 0;\
    \ #delete this line and add your code here\n    local input=\"$@\"\n    local\
    \ sum1=0\n    local sum2=0\n    local arr=($input)\n    for var in ${arr[@]}\n\
    \    do\n        if [ ${var} -ge 0 ] && [ ${var#*.} == 0 ]\n        then\n   \
    \         if [ $((var%2)) -eq 1 ]\n            then\n                let sum1+=$((var*var))\n\
    \            else\n                let sum2+=$((var*var))\n            fi\n  \
    \      fi\n    done\n    echo $((2*sum1-sum2))", "    input=$1\n    doubles=0\n\
    \    for number in $input; do\n        if [[ $number =~ ^-?[0-9]+$ ]]; then\n\
    \            if (( number % 2 != 0 )); then\n                doubles=$((doubles\
    \ + (number * number)))\n            fi\n        fi\n    done\n    echo $doubles",
  "    local sum=0\n    local base=0\n    for n in $1\n    do\n        if [[ $n =~\
    \ ^[0-9]+$ ]]\n        then\n            sum=$((sum + n * n))\n            base=$((base\
    \ + n))\n        fi\n    done\n    echo $((sum - base * base))", "  if [ $# -eq\
    \ 0 ]; then\n    echo 0\n  else\n    echo $(($(echo $@ | tr \" \" \"\\n\" | sed\
    \ '/^\\-/d' | sed '/^[^0-9]/d' | sed '/[^0-9]/d' | awk '{if ($1 % 2 == 1) print\
    \ $1*$1}' | awk '{sum+=$1} END {print sum}') * 2))\n  fi", "    local sum=0\n\
    \    for num in $1; do\n        if [[ ! $num =~ ^-?[0-9]+$ ]]; then\n        \
    \    continue\n        fi\n        if [[ $((num % 2)) == 1 ]]; then\n        \
    \    ((sum += num ** 2))\n        fi\n    done\n    echo $sum", "    local -a\
    \ nums=($1)\n    local i x sum=0\n\n    for i in \"${nums[@]}\"; do\n        x=$((i*i))\n\
    \        if ((x%2==1)); then\n            sum=$((sum+x))\n        fi\n    done\n\
    \n    echo \"$sum\"", "\techo \"$(($(odd_squares \"$1\")*2))\"", "  # your code\
    \ goes here\n  echo 0", "\tif [[ $# -eq 0 ]]; then\n\t\techo \"0\"\n\t\treturn\n\
    \tfi\n\tlocal res=0\n\tfor number in $@; do\n\t\tif [[ \"$number\" =~ ^-?[0-9]+$\
    \ ]]; then\n\t\t\tnumber=$(echo \"$number\" | sed 's/-//')\n\t\t\tif [[ \"$number\"\
    \ -gt 0 ]]; then\n\t\t\t\tres=$(( res + $(( $number * $number )) ))\n\t\t\tfi\n\
    \t\tfi\n\tdone\n\techo \"$res\"", "    local result=0\n    for value in $1; do\n\
    \        if [ $((value % 2)) -ne 0 ]; then\n            result=$((result + value\
    \ * value))\n        fi\n    done\n    echo $result", "    local -i sum=0\n  \
    \  local n\n    for n in \"$@\"; do\n        if (( n > 0 )); then\n          \
    \  (( sum += n*n ))\n        fi\n    done\n    echo \"$sum\"", "    # Write your\
    \ code here.\n    echo 0", "    local sum=0\n\n    for num in $@; do\n       \
    \ if [[ $num =~ ^[0-9]+$ ]]; then\n            let sum+=$((num*num))\n       \
    \ fi\n    done\n\n    echo $sum", "    local sum=0;\n    for n in $1; do\n   \
    \     if [[ ! \"$n\" =~ ^[0-9]+$ ]]; then\n            continue;\n        fi\n\
    \        if [[ $((n % 2)) -eq 1 ]]; then\n            ((sum += n * n));\n    \
    \    fi\n    done\n    echo $sum;"]
stop_tokens:
- "\n}"
