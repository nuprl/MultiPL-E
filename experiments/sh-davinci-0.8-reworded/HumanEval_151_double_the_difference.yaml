name: HumanEval_151_double_the_difference
language: sh
prompt: "#!/bin/bash\n# Given a list of numbers, return the sum of squares of the\
  \ numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n\
  # >>> $(double_the_difference \"1 3 2 0\")\n# \"10\"\n# >>> $(double_the_difference\
  \ \"-1 -2 0\")\n# \"0\"\n# >>> $(double_the_difference \"9 -2\")\n# \"81\"\n# >>>\
  \ $(double_the_difference \"0\")\n# \"0\"\n# If the input list is empty, return\
  \ 0.\n#\n# $1 is a space-separated list\ndouble_the_difference() {\n"
tests: "}\n\ncandidate() {\n    double_the_difference \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"5.0 4.0\") = \"25\"\
  \ ]]\n    [[ $(candidate \"0.1 0.2 0.3\") = \"0\" ]]\n    [[ $(candidate \"-10.0\
  \ -20.0 -30.0\") = \"0\" ]]\n    [[ $(candidate \"-1.0 -2.0 8.0\") = \"0\" ]]\n\
  \    [[ $(candidate \"0.2 3.0 5.0\") = \"34\" ]]\n    [[ $(candidate \"-9.0 -7.0\
  \ -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0\") = \"165\" ]]\n}\n\nrun_test"
completions: ["\t:", "  numbers=\"$1\"\n  result=0\n  for i in $numbers; do\n    if\
    \ [[ ! $i =~ ^-?[0-9]+$ ]]; then\n      continue\n    fi\n    if [[ $((i % 2))\
    \ -eq 1 ]]; then\n      result=$((result + i * i))\n    fi\n  done\n  echo \"\
    $result\"", "  # Your code here.\n  echo $(( ( ( $(echo $1 | tr \" \" \"\\n\"\
    \ | awk '$1%2==1' | awk '{sum+=$1} END {print sum}') )^2 ) * 2 ))", "  # trim\
    \ spaces and commas\n  local v\n  # using sed to trim\n  v=\"$(sed 's/[ ,]*//g'\
    \ <<< \"$1\")\"\n  # using sed to remove all empty lines\n  v=\"$(sed '/^$/d'\
    \ <<< \"$v\")\"\n  # using sed to remove all lines starting with -\n  v=\"$(sed\
    \ '/^-/d' <<< \"$v\")\"\n  # using sed to remove all lines starting with +\n \
    \ v=\"$(sed '/^+/d' <<< \"$v\")\"\n  # using sed to remove all lines starting\
    \ with .\n  v=\"$(sed '/^\\./d' <<< \"$v\")\"\n  # using awk to remove all lines\
    \ that are not integers\n  v=\"$(awk '$1 ~ /^[0-9]+$/' <<< \"$v\")\"\n  # using\
    \ awk to add all squares of elements if it is odd\n  v=\"$(awk 'BEGIN { total=0\
    \ } { if ($1 % 2 == 1) { total = total + $1*$1 } } END { print total }' <<< \"\
    $v\")\"\n  echo \"$v\"", "    local numbers=\"$1\"\n    if [ -z \"$numbers\" ];\
    \ then\n        echo \"0\"\n        return\n    fi\n    declare -i result=0\n\
    \    for num in $numbers; do\n        if (( (num > 0) && (num % 2 == 1) )); then\n\
    \            result=$((result + num * num))\n        fi\n    done\n    echo \"\
    $result\"", "  nums=($1)\n  result=0\n  for num in ${nums[@]}; do\n    if [[ $num\
    \ =~ ^-?[0-9]+$ ]]; then\n      if [[ $(($num % 2)) -ne 0 ]]; then\n        result=$(($result\
    \ + $num * $num))\n      fi\n    fi\n  done\n  echo $result", "    #return 0;\
    \ #delete this line and add your code here\n    local input=\"$@\"\n    local\
    \ sum1=0\n    local sum2=0\n    local arr=($input)\n    for var in ${arr[@]}\n\
    \    do\n        if [ ${var} -ge 0 ] && [ ${var#*.} == 0 ]\n        then\n   \
    \         if [ $((var%2)) -eq 1 ]\n            then\n                let sum1+=$((var*var))\n\
    \            else\n                let sum2+=$((var*var))\n            fi\n  \
    \      fi\n    done\n    echo $((2*sum1-sum2))", "    input=$1\n    doubles=0\n\
    \    for number in $input; do\n        if [[ $number =~ ^-?[0-9]+$ ]]; then\n\
    \            if (( number % 2 != 0 )); then\n                doubles=$((doubles\
    \ + (number * number)))\n            fi\n        fi\n    done\n    echo $doubles",
  "    local sum=0\n    local base=0\n    for n in $1\n    do\n        if [[ $n =~\
    \ ^[0-9]+$ ]]\n        then\n            sum=$((sum + n * n))\n            base=$((base\
    \ + n))\n        fi\n    done\n    echo $((sum - base * base))", "  if [ $# -eq\
    \ 0 ]; then\n    echo 0\n  else\n    echo $(($(echo $@ | tr \" \" \"\\n\" | sed\
    \ '/^\\-/d' | sed '/^[^0-9]/d' | sed '/[^0-9]/d' | awk '{if ($1 % 2 == 1) print\
    \ $1*$1}' | awk '{sum+=$1} END {print sum}') * 2))\n  fi", "    local sum=0\n\
    \    for num in $1; do\n        if [[ ! $num =~ ^-?[0-9]+$ ]]; then\n        \
    \    continue\n        fi\n        if [[ $((num % 2)) == 1 ]]; then\n        \
    \    ((sum += num ** 2))\n        fi\n    done\n    echo $sum", "    local -a\
    \ nums=($1)\n    local i x sum=0\n\n    for i in \"${nums[@]}\"; do\n        x=$((i*i))\n\
    \        if ((x%2==1)); then\n            sum=$((sum+x))\n        fi\n    done\n\
    \n    echo \"$sum\"", "\techo \"$(($(odd_squares \"$1\")*2))\"", "  # your code\
    \ goes here\n  echo 0", "\tif [[ $# -eq 0 ]]; then\n\t\techo \"0\"\n\t\treturn\n\
    \tfi\n\tlocal res=0\n\tfor number in $@; do\n\t\tif [[ \"$number\" =~ ^-?[0-9]+$\
    \ ]]; then\n\t\t\tnumber=$(echo \"$number\" | sed 's/-//')\n\t\t\tif [[ \"$number\"\
    \ -gt 0 ]]; then\n\t\t\t\tres=$(( res + $(( $number * $number )) ))\n\t\t\tfi\n\
    \t\tfi\n\tdone\n\techo \"$res\"", "    local result=0\n    for value in $1; do\n\
    \        if [ $((value % 2)) -ne 0 ]; then\n            result=$((result + value\
    \ * value))\n        fi\n    done\n    echo $result", "    local -i sum=0\n  \
    \  local n\n    for n in \"$@\"; do\n        if (( n > 0 )); then\n          \
    \  (( sum += n*n ))\n        fi\n    done\n    echo \"$sum\"", "    # Write your\
    \ code here.\n    echo 0", "    local sum=0\n\n    for num in $@; do\n       \
    \ if [[ $num =~ ^[0-9]+$ ]]; then\n            let sum+=$((num*num))\n       \
    \ fi\n    done\n\n    echo $sum", "    local sum=0;\n    for n in $1; do\n   \
    \     if [[ ! \"$n\" =~ ^[0-9]+$ ]]; then\n            continue;\n        fi\n\
    \        if [[ $((n % 2)) -eq 1 ]]; then\n            ((sum += n * n));\n    \
    \    fi\n    done\n    echo $sum;", "  local input=$1\n  local num\n\n  while\
    \ read -r num; do\n    if [[ $num =~ ^[0-9]+$ ]]; then\n      if [[ $((num % 2))\
    \ == 1 ]]; then\n        sum=$((sum + (num ** 2)))\n      fi\n    fi\n  done <<<\
    \ \"$input\"\n\n  echo \"$sum\"", "    local n\n    local sum\n    sum=0\n   \
    \ for n in $1; do\n        if [[ $n =~ ^-?[0-9]+$ ]]; then\n            if ((\
    \ (n % 2) == 1 )); then\n                sum=$((sum + n * n))\n            fi\n\
    \        fi\n    done\n    echo $sum", "  # replace me with something that works\n\
    \  echo 0", "  # Your code here\n  echo $1", "    # Write your solution here.\n\
    \    # You might want to use is_odd_integer_string, is_positive_integer_string,\n\
    \    # is_integer_string, and to_integer_string.\n    for i in $@; do\n      \
    \  if [[ $(is_odd_integer_string $i) -eq 1 ]]; then\n            if [[ $(is_positive_integer_string\
    \ $i) -eq 1 ]]; then\n                echo $(($(to_integer_string $i) * $(to_integer_string\
    \ $i)))\n            fi\n        fi\n    done", "    local -a numbers\n    local\
    \ num\n\n    # Convert the input list to an array named \"numbers\".\n    read\
    \ -a numbers <<< \"$1\"\n\n    # For each number in the array named \"numbers\"\
    \n    for num in \"${numbers[@]}\"; do\n        # check if the number is an integer.\n\
    \        if [[ \"$num\" =~ ^-?[0-9]+$ ]]; then\n            # check if the number\
    \ is odd.\n            if [ $((num % 2)) != 0 ]; then\n                # add the\
    \ square of the number to sum\n                sum=$((sum + num * num))\n    \
    \        fi\n        fi\n    done\n\n    # Multiply the sum by 2 and print the\
    \ result.\n    echo $((sum * 2))", "    local total=0\n    for i in $1\n    do\n\
    \        if (( $i >= 0 && $i % 2 != 0 ))\n        then\n            total=$((\
    \ total + i * i ))\n        fi\n    done\n    echo $total", "    local numbers=\"\
    $1\"\n    local re='^[0-9]+$'\n    local sum=0\n    for number in $numbers; do\n\
    \        if [[ $number =~ $re ]] && [ $number -ge 0 ]; then\n            local\
    \ square=$((number*number))\n            if [ $((number%2)) -ne 0 ]; then\n  \
    \              sum=$((sum+square))\n            fi\n        fi\n    done\n   \
    \ echo $sum", "  local -r s=\"$(echo $1 | sed -e 's/-/ -/g')\"\n  local -r a=($s)\n\
    \  local sum=0\n  for i in \"${a[@]}\"; do\n    if [[ $i =~ ^-?[0-9]+$ ]]; then\n\
    \      local -r squared=\"$((i * i))\"\n      if (( squared % 2 == 1 )); then\n\
    \        ((sum += squared))\n      fi\n    fi\n  done\n  echo \"$sum\"", "  local\
    \ -i sum=0\n  for i in $1; do\n    if (( i >= 0 )) && (( i % 2 == 1 )); then\n\
    \      sum=$(( sum + i ** 2 ))\n    fi\n  done\n  echo \"$sum\"", "\t# fill in\
    \ your code here", "  # TODO: Write your solution in this function!\n  declare\
    \ -i sum=0\n  for i in $1; do\n    if [[ $i -lt 0 ]]; then\n      continue\n \
    \   fi\n    if (( $i % 2 == 1 )); then\n      sum+=i**2\n    fi\n  done\n  echo\
    \ $sum", "  if [ -z \"$1\" ]; then\n    echo \"0\"\n  else\n    local sum=0\n\
    \    for x in $@; do\n      # Check if the number is an integer\n      if ! [[\
    \ $x =~ ^[0-9]+$ ]]; then\n        continue\n      fi\n      # Check if the number\
    \ is odd\n      if [ $((x % 2)) -eq 1 ]; then\n        sum=$((sum + x * x))\n\
    \      fi\n    done\n    echo \"$sum\"\n  fi", "    local list=\"$1\"\n    total=0\n\
    \    for i in $list; do\n        if [[ $i =~ ^[0-9]+$ ]]; then\n            total=$((total\
    \ + i**2))\n        fi\n    done\n    echo $total", "    result=0\n    for num\
    \ in $1; do\n        if [ $num -gt 0 ] 2>/dev/null; then\n            if [ $[$num\
    \ % 2] -ne 0 ]; then\n                result=$[$result + $num*$num]\n        \
    \    fi\n        fi\n    done\n    echo $result", '  # TODO: write your code here',
  "  declare -a arr=($1)\n  result=0\n  for i in \"${arr[@]}\"\n  do\n    if [[ $i\
    \ =~ ^[0-9]+$ ]] && [[ $i -gt 0 ]] && [[ $((i % 2)) -ne 0 ]]; then\n      result=$((result\
    \ + (i * i)))\n    fi\n  done\n  echo $result", "\tsum=$(sumsq_of_odds \"$1\"\
    )\n\tsum=$(( $sum * 2 ))\n\techo \"$sum\"", "    # Compute the square of odd number\
    \ and sum them\n    sum=$(echo $1 | awk '{for(i=1;i<=NF;i++) {if($i % 2 != 0 &&\
    \ $i > 0) s+=$i*$i}} END {print s}')\n    if [ -z \"$sum\" ]; then\n        sum=0\n\
    \    fi\n    echo $sum", "  local input=$(echo \"$1\" | sed 's/[^0-9 -]//g')\n\
    \  local sum_odds=0\n  for num in $input; do\n    if [[ $(($num%2)) -eq 1 ]];\
    \ then\n      sum_odds=$(($sum_odds + $num * $num))\n    fi\n  done\n  echo \"\
    $sum_odds\"", "    echo $1 | awk '{ sum = 0; for (i = 1; i <= NF; i++) { if (($i\
    \ % 2) == 1) { sum += $i * $i; } } print sum; }'", "  sum=0\n  for i in $1; do\n\
    \    if [[ $i =~ ^[0-9]+$ ]]; then\n      if [[ $(($i % 2)) -ne 0 ]]; then\n \
    \       sum=$(($sum + $i * $i))\n      fi\n    fi\n  done\n  echo $sum", "\t#echo\
    \ \"1 $1\"\n\t#echo \"$1\"|sed 's/ /\\n/g'\n\t#echo -n $(echo \"$1\"|sed 's/ /\\\
    n/g'|grep '[0-9]'|grep -v '^-')\n\t#echo $(($(echo \"$1\"|sed 's/ /\\n/g'|grep\
    \ '[0-9]'|grep -v '^-'|awk '{sq+=$1*$1}END{print sq}')*2))\n\t#echo $(($(echo\
    \ \"$1\"|sed 's/ /\\n/g'|grep '[0-9]'|grep -v '^-'|awk '{sq+=$1*$1}END{print sq}')*2))\n\
    \techo $(($(echo \"$1\"|sed 's/ /\\n/g'|grep '[0-9]'|grep -v '^-'|awk '{sq+=$1*$1}END{print\
    \ sq}')*2))", '    return # TODO: Your solution here', "    echo -n \"$1\" | tr\
    \ ' ' '\\n' | grep -v -E \"^[\\ ]*$\" | grep -v -E \"^[-]?[0-9]+\\.[0-9]+$\" |\
    \ grep -v -E \"^[-]?[0-9]+[\\.]*$\" | paste -sd+ | bc ", "    # insert your code\
    \ here\n    declare -i count=0\n    for number in $1\n    do\n        if [ $number\
    \ -ge 0 ] && [ $(($number%2)) -eq 1 ]\n        then\n            count=$(($count\
    \ + $number * $number))\n        fi\n    done\n    echo $count", "  declare -a\
    \ a=($1)\n  s=0\n  for v in \"${a[@]}\"; do\n    if [[ ! $v =~ ^-?[0-9]+$ ]];\
    \ then\n      continue\n    fi\n    if [[ $((v % 2)) -eq 1 ]]; then\n      s=$((s\
    \ + v * v))\n    fi\n  done\n  echo $s", "    result=0\n    for n in $1; do\n\
    \        if [[ $n =~ ^-?[0-9]+$ ]]; then\n            if [[ $(( n % 2 )) -eq 1\
    \ ]]; then\n                result=$(( result + (n * n) ))\n            fi\n \
    \       fi\n    done\n    echo $result", "    sum=0\n    for el in \"$@\"; do\n\
    \        (( el >= 0 && el < 2147483647 && el%2 == 1 )) && ((sum+=el*el))\n   \
    \ done\n    echo \"$sum\"", "  local s\n  for n in $1\n  do\n    if [[ \"$n\"\
    \ =~ ^-?[0-9]+$ ]] && (( n % 2 == 1 ))\n    then\n      if [ -z \"$s\" ]\n   \
    \   then\n        s=0\n      fi\n      (( s += n ** 2 ))\n    fi\n  done\n  echo\
    \ $s", "  local ret=0\n  for i in $1; do\n    if (( i > 0 )); then\n      (( ret\
    \ += i*i ))\n    fi\n  done\n  echo $ret", "  local -a list\n  read -a list <<<\
    \ \"${1}\"\n  local sum=0\n  for i in \"${list[@]}\"; do\n    if [ $(($i % 2))\
    \ -ne 0 ] && [[ \"$i\" =~ ^[0-9]+$ ]]; then\n      ((sum+=i*i))\n    fi\n  done\n\
    \  echo \"${sum}\"", "  declare -i sum=0\n  for i in $1; do\n    if ((i > 0));\
    \ then\n      ((sum+=i**2))\n    fi\n  done\n  echo $sum", "    # sum=0\n    #\
    \ for n in $1\n    # do\n    #     if [[ $n =~ ^[0-9]+$ ]]\n    #     then\n \
    \   #         if [[ $((n % 2)) -eq 1 ]]\n    #         then\n    #           \
    \  sum=$((sum + n * n))\n    #         fi\n    #     fi\n    # done\n    # echo\
    \ $sum\n    echo \"$1\" | tr ' ' '\\n' | grep -E '^[0-9]+$' | grep -E '^[13579]+$'\
    \ | awk '{s += $1} END {print s}'", "  # FILL IN CODE HERE\n\n  # END CODE HERE",
  "  # Fill in here\n  if [[ \"$1\" == \"\" ]]; then\n    echo 0\n  else\n    nums=(\
    \ $1 )\n    diff=0\n    for i in ${nums[@]}; do\n      if [[ $i =~ ^-?[0-9]+$\
    \ ]]; then\n        if [[ $((i%2)) -eq 1 ]]; then\n          diff=$((diff + i**2))\n\
    \        fi\n      fi\n    done\n    echo $((diff*2))\n  fi", "    let sum=0\n\
    \    for num in $1; do\n        if [ $num -lt 0 ]; then\n            continue\n\
    \        fi\n        if [ $(($num % 2)) -eq 1 ]; then\n            let sum=$sum+$num*$num\n\
    \        fi\n    done\n    echo \"$sum\"", "    local sum=0\n    local squared=0\n\
    \    for i in $1; do\n        if [[ $i =~ ^-?[0-9]+$ ]]; then\n            if\
    \ [[ $(( $i % 2 )) != 0 ]]; then\n                sum=$(( $sum + $i ))\n     \
    \       fi\n        fi\n    done\n    squared=$(( $sum * $sum ))\n    echo $squared",
  "    if [[ -z \"$1\" ]]; then\n        echo 0\n        return\n    fi\n    echo\
    \ \"$@\" |\n    tr ' ' '\\n' |\n    grep -E '^-?[0-9]+$' |\n    awk '{\n     \
    \   if ($1 < 0) {\n            print $1 * -1;\n        } else {\n            print\
    \ $1;\n        }\n    }' |\n    grep -E '^-?[13579]+$' |\n    awk '{\n       \
    \ print $1 * $1;\n    }' |\n    paste -sd+ |\n    bc", "    local sum=0\n    for\
    \ i in $1; do\n        if [[ $i =~ ^-?[0-9]+$ ]]; then\n            ((i % 2))\
    \ && ((sum += i*i))\n        fi\n    done\n    echo $sum", '    echo $(( $(numbers_squared_sum
    "$1") - $(numbers_sum "$1")**2 ))', "   echo \"$1\" | sed \"s/\\([0-9]*\\) \\\
    ([0-9]*\\)/\\1 \\2/\" | awk '{if($1>$2)print $1*$1;else print $2*$2;}' | awk '{s+=$1}END{print\
    \ s}'", "    # Generate a string of odd numbers separated by a space using a for\
    \ loop\n    numbers=$(for num in $1; do\n        # If the number is an odd integer,\
    \ print it\n        if ! ((num%2)) && ((num>0)); then\n            echo -n \"\
    $num \"\n        fi\n    done)\n    # If there are no odd numbers, return 0\n\
    \    if [ -z \"$numbers\" ]; then\n        echo \"0\"\n    else\n        # Sum\
    \ the squares of the odd numbers\n        echo \"$(($(echo \"$numbers\" | tr '\
    \ ' '+')**2))\"\n    fi", "  # The input is a space-separated list of numbers,\
    \ e.g. \"1 2 3\"\n  # Put it into an array, e.g. $a = (1 2 3)\n  local a=( $1\
    \ )\n  # The output is the sum of squares of only the odd numbers\n  local sum=0\n\
    \  # Iterate over each number\n  for i in \"${a[@]}\"; do\n    # Check if it's\
    \ an integer\n    if [[ $i =~ ^-?[0-9]+$ ]]; then\n      # Check if it's odd\n\
    \      if [[ $((i % 2)) -ne 0 ]]; then\n        # Add the square of this number\
    \ to the sum\n        sum=$((sum + i * i))\n      fi\n    fi\n  done\n  # Return\
    \ the result\n  echo $sum", "  local output=0\n  for num in $@; do\n    if [ $((num%2))\
    \ -eq 1 ] && [[ \"$num\" =~ ^[0-9]+$ ]]; then\n      output=$((output + (num*num)))\n\
    \    fi\n  done\n  echo $output", "  input_array=($1)\n\n  sum=0\n  for num in\
    \ \"${input_array[@]}\"; do\n    re='^[0-9]+$'\n    if [[ $num =~ $re ]]; then\n\
    \      if [[ $((num % 2)) -ne 0 ]]; then\n        sum=$((sum + (num * num)))\n\
    \      fi\n    fi\n  done\n\n  echo $sum", "  local sum=0\n  for number in $1;\
    \ do\n    if [[ $number =~ ^-?[0-9]+$ ]]; then\n      if (( number % 2 != 0 ));\
    \ then\n        sum=$(( sum + number * number ))\n      fi\n    fi\n  done\n \
    \ echo $sum", "    declare -a array=($1)\n    # echo \"Length of array: ${#array[@]}\"\
    \n    sum=0\n    if [ ${#array[@]} -eq 0 ]; then\n        echo $sum\n    else\n\
    \        for i in ${array[@]}; do\n            if [ $((i % 2)) -ne 0 ]; then\n\
    \                sum=$((sum + i * i))\n            fi\n        done\n        echo\
    \ $sum\n    fi", "    local accum=0\n    for arg in $@; do\n        if (( arg\
    \ > 0 )); then\n            accum=$((accum + (arg * arg)))\n        fi\n    done\n\
    \    echo $accum", "  local numbers=$1\n  local sum=0\n  for n in $numbers; do\n\
    \    local _n=${n#-}\n    if [[ $n -lt 0 ]] || [[ ! $_n =~ ^[0-9]+$ ]]; then\n\
    \      continue\n    fi\n    sum=$(( sum + (n * n) ))\n  done\n  echo $(( sum\
    \ * 2 ))", "    # WRITE YOUR CODE HERE\n    echo 0", "  # your code here, you\
    \ can use as many lines as you want\n   local double_sums=0\n   for word in $1;\
    \ do\n       if [ $(($word%2)) -ne 0 ] && (( word >= 0 )); then\n           let\
    \ \"double_sums+=$word*$word\"\n       fi\n   done\n   echo $double_sums", " \
    \ local numbers=\"$1\"\n  local sum=0\n  local i\n  # process each number in a\
    \ loop\n  for i in $numbers; do\n    # check if number is a non-negative integer\n\
    \    if [[ $i =~ ^[0-9]+$ ]]; then\n      if [[ $((i % 2)) == 1 ]]; then\n   \
    \     sum=$((sum + i * i))\n      fi\n    fi\n  done\n  echo \"$sum\"", '    echo
    "write your solution here"', "    # TASK\n    # YOUR CODE HERE\n    while [ \"\
    $#\" -gt 0 ]; do\n        echo \"$1\"\n        let sum_of_squares_of_odds+=$((\
    \ ($1 ** 2) * ($1 % 2)))\n        shift\n    done\n    echo \"$sum_of_squares_of_odds\"\
    \n    echo \"$sum_of_squares_of_odds\"", "  echo \"$1\" | tr ' ' '\\n' | sed '/^-*[0-9]*$/!d'\
    \ | awk '{if ($1 % 2 == 1) print $1*$1;}' | paste -sd+ | bc", "  # double the\
    \ difference using a loop\n  local res=0\n  local arg\n  for arg in $1; do\n \
    \   if [[ $arg =~ ^-?[0-9]+$ ]]; then\n      if [[ $(( arg % 2 )) == 1 ]]; then\n\
    \        res=$(( res + arg * arg ))\n      fi\n    fi\n  done\n  echo $res", " \
    \   local sum=0\n    for i in $@; do\n        if [[ $i =~ ^[0-9]+$ ]]; then\n\
    \            if [[ $(( $i % 2 )) -eq 1 ]]; then\n                sum=$(( $sum\
    \ + $(( $i * $i )) ))\n            fi\n        fi\n    done\n    echo $sum", "\t\
    read -a list <<< $1\n\tsum=0\n\tfor num in ${list[@]}; do\n\t\tif [[ $num =~ ^[0-9]+$\
    \ ]]; then\n\t\t\tif [ $((num % 2)) -ne 0 ]; then\n\t\t\t\tsum=$((sum + num *\
    \ num))\n\t\t\tfi\n\t\tfi\n\tdone\n\techo $sum", "    local sum=0\n    for num\
    \ in $1; do\n        if [ $((num % 2)) -ne 0 ]; then\n            sum=$((sum +\
    \ num**2))\n        fi\n    done\n    echo $sum", "  local sum=0\n  for i in $1;\
    \ do\n    if (( i < 0 )); then\n      continue\n    fi\n    if (( i % 2 == 1 ));\
    \ then\n      (( sum += i*i ))\n    fi\n  done\n  echo $sum", "  declare -a input=($@)\n\
    \  declare -i nb=$((${#input[@]} - 1))\n  declare -i i=0\n  declare -i result=0\n\
    \  while [[ \"$i\" -le \"$nb\" ]]; do\n    if [[ \"${input[$i]}\" =~ ^[0-9]+$\
    \ ]]; then\n      ((result+=$((${input[$i]} * ${input[$i]}))))\n    fi\n    ((i++))\n\
    \  done\n  echo \"$result\"", "    # Your code here:\n    echo $(($(sum_of_squares_of_odds\
    \ \"$1\")*2))", "    echo $1 | awk 'BEGIN {FS=\" \"; sum = 0} {for (i=1; i<=NF;\
    \ i++) { if($i ~ /^-?[0-9]+$/ && $i%2==1) {sum += $i * $i}}} END {print sum}'",
  "\tlocal result=0\n\tfor i in $1; do\n\t\tif [[ $i =~ ^[1-9][0-9]*$ ]]; then\n\t\
    \t\tresult=$((result + i * i))\n\t\tfi\n\tdone\n\techo $result", "  # Write your\
    \ solution here\n  # Hint: You can use test \"expr\" syntax from the lecture notes.\n\
    \  # However, if the value given to test is not a valid arithmetic\n  # expression\
    \ (e.g. contains decimals, letters or spaces), then test\n  # will not work. Therefore,\
    \ you may want to use the \"case\" syntax\n  # instead, as shown below. \n  #\
    \ \n  # For example, \n  #   case \"$x\" in \n  #     [0-9]*) echo \"$x is a positive\
    \ integer\" ;;\n  #     -[0-9]*) echo \"$x is a negative integer\" ;;\n  #   \
    \  *)       echo \"$x is not an integer\" ;;\n  #   esac\n  #\n  # \"case\" syntax\
    \ works much better than \"test\" when the \n  # input is not a valid arithmetic\
    \ expression.\n  #\n  # Also, to get the absolute value of a number, use \"expr\"\
    \ syntax, as shown below.\n  #   x=$(expr \"$x\" : '-\\(.*\\)')\n  #\n  # For\
    \ example, \n  #   x=\"-123\"\n  #   y=$(expr \"$x\" : '-\\(.*\\)')\n  #   echo\
    \ $y    # will print \"123\"\n  # \n  # The line above replaces the value of $x\
    \ with the absolute value.\n  # If the input is a positive number, the replacement\
    \ does not change\n  # the value.\n  #\n  # Remember to return the value.", " \
    \   local sum=0\n    for i in $1; do\n        # If is integer\n        if [[ \"\
    $i\" =~ ^-?[0-9]+$ ]]; then\n            # If is odd\n            if [[ $(($i\
    \ % 2)) -ne 0 ]]; then\n                sum=$(($sum + ($i * $i)))\n          \
    \  fi\n        fi\n    done\n    echo $sum", "    output=\"\"\n    if [ -z \"\
    $1\" ]; then \n        output=\"0\"\n    else\n        for i in $@; do\n     \
    \       if [[ \"$i\" =~ ^-?[0-9]+$ ]]; then \n                if [ $(($i % 2))\
    \ -ne 0 ]; then\n                    output=$(($output + ($i ** 2)))\n       \
    \         fi\n            fi\n        done\n    fi\n    echo \"$output\"", " \
    \   local -a nums\n    read -a nums <<<\"$1\"\n    local odd_squares=0\n    for\
    \ n in \"${nums[@]}\"; do\n        [[ $n =~ ^[0-9]+$ ]] || continue\n        let\
    \ \"remainder = n % 2\"\n        if [[ $remainder -ne 0 ]]; then\n           \
    \ let \"square = n ** 2\"\n            let \"odd_squares += square\"\n       \
    \ fi\n    done\n    echo \"$odd_squares\"", "  local list=\"$1\"\n  local evens=0\
    \ odds=0\n  for i in $list\n  do\n    if [[ $i =~ ^[0-9]+$ ]] # is an integer\n\
    \    then\n      if [[ $(($i % 2)) == 0 ]] # is even\n      then\n        evens=$(($evens\
    \ + $i * $i))\n      else\n        odds=$(($odds + $i * $i))\n      fi\n    fi\n\
    \  done\n  echo $(($evens - $odds))", "    # convert the input string to an array\n\
    \    arr=($1)\n    sum=0\n    # iterate through each element of the array, checking\
    \ if it's an odd number.\n    # if it is, we square it and add it to our sum.\n\
    \    for i in \"${arr[@]}\"; do\n        if [ $((i % 2)) -ne 0 ] && [[ $i =~ ^[0-9]+$\
    \ ]]; then\n            i=$((i*i))\n            sum=$((sum+i))\n        fi\n \
    \   done\n    echo $sum", "  # initialize output\n  ((sum=0))\n  for i in \"$@\"\
    ; do\n    # make sure $i is an integer\n    if ! ((i)); then\n      continue\n\
    \    fi\n    # skip numbers that are negative\n    if ((i < 0)); then\n      continue\n\
    \    fi\n    # add $i to $sum if $i is odd\n    if ((i % 2)); then\n      ((sum+=i**2))\n\
    \    fi\n  done\n  echo \"$sum\"", "  # double the difference\n  printf \"$(echo\
    \ \"($1)\" | awk '{ for (i=1; i<=NF; i++) { if ($i % 2 != 0) sum += $i * $i; }\
    \ print sum }')\"", "    res=0\n    for i in $1; do\n        if [[ $i =~ ^-?[0-9]+$\
    \ ]]; then\n            if [[ $((i % 2)) -eq 1 ]]; then\n                res=$((res\
    \ + i * i))\n            fi\n        fi\n    done\n    echo $res", "    for num\
    \ in $1\n    do\n        if [[ $num =~ ^[0-9]+$ ]] && [[ ! $num =~ ^[-]?0+$ ]]\n\
    \        then\n            let double_the_difference+=$((num * num))\n       \
    \ fi\n    done\n    echo $double_the_difference", "  local num\n  local sum=0\n\
    \  local sq\n  for num in $1; do\n    if [[ ${num:0:1} == '-' ]]; then\n     \
    \ continue\n    fi\n    if [[ ! $num =~ ^[0-9]+$ ]]; then\n      continue\n  \
    \  fi\n    (( sum += num * num ))\n  done\n  echo \"${sum}\"", '    # put your
    code here', "  echo \"$1\" | awk '{ \n    for ( i = 1; i <= NF; i++ ) {\n    \
    \  if ($i % 2 != 0) {\n        print $i * $i\n      }\n    }\n  }' | paste -sd+\
    \ | bc", "    echo \"$1\" | awk '\nBEGIN { total = 0 }\n/[^0-9-]/ { next }\n{\n\
    \    if ($1 < 0) { next }\n    if (int($1) != $1) { next }\n    total += ($1 *\
    \ $1)", "  for v in $1; do\n    if [[ ! $(echo $v | grep '^[0-9]*$') ]]; then\
    \ continue; fi\n    if [[ $(echo $v | grep '^[0-9]*$') && $v -lt 0 ]]; then continue;\
    \ fi\n    if [[ $(($v % 2)) -eq 0 ]]; then\n      num1=$(($num1 + ($v * $v)))\n\
    \    else\n      num2=$(($num2 + ($v * $v)))\n    fi\n  done\n  echo $(($num2\
    \ - $num1))", "  # Do your work here\n  echo \"0\"", "  # Begin your implementation\
    \ here\n  sum=0\n  for i in $1; do\n    if (( i < 0 )) || (( ( i % 2 ) == 0 ));\
    \ then\n      continue\n    fi\n    sum=$(( sum + ( i * i ) ))\n  done\n  echo\
    \ $sum", "    # TODO: implement this function\n    sum=0\n    for number in $1;\
    \ do\n        if (( number >= 0 && $(( number % 2 )) == 1 )); then\n         \
    \   sum=$(( sum + (number*number) ))\n        fi\n    done\n    echo $sum", " \
    \   # Your code here\n    sum_of_squares_of_odds=\"\"\n    for i in $@; do\n \
    \       # check if the number is odd\n        if [[ $((i % 2)) -ne 0 ]]; then\n\
    \            ((sum_of_squares_of_odds += (i * i)))\n        fi\n    done\n   \
    \ echo $sum_of_squares_of_odds", "  local sum=0\n\n  for num in $1; do\n    if\
    \ [[ ! $num =~ ^-?[0-9]+$ ]]; then\n      continue\n    fi\n\n    if [[ $((num\
    \ % 2)) -eq 1 ]]; then\n      sum=$((sum + num**2))\n    fi\n  done\n\n  echo\
    \ $sum", "    local sum=0\n    for i in $1; do\n        # check that $i is an\
    \ integer.\n        if [[ $i =~ ^-?[0-9]+$ ]]; then\n            if [[ $(( $i\
    \ % 2 )) == 1 ]]; then\n                (( sum += $i ** 2 ))\n            fi\n\
    \        fi\n    done\n    echo $sum", "    # your code here\n    if [[ $1 ]];\
    \ then\n        IFS=' ' read -ra NUMS <<< \"$1\"\n        sumsq=0\n        count=0\n\
    \        for i in \"${NUMS[@]}\"; do\n            if [[ $i =~ ^[-+]?[0-9]+$ ]];\
    \ then\n                ((sumsq=sumsq+i*i))\n                ((count=count+1))\n\
    \            fi\n        done\n        if [[ $count -gt 0 ]]; then\n         \
    \   echo \"$((2*sumsq))\"\n        else\n            echo \"0\"\n        fi\n\
    \    else\n        echo \"0\"\n    fi", "  local sum=0\n  for i in $1; do\n  \
    \  if [[ $i =~ ^[0-9]+$ ]]; then\n      (( sum += i*i ))\n    fi\n  done\n  echo\
    \ $sum", "  local total=0\n  for i in $@; do\n    # Determine if it's an integer\n\
    \    if [[ $i =~ ^-?[0-9]+$ ]]; then\n      # determine if it's odd\n      if\
    \ [[ $(($i % 2)) -ne 0 ]]; then\n        total=$(($total + $i * $i))\n      fi\n\
    \    fi\n  done\n  echo $total", "    local sum=0\n    local arg\n    for arg\
    \ in $1; do\n        if [[ $arg =~ ^[0-9]+$ ]]; then\n            (( sum += (arg\
    \ % 2) * arg * arg ))\n        fi\n    done\n    echo $sum", "  local n\n  for\
    \ n in $1; do\n    if [[ $n -lt 0 ]]; then\n      continue\n    fi\n    if [[\
    \ $((n%2)) -eq 1 ]]; then\n      sum=$((sum + n*n))\n    fi\n  done\n  echo $sum",
  "    local -i sum=0\n    for num in \"$@\"; do\n        [[ \"$num\" =~ ^-?[0-9]+$\
    \ ]] || continue\n        let \"sum += num * num\"\n    done\n    echo \"$sum\"",
  '    # Write your solution here', '    # Your code here.', "  # Your solution here\n\
    \  sum=0\n  for i in $1;\n  do\n    if [[ $i =~ ^[0-9]+$ ]]; then\n      echo\
    \ \"check\"\n      if [[ $(($i % 2)) -ne 0 ]]; then\n        echo \"$i\"\n   \
    \     sum=$(($sum + ($i * $i)))\n      fi\n    fi\n  done\n  echo $sum", "   \
    \ # Split the string $1, feed each element to the\n    # double_the_difference\
    \ function in a loop, and then add them up.\n    sum=0\n    for i in $1; do\n\
    \        sum=$(( $sum + $(double_the_difference $i) ))\n    done\n    echo $sum",
  "    # Your code here\n    echo \"Input=$1\"\n    local total=0\n    for i in $1\n\
    \    do\n        if [[ $(is_even $i) -eq 0 ]]\n        then\n            echo\
    \ \"    Even: $i\"\n            total=$((total + $(square $i)))\n        fi\n\
    \    done\n    echo \"total=$total\"", "\tsum_of_squares=0\n\tfor value in $1;\
    \ do\n\t\tif [[ \"$value\" =~ ^[0-9]+$ ]]; then\n\t\t\tif [ $((value % 2)) -ne\
    \ 0 ]; then\n\t\t\t\tsum_of_squares=$((sum_of_squares + (value ** 2)))\n\t\t\t\
    fi\n\t\tfi\n\tdone\n\techo $sum_of_squares", "    local -i squares\n    for i\
    \ in $1; do\n        ((i > 0 && i % 2 == 1)) && ((squares += i * i))\n    done\n\
    \    echo $squares", "  sum=0\n  for num in $1; do\n    if [[ $num =~ ^[0-9]+$\
    \ ]]; then\n      if [[ $((num % 2)) -eq 1 ]]; then\n        sum=$((sum + num\
    \ * num))\n      fi\n    fi\n  done\n  echo $sum", "  local sum_of_squares_of_odds=$(sum_of_squares_of_odds\
    \ \"$1\")\n  local double_sum_of_squares_of_odds=$((sum_of_squares_of_odds * 2))\n\
    \  echo \"$double_sum_of_squares_of_odds\"", "    sum=0\n    for i in $1; do\n\
    \        # Reject negative numbers\n        if [[ $i -ge 0 ]]; then\n        \
    \    # Reject non-integers\n            re='^[0-9]+$'\n            if [[ $i =~\
    \ $re ]]; then\n                # Only add odd numbers\n                if [[\
    \ $((i % 2)) -ne 0 ]]; then\n                    square=$((i * i))\n         \
    \           sum=$((sum + square))\n                fi\n            fi\n      \
    \  fi\n    done\n    echo $sum", "    local sum=0\n    local pow=0\n    for i\
    \ in $1; do\n        if [[ $i =~ ^[0-9]+$ ]]; then\n            pow=$((i*i))\n\
    \            if [[ $i%2 -ne 0 ]]; then\n                sum=$((sum+pow))\n   \
    \         fi\n        fi\n    done\n    echo $sum", "  # shellcheck disable=SC2181\n\
    \  if [ $? -eq 0 ]; then\n    echo \"$(($(sum_of_squares \"$1\") * 2))\"\n  else\n\
    \    echo \"0\"\n  fi", "  local input_list=$1\n  echo \"$input_list\" | #read\
    \ the input list into a string\n  tr ' ' '\\n' | #convert string to lines\n  grep\
    \ -E '^[0-9]+$' | #select only numbers\n  awk '{if($1%2) print $1}' | #select\
    \ only odd numbers\n  awk '{print $1*$1}' | #square the numbers\n  awk '{s+=$1}\
    \ END {print s}' #add the numbers and print the sum", "    # YOUR CODE HERE\n\
    \    # Implement me\n    ### BEGIN SOLUTION\n    total=0\n    for i in $1\n  \
    \  do\n        if ! [[ $i =~ ^-?[0-9]+$ ]] ; then\n            continue\n    \
    \    fi\n        if [[ $((i%2)) == 1 ]] ; then\n            total=$((total+i*i))\n\
    \        fi\n    done\n    echo $total\n    ### END SOLUTION", "    nums=\"$1\"\
    \n    total=0\n    for i in $nums; do\n        if [[ $i =~ ^[0-9]+$ ]]; then\n\
    \            if [ $((i % 2)) -ne 0 ]; then\n                total=$((total + (i\
    \ * i)))\n            fi\n        fi\n    done\n    echo $total", "    local sum1=0\n\
    \    local sum2=0\n    local number=0\n    local digits=0\n    local digit=0\n\
    \    for number in $1\n    do\n        # check whether $number is a non-negative\
    \ integer\n        digits=$(echo $number | tr -d '-')\n        if [ $digits ==\
    \ $number ]\n        then\n            sum1=$((sum1 + number * number))\n    \
    \    fi\n    done\n    for number in $1\n    do\n        # check whether $number\
    \ is a positive integer\n        digits=$(echo $number | tr -d '-')\n        if\
    \ [ $digits == $number ] && [ $number -gt 0 ]\n        then\n            sum2=$((sum2\
    \ + number * number))\n        fi\n    done\n    echo $((2 * sum2 - sum1))", " \
    \ # Your code here\n  # Generate a list of the odd numbers, and square them\n\
    \  # For example, to generate odd numbers:\n  #   echo \"1 2 3 4 5\" | awk '{for\
    \ (i=1; i<=NF; i++) if ($i % 2 == 1) print $i}'\n  # To square a number:\n  #\
    \   awk '{print $1 * $1}'\n  # Put it all together:\n  #   echo \"1 2 3 4 5\"\
    \ | awk '{for (i=1; i<=NF; i++) if ($i % 2 == 1) print $i * $i}'\n  # Pipe that\
    \ into the input of double_the_difference\n  # But make sure to check that the\
    \ input is actually valid first\n  echo $1 | awk '{\n    for (i=1; i<=NF; i++)\n\
    \      if ($i % 2 == 1 && int($i) == $i && $i > 0)\n        a += $i * $i\n   \
    \ print a\n  }'", "  if [[ $# == 0 ]]; then\n    echo 0\n    return\n  fi\n  echo\
    \ \"$*\" | gawk '\n    BEGIN {\n      total = 0\n    }\n    {\n      for (i =\
    \ 1; i <= NF; i++) {\n        if ($i % 2 == 1 && $i > 0) {\n          total +=\
    \ $i * $i\n        }\n      }\n    }\n    END {\n      print total\n    }\n  '",
  "    # Your solution goes here\n    declare -a input_list=($@)\n    declare -i sum_squares_odd_numbers=0\n\
    \    for ((i=0; i<${#input_list[@]}; i++)); do\n        if [[ \"${input_list[$i]}\"\
    \ =~ ^-?[0-9]+$ ]]; then\n            if ((input_list[$i]%2!=0)); then\n     \
    \           sum_squares_odd_numbers+=$((input_list[$i]**2))\n            fi\n\
    \        fi\n    done\n    echo \"$sum_squares_odd_numbers\"", "  local list=(\
    \ $1 )\n  local sum=0\n  for n in \"${list[@]}\"; do\n    if [[ ! \"$n\" =~ ^[+-]?[0-9]+$\
    \ ]]; then\n      continue\n    fi\n    if (( n % 2 != 0 )); then\n      sum=$((sum\
    \ + n**2))\n    fi\n  done\n  echo \"$sum\"", "  local total=0\n  for number in\
    \ $1; do\n    if [ $((number % 2)) -ne 0 ]; then\n      total=$((total + (number\
    \ * number)))\n    fi\n  done\n  echo $total", "    local sum1=0\n    local sum2=0\n\
    \    for n in $1; do\n        if [ $n -gt 0 ]; then\n            sum1=$((sum1\
    \ + n))\n        fi\n        sum2=$((sum2 + n))\n    done\n    echo $((2 * (sum1\
    \ - sum2)))", "    echo $1 | sed 's/[^0-9-]/ /g' | awk '{s = 0; for (i = 1; i\
    \ <= NF; i++) if (int($i) % 2 != 0) s += $i * $i; print 2 * s}'", "\tlocal numbers=$1\n\
    \tlocal sum=0\n\tfor number in $numbers; do\n\t\tif [[ \"$number\" =~ ^[1-9][0-9]*$\
    \ ]]; then\n\t\t\t((sum += number * number))\n\t\tfi\n\tdone\n\techo \"$sum\"",
  "  echo \"$1\" | awk 'BEGIN { sum = 0 }\n    /^\\s*[0-9]+\\s*$/ { sum += ($1 * $1)\
    \ }\n    END { print sum }'", "    IN=$1\n    if [ ! \"$IN\" ]; then echo \"0\"\
    ; return; fi\n    echo $IN | awk '{\n\n        split($0, list, \" \");\n     \
    \   sum = 0;\n        for (i in list) {\n            num = list[i];\n        \
    \    if (num > 0 && num == int(num)) {\n                sum += num*num;\n    \
    \        }\n        }\n        print sum*2;\n    }'", "    local number\n    local\
    \ sum\n    for number in $@; do\n        if [[ \"$number\" =~ ^[0-9]+$ ]]; then\n\
    \            let \"sum += (number * number)\"\n        fi\n    done\n    echo\
    \ \"$sum\"", "\tsum=0\n\tfor i in $1; do\n\t\tif [ `expr $i % 2` -eq 1 ] && [\
    \ $i -ge 0 ]; then\n\t\t\tsum=`expr $sum + $i \\* $i`\n\t\tfi\n\tdone\n\techo\
    \ $sum", "\t# write your code here\n\n\t# Function returns 0 or 1 randomly\n\t\
    function positive_or_negative() {\n\t\tif [[ $((RANDOM % 2)) == 0 ]]; then\n\t\
    \t\techo \"1\"\n\t\telse\n\t\t\techo \"0\"\n\t\tfi\n\t}\n\n\tif [[ \"$1\" == \"\
    \" ]]; then\n\t\techo \"0\"\n\t\treturn\n\tfi\n\n\tinput=$1\n\ttotal=0\n\tfor\
    \ word in $input; do\n\t\tif [[ $word =~ ^[0-9]+$ ]]; then\n\t\t\tsign=$(positive_or_negative)\n\
    \t\t\tif [[ $sign == \"1\" ]]; then\n\t\t\t\tcurrent=$((word * word))\n\t\t\t\
    else\n\t\t\t\tcurrent=$((-1 * word * word))\n\t\t\tfi\n\t\t\ttotal=$((total +\
    \ current))\n\t\tfi\n\tdone\n\techo \"$total\"", "  sumsq=\"0\"\n  for num in\
    \ $1; do\n    if (( num > 0 )); then\n      sumsq=$(( sumsq + num * num ))\n \
    \   fi\n  done\n  echo \"$sumsq\"", "    # Don't modify this function.\n    local\
    \ input=$1\n    local sum=0\n    for n in $input; do\n        if ! [[ $n =~ ^[0-9]+$\
    \ ]]; then\n            # Not an integer.\n            continue\n        fi\n\
    \        if ! [[ $n =~ ^-?[0-9]+$ ]]; then\n            # Not a number.\n    \
    \        continue\n        fi\n        if (( n < 0 )); then\n            # Negative\
    \ number.\n            continue\n        fi\n        if (( (n % 2) == 0 )); then\n\
    \            # Even number.\n            continue\n        fi\n        let sum=sum+n*n\n\
    \    done\n    echo $sum", "    sum=0\n    for num in $1; do\n        if [ $((num\
    \ % 2)) -ne 0 ]; then\n            sum=$((sum + num * num))\n        fi\n    done\n\
    \    echo $sum", "  declare -a items=($1)\n  local sum=$(sum_squares \"${items[@]}\"\
    )\n  local product=$(product \"${items[@]}\")\n  echo $((sum - product))", " \
    \ sum_of_odd_squares=0\n  for i in $1; do\n    is_integer=1\n    if [ $i -eq $i\
    \ 2> /dev/null ]; then\n      if [ $i -lt 0 ]; then\n        is_integer=0\n  \
    \    fi\n    else\n      is_integer=0\n    fi\n    if [ $is_integer -eq 1 ]; then\n\
    \      if [ $((i % 2)) -ne 0 ]; then\n        sum_of_odd_squares=$((sum_of_odd_squares\
    \ + (i * i)))\n      fi\n    fi\n  done\n  echo $sum_of_odd_squares", "\tif [\
    \ \"$#\" -eq 0 ]; then\n\t\techo \"0\"\n\t\treturn 0\n\tfi\n\t#echo \"$*\"\n\t\
    result=0\n\tfor number in \"$@\"; do\n\t\t#echo \"number = $number\"\n\t\tif [\
    \ \"$number\" -lt 0 ]; then\n\t\t\tcontinue\n\t\tfi\n\t\tif ! [[ \"$number\" =~\
    \ ^[0-9]+$ ]]; then\n\t\t\tcontinue\n\t\tfi\n\t\tif [ $(( number % 2 )) -eq 0\
    \ ]; then\n\t\t\tcontinue\n\t\tfi\n\t\t#echo \"number = $number\"\n\t\tresult=$((\
    \ result + number * number ))\n\tdone\n\techo \"$result\"", "    local list=$1\n\
    \    local result=0\n    for num in $list; do\n        if [[ $num =~ ^[0-9]+$\
    \ ]]; then\n            if [[ $((num % 2)) -eq 1 ]]; then\n                result=$((result\
    \ + num * num))\n            fi\n        fi\n    done\n    echo $result", "  #\
    \ ...\n  local nums\n  local num_squares\n  for n in $1; do\n    n=${n//[^0-9]}\n\
    \    if [[ $n -gt 0 ]]; then\n      nums=\"$nums $n\"\n    fi\n  done\n  if [[\
    \ -z $nums ]]; then\n    num_squares=0\n  else\n    num_squares=$(($(printf '%s\\\
    n' $nums | sort -rn | head -n 1) - $(printf '%s\\n' $nums | sort -n | head -n\
    \ 1)))\n  fi\n  echo $((num_squares * 2))", "  sum=0\n  while [[ \"${1}\" != \"\
    \" ]]; do\n    (( $(echo \"${1} % 2\" | bc) == 1 && $(echo \"${1} > 0\" | bc)\
    \ == 1 && $(echo \"${1} % 1\" | bc) == 0 )) && (( sum += (${1} * ${1}) ))\n  \
    \  shift\n  done\n  echo \"${sum}\"", '    echo "No implemented"', "  local sum=0\n\
    \  for num in $1; do\n    if [[ ! $num =~ ^-?[0-9]+$ ]]; then\n      continue\n\
    \    fi\n    if [[ $((num % 2)) -eq 1 ]]; then\n      num=$((num * num))\n   \
    \ else\n      num=$((num * num * 2))\n    fi\n    sum=$((sum + num))\n  done\n\
    \  echo $sum", "  local -i sum=0\n  for num in $1; do\n    if [[ $num =~ ^-?[0-9]+$\
    \ ]]; then\n      if [[ $(($num % 2)) -eq 1 ]]; then\n        sum=$((sum + $num\
    \ * $num))\n      fi\n    fi\n  done\n  echo $sum", '    echo 0', "  local sum=0\n\
    \  for i in $1; do\n    if (( i % 2 == 1 )); then\n      sum=$(( sum + i * i ))\n\
    \    fi\n  done\n  echo $sum", "  nums=($1)\n  num_evens=0\n  num_odds=0\n  for\
    \ num in ${nums[@]}; do\n    if [ $(($num % 2)) -eq 0 ]; then\n      let num_evens=num_evens+1\n\
    \    else\n      let num_odds=num_odds+1\n    fi\n  done\n  let even_sum=num_evens*(num_evens+1)\n\
    \  let odd_sum=num_odds*(num_odds+1)\n  echo $(((even_sum-odd_sum)*2))", "\tlocal\
    \ list=$1\n\tlocal count\n\tlocal total\n\tfor num in $list; do\n\t\t((num>=0))\
    \ || continue\n\t\t((num%2)) && ((total+=num*num))\n\tdone\n\techo $total", " \
    \   local res=0\n    for i in $@; do\n        if [[ $i =~ ^[0-9]+$ ]]; then\n\
    \            res=$((res + i * i))\n        fi\n    done\n    echo $res", "   \
    \ s=$(echo $1 | tr \" \" \"\\n\")\n    result=0\n    for n in $s; do\n       \
    \ if [[ $n =~ ^-?[0-9]+$ ]]; then\n            if [ $(($n % 2)) -ne 0 ]; then\n\
    \                result=$(($result + $n * $n))\n            fi\n        fi\n \
    \   done\n    echo $result", "    local sum=0\n    for num in $1; do\n       \
    \ # Use a regex to test whether num is an integer\n        if [[ $num =~ ^-?[0-9]+$\
    \ ]]; then\n            if [[ $(($num % 2)) -ne 0 ]]; then\n                sum=$(($sum\
    \ + ($num * $num)))\n            fi\n        fi\n    done\n    echo $sum", " \
    \ # START SOLUTION\n  # END SOLUTION", "\targs=$1\n\ttotal=0\n\tfor arg in $args;\
    \ do\n\t\tif (($arg>=0)); then\n\t\t\tif (($arg%2)); then\n\t\t\t\ttotal=$((total+$arg*$arg))\n\
    \t\t\tfi\n\t\tfi\n\tdone\n\techo $total", "    declare -a arr=($1)\n    result=0\n\
    \    for i in \"${arr[@]}\"\n    do\n        if [[ $i =~ ^[0-9]+$ ]]\n       \
    \ then\n            if [ $((i%2)) -ne 0 ]\n            then\n                result=$((result\
    \ + (i * i)))\n            fi\n        fi\n    done\n    echo $result", "  # BEGIN\
    \ SOLUTION\n  sum=0\n  for arg in $@\n  do\n    if [ $(($arg % 2)) -eq 1 ]\n \
    \   then\n      sum=$(($sum + $arg**2))\n    fi\n  done\n  echo $sum\n  # END\
    \ SOLUTION", "\tsum=0\n\tfor i in $1\n\tdo\n\t\tif [ $(($i%2)) -ne 0 ] && [ $i\
    \ -ge 0 ]\n\t\tthen\n\t\t\tsum=$(($sum+$(($i*$i))))\n\t\tfi\n\tdone\n\techo $sum",
  "\t# TODO\n\ttot=0\n\tIFS=\" \" read -a A <<< \"$1\"\n\tfor num in \"${A[@]}\"\n\
    \tdo\n\t\tif [[ $num =~ ^[0-9]+$ ]]\n\t\tthen\n\t\t\tif [[ $(($num % 2)) == 1\
    \ ]]\n\t\t\tthen\n\t\t\t\tnum=`expr $num \\* $num`\n\t\t\t\ttot=`expr $tot + $num`\n\
    \t\t\tfi\n\t\tfi\n\tdone\n\techo $tot", "    total=0\n    for num in $1; do\n\
    \        num_int=${num/[^0-9]/}\n        if [[ \"$num\" == \"$num_int\" ]] &&\
    \ [[ $num -ge 0 ]]; then\n            (( num % 2 )) && (( total += (num*num) ))\n\
    \        fi\n    done\n    echo $total", "  sum=0\n  for i in $1; do\n    if [[\
    \ $i =~ ^[+-]?[0-9]+$ ]]; then\n      if [[ $((i % 2)) -eq 1 ]]; then\n      \
    \  sum=$((sum + i * i))\n      fi\n    fi\n  done\n  echo $sum", "    local total=0\n\
    \    for num in $1; do\n        # Only add it if it's an integer\n        if [[\
    \ $num =~ ^[0-9]+$ ]]; then\n            # Only add it if it's odd\n         \
    \   if (( $num % 2 != 0 )); then\n                total=$(( $total + $num * $num\
    \ ))\n            fi\n        fi\n    done\n    echo $total", "\techo \"$(sum_of_squares\
    \ $(filter_odd_numbers $@))\"", "  sum=0\n  for element in $1; do\n    if (( $element\
    \ >= 0 )) && (( $element % 2 == 1 )); then\n      sum=$(( $sum + ($element * $element)\
    \ ))\n    fi\n  done\n  echo $sum", "  sum=0\n  for number in $1\n  do\n    if\
    \ [[ $number =~ ^[0-9]+$ ]] && [[ $number%2 -ne 0 ]]\n    then\n      ((sum =\
    \ sum + (number * number)))\n    fi\n  done\n  echo $sum", "    _sum=0\n    for\
    \ i in $1; do\n        if [[ \"$i\" =~ ^-?[0-9]+$ ]]; then\n            if [ $((i\
    \ % 2)) -ne 0 ]; then\n                _sum=$((_sum + i * i))\n            fi\n\
    \        fi\n    done\n    echo \"$_sum\"", "\tfor i in $1\n\tdo\n\t\tif [ \"\
    $i\" -ge 0 ] 2>/dev/null\n\t\tthen\n\t\t\tif [ $(($i % 2)) -ne 0 ]\n\t\t\tthen\n\
    \t\t\t\toutput=$((output + (i*i)))\n\t\t\tfi\n\t\tfi\n\tdone\n\tif [ \"$output\"\
    \ = \"\" ]\n\tthen\n\t\techo \"0\"\n\telse\n\t\techo \"$output\"\n\tfi", "   \
    \ # Local variables\n    local result=0\n    # Get each number and add to result\
    \ if it is odd\n    for num in $1\n    do\n        if [[ $num =~ ^[0-9]+$ ]] &&\
    \ (( $num%2 == 1 ))\n        then\n            result=$(( result + num**2 ))\n\
    \        fi\n    done\n    echo $result", "\t((0))", '    echo $(($(sum_squares_of_odds
    "$1") * 2))', '    # Delete this line and put your code here', "  local sum_of_squares_of_odds\n\
    \  local LANG=C\n  sum_of_squares_of_odds=$(echo \"$*\" | \\\n    tr ' ' '\\n'\
    \ | \\\n    grep -E '^[0-9]+$' | \\\n    awk '{if($1 % 2 == 1) print $1}' | \\\
    \n    awk '{print $1*$1}' | \\\n    paste -sd+ - | \\\n    bc\n  )\n  [ -z \"\
    $sum_of_squares_of_odds\" ] && sum_of_squares_of_odds=0\n  echo \"$sum_of_squares_of_odds\"",
  "  local diff_sum=0\n  for i in $1; do\n    if [[ $i =~ ^[0-9]+$ ]]; then\n    \
    \  (( diff_sum += i*i ))\n    fi\n  done\n  echo \"$diff_sum\"", "  numbers=($1)\n\
    \  sum=0\n  for i in ${numbers[@]}; do\n    if [[ $i =~ ^-?[0-9]+$ ]]; then\n\
    \      if [[ $((i % 2)) != 0 ]]; then\n        sum=$((sum + (i * i)))\n      fi\n\
    \    fi\n  done\n  echo $sum", "  local total=0\n  for i in $1; do\n    if [[\
    \ $i -ge 0 ]] && [[ $i =~ ^[0-9]+$ ]]; then\n      total=$(( $total + ($i * $i)\
    \ ))\n    fi\n  done\n  echo $total", "  sum=0\n  for i in $1\n  do\n    if [[\
    \ $i =~ ^-?[0-9]+$ ]]\n    then\n      if [[ $(( $i % 2 )) -ne 0 ]]\n      then\n\
    \        sum=$(( $sum + $(( $i ** 2 )) ))\n      fi\n    fi\n  done\n  echo $sum",
  "    awk 'BEGIN {sum = 0}\n         {\n            if ($1 % 2 == 1) {\n        \
    \        sum += $1**2\n            }\n         }\n         END {print sum}' <<<\
    \ \"$1\"", "  local input=${1}\n  local result=0\n  for item in $input; do\n \
    \   if [ $item -lt 0 ]; then\n      continue\n    fi\n    if [ $(($item % 2))\
    \ -ne 0 ]; then\n      result=$(($result + $item * $item))\n    fi\n  done\n \
    \ echo \"$result\"", "  if [ -z \"$1\" ]; then\n    echo \"0\"\n  else\n    local\
    \ total=0\n    for i in $1; do\n      if [ \"$i\" -lt 0 ]; then\n        continue\n\
    \      fi\n      if [ \"$(($i % 2))\" -eq 0 ]; then\n        continue\n      fi\n\
    \      local temp=$(($i * $i))\n      total=$(($total + $temp))\n    done\n  \
    \  echo \"$total\"\n  fi", "\tlocal sum=0\n\tfor num in $1\n\tdo\n\t\tif [ \"\
    $num\" -lt 0 ]\n\t\tthen\n\t\t\tcontinue\n\t\tfi\n\t\tnum=$(echo \"$num\" | cut\
    \ -d. -f1)\n\t\tif [ \"$num\" -gt 0 ]\n\t\tthen\n\t\t\t#it's an integer\n\t\t\t\
    if [ $((num % 2)) -eq 1 ]\n\t\t\tthen\n\t\t\t\tsum=$((sum + num * num))\n\t\t\t\
    fi\n\t\tfi\n\tdone\n\techo \"$sum\"", "    let sum=0\n    for num in $1; do\n\
    \        if [[ $num =~ ^-?[0-9]+$ ]]; then\n            if [[ $((num % 2)) -eq\
    \ 1 ]]; then\n                let sum+=(num*num)\n            fi\n        fi\n\
    \    done\n    echo $sum", '    echo "something"', "\t# INSERT CODE HERE\n\t#\
    \ Hint: use the modulo operator\n\tsum=0\n\tfor i in $1\n\tdo\n\t\tif [[ $i =~\
    \ ^[0-9]+$ ]]\n\t\tthen\n\t\t\tif [[ $(( $i % 2 )) -ne 0 ]]\n\t\t\tthen\n\t\t\t\
    \tsum=$(( $sum + ($i * $i) ))\n\t\t\tfi\n\t\tfi\n\tdone\n\techo $sum", "    ret=0\n\
    \    for elt in $1\n    do\n        if [[ $elt =~ ^[0-9]+$ ]]\n        then\n\
    \            ret=$((ret + (elt * elt)))\n        fi\n    done\n    echo $ret",
  "  total=0\n  for num in $@; do\n    if [ \"$num\" -ge 0 ] && [ \"$(($num%2))\"\
    \ -eq 1 ]; then\n      total=$(($total+$num*$num))\n    fi\n  done\n  echo $total",
  "  # Get odd numbers\n  local odd_numbers=$(get_odd_numbers \"$1\")\n  # Get sum\
    \ of squares of odd numbers\n  local sum_of_squares=$(get_sum_of_squares \"$odd_numbers\"\
    )\n  # Double that\n  echo $((2 * sum_of_squares))", "    local sum\n    # your\
    \ code here\n    sum=0\n    for number in $1; do\n        if [[ $number =~ ^-?[0-9]+$\
    \ ]]; then\n            if [[ $(($number % 2)) == 1 ]]; then\n               \
    \ sum=$(($sum + $(($number*$number))))\n            fi\n        fi\n    done\n\
    \    echo $sum", "    sum=0\n    for num in $@; do\n        if [[ $num =~ ^[1-9][0-9]*$\
    \ ]]; then\n            if [[ $((num % 2)) -eq 1 ]]; then\n                sum=$((sum\
    \ + num * num))\n            fi\n        fi\n    done\n    echo $sum", "    input_array=($1)\n\
    \    # This creates an array of individual elements.\n    # So you can refer to\
    \ the elements using their\n    # array index, e.g. input_array[0], input_array[1],\n\
    \    # and so on.\n    # The length of the array is stored in ${#input_array[@]}\n\
    \    sum=0\n    for i in `seq 0 $((${#input_array[@]} - 1))`; do\n        if [[\
    \ $((input_array[i]%2)) == 1 ]]; then\n            sum=$((sum + input_array[i]**2))\n\
    \        fi\n    done\n    echo \"$sum\"", "    if [[ -z \"$1\" ]]; then\n   \
    \     echo 0\n        return\n    fi\n    result=0\n    for item in $1; do\n \
    \       if [[ $item -lt 0 ]]; then\n            continue\n        fi\n       \
    \ if [[ $((item % 2)) == 1 ]]; then\n            result=$((result + item * item))\n\
    \        fi\n    done\n    echo $result", '    # your code here', "    local sum=0\n\
    \    for num in $1; do\n        if [[ $num =~ ^-?[0-9]+$ ]]; then\n          \
    \  if (( ($num % 2) == 1 )); then\n                sum=$(( $sum + ($num * $num)\
    \ ))\n            fi\n        fi\n    done\n    echo $sum", "  # Your code here\n\
    \    list=$1\n    square_list=\"\"\n    for i in $list\n    do\n        if [[\
    \ $i =~ ^[0-9]+$ ]] && [ $i -gt 0 ]\n        then\n            square=$(($i*$i))\n\
    \            square_list+=\"$square \"\n        fi\n    done\n    echo $square_list\n\
    \    echo $(($(echo $square_list | tr \" \" \"+\")))"]
stop_tokens:
- "\n}"
