language: sh
name: HumanEval_131_digits
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local res=1\n  local digit\n  local\
    \ str=$1\n  for (( i=0; i<${#str}; i++ )); do\n    digit=${str:$i:1}\n    if ((\
    \ $digit%2 != 0 )); then\n      res=$((res*digit))\n    fi\n  done\n  echo $res\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local num=\"$1\"\n  local res=1\n\
    \  if [[ $num =~ ^[0-9]+$ ]]; then\n    while [ $num -gt 0 ]; do\n      local\
    \ last_digit=$((num % 10))\n      if [ $((last_digit % 2)) -ne 0 ]; then\n   \
    \     res=$((res * last_digit))\n      fi\n      num=$((num / 10))\n    done\n\
    \  fi\n  echo \"$res\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local sum=1\n  local num\n  for\
    \ num in $(echo \"$1\" | fold -w1); do\n    ((num % 2 == 1)) && ((sum *= num))\n\
    \  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local -i s=0\n  local p=1\n  local\
    \ c\n  while (( $1 > 0 )); do\n    c=$(( $1 % 10 ))\n    if (( c % 2 == 1 ));\
    \ then\n      p=$(( p * c ))\n    fi\n    s=$(( s + c ))\n    1=$(( $1 / 10 ))\n\
    \  done\n  printf \"%d\" $p\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=11 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=9 encoding='utf-8'>
  timestamp: 1660025335
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  a=0\n  for (( i=0; i<${#1}; i++\
    \ )); do\n    (( $(( ${1:$i:1} % 2 )) == 1 )) && (( a+=$(( ${1:$i:1} * 10**i ))\
    \ ))\n  done\n  echo \"$a\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local int=\"$1\"\n  local odd_product=1\n\
    \  local digit\n  while (( int > 0 )); do\n    digit=$(( int % 10 ))\n    if ((\
    \ digit % 2 == 1 )); then\n      odd_product=$(( odd_product * digit ))\n    fi\n\
    \    int=$(( int / 10 ))\n  done\n  echo \"$odd_product\"\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 2
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    # TODO: implement a solution\
    \ here\n    #\n    # Note: The solution must use the following types of statements:\n\
    \    #\n    # * The arithmetic operator `*` (multiply)\n    # * The arithmetic\
    \ operator `%` (modulo)\n    # * The `expr` command with the `--` option\n   \
    \ # * A `while` loop\n    # * A `for` loop\n    # * The conditional statement\
    \ `if`\n    # * A function definition\n    #\n    # Note: You can assume $1 is\
    \ a positive integer.\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp0f76a1q.sh: line 27: syntax error near unexpected token `}''

    /tmp/tmpp0f76a1q.sh: line 27: `}''

    '
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    declare -i product=1\n    for\
    \ i in $(seq 1 ${#1}); do\n        if (($(echo \"${1:i-1:1} % 2\" | bc -l) !=\
    \ 0)); then\n            product=$(($product * ${1:i-1:1}))\n        fi\n    done\n\
    \    echo \"$product\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    # Initialize result variable\
    \ to an empty string\n    local result=\"\"\n    # Loop through each digit\n \
    \   for ((i=0; i<${#1}; i++)); do\n        # If the digit is odd, add it to result\n\
    \        [[ $(( ${1:$i:1} % 2 )) -ne 0 ]] && result+=\"${1:$i:1}\"\n    done\n\
    \    # If result is empty, set it to 0\n    [[ -z $result ]] && result=\"0\"\n\
    \    # Return the product of the digits\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  # $(tr -d \"23456789\" <(echo \"\
    $1\"))\n  # $(echo \"$1\" | tr -d \"23456789\")\n  # $(tr -d \"23456789\" <<<\
    \ \"$1\")\n  # echo \"$1\" | tr -d \"23456789\"\n  echo \"$1\" | tr -d \"23456789\"\
    \n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local -i n=0\n    local i\n \
    \   local -i t\n\n    if [[ \"$1\" =~ ^[0-9]+$ ]]; then\n        for (( i=0; i<${#1};\
    \ i++ )); do\n            t=${1:$i:1}\n            if (( (t % 2) == 1 )); then\n\
    \                (( n = n * t ))\n            fi\n        done\n    fi\n    echo\
    \ \"$n\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local n=$1\n  local product=1\n\
    \  for i in $(echo \"$n\" | grep -o .); do\n    if [[ $((i % 2)) -eq 1 ]]; then\n\
    \      product=$((product * i))\n    fi\n  done\n  if [[ $product -eq 1 ]]; then\n\
    \    echo 0\n  else\n    echo $product\n  fi\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    if [[ $1 =~ ^[0-9]+$ ]]; then\n\
    \        echo $1 | tr -d [:even:] | tr -d 0 | awk '{ if (length($0) > 0) {print\
    \ $0;} else {print \"0\"}}' | tr -d '\\n'\n    else\n        echo \"Invalid input.\"\
    \n    fi\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "tr: invalid character class \u2018even\u2019\n"
  stdout: ''
  timestamp: 1660025330
- exit_code: 0
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  # if all digits are even then return\
    \ 0\n  # else return product of odd digits\n  local number=\"$1\"\n  local answer=1\n\
    \  local all_even=1\n  for (( i=0; i<${#number}; i++ )); do\n    local digit=\"\
    ${number:$i:1}\"\n    if [[ $((digit % 2)) -ne 0 ]]; then\n      all_even=0\n\
    \      answer=$((answer * digit))\n    fi\n  done\n  if [[ $all_even -eq 1 ]];\
    \ then\n    echo 0\n  else\n    echo $answer\n  fi\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 0
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local prod=1\n    local prod_flag=false\n\
    \    for ((i=0; i<${#1}; i++)); do\n        local digit=\"${1:$i:1}\"\n      \
    \  if (( digit % 2 == 1 )); then\n            prod=$((prod * digit))\n       \
    \     prod_flag=true\n        fi\n    done\n    if [ \"$prod_flag\" = false ];\
    \ then\n        prod=0\n    fi\n    echo \"$prod\"\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  echo \"$1\" | grep -o \"[13579]\"\
    \ | tr -d '\\n' | awk '{print $0+0}'\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local integer=\"$1\"\n  local odd_digits=\"\
    \"\n  local even_digits=\"\"\n  local result=\"\"\n  for digit in $(echo $integer\
    \ | sed 's/./& /g'); do\n    if [ $(echo $digit | bc) -eq 0 ]; then\n      continue\n\
    \    fi\n    if [ $(($digit % 2)) -eq 0 ]; then\n      even_digits=\"$even_digits\
    \ $digit\"\n    else\n      odd_digits=\"$odd_digits $digit\"\n    fi\n  done\n\
    \  result=$(echo $odd_digits | sed 's/ /\\*/g')\n  if [ -z \"$result\" ]; then\n\
    \    result=\"0\"\n  fi\n  echo $result\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local answer=$(echo ${1} | sed\
    \ -r 's/\\B[02468]/0/g' | sed -r 's/[^0]/&*/g' | sed -r 's/\\*$//')\n    echo\
    \ $answer\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local DIGITS=$(echo $1 | fold\
    \ -w1)\n    local RESULT=1\n    for DIGIT in $DIGITS; do\n        if [ $(($DIGIT\
    \ % 2)) -ne 0 ]; then\n            RESULT=$(($RESULT * $DIGIT))\n        fi\n\
    \    done\n    if [ $RESULT -eq 1 ]; then\n        RESULT=0\n    fi\n    echo\
    \ $RESULT\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  echo \"$1\" | grep -o '[13579]'\
    \ | tr -d '\\n' | awk '{print length($0) ? $0 : 0}'\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  # Check input is an integer\n \
    \ if [[ \"$1\" =~ ^-?[0-9]+$ ]]; then\n    # Local variables\n    local -a digits=()\n\
    \    local -i product=1\n    local -i n=\"$1\"\n    # Create array from digits\n\
    \    while (( n > 0 )); do\n      digits+=(\"$(( n % 10 ))\")\n      n=\"$(( n\
    \ / 10 ))\"\n    done\n    # Calculate product of odd digits\n    for digit in\
    \ \"${digits[@]}\"; do\n      if (( digit % 2 != 0 )); then\n        product=\"\
    $(( product * digit ))\"\n      fi\n    done\n    # Return output\n    printf\
    \ \"%s\" \"$product\"\n  fi\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    # Your code here\n    echo $1\
    \ | sed -E 's/[^13579]//g' | awk '{sum=1; for(i=1;i<=NF;i++) {sum*=$i}; print\
    \ sum}'\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n \
    \   [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n\
    \    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") =\
    \ \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  if [[ $1 =~ ^[0-9]+$ ]]; then\n\
    \    if [[ $1 =~ ^[0]*$ ]]; then\n      echo \"0\"\n    else\n      echo \"$1\"\
    \ | \\\n        tr -d \"0\" | \\\n        tr -d \"2\" | \\\n        tr -d \"4\"\
    \ | \\\n        tr -d \"6\" | \\\n        tr -d \"8\" | \\\n        sed 's/^[0]*//'\
    \ | \\\n        paste -sd'*' | \\\n        bc\n    fi\n  else\n    echo \"0\"\n\
    \  fi\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[\
    \ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n \
    \   [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") =\
    \ \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local odd_sum=1\n    local even_sum=0\n\
    \    for (( i=0; i<${#1}; i++ )); do\n        local char=${1:$i:1}\n        if\
    \ [ $(( char % 2 )) -eq 0 ]; then\n            (( even_sum += char ))\n      \
    \  else\n            (( odd_sum *= char ))\n        fi\n    done\n    if [ $even_sum\
    \ -eq 0 ]; then\n        echo $odd_sum\n    else\n        echo 0\n    fi\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  declare  -i num=$1\n  declare \
    \   product=1\n  declare -i digit\n  while [[ $num -gt 0 ]]; do\n    digit=$((num\
    \ % 10))\n    num=$((num / 10))\n    if [[ $((digit % 2)) == 1 ]]; then\n    \
    \  product=$((product * digit))\n    fi\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local product=1\n\n    for ((\
    \ i=0; i<${#1}; i++ )); do\n        local digit=${1:$i:1}\n        if [[ $digit\
    \ =~ ^[13579]$ ]]; then\n            product=$((product * digit))\n        fi\n\
    \    done\n\n    echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  if [[ $1 =~ ^-?[0-9]+$ ]]; then\n\
    \    echo \"$1\" | sed 's/[02468]//g' | sed 's/^$/0/' | sed 's/^0*/1/' | sed 's/0*$//'\
    \ | tr -d \"\\n\"\n  else\n    echo \"'$1' is not an integer\"\n  fi\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local prod=1\n    local digit\n\
    \    local number=$1\n    while [[ $number > 0 ]]; do\n        digit=$((number\
    \ % 10))\n        if [[ $((digit % 2)) == 1 ]]; then\n            prod=$((prod\
    \ * digit))\n        fi\n        number=$((number / 10))\n    done\n    echo $prod\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    num=$1\n    prod=1\n    while\
    \ [ $num -gt 0 ]; do\n        temp=$(($num % 10))\n        if [ $(($temp % 2))\
    \ -ne 0 ]; then\n            prod=$(($prod * $temp))\n        fi\n        num=$(($num\
    \ / 10))\n    done\n    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  test $1 -eq 0 && echo 0 && return\
    \ 0\n  num=$1\n  while [ $num -gt 0 ]; do\n    digit=$((num % 10))\n    test $((digit\
    \ % 2)) -eq 1 && echo -n $digit\n    num=$((num / 10))\n  done\n  echo\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  if [[ $1 =~ ^[0-9]+$ ]]; then\n\
    \    declare -i product=1\n    for (( i=0; i<${#1}; i++ )); do\n      [[ ${1:$i:1}\
    \ =~ ^[13579]$ ]] && product=$(( product * ${1:$i:1} ))\n    done\n    echo \"\
    $product\"\n  else\n    echo \"Error: argument must be an integer.\"\n  fi\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local n=\"$1\"\n  local product=1\n\
    \  local i\n  for ((i=0; i<${#n}; i++)); do\n    local digit=\"${n:$i:1}\"\n \
    \   local remainder=$((digit % 2))\n    if [[ $remainder -eq 1 ]]; then\n    \
    \  product=$((product * digit))\n    fi\n  done\n  echo \"$product\"\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  for x in $(echo $1 | sed 's/./&\
    \ /g'); do\n    echo $x | grep -q '[13579]'\n    if [ $? -eq 0 ]; then\n     \
    \ mul=\"$(($mul * $x))\"\n    fi\n  done\n  echo \"$mul\"\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuclukaup.sh: line 17: * 5: syntax error: operand expected (error
    token is "* 5")

    '
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n\tlocal num=$1\n\tlocal n\n\tlocal\
    \ product=1\n\tlocal zero='0'\n\tlocal digit\n\n\tif [ -z \"$num\" ]; then\n\t\
    \techo \"num is empty\"\n\t\treturn 0\n\tfi\n\n\twhile [ $num -gt 0 ]; do\n\t\t\
    digit=$(( num % 10 ))\n\t\tif [ $digit -ne $zero ]; then\n\t\t\tproduct=$(( $product\
    \ * $digit ))\n\t\tfi\n\t\tnum=$(( num / 10 ))\n\tdone\n\n\techo $product\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    echo $1 | grep -Eo '[13579]'\
    \ | paste -sd '*' | bc\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    num=$1\n    ret=1\n    while\
    \ [ $num -gt 0 ]; do\n        digit=$((num % 10))\n        if [ $((digit % 2))\
    \ -eq 1 ]; then\n            ret=$((ret * digit))\n        fi\n        num=$((num\
    \ / 10))\n    done\n    echo $ret\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    echo $1 | grep -o [13579] | tr\
    \ -d '\\n' | awk '{print $0+0}'\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  if [[ \"$1\" =~ ^[0-9]+$ ]]; then\n\
    \    local answer=1\n    for ((i=0; i<${#1}; i++)); do\n      local digit=${1:$i:1}\n\
    \      if [[ $digit%2 -ne 0 ]]; then\n        answer=$((answer*digit))\n     \
    \ fi\n    done\n    echo $answer\n  else\n    echo \"0\"\n  fi\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local int=$1\n    local prod=1\n\
    \    local num\n    while [ $int -gt 0 ]; do\n        num=$((int % 10))\n    \
    \    if [ $((num % 2)) -eq 1 ]; then\n            prod=$((prod * num))\n     \
    \   fi\n        int=$((int / 10))\n    done\n    if [ $prod -eq 1 ]; then\n  \
    \      prod=0\n    fi\n    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local -i str_len i product=1\n\
    \  local ascii_subtract=\"48\"  # ascII 0 is 48\n  local product=1\n\n  str_len=$(echo\
    \ $1 | wc -c)\n\n  for ((i=1; i < str_len; i++)); do\n    local digit=$(echo $1\
    \ | cut -c$i)\n    local -i digit=$(echo $digit)\n    if [ $((digit % 2)) -ne\
    \ 0 ]; then\n      ((product *= digit))\n    fi\n  done\n\n  echo $product\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local total=1\n    local digit=0\n\
    \    for ((i=0; i<${#1}; i++)); do\n        digit=${1:$i:1}\n        if [[ $((digit\
    \ % 2)) -ne 0 ]]; then\n            total=$((total * digit))\n        fi\n   \
    \ done\n    echo $total\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local number=\"$1\"\n    local\
    \ sum=1\n    while [[ $number -gt 0 ]]; do\n        local digit=$((number % 10))\n\
    \        if [[ $((digit % 2)) -ne 0 ]]; then\n            sum=$((sum * digit))\n\
    \        fi\n        number=$((number / 10))\n    done\n    echo \"$sum\"\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local num=$1 prod=1\n    while\
    \ [ $num -gt 0 ]; do\n        digit=$((num % 10))\n        if [ $((digit % 2))\
    \ -ne 0 ]; then\n            prod=$((prod * digit))\n        fi\n        num=$((num\
    \ / 10))\n    done\n    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  number=\"$1\"\n  product=1\n  for\
    \ digit in $(grep -o . <<< \"${number}\"); do\n    if ! [[ ${digit} =~ ^[0-9]+$\
    \ ]]; then\n      return 1\n    fi\n    if (( digit%2 == 1 )); then\n      product=$((product*digit))\n\
    \    fi\n  done\n  echo \"${product}\"\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  n=$1\n  result=1\n  while [ $n\
    \ -gt 0 ]; do\n    digit=$(( n % 10 ))\n    n=$(( n / 10 ))\n    if [ $(( digit\
    \ % 2 )) -ne 0 ]; then\n      result=$(( result * digit ))\n    fi\n  done\n \
    \ echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local num=$1\n    local sum=1\n\
    \    local temp\n\n    while [ $num -gt 0 ]; do\n        temp=$((num % 10))\n\
    \        ((num /= 10))\n        ((temp % 2 == 1)) && ((sum *= temp))\n    done\n\
    \n    echo $sum\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local result=1\n    for ((i=0;\
    \ i<${#1}; i++)); do\n        local current=${1:$i:1}\n        if [[ $current\
    \ -eq 0 ]]; then\n            continue\n        elif [[ $((current % 2)) -eq 1\
    \ ]]; then\n            result=$((result * current))\n        fi\n    done\n \
    \   if [[ $result -eq 1 ]]; then\n        echo 0\n    else\n        echo $result\n\
    \    fi\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n \
    \   [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n\
    \    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") =\
    \ \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 0
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local string_digits=\"$(echo $1\
    \ | sed 's/\\(.\\)/\\1 /g')\"\n  local digit\n  local product=1\n  local all_even=true\n\
    \  for digit in $string_digits; do\n    if (( digit % 2 == 1 )); then\n      all_even=false\n\
    \      product=$(( product * digit ))\n    fi\n  done\n  if $all_even; then\n\
    \    echo 0\n  else\n    echo $product\n  fi\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local d\n    local res=1\n  \
    \  local re\n    re='^[0-9]+$'\n    if ! [[ $1 =~ $re ]] ; then\n        echo\
    \ \"error: Not a number\" >&2; exit 1\n    fi\n    # iterate through all digits\n\
    \    for d in $(echo $1 | grep -o .); do\n        if [[ $d -eq 0 ]]; then\n  \
    \          continue\n        fi\n        # if odd number, multiply it to accumulator,\
    \ otherwise continue\n        if [[ $((d % 2)) -eq 1 ]]; then\n            res=$((res\
    \ * d))\n        fi\n    done\n    echo $res\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local number=$1\n    local digit\n\
    \    local sum=1\n    while [[ $number > 0 ]]; do\n        digit=$((number % 10))\n\
    \        number=$((number / 10))\n        if [[ $((digit % 2)) -eq 1 ]]; then\n\
    \            sum=$((sum * digit))\n        fi\n    done\n    echo $sum\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local sum=1\n  for i in $(echo\
    \ \"$1\" | sed 's/./& /g'); do\n    if (( i % 2 != 0 )); then\n      (( sum *=\
    \ i ))\n    fi\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local result=1\n  local num=\"\
    $1\"\n  local len=${#num}\n  for ((i=0; i<$len; i++)); do\n    local digit=${num:$i:1}\n\
    \    if [ $(isodd $digit) -eq 1 ]; then\n      result=$(($result * $digit))\n\
    \    fi\n  done\n  echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpucvzhee2.sh: line 19: isodd: command not found

    /tmp/tmpucvzhee2.sh: line 19: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n\tlocal n=$1\n\tlocal num_digits=$(echo\
    \ \"$n\" | wc -c)\n\tlocal sum=0\n\tlocal i=1\n\twhile [ $i -lt $num_digits ];\
    \ do\n\t\tlocal digit=$(echo \"$n\" | cut -c $i)\n\t\tif [ $((digit % 2)) -eq\
    \ 1 ]; then\n\t\t\tsum=$((sum + digit))\n\t\tfi\n\t\ti=$((i + 1))\n\tdone\n\t\
    echo \"$sum\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    echo \"$1\" | grep '[13579]'\
    \ -o | tr -d '\\n' | sed 's/.*/&1/' | bc\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    if [[ -z \"$1\" ]]; then\n  \
    \      echo \"usage: digits <integer>\"\n        return 1\n    fi\n    local product=1\n\
    \    local digit\n    for digit in $(digitize \"$1\"); do\n        if (( digit\
    \ % 2 == 1 )); then\n            product=$(( product * digit ))\n        fi\n\
    \    done\n    echo \"$product\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprwp270da.sh: line 20: digitize: command not found

    '
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local sum=1\n\n    for ((i=0;\
    \ i<${#1}; i++)); do\n        if (( $((10#${1:$i:1} % 2)) )); then\n         \
    \   sum=$(( sum * 10#${1:$i:1} ))\n        fi\n    done\n\n    echo $sum\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local total=1\n  local n=\"\"\n\
    \  for (( i=0; i<${#1}; i++ )); do\n    if [[ \"${1:$i:1}\" =~ [13579] ]]; then\n\
    \      n+=\"${1:$i:1}\"\n    fi\n  done\n  [[ -z \"$n\" ]] && echo \"0\" || echo\
    \ \"$n\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  if [ $# -ne 1 ]; then\n    echo\
    \ \"Usage: $0 string\"\n    return 1\n  fi\n  echo \"$1\" | sed -e 's/[02468]//g'\
    \ | fold -w1 | paste -sd* | bc\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local -i len=$(echo \"$1\" |\
    \ wc -c)\n    local -i num\n    local -i sum=0\n    local -i prod\n    local tmp\n\
    \    for (( i=1; i<$len; i++ )); do\n        tmp=$(echo \"$1\" | cut -c $i)\n\
    \        if [[ $tmp == [13579] ]]; then\n            prod=$tmp*10\n          \
    \  sum=$sum+$prod\n        fi\n    done\n    echo $sum\n}\n\ncandidate() {\n \
    \   digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  sum=1\n  for digit in $(echo $1\
    \ | sed 's/./& /g'); do\n    if [[ $(( digit % 2 )) == 1 ]]; then\n      let sum=sum*digit\n\
    \    fi\n  done\n  echo $sum\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local digits=\"$1\"\n  local product=1\n\
    \  for i in $(echo $digits | sed -e 's/\\(.\\)/\\1 /g'); do\n    local num=$i\n\
    \    if (($num % 2 == 1)); then\n      product=$((product * num))\n    fi\n  done\n\
    \  echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 2
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    # Your code here\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0h_eouks.sh: line 15: syntax error near unexpected token `}''

    /tmp/tmp0h_eouks.sh: line 15: `}''

    '
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    integer=$1\n    product=1\n \
    \   while [ \"$integer\" -gt 0 ]; do\n        ((remainder = integer % 10))\n \
    \       integer=$((integer / 10))\n        if [ \"$remainder\" -gt 0 ] && [ $((remainder\
    \ % 2)) -ne 0 ]; then\n            product=$((product * remainder))\n        fi\n\
    \    done\n    echo \"$product\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local i prod out\n  prod=1\n  out=\"\
    \"\n  # Traverse each digit\n  for ((i=0; i<${#1}; i++)); do\n    # Calc product\
    \ of odd numbers\n    if [ $(( $1 % 2 )) -eq 1 ]; then\n      prod=$(( prod *\
    \ ${1:$i:1} ))\n    fi\n  done\n  # If no odd digits, output is 0\n  if [ \"$prod\"\
    \ -eq 1 ]; then\n    echo 0\n  else\n    echo $prod\n  fi\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  product=1\n  for d in $(echo \"\
    $1\" | sed -e 's/\\(.\\)/\\1 /g'); do\n    if [ $(($d % 2)) -ne 0 ]; then\n  \
    \    product=$(($product * $d))\n    fi\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    if [[ ! $1 =~ ^[0-9]+$ ]]; then\n\
    \        echo \"$0: ${1:-missing argument}: unparseable integer\" >&2\n      \
    \  return 1\n    fi\n    local result=1\n    for (( i=0; i<${#1}; i++ )); do\n\
    \        local d=\"${1:i:1}\"\n        if (( d%2 )); then\n            (( result*=d\
    \ ))\n        fi\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local n=$1\n    local res=1\n\
    \    while [ $n -gt 0 ]; do\n        res=$(($res * ($n % 10)))\n        n=$(($n\
    \ / 10))\n    done\n    echo $res\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    # this assumes that all input\
    \ will be integers\n    # Get all digits\n    local digits=$(echo \"$1\" | grep\
    \ -o \".\" | egrep \"[13579]\")\n    local result=1\n    # Calculate the product\
    \ of all digits\n    for d in $digits; do\n        result=$((result * d))\n  \
    \  done\n    echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    if [[ -z \"$1\" ]]; then\n  \
    \      echo \"0\"\n        return\n    fi\n    if [[ $1 -lt 0 ]]; then\n     \
    \   echo \"Please provide a positive integer\"\n        return\n    fi\n    local\
    \ prod=1\n    for ((i=0; i<${#1}; i++)); do\n        local digit=${1:$i:1}\n \
    \       if [[ $digit -ne 0 ]]; then\n            if [[ $((digit % 2)) -ne 0 ]];\
    \ then\n                prod=$((prod * digit))\n            fi\n        fi\n \
    \   done\n    echo \"$prod\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local number=$1 result=1\n  while\
    \ [[ $number -gt 0 ]]; do\n    local digit=$(( number % 10 ))\n    if [[ $(( digit\
    \ % 2 )) -eq 1 ]]; then\n      result=$(( result * digit ))\n    fi\n    number=$((\
    \ number / 10 ))\n  done\n  echo $result\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  [ $# -eq 0 ] && echo \"0\" && return\
    \ 1\n\n  i=0\n  while read line; do\n    s=\"$(echo $line | sed -e 's/\\(.\\)/\\\
    1\\n/g' | grep -v -E '^[[:digit:]]*[02468]$')\"\n    if [ -n \"$s\" ]; then\n\
    \      i=$((i + s))\n    fi\n  done <<< \"$1\"\n\n  [ $i -eq 0 ] && echo \"0\"\
    \ && return 2\n  echo \"$i\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbrvm2c84.sh: line 20: 5

    1: syntax error in expression (error token is "1")

    '
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"No argument given\"\n    return 1\n  fi\n  if [[ \"$1\" =~ ^[0-9]+$ ]]; then\n\
    \    echo \"$1\" | grep -o '[13579]' | tr -d '\\n' | awk '{l=length($0);for(i=1;i<=l;i++){a*=substr($0,i,1)}}END{print\
    \ a}'\n  else\n    echo \"Argument '$1' is not an integer\"\n    return 1\n  fi\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    if [ -z \"$1\" ]; then\n    \
    \    echo \"0\"\n        return 0\n    fi\n    number=\"$1\"\n    result=1\n \
    \   if [ ${#number} -eq 1 ]; then\n        if (( $number % 2 )); then\n      \
    \      echo \"$number\"\n            return 0\n        else\n            echo\
    \ \"0\"\n            return 0\n        fi\n    fi\n    digits \"${number%?}\"\n\
    \    last=\"${number: -1}\"\n    if (( $last % 2 )); then\n        result=$((result\
    \ * last))\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    if [[ $1 =~ [0-9]+ ]]; then\n\
    \        if [[ $1 =~ [02468] ]]; then\n            echo \"0\"\n        else\n\
    \            if [[ $1 =~ [^0-9] ]]; then\n                echo \"error\"\n   \
    \         else\n                echo $1 | sed 's/[02468]//g' | awk '{\n      \
    \          prod = 1\n                for (i = 1; i <= NF; i++)\n             \
    \       prod *= $i\n                print prod\n                }'\n         \
    \   fi\n        fi\n    else\n        echo \"error\"\n    fi\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local count total\n  total=1\n\
    \  for((count=0; count<${#1}; count++)); do\n    if [[ \"${1:$count:1}\" -eq \"\
    0\" ]]; then\n      continue\n    elif [[ \"${1:$count:1}\" -gt \"0\" ]] && [[\
    \ \"${1:$count:1}\" -lt \"10\" ]]; then\n      if [[ \"${1:$count:1}\" -eq \"\
    1\" ]] || [[ \"${1:$count:1}\" -eq \"3\" ]] || [[ \"${1:$count:1}\" -eq \"5\"\
    \ ]] || [[ \"${1:$count:1}\" -eq \"7\" ]] || [[ \"${1:$count:1}\" -eq \"9\" ]];\
    \ then\n        total=$((total * ${1:$count:1}))\n      fi\n    else\n      echo\
    \ \"Error: Invalid number: ${1:$count:1}\"\n      exit 1\n    fi\n  done\n  echo\
    \ $total\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    if [[ \"$1\" =~ [^0-9] ]]; then\n\
    \        echo \"Invalid integer: $1\" >&2\n        exit 1\n    fi\n    local total=1\n\
    \    for digit in $1; do\n        (( $digit % 2 )) && (( total *= $digit ))\n\
    \    done\n    echo $total\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local odd=1\n    echo $1 | while\
    \ read i; do\n        if [[ $((i % 2)) -eq 1 ]]; then\n            odd=$((odd\
    \ * i))\n        fi\n    done\n    echo $odd\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local number=${1}\n    local\
    \ i\n\n    for ((i=0; i<${#number}; i++)); do\n        local digit=${number:$i:1}\n\
    \        if [[ $((digit % 2)) -ne 0 ]]; then\n            number=$((number * digit))\n\
    \        fi\n    done\n\n    echo $number\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  echo $1 | grep -o [13579] | tr\
    \ -d \"\\n\" | wc -m\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local r=\"$1\"\n    local p=1\n\
    \    local b\n    while ((r)); do\n        ((b=r%10))\n        ((b&1)) && ((p*=b))\n\
    \        ((r/=10))\n    done\n    echo \"$p\"\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    n=\"$1\"\n    if [[ $n =~ ^-?[0-9]+$\
    \ ]]; then\n        r=\"0\"\n        for d in $(echo \"$n\" | grep -o .); do\n\
    \            if [[ $d =~ ^[13579]$ ]]; then\n                r=$(( $r * $d ))\n\
    \            fi\n        done\n        echo \"$r\"\n    else\n        echo \"\
    digits: usage: digits integer\"\n    fi\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local result=\"1\"\n  local length=\"\
    ${#1}\"\n  local i\n  for ((i=0; i<length; i++)); do\n    local j=\"${1:i:1}\"\
    \n    if [[ j%2 -eq 1 ]]; then\n      result=$((result*j))\n    fi\n  done\n \
    \ echo \"$result\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  echo \"$1\" | sed 's/[02468]//g'\
    \ | tr -d '\\n'\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  if [ $# -ne 1 ]; then\n    echo\
    \ \"missing argument\"\n    return 1\n  fi\n  local num=\"$1\"\n  local odd=\"\
    \"\n  while [ \"$num\" -gt 0 ]; do\n    local digit=$(( num % 10 ))\n    if [\
    \ $(( digit % 2 )) -ne 0 ]; then\n      odd=\"$odd$digit\"\n    fi\n    num=$((\
    \ num / 10 ))\n  done\n  echo $odd\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local prod=1\n\n  for (( i=0; i<${#1};\
    \ i++ )); do\n    if [[ $(( ${1:$i:1} % 2 )) -ne 0 ]]; then\n      prod=$(( $prod\
    \ * ${1:$i:1} ))\n    fi\n  done\n\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 0
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local odd_digits=()\n  local product=1\n\
    \  for (( i=0; i<${#1}; i++ )); do\n    local digit=\"${1:$i:1}\"\n    [[ $((\
    \ digit % 2 )) -eq 1 ]] && odd_digits+=( $digit )\n  done\n  if [[ ${#odd_digits[@]}\
    \ -eq 0 ]]; then\n    echo 0\n  else\n    for i in \"${odd_digits[@]}\"; do\n\
    \      product=$(( product * i ))\n    done\n    echo $product\n  fi\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local product=1\n  for digit in\
    \ $(echo $1 | grep -o .); do\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n  done\n  echo $product\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    if [[ ! $1 =~ ^[0-9]+$ ]]; then\n\
    \        echo \"$1 is not an integer\" >&2\n        return 1\n    fi\n    if [[\
    \ $1 -eq 0 ]]; then\n        echo \"$1 is zero\" >&2\n        return 1\n    fi\n\
    \    prod=1\n    for (( i=0; i<${#1}; i++ )); do\n        digit=${1:$i:1}\n  \
    \      if [[ $digit -ne 0 ]]; then\n            if [[ $(( digit % 2 )) -eq 1 ]];\
    \ then\n                prod=$(( prod * digit ))\n            fi\n        fi\n\
    \    done\n    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local product=1\n    for digit\
    \ in $(echo $1 | grep -o .); do\n        if [[ $(( $digit % 2 )) == 1 ]]; then\n\
    \            product=$(( $product * $digit ))\n        fi\n    done\n    echo\
    \ $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  if [[ -z \"$1\" ]]; then return;\
    \ fi\n  if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then return; fi\n  local -i n=\"$1\"\n\
    \  while n; do\n    local -i digit=\"${n}%10\"\n    (( digit % 2 == 1 )) && printf\
    \ '%d' \"$digit\"\n    (( n /= 10 ))\n  done\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwszixngw.sh: line 17: n: command not found

    '
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local num=0\n  for d in $(echo\
    \ \"$1\" | grep -o .); do\n    if [ $((d % 2)) -ne 0 ]; then\n      num=$((num\
    \ * d))\n    fi\n  done\n  echo \"$num\"\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 0
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local num=$1\n  local str=\"\"\n\
    \  local prod=1\n  while ((num > 0)); do\n    local digit=$((num % 10))\n    if\
    \ ((digit % 2)); then\n      str=\"$digit$str\"\n      prod=$((prod * digit))\n\
    \    fi\n    num=$((num / 10))\n  done\n  if [[ -z \"$str\" ]]; then\n    echo\
    \ \"0\"\n  else\n    echo \"$prod\"\n  fi\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local -i sum=1\n  local s=$1\n\
    \  while [ \"$s\" -gt 0 ]; do\n    local d=$((s % 10))\n    [ $((d % 2)) -ne 0\
    \ ] && sum=$((sum * d))\n    s=$((s / 10))\n  done\n  echo $sum\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local -i out=1\n  local -a d=(\
    \ $(echo \"$1\" | sed -e 's/./& /g') )\n  for c in \"${d[@]}\"; do\n    if [[\
    \ \"$c\" -eq 0 ]]; then\n      out=0\n      break\n    fi\n    if [[ \"$c\" -lt\
    \ 0 ]]; then\n      (( out *= c ))\n    fi\n  done\n  echo \"$out\"\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  if [[ $1 == *[^0-9]* ]]; then\n\
    \    echo -1;\n    return;\n  fi\n\n  local res=1\n  for (( i=0; i<${#1}; i++\
    \ )); do\n    local num=${1:$i:1}\n    if (( num % 2 == 1 )); then\n      res=$((\
    \ res * num ))\n    fi\n  done\n\n  echo $res\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local odd_digits=\"1 3 5 7 9\"\n\
    \  for num in $(echo $1 | sed 's/./& /g'); do\n    if [[ $odd_digits =~ $num ]];\
    \ then\n      echo -n $num\n    fi\n  done\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local odd_digits=$(echo \"$1\"\
    \ | sed 's/[02468]//g')\n  [ -z \"$odd_digits\" ] && echo \"0\" || echo \"$odd_digits\"\
    \n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n\tproduct=1\n\tfor i in $(echo $1\
    \ | sed 's/./ &/g')\n\tdo\n\t\tif [ $(( $i % 2 )) -ne 0 ]\n\t\tthen\n\t\t\tproduct=$((\
    \ product * i ))\n\t\tfi\n\tdone\n\techo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local result=1\n\n  for (( i=0;\
    \ i<${#1}; i++ )); do\n    local num=$(echo \"${1:$i:1}\")\n    if [ $(($num %\
    \ 2)) -ne 0 ]; then\n      result=$(($result * $num))\n    fi\n  done\n\n  echo\
    \ $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  number=$1\n\n  array=$(echo $number\
    \ | fold -w1)\n  odd_digits=()\n  for i in $array; do\n    if [ $(($i % 2)) -ne\
    \ 0 ]; then\n      odd_digits+=($i)\n    fi\n  done\n\n  if [ ${#odd_digits[@]}\
    \ -gt 0 ]; then\n    product=$(echo \"${odd_digits[@]}\" | sed 's/ /\\*\\*/g'\
    \ | bc)\n  else\n    product=0\n  fi\n\n  echo $product\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local total=1\n\n    for (( i=0;\
    \ i<${#1}; i++ )); do\n        digit=\"${1:$i:1}\"\n        if (( digit % 2 !=\
    \ 0 )); then\n            total=$(( total * digit ))\n        fi\n    done\n\n\
    \    echo \"$total\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n\
    \        echo \"Not a number\"\n        return\n    fi\n    sum=1\n    while [\
    \ \"$1\" -gt 0 ]; do\n        # get right-most digit\n        digit=$(( $1 % 10\
    \ ))\n        # drop right-most digit\n        1=$(( ( $1 - $digit ) / 10 ))\n\
    \        if [ $digit -gt 0 ]; then\n            sum=$(( $sum * $digit ))\n   \
    \     fi\n    done\n    echo $sum\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=37 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=14 encoding='utf-8'>
  timestamp: 1660025335
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  if [[ ! \"$1\" =~ ^[0-9]+$ ]];\
    \ then\n    echo \"Error: Invalid integer\"\n    return 1\n  fi\n  local total=1\n\
    \  for i in $(echo \"$1\" | sed 's/./& /g'); do\n    if [[ $((i % 2)) -ne 0 ]];\
    \ then\n      total=$((total * i))\n    fi\n  done\n  echo \"$total\"\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local num=$1\n    local product=1\n\
    \    for (( i=0; i<${#num}; i++ )); do\n        local digit=\"${num:$i:1}\"\n\
    \        if (( digit % 2 == 1 )); then\n            (( product *= digit ))\n \
    \       fi\n    done\n    echo $product\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    result=1\n    while [[ $1 -gt\
    \ 0 ]]; do\n        mod=$(( $1 % 10 ))\n        if [[ $mod -ne 0 ]] && [[ $((\
    \ $mod % 2 )) -ne 0 ]]; then\n            result=$(( $result * $mod ))\n     \
    \   fi\n        1=$(( $1 / 10 ))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=34 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=8 encoding='utf-8'>
  timestamp: 1660025335
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    num=$1\n    product=1\n    for\
    \ n in $(echo $num | grep -o .); do\n        [[ $((n % 2)) -eq 1 ]] && product=$((product\
    \ * n))\n    done\n    [[ $product -eq 1 ]] && echo 0 || echo $product\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local n=\"$1\"\n  local prod=1\n\
    \  for (( i=0; i<${#n}; i++ )); do\n    local digit=${n:$i:1}\n    # Check if\
    \ digit is odd\n    if (( digit % 2 )); then\n      prod=$(( prod * digit ))\n\
    \    fi\n  done\n  echo \"$prod\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local result=1\n    for (( i=0;\
    \ i<${#1}; i++ )); do\n        local char=${1:$i:1}\n        if [[ $char -gt 0\
    \ ]] && [[ $char -lt 10 ]]; then\n            if [[ $((char % 2)) -eq 1 ]]; then\n\
    \                result=$((result * char))\n            fi\n        fi\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local int=$1\n  local output=1\n\
    \  local remainder=0\n  local temp=0\n  while [[ $int -gt 0 ]]; do\n    remainder=$((int\
    \ % 10))\n    if [[ $remainder -ne 0 ]] && [[ $((remainder % 2)) -ne 0 ]]; then\n\
    \      output=$((output * remainder))\n    fi\n    int=$((int / 10))\n  done\n\
    \  echo $output\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local INT_REGEX=\"^[0-9]+$\"\n\
    \    if [[ $1 =~ $INT_REGEX ]]; then\n        local str=$1\n        local product=$((\
    \ ${str:0:1} * ${str:1:1} * ${str:2:1} ))\n        echo $product\n    else\n \
    \       echo \"Error: input is not an integer.\"\n    fi\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpefv9610w.sh: line 17: 5 *  *  : syntax error: operand expected
    (error token is "*  ")

    '
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    for (( i=0; i<${#1}; i++ ))\n\
    \    do\n        (( ${1:$i:1} % 2 != 0 )) && (( product = product * ${1:$i:1}\
    \ ))\n    done\n    (( product == 0 )) && echo 0 || echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local num=\"$1\"\n  local sum=1\n\
    \  while [ $num -gt 0 ]; do\n    local digit=$((num % 10))\n    if [ $((digit\
    \ % 2)) -ne 0 ]; then\n      sum=$((sum * digit))\n    fi\n    num=$((num / 10))\n\
    \  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  set -- $(echo \"$1\" | grep -o\
    \ .)\n  local sum=1\n  for x; do [[ $x%2 -eq 1 ]] && sum=$((sum*x)); done\n  echo\
    \ $sum\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n  \
    \  [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n\
    \    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") =\
    \ \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  [[ $1 -eq 0 ]] && echo \"0\" &&\
    \ return 0\n  local -i prod=1\n  local tmp\n  for (( num=$1; num>0; num/=10 ));\
    \ do\n    tmp=$((num%10))\n    (( tmp%2 )) && (( prod*=tmp ))\n  done\n  echo\
    \ \"$prod\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"Usage: digits <integer>\"\n    return 1\n  fi\n  echo \"$1\" | sed 's/[^13579]//g'\
    \ | tr -d '\\n'\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    a=$1\n    result=\"\"\n    while\
    \ [ $a -gt 0 ]; do\n        remainder=$((a % 10))\n        if [ $((remainder %\
    \ 2)) -ne 0 ]; then\n            if [ -z \"$result\" ]; then\n               \
    \ result=\"$remainder\"\n            else\n                result=\"$result*$remainder\"\
    \n            fi\n        fi\n        a=$((a / 10))\n    done\n    if [ -z \"\
    $result\" ]; then\n        echo \"0\"\n    else\n        echo \"$result\"\n  \
    \  fi\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[\
    \ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n \
    \   [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") =\
    \ \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  n=$1\n  d=0\n  if [[ $((n % 2))\
    \ == 0 ]]; then\n    d=0\n  else\n    d=$n\n  fi\n  for i in $(echo $n | grep\
    \ -o .); do\n    if [[ $((i % 2)) == 0 ]]; then\n      d=$((d * 0))\n    else\n\
    \      d=$((d * i))\n    fi\n  done\n  echo $d\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local number=$1\n  local result=1\n\
    \  local digit\n  while [ \"$number\" -gt 0 ]; do\n    digit=$(( number % 10 ))\n\
    \    number=$(( number / 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n    \
    \  result=$(( result * digit ))\n    fi\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n\tn=\"$1\"\n\tcount=0\n\tfor (( i=0;\
    \ i<${#n}; i++ )); do\n\t\ttest=$((${n:$i:1} % 2))\n\t\tif [ $test -ne 0 ]; then\n\
    \t\t\tcount=$((count + ${n:$i:1}))\n\t\tfi\n\tdone\n\techo $count\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local out=1\n  local array=()\n\
    \  for (( i=0; i<${#1}; i++ )); do\n    local digit=\"${1:$i:1}\"\n    if (( $digit\
    \ % 2 )); then\n      (( out *= $digit ))\n    fi\n  done\n  if (( out == 1 ));\
    \ then\n    echo 0\n  else\n    echo $out\n  fi\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    result=1\n    for ((i=0; i<${#1};\
    \ i++)); do\n        digit=\"${1:$i:1}\"\n        (( digit % 2 )) && (( result\
    \ *= digit ))\n    done\n    echo $result\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  out=1\n  regex='^[0-9]+$'\n  if\
    \ [[ $1 =~ $regex ]]; then\n    for (( i=0; i<${#1}; i++ )); do\n      if [[ ${1:$i:1}\
    \ =~ ^[13579]+$ ]]; then\n        (( out *= ${1:$i:1} ))\n      fi\n    done\n\
    \  else\n    out=0\n  fi\n  echo $out\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  (( $1 < 0 )) && return\n  local\
    \ digits=$(echo $1 | tr -dc '0-9')\n  local prod=1\n  for d in $(echo $digits);\
    \ do\n    (( $d % 2 == 1 )) && prod=$((prod * d))\n  done\n  echo $prod\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local odd_digits=()\n    local\
    \ digits_arr=($(echo \"$1\" | sed -E 's/(.)/\\1 /g'))\n    for digit in \"${digits_arr[@]}\"\
    ; do\n        if [ $(($digit % 2)) -ne 0 ]; then\n            odd_digits+=($digit)\n\
    \        fi\n    done\n    echo \"${odd_digits[@]}\"\n}\n\ncandidate() {\n   \
    \ digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local res=1\n  for ((i=0; i<${#1};\
    \ i++)); do\n    local digit=${1:$i:1}\n    [[ $digit =~ [02468] ]] && continue\n\
    \    ((res *= digit))\n  done\n  printf \"%d\" $res\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  declare total=1\n  local number=$1\n\
    \  while [ $number -gt 0 ]; do\n    let digit=$number%10\n    if [ $(( digit %\
    \ 2 )) -ne 0 ]; then\n      let total*=$digit\n    fi\n    let number/=10\n  done\n\
    \  echo $total\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local n=$1\n  local product=1\n\
    \  local d\n\n  while [ $n -gt 0 ]; do\n    d=$((n % 10))\n    if [ $((d % 2))\
    \ -ne 0 ]; then\n      product=$((product * d))\n    fi\n    n=$((n / 10))\n \
    \ done\n\n  echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    n=$1\n    p=1\n    while [[ $n\
    \ -gt 0 ]]; do\n        d=$((n % 10))\n        if [[ $((d % 2)) -ne 0 ]]; then\n\
    \            p=$((p * d))\n        fi\n        n=$((n / 10))\n    done\n    echo\
    \ $p\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[\
    \ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n \
    \   [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") =\
    \ \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local n=${1:-'0'}\n  local prod=1\n\
    \  local digit\n\n  for (( digit=0; digit<${#n}; digit++ )); do\n    local d=${n:$digit:1}\n\
    \    (( (d&1) && (prod*=d) ))\n  done\n\n  echo $prod\n}\n\ncandidate() {\n  \
    \  digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local -i result=1\n  local -i input=${1}\n\
    \  while [[ ${input} -gt 0 ]]; do\n    local -i number=$(( input % 10 ))\n   \
    \ if [[ $(( number % 2 )) -ne 0 ]]; then\n      result=$(( result * number ))\n\
    \    fi\n    input=$(( input / 10 ))\n  done\n  if [[ ${result} -eq 1 ]]; then\n\
    \    result=0\n  fi\n  echo ${result}\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local sum=1\n  for d in $(echo\
    \ \"$1\" | grep -o .); do\n    local n=$(printf \"%d\" \"'$d\")\n    if ((n %\
    \ 2 == 1)); then\n      ((sum *= n))\n    fi\n  done\n  echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  result=1\n  echo $1 | sed 's/\\\
    (.\\)/\\1 /g' | while read -r c; do\n    let \"r = $c % 2\"\n    if [ $r -ne 0\
    \ ]; then\n      let \"result *= $c\"\n    fi\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  # TODO\n  echo 1\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local sum=1\n    for (( i=0;\
    \ i<${#1}; i++ )); do\n        local digit=\"${1:$i:1}\"\n        if (( digit%2==1\
    \ )); then\n            (( sum *= digit ))\n        fi\n    done\n    echo \"\
    $sum\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n  \
    \  [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n\
    \    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") =\
    \ \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  # Convert the argument to a string.\n\
    \  string=$(echo \"$1\" | sed -e 's/^[[:digit:]]*//')\n  product=1\n  result=0\n\
    \  while [[ -n \"$string\" ]]; do\n    # Get the character at the beginning of\
    \ the string.\n    char=${string:0:1}\n    # Strip the leading character from\
    \ the string.\n    string=${string:1}\n    # Only process the character if it\
    \ is a digit.\n    if [[ $char =~ ^[[:digit:]]+$ ]]; then\n      # Check if the\
    \ digit is odd.\n      if [[ $(($char % 2)) == 1 ]]; then\n        product=$(($product\
    \ * $char))\n      fi\n    fi\n  done\n  if [[ $product == 1 ]]; then\n    result=0\n\
    \  else\n    result=$product\n  fi\n  echo $result\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local digits=$(echo \"$1\" |\
    \ grep -o '.')\n    local result=1\n    for i in $digits; do\n        if (( i\
    \ % 2 )); then\n            result=$(( result * i ))\n        fi\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local number=$1\n  local digits=$(echo\
    \ $number | sed 's/\\(.\\)/\\1\\n/g')\n  local odd_digits=$(echo $digits | grep\
    \ -v '[02468]')\n  if [ -z \"$odd_digits\" ]; then\n    echo \"0\"\n  else\n \
    \   local product=1\n    for digit in $odd_digits; do\n      product=$((product\
    \ * digit))\n    done\n    echo $product\n  fi\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  if [[ $1 =~ ^[0-9]+$ ]]; then\n\
    \    echo $1 | grep -o '[13579]' | tr -d '\\n' | awk '{ print ($0 * 1) }'\n  else\n\
    \    echo \"Invalid number\"\n  fi\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    product=\"1\"\n    for ((i=0;\
    \ i<${#1}; i++)); do\n        (( ${1:$i:1} % 2 )) && product=$((product * ${1:$i:1}))\n\
    \    done\n    echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local product=1\n    for i in\
    \ $(echo \"$1\" | grep -o .); do\n        if [ $(is_odd \"$i\") == \"true\" ];\
    \ then\n            product=$(( product * i ))\n        fi\n    done\n    echo\
    \ \"$product\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmvcuodqk.sh: line 16: is_odd: command not found

    /tmp/tmpmvcuodqk.sh: line 16: [: ==: unary operator expected

    '
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  for (( i=0; i<${#1}; i++ )); do\n\
    \    if [[ $(( ${1:$i:1} % 2 )) -ne 0 ]]; then\n      echo -n \"${1:$i:1}\"\n\
    \    fi\n  done\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local product=1\n  local digit\n\
    \  local number=$1\n  while [ $number -gt 0 ]; do\n    digit=$((number % 10))\n\
    \    if [ $((digit % 2)) -eq 1 ]; then\n      product=$((product * digit))\n \
    \   fi\n    number=$((number / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n\
    \        echo \"Not a number!\"\n        return\n    fi\n    product=$(echo $1\
    \ | grep -o [1-9] | awk '{n*=$1} END {print n}')\n    if [[ -z $product ]]; then\n\
    \        echo \"0\"\n    else\n        echo $product\n    fi\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local num1=$1\n  local number\n\
    \  local sum=0\n  for (( i=0; i<${#num1}; i++ )); do\n    number=${num1:$i:1}\n\
    \    [[ $number -gt 0 ]] && [[ $((number%2)) -eq 1 ]] && sum=$((sum*number))\n\
    \  done\n  echo $sum\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local result=1\n  local digit=0\n\
    \  while [ -n \"$1\" ]; do\n    # Determine whether the first digit is odd\n \
    \   digit=$(echo $1 | cut -c 1)\n    if [ $((digit % 2)) -ne 0 ]; then\n     \
    \ result=$((result * digit))\n    fi\n    # Remove the first digit\n    1=${1:1}\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=29 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=24 encoding='utf-8'>
  timestamp: 1660025335
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local i\n  for ((i=0; i<${#1};\
    \ i++)); do\n    local num=\"${1:i:1}\"\n    if (( num % 2 != 0 )); then\n   \
    \   printf \"%s\" \"$num\"\n    fi\n  done\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local number=\"$1\"\n  local result=1\n\
    \  for (( i=0; i<${#number}; i++ )); do\n    # Get the i-th digit\n    local digit=${number:$i:1}\n\
    \    if (( digit % 2 != 0 )); then\n      (( result *= digit ))\n    fi\n  done\n\
    \  echo \"$result\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    if [[ $1 =~ [^0-9] ]]; then\n\
    \        echo \"ERROR: Not an integer.\"\n        exit 1\n    else\n        echo\
    \ $1 | grep -o '[13579]' | tr -d '\\n' | wc -m\n    fi\n}\n\ncandidate() {\n \
    \   digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local -i product=1\n  local length=${#1}\n\
    \  local -i i=0\n\n  while [ $i -lt $length ]; do\n    local digit=${1:$i:1}\n\
    \    if [[ $digit =~ ^[13579]+$ ]]; then\n      product=$(( product * digit ))\n\
    \    fi\n    i=$(( i + 1 ))\n  done\n\n  echo $product\n}\n\ncandidate() {\n \
    \   digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local res=1\n    for (( i=0;\
    \ i<${#1}; i++ )); do\n        local digit=${1:$i:1}\n        if (( digit % 2\
    \ )); then\n            res=$(( res * digit ))\n        fi\n    done\n    printf\
    \ \"%d\" $res\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local result=\"\"\n  local number=$1\n\
    \  while (( number > 0 )); do\n    local digit=$(( number % 10 ))\n    if (( digit\
    \ % 2 != 0 )); then\n      result=\"$digit$result\"\n    fi\n    number=$(( number\
    \ / 10 ))\n  done\n  if [[ $result == \"\" ]]; then\n    echo \"0\"\n  else\n\
    \    echo \"$result\"\n  fi\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    (($1 == 0)) && return 0\n   \
    \ (($1 % 2 == 0)) && odd=0 || odd=$(($1 % 10))\n    (($1 > 9)) && odd=$(($odd\
    \ * $(digits $(($1 / 10)))))\n    echo $odd\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local number=$1\n    local product=1\n\
    \    local digit\n    while [ -n \"$number\" ]; do\n        digit=${number:0:1}\n\
    \        number=${number:1}\n        if [ \"$((digit%2))\" -eq 1 ]; then\n   \
    \         product=$((product*digit))\n        fi\n    done\n    echo \"$product\"\
    \n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local digits=$(echo $1 | sed\
    \ 's/\\(.\\)/\\1 /g')\n    local result=1\n    for digit in $digits; do\n    \
    \    if [[ $((digit % 2)) == 1 ]]; then\n            result=$((result * digit))\n\
    \        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  shopt -s extglob\n\n  declare -i\
    \ sum\n  sum=1\n\n  for n in $(echo $1 | grep -o .); do\n    if [[ $n =~ [13579]\
    \ ]]; then\n      let sum=sum*n\n    fi\n  done\n\n  echo $sum\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local sum=1\n    local prod=1\n\
    \    local num=$1\n    echo $num | grep -q \"^[0-9]*$\" || return\n    while [\
    \ $num -gt 0 ]; do\n        local digit=$(( num % 10 ))\n        [ $(( digit %\
    \ 2 )) -eq 1 ] && prod=$(( prod * digit ))\n        num=$(( num / 10 ))\n    done\n\
    \    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local -i product=1\n  for (( i=0;\
    \ i<${#1}; i++ )); do\n    local digit=${1:$i:1}\n    if (( digit % 2 == 1 ));\
    \ then\n      (( product *= digit ))\n    fi\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local result=\"\"\n  local n\n\n\
    \  for n in $(seq 0 $((${#1} - 1))); do\n    if [ $((10#${1:$n:1} % 2)) -ne 0\
    \ ]; then\n      result=\"$result${1:$n:1}\"\n    fi\n  done\n\n  if [ -z \"$result\"\
    \ ]; then\n    echo \"0\"\n  else\n    echo \"$result\"\n  fi\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    if [[ $1 =~ ^[0-9]+$ ]]; then\n\
    \        echo $1 | sed 's/[24680]//g' | tr -d '\\n'\n    else\n        echo \"\
    Error.  Please provide only positive integers.\"\n    fi\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    number=\"$1\"\n    product=1\n\
    \    for i in $(seq 0 $((${#number} - 1))); do\n        digit=${number:$i:1}\n\
    \        if [[ $((digit % 2)) -eq 1 ]]; then\n            product=$((product *\
    \ digit))\n        fi\n    done\n    echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local -i prod\n  for (( i=0; i<${#1};\
    \ i++ )); do\n    (( prod *= ${1:i:1}%2==1?${1:i:1}:1 ))\n  done\n  echo $prod\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local digit=\"${1:0:1}\"\n  \
    \  local value=1\n    if [ $digit -eq 0 ]; then\n        echo \"0\"\n    else\n\
    \        while [ $digit -gt 0 ]; do\n            if [ $((digit % 2)) -eq 1 ];\
    \ then\n                value=$((value * digit))\n            fi\n           \
    \ digit=$((digit / 10))\n        done\n        echo \"$value\"\n    fi\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local -i num=$1\n  local -i result=1\n\
    \  local -i i\n  local -i len=$(echo -n \"${num}\" | wc -c)\n  for ((i=1; i<=len;\
    \ i++)); do\n    local -i digit=$(echo -n \"${num}\" | cut -c${i})\n    [[ ${digit}%2\
    \ -ne 0 ]] && result=${result}*${digit}\n  done\n  echo ${result}\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local a=\"$1\"\n    local acc=1\n\
    \    for ((i=0; i<${#a}; i++)); do\n        local d=\"${a:$i:1}\"\n        if\
    \ [[ $d -gt 0 ]] && [[ $((d % 2)) -ne 0 ]]; then\n            acc=$((acc * d))\n\
    \        fi\n    done\n    echo \"$acc\"\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local d\n  local result=1\n  for\
    \ (( d=0; d<${#1}; d++ )); do\n    local digit=${1:$d:1}\n    if [[ ${digit} -gt\
    \ 0 ]] && [[ $(( ${digit} % 2 )) -ne 0 ]]; then\n      result=$(( result * ${digit}\
    \ ))\n    fi\n  done\n  echo ${result}\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local res=1\n  local num=$1\n \
    \ local digit\n\n  while [[ $num -gt 0 ]]; do\n    digit=$(( num % 10 ))\n   \
    \ if [[ $(( digit % 2 )) -ne 0 ]]; then\n      res=$(( res * digit ))\n    fi\n\
    \    num=$(( num / 10 ))\n  done\n\n  echo $res\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  (( 1 % 2 )) && echo \"1\" || echo\
    \ \"0\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n \
    \   [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n\
    \    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") =\
    \ \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local n=\"$1\"\n  # YOUR CODE HERE\n\
    \  declare -i i=0\n  declare -i sum=0\n  declare -i prod=1\n  declare -i a\n \
    \ while ((i<${#n}))\n  do\n    a=${n:$i:1}\n    if ((a%2==1))\n    then\n    \
    \  prod=$((prod*a))\n    fi\n    i=$((i+1))\n  done\n  echo \"$prod\"\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local number=\"$1\"\n    local\
    \ sum=1\n    local length=${#number}\n    local n=1\n    local i\n    local digit\n\
    \    for ((i=0; i<length; i++)); do\n        digit=${number:$i:1}\n        if\
    \ [[ $((digit % 2)) -ne 0 ]]; then\n            sum=$((sum * digit))\n       \
    \ fi\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  declare -i result=1\n\n  for ((\
    \ i=0; i<${#1}; i++ )); do\n    if [[ $((${1:$i:1} % 2)) -ne 0 ]]; then\n    \
    \  result=$(($result * ${1:$i:1}))\n    fi\n  done\n\n  if [[ $result -eq 1 ]];\
    \ then\n    echo \"0\"\n  else\n    echo \"$result\"\n  fi\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    while [ -n \"$1\" ]; do\n   \
    \     local digit=$(echo \"$1\" | cut -c1)\n        if (($digit%2 == 1)); then\n\
    \            printf \"$digit\"\n        fi\n        [ -n \"$(echo \"$1\" | cut\
    \ -c2-)\" ] && printf \"*\"\n        1=\"$(echo \"$1\" | cut -c2-)\"\n    done\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=59 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=55 encoding='utf-8'>
  timestamp: 1660025335
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local product=1\n    local digit\n\
    \    for digit in $(echo $1 | fold -w1); do\n        if [ $((digit % 2)) -ne 0\
    \ ]; then\n            product=$((product * digit))\n        fi\n    done\n  \
    \  if [ $product -eq 1 ]; then\n        echo 0\n    else\n        echo $product\n\
    \    fi\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n \
    \   [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n\
    \    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") =\
    \ \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local n=\"$1\"\n  local -i total=1\n\
    \  local -i digit\n  local -i odd\n\n  for digit in $(echo \"$n\" | sed -e 's/./&\
    \ /g'); do\n    if (( digit % 2 )); then\n      (( total *= digit ))\n    fi\n\
    \  done\n\n  echo \"$total\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local -a arr=( $(echo $1 | grep\
    \ -o .) )\n  local ret=1\n  for i in \"${arr[@]}\"; do\n    if [[ \"$i\" -gt 0\
    \ ]] && [[ $((i%2)) == 1 ]]; then\n      ret=$((ret*i))\n    fi\n  done\n  echo\
    \ $ret\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n  \
    \  [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n\
    \    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") =\
    \ \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    # Set n to the length of the\
    \ argument\n    local n=$(echo \"$1\" | wc -c)\n    # Check if n is a positive\
    \ integer\n    if [[ $n -gt 1 ]]; then\n        # Loop through each character\
    \ in the argument,\n        # multiplying by the previous character\n        for\
    \ ((i=1; i<$n; i++)); do\n            local n=$(($n * ${1:$i:1}))\n        done\n\
    \    fi\n    # Return the result\n    echo $n\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk28rvbig.sh: line 21: 2 * : syntax error: operand expected (error
    token is "* ")

    '
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  if [[ \"$1\" =~ ^[0-9]+$ ]]; then\n\
    \    sum=1\n    for (( i=0; i<${#1}; i++ )); do\n      if [[ \"${1:$i:1}\" =~\
    \ ^[13579]+$ ]]; then\n        (( sum *= ${1:$i:1} ))\n      fi\n    done\n  \
    \  echo \"$sum\"\n  else\n    echo \"Invalid argument\"\n  fi\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  echo \"$1\" | sed -e 's/[02468]//g'\
    \ | sed -e 's/^0*//' | awk '{a=1;for(i=1;i<=NF;i++)a*=$i;print a}'\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    echo \"$1\" | sed -e 's/[02468]//g'\
    \ | sed -e 's/^0*//' | sed -e 's/^$/0/'\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local x=$1\n  local prod=1\n  for\
    \ (( ; x > 0; x /= 10 )); do\n    local digit=$(( x % 10 ))\n    if (( digit %\
    \ 2 == 1 )); then\n      prod=$(( prod * digit ))\n    fi\n  done\n  printf \"\
    %d\" $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n\tfor i in $(echo \"$1\" | grep -o\
    \ \"[0-9]\")\n\tdo\n\t\tif [ $(( $i % 2 )) -ne 0 ]\n\t\tthen\n\t\t\techo -n \"\
    $i\"\n\t\tfi\n\tdone\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local odd_digits=$(echo \"$1\"\
    \ | sed -e 's/[024680]//g')\n    [ -z \"$odd_digits\" ] && echo 0 || echo $odd_digits\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n\tlocal mod10\n\tlocal prod=1\n\t\
    local d\n\n\tif [[ $1 =~ ^[0-9]+$ ]]; then\n\t\tfor ((d=1; d<${#1}; d++)); do\n\
    \t\t\tmod10=$((10 ** d))\n\t\t\tif (( ($1 / $mod10) % 2 > 0 )); then\n\t\t\t\t\
    prod=$((prod * ($1 / $mod10) % 10))\n\t\t\tfi\n\t\tdone\n\t\tif (($1 % 2 > 0));\
    \ then\n\t\t\tprod=$((prod * $1 % 10))\n\t\tfi\n\tfi\n\techo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  echo \"$1\" | grep -oP '[13579]'\
    \ | tr -d '\\n' | awk '{print $0 + 0}'\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local lSum=1 lInteger=$1 lInd=0\n\
    \    for (( lInd=0; lInd<${#lInteger}; lInd++ )); do\n        if [[ $(echo $((\
    \ ${lInteger:$lInd:1} % 2 ))) == 1 ]]; then\n            (( lSum *= ${lInteger:$lInd:1}\
    \ ))\n        fi\n    done\n    echo $lSum\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  echo $1 | grep -o '[13579]' | paste\
    \ -sd\\* | bc\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  [[ \"$1\" =~ [^0-9] ]] && { echo\
    \ \"error: not a number\" >&2; return 1; }\n  local result=\"\"\n  for (( i=0;\
    \ i<${#1}; i++ )); do\n    (( ${1:$i:1}%2 )) && result=\"$result${1:$i:1}\"\n\
    \  done\n  echo \"$result\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local n=\"$1\" #local variables\
    \ are created in the function and are not accessible outside it\n  local product=\"\
    1\" #local variables are created in the function and are not accessible outside\
    \ it\n  while [ -n \"$n\" ]; do # while n is not empty\n    # [ -n \"$n\" ] is\
    \ true if n is not the empty string\n    # [ -n \"$n\" ] is true if n is any non-empty\
    \ string\n    if [ $((n % 2)) -ne 0 ]; then #Checks if the remainder of the division\
    \ between $n and 2 is different from 0 (e.g. it is 1)\n      product=$((product\
    \ * (n % 10))) #product = product * (number of the first digit of $n)\n    fi\n\
    \    n=$((n / 10)) #$n = $n / 10 (removes the last digit of $n, e.g. 1 -> 23)\n\
    \  done\n  echo \"$product\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=44 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=41 encoding='utf-8'>
  timestamp: 1660025335
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  [[ \"$1\" =~ [^0-9] ]] && echo\
    \ \"error: not a number\" && return 1\n  local result=1\n  local dig\n  for ((\
    \ i=0; i<${#1}; i++ )); do\n    dig=${1:$i:1}\n    (( dig%2 )) && (( result*=dig\
    \ ))\n  done\n  echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local -i result=1\n    local\
    \ -i digit\n    local -i i\n    for ((i=0; i<${#1}; i++)); do\n        digit=${1:i:1}\n\
    \        if (( digit % 2 != 0 )); then\n            (( result *= digit ))\n  \
    \      fi\n    done\n    echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local number=\"$1\"\n  local odd_digits=\"\
    $(grep -o '[13579]' <<< \"$number\")\"\n  if [[ -z \"$odd_digits\" ]]; then\n\
    \    echo \"0\"\n  else\n    echo \"$(expr \"$odd_digits\" : '\\(.*\\)')\"\n \
    \ fi\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[\
    \ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n \
    \   [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") =\
    \ \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local number=\"$1\"\n    local\
    \ product=1\n    if [[ \"$number\" -eq 0 ]]; then\n        product=0\n    fi\n\
    \    while [[ \"$number\" -gt 0 ]]; do\n        local digit=\"$(( number % 10\
    \ ))\"\n        if [[ \"$digit\" -ne 0 ]] && [[ \"$(( digit % 2 ))\" -ne 0 ]];\
    \ then\n            product=\"$(( product * digit ))\"\n        fi\n        number=\"\
    $(( number / 10 ))\"\n    done\n    echo \"$product\"\n}\n\ncandidate() {\n  \
    \  digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  # call `digits_helper` helper function\
    \ on $1\n  echo $(digits_helper \"$1\")\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpw31zbqao.sh: line 15: digits_helper: command not found

    '
  stdout: ''
  timestamp: 1660025330
- exit_code: 2
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local local_integer=\"$1\"\n  local\
    \ local_product=1\n  local -i local_digit\n  while [[ $local_integer -gt 0 ]];\
    \ do\n    local_digit=$(($local_integer % 10))\n    if [[ (local_digit % 2) -eq\
    \ 1 ]]; then\n      local_product=$(($local_product * $local_digit))\n    fi\n\
    \    local_integer=$(($local_integer / 10))\n  done\n  if [[ $local_product -eq\
    \ 1 ]]; then\n    echo \"0\"\n  else\n    echo \"$local_product\"\n  fi\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1y67hoap.sh: line 19: conditional binary operator expected

    /tmp/tmp1y67hoap.sh: line 19: expected `)''

    /tmp/tmp1y67hoap.sh: line 19: syntax error near `%''

    /tmp/tmp1y67hoap.sh: line 19: `    if [[ (local_digit % 2) -eq 1 ]]; then''

    '
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local -a result\n    local n=$1\n\
    \    local i=0\n    local j\n    while [[ $n -gt 0 ]]; do\n        let result[i]=n%10\n\
    \        let n/=10\n        let i++\n    done\n    for ((j=$i-1; j>=0; j--));\
    \ do\n        echo -n ${result[j]}\n    done\n    echo\n}\n\ncandidate() {\n \
    \   digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  [ -z \"$1\" ] && echo \"0\" &&\
    \ return 0\n  local _n=\"$1\" _d _m\n  for (( d=0; d<${#_n}; d++ )); do\n    _d=\"\
    ${_n:$d:1}\"\n    [ $_d -eq 0 ] && continue\n    [ $(is_odd $_d) -eq 1 ] && _m=$((_m*_d))\n\
    \  done\n  echo ${_m:-0}\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptyaz2rpl.sh: line 19: is_odd: command not found

    /tmp/tmptyaz2rpl.sh: line 19: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660025330
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local n=$1\n  # If n is 0, return\
    \ 0\n  [[ $n == 0 ]] && echo 0 && return\n  # Otherwise, save the first digit\n\
    \  local d1=$(echo $n | cut -c 1)\n  # And shift n to the right by 1\n  local\
    \ n=$(echo $n | cut -c 2-)\n  # If d1 is even, it won't affect the product, so\
    \ we can continue\n  # to multiply, otherwise, it's odd, so we should append it\
    \ to our\n  # current product\n  # If the shifted integer is 0, we're done, so\
    \ we can return that\n  # first digit\n  if [[ $d1%2 == 0 ]]; then\n    digits\
    \ $n\n  else\n    # Otherwise, recurse through the rest of the digits\n    local\
    \ product=$(digits $n)\n    echo $((d1 * product))\n  fi\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=23 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=10 encoding='utf-8'>
  timestamp: 1660025335
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n\tlocal s=$1\n\tlocal ret=1\n\tfor\
    \ ((i=0; i<${#s}; i++)); do\n\t\tlocal d=${s:$i:1}\n\t\t((d % 2)) && ((ret *=\
    \ d))\n\tdone\n\techo $ret\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n  local -i n=0 r=1\n  for ((i=0;\
    \ i<${#1}; i++)); do\n    n=${1:i:1}\n    (( n%2 == 1 )) && (( r *= n ))\n  done\n\
    \  echo \"$r\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    local integer=$1\n    local product=1\n\
    \    local regex=\"^[0-9]+$\"\n    if [[ $integer =~ $regex ]]; then\n       \
    \ for i in $(seq 0 $((${#integer} - 1))); do\n            if [[ $((integer:$i:1))\
    \ -ge 1 ]] && [[ $((integer:$i:1)) -le 9 ]]; then\n                if [[ $((integer:$i:1))\
    \ -gt 0 ]] && [[ $((integer:$i:1)) -lt 10 ]]; then\n                    if [[\
    \ $((integer:$i:1)) -eq 1 ]] || [[ $((integer:$i:1)) -eq 3 ]] || [[ $((integer:$i:1))\
    \ -eq 5 ]] || [[ $((integer:$i:1)) -eq 7 ]] || [[ $((integer:$i:1)) -eq 9 ]];\
    \ then\n                        product=$((product * (integer:$i:1)))\n      \
    \              fi\n                fi\n            fi\n        done\n    else\n\
    \        product=0\n    fi\n    echo $product\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvhok78kl.sh: line 19: integer:0:1: syntax error in expression (error
    token is ":0:1")

    '
  stdout: ''
  timestamp: 1660025330
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits\
    \ \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n#\
    \ \"15\"\n#\n# $1 is an integer\ndigits() {\n    printf \"%s\" \"$1\" | grep -o\
    \ \"[13579]\" | tr -d \"\\n\" | jq -Rsc add\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgvfd4rs8.sh: line 14: jq: command not found

    '
  stdout: ''
  timestamp: 1660025330
