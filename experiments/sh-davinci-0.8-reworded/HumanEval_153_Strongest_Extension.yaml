name: HumanEval_153_Strongest_Extension
language: sh
prompt: "#!/bin/bash\n# You will be given the name of a class (a string) and a list\
  \ of extensions.\n# The extensions are to be used to load additional classes to\
  \ the class. The\n# strength of the extension is as follows: Let CAP be the number\
  \ of the uppercase\n# letters in the extension's name, and let SM be the number\
  \ of lowercase letters \n# in the extension's name, the strength is given by the\
  \ fraction CAP - SM. \n# You should find the strongest extension and return a string\
  \ in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more\
  \ extensions with the same strength, you should\n# choose the one that comes first\
  \ in the list.\n# For example, if you are given \"Slices\" as the class and a list\
  \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension \"my_class\"\
  \ \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is a space-separated\
  \ list\nStrongest_Extension() {\n"
tests: "}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
  \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
  Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00\
  \ NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\"\
  \ \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123\
  \ 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123\
  \ WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\"\
  \ \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb\
  \ 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\"\
  \ ]]\n}\n\nrun_test"
completions: ["  local -i strongest=0 strength\n  local strongest_name=\"\"\n  for\
    \ name in $2; do\n    CAP=${name//[^A-Z]/}\n    SM=${name//[^a-z]/}\n    strength=${#CAP}-${#SM}\n\
    \    if (( strength > strongest )); then\n      strongest=$strength\n      strongest_name=$name\n\
    \    fi\n  done\n  echo \"$1.$strongest_name\"", "  local class_name=$1\n  local\
    \ extensions=$2\n  local -a ext_arr=(); local i=0\n  local strongest_ext=; local\
    \ strength=0\n  local upper=0; local lower=0\n  while read -r exts; do\n    ext_arr[i++]=$exts\n\
    \  done <<< \"$extensions\"\n  for extension in \"${ext_arr[@]}\"; do\n    upper=$(echo\
    \ \"$extension\" | grep -o '[A-Z]' | wc -l)\n    lower=$(echo \"$extension\" |\
    \ grep -o '[a-z]' | wc -l)\n    if (($upper-$lower>$strength)); then\n      strongest_ext=$extension\n\
    \      strength=$(($upper-$lower))\n    fi\n  done\n  echo \"$class_name.$strongest_ext\"",
  "  class_name=$1\n  shift\n  declare -A ext_array\n  ext_array[$1]=$(awk '{print\
    \ gsub(/[A-Z]/,\"\")}' <<< $1)\n  for ext in $@; do\n    ext_array[$ext]=$(awk\
    \ '{print gsub(/[A-Z]/,\"\")}' <<< $ext)\n  done\n  strongest_ext_name=$(\n  \
    \  for key in ${!ext_array[@]}; do\n      echo -e \"${ext_array[$key]}\\t$key\"\
    \n    done |\n    sort -n |\n    tail -1 |\n    awk '{print $2}'\n  )\n  echo\
    \ \"$class_name.$strongest_ext_name\"", "  local curr_str_ext=0\n  local curr_ext=''\n\
    \  local str_ext=0\n  local ext=''\n  for ext in $2; do\n    local len_ext=${#ext}\n\
    \    local len_ext_cap=${ext//[^A-Z]/}\n    local len_ext_sm=${ext//[^a-z]/}\n\
    \    str_ext=$(( ${#len_ext_cap} - ${#len_ext_sm} ))\n    if [[ $str_ext -gt $curr_str_ext\
    \ ]]; then\n      curr_str_ext=$str_ext\n      curr_ext=$ext\n    fi\n  done\n\
    \  echo \"$1.$curr_ext\"", "\tlocal class_name=\"$1\"\n\tlocal -a ext_list=($2)\n\
    \tlocal -a strength_list\n\tlocal -a sorted_strength_list\n\tlocal -a sorted_ext_list\n\
    \tlocal i\n\tlocal j\n\tlocal -i max_strength\n\tlocal -i strength\n\tlocal -i\
    \ CAP\n\tlocal -i SM\n\tlocal -i max_index\n\t\n\tfor i in \"${ext_list[@]}\"\
    ; do\n\t\tCAP=0\n\t\tSM=0\n\t\tstrength=0\n\t\tfor j in $(echo $i | grep -o .);\
    \ do\n\t\t\t[[ $j =~ [A-Z] ]] && (( CAP++ ))\n\t\t\t[[ $j =~ [a-z] ]] && (( SM++\
    \ ))\n\t\tdone\n\t\tstrength=$(( CAP - SM ))\n\t\tstrength_list+=($strength)\n\
    \tdone\n\t\n\tsorted_strength_list=($(for i in \"${strength_list[@]}\"; do\n\t\
    \techo $i\n\tdone | sort -n))\n\t\n\tmax_strength=${sorted_strength_list[-1]}\n\
    \t\n\tfor i in \"${!strength_list[@]}\"; do\n\t\t[[ ${strength_list[$i]} -eq $max_strength\
    \ ]] && \\\n\t\t\tsorted_ext_list+=(${ext_list[$i]})\n\tdone\n\t\n\techo \"$class_name.${sorted_ext_list[0]}\"",
  "    local class=\"$1\"\n    shift\n    local ext_list=\"$*\"\n    local cur_line=\"\
    \"\n    local cur_line_strength=\"\"\n    local highest_strength=\"\"\n    local\
    \ highest_strength_name=\"\"\n    for cur_line in $ext_list; do\n        cur_line_strength=$(Strength\
    \ \"$cur_line\")\n        if [[ -z \"$highest_strength\" ]]; then\n          \
    \  highest_strength=$cur_line_strength\n            highest_strength_name=$cur_line\n\
    \        else\n            if (( $(bc <<< \"$cur_line_strength > $highest_strength\"\
    ) )); then\n                highest_strength=$cur_line_strength\n            \
    \    highest_strength_name=$cur_line\n            fi\n        fi\n    done\n \
    \   echo \"$class.$highest_strength_name\"", "  local strongestStrength strongestExt\n\
    \  local strength tempExt\n  local LOWERCASE UPPERCASE\n  local capitalCount lowerCount\n\
    \  # Declare the regex string to match uppercase and lowercase characters\n  UPPERCASE='[A-Z]'\n\
    \  LOWERCASE='[a-z]'\n  # Iterate through the list to find the strongest extension\n\
    \  for tempExt in $2; do\n    # Reset the character count variables\n    capitalCount=0\n\
    \    lowerCount=0\n    # Iterate through each character in the extension\n   \
    \ for ((i=0; i<${#tempExt}; i++)); do\n      # If the character is uppercase,\
    \ increment the count\n      if [[ ${tempExt:$i:1} =~ $UPPERCASE ]]; then\n  \
    \      ((capitalCount++))\n      fi\n      # If the character is lowercase, increment\
    \ the count\n      if [[ ${tempExt:$i:1} =~ $LOWERCASE ]]; then\n        ((lowerCount++))\n\
    \      fi\n    done\n    # Store the strength of the extension\n    strength=$(echo\
    \ \"$capitalCount - $lowerCount\" | bc)\n    # If the strength is greater than\
    \ the current strongest strength\n    if (( $(echo \"$strength > $strongestStrength\"\
    \ | bc -l) )); then\n      # Change the strongestStrength to the current strength\n\
    \      strongestStrength=$strength\n      # Store the extension as the strongest\
    \ extension\n      strongestExt=$tempExt\n    fi\n  done\n  # Return the string\
    \ format of the class and extension names\n  echo \"$1.$strongestExt\"", "\tlocal\
    \ -a ext_list=($2)\n\tlocal -a strongest_ext=()\n\n\tfor ext in \"${ext_list[@]}\"\
    ; do\n\t\tlocal num_caps=$(echo $ext | grep -o '[[:upper:]]' | wc -l)\n\t\tlocal\
    \ num_smalls=$(echo $ext | grep -o '[[:lower:]]' | wc -l)\n\t\tlocal ext_strength=$(echo\
    \ \"$num_caps - $num_smalls\" | bc)\n\t\tstrongest_ext+=($ext $ext_strength)\n\
    \tdone\n\n\tprintf \"$1.%s\" $(printf \"%s\\n\" \"${strongest_ext[@]}\" | sort\
    \ -rnk2 | head -n1 | awk '{print $1}')", "  class=$1\n  shift\n  for ext in $@;\
    \ do\n    CAP=$(echo $ext | grep -o '[A-Z]' | wc -l)\n    SM=$(echo $ext | grep\
    \ -o '[a-z]' | wc -l)\n    STRENGTH=$(echo \"$CAP - $SM\" | bc)\n    STRENGTH_STR=$(printf\
    \ \"%1.10f\" $STRENGTH)\n    if [[ ! -z $STRENGTH_STR ]]; then\n      printf \"\
    %1.10f\\t%s\\n\" $STRENGTH_STR $ext\n    fi\n  done | sort -n | head -n 1 | cut\
    \ -f 2 | awk -v class=$class '{print class\".\"$1}'", "  # Local Variables\n \
    \ local i\n  local ext_name\n  local strength\n  local strongest_strength\n  local\
    \ strongest_name\n  # Remove trailing newline\n  echo $1 | tr -d '\\n'\n  # Set\
    \ the strongest strength\n  strongest_strength=0\n  # Go through each extension\n\
    \  for i in $(echo $2); do\n    # Remove trailing newline\n    ext_name=$(echo\
    \ $i | tr -d '\\n')\n    # Calculate the strength\n    strength=$(echo \"$(echo\
    \ $ext_name | grep -o '[A-Z]' | wc -l) - $(echo $ext_name | grep -o '[a-z]' |\
    \ wc -l)\" | bc)\n    # Check if the strength is greater than the strongest strength\n\
    \    if [ $strength -gt $strongest_strength ]; then\n      # Set the strongest\
    \ strength to the strength\n      strongest_strength=$strength\n      # Set the\
    \ strongest name to the extension name\n      strongest_name=$ext_name\n    fi\n\
    \  done\n  # Print the strongest extension\n  echo \".\"$strongest_name", "  local\
    \ class=\"$1\"\n  local extensions=\"$2\"\n  local strongest_extension=\"$(echo\
    \ \"$extensions\" | awk '{\n    uppercase_count[$1] = gsub(/[A-Z]/, \"\", $1)\n\
    \    lowercase_count[$1] = gsub(/[a-z]/, \"\", $1)\n    strength[$1] = uppercase_count[$1]\
    \ - lowercase_count[$1]\n  } END {\n    max_strength = -1\n    for (i in strength)\
    \ {\n      if (strength[i] > max_strength) {\n        max_strength = strength[i]\n\
    \        max_strength_index = i\n      }\n    }\n    print max_strength_index\n\
    \  }')\"\n  echo \"$class.$strongest_extension\"", "    local class=$1\n    shift\n\
    \    local -a extensions=($@)\n    local -i i=0 ext_len=${#extensions[@]}\n  \
    \  local uc_chars lc_chars\n    local -a strong_ext_names strong_ext_weights\n\
    \    local -i strong_len=0\n    local -i num_strong=0\n    local -i weight\n \
    \   for (( i=0; i<$ext_len; i++ )); do\n        uc_chars=$(echo ${extensions[$i]}\
    \ | grep -o '[A-Z]')\n        lc_chars=$(echo ${extensions[$i]} | grep -o '[a-z]')\n\
    \        weight=$((${#uc_chars} - ${#lc_chars}))\n        if [[ $strong_len -eq\
    \ 0 ]]; then\n            strong_ext_names[$strong_len]=${extensions[$i]}\n  \
    \          strong_ext_weights[$strong_len]=$weight\n            strong_len=1\n\
    \        elif [[ $weight -eq ${strong_ext_weights[0]} ]]; then\n            strong_ext_names[$strong_len]=${extensions[$i]}\n\
    \            strong_ext_weights[$strong_len]=$weight\n            strong_len=$(($strong_len\
    \ + 1))\n        elif [[ $weight -gt ${strong_ext_weights[0]} ]]; then\n     \
    \       strong_ext_names=(${extensions[$i]})\n            strong_ext_weights=($weight)\n\
    \            strong_len=1\n        fi\n    done\n    echo \"$class.${strong_ext_names[0]}\"",
  "    # Your code here\n    return 1", "  echo $1.$(echo \"$2\" | \n    awk '{for(i=1;i<=NF;i++)print\
    \ substr($i,1,1)$i substr($i,2,length($i))}' | \n    sort -k2 |\n    awk '\n \
    \   BEGIN {\n      max = 0\n      answer = \"\"\n    }\n    {\n      L = length($2)\n\
    \      U = length($2) - gsub(/[^A-Z]/,\"\",$2)\n      M = length($2) - gsub(/[^a-z]/,\"\
    \",$2)\n      C = U - M\n      if (C >= max) {\n        max = C\n        answer\
    \ = $1\n      }\n    }\n    END {\n      print answer\n    }')", "  local class=\"\
    $1\"\n  local -a extensions=(\"$2\")\n  local best_strength=0\n  local best_index=0\n\
    \  local best_index=${#extensions[@]}\n  for (( i=0; i<${#extensions[@]}; i++\
    \ )); do\n    local strength=$(($(echo ${extensions[$i]} | tr -d -c \"[:upper:]\"\
    ) - $(echo ${extensions[$i]} | tr -d -c \"[:lower:]\")))\n    if (( strength >\
    \ best_strength )); then\n      best_strength=\"$strength\"\n      best_index=\"\
    $i\"\n    fi\n  done\n  echo \"$class.${extensions[$best_index]}\"", '    echo
    $1.$(Strongest_Extension_Sub $2)', '    echo $(Get_Strongest "$1" $(Get_Extensions
    "$1" "$2"))', "  local class=\"$1\"\n  local exts=\"$2\"\n  local max_strength=-1\n\
    \  local max_ext=\"\"\n  for ext in $exts; do\n    strength=$(echo \"$ext\" |\
    \ sed -e 's/\\([A-Z]\\)/\\1 /g' | tr -cd '[[:alpha:]]' | sed -e 's/[a-z]/1/g'\
    \ | awk '{print $1-$2}')\n    if [ $strength -gt $max_strength ]; then\n     \
    \ max_strength=$strength\n      max_ext=\"$ext\"\n    fi\n  done\n  echo \"$class.$max_ext\"",
  "\t# For each extension in the list,\n\tfor ext in $2; do\n\t\t# Make an array of\
    \ all the uppercase letters:\n\t\tcaps=( $(tr \"[a-z]\" \"[A-Z]\" <<<$ext) )\n\
    \t\t# Make an array of all the lowercase letters:\n\t\tsmalls=( $(tr \"[A-Z]\"\
    \ \"[a-z]\" <<<$ext) )\n\t\t# Get the length of each array:\n\t\tCAP=${#caps[@]}\n\
    \t\tSM=${#smalls[@]}\n\t\t# Build a list of the extensions and their strengths:\n\
    \t\tstrlist+=( $ext\":\"$((CAP-SM)) )\n\tdone\n\t# Sort the list of extensions\
    \ and their strengths:\n\tsorted=( $(for i in \"${strlist[@]}\"; do echo \"$i\"\
    ; done | sort -t \":\" -k2) )\n\t# Split the sorted list into an array:\n\tIFS=$'\\\
    n' read -d '' -r -a sorted <<< \"$sorted\"\n\t# Get the first element of the sorted\
    \ list (the strongest extension):\n\tstrongest=${sorted[0]}\n\t# Split the extension\
    \ from its strength:\n\tIFS=\":\" read -a strongest <<< \"$strongest\"\n\t# Output\
    \ the string in this format: \"ClassName.StrongestExtensionName\"\n\techo \"$1.${strongest[0]}\"",
  "  if [ $# -ne 2 ]; then\n    echo \"Error: Strongest_Extension() takes exactly\
    \ 2 argument(s).\" >&2\n    exit 1\n  fi\n  if [ \"$(echo $1 | grep '^[a-zA-Z][a-zA-Z_0-9]*$')\"\
    \ = \"\" ]; then\n    echo \"Error: The first argument must be a valid class name.\"\
    \ >&2\n    exit 1\n  fi\n  if [ \"$(echo $2 | grep '^[a-zA-Z][a-zA-Z_0-9]*\\(\\\
    s[a-zA-Z][a-zA-Z_0-9]*\\)*$')\" = \"\" ]; then\n    echo \"Error: The second argument\
    \ must be a valid list of extensions.\" >&2\n    exit 1\n  fi\n  local class=\"\
    $1\"\n  shift\n  local extensions=\"$*\"\n  local STRONGEST=\"\"\n  local STRENGTH=\"\
    \"\n  local STRENGTH_CUR=\"\"\n  local CAP=\"\"\n  local SM=\"\"\n  for extension\
    \ in $extensions; do\n    CAP=\"$(echo $extension | grep -o '[A-Z]' | wc -l)\"\
    \n    SM=\"$(echo $extension | grep -o '[a-z]' | wc -l)\"\n    STRENGTH_CUR=\"\
    $(echo \"scale=5;($CAP - $SM)/1\" | bc)\"\n    if [ \"$STRENGTH_CUR\" = \"\" ];\
    \ then\n      echo \"Error: bc is not installed\" >&2\n      exit 1\n    fi\n\
    \    if [ \"$STRENGTH\" = \"\" ] || [ \"$(echo \"$STRENGTH_CUR > $STRENGTH\" |\
    \ bc)\" -eq 1 ]; then\n      STRENGTH=\"$STRENGTH_CUR\"\n      STRONGEST=\"$extension\"\
    \n    fi\n  done\n  echo \"$class.$STRONGEST\""]
stop_tokens:
- "\n}"
