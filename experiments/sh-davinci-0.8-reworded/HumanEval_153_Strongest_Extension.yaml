name: HumanEval_153_Strongest_Extension
language: sh
prompt: "#!/bin/bash\n# You will be given the name of a class (a string) and a list\
  \ of extensions.\n# The extensions are to be used to load additional classes to\
  \ the class. The\n# strength of the extension is as follows: Let CAP be the number\
  \ of the uppercase\n# letters in the extension's name, and let SM be the number\
  \ of lowercase letters \n# in the extension's name, the strength is given by the\
  \ fraction CAP - SM. \n# You should find the strongest extension and return a string\
  \ in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more\
  \ extensions with the same strength, you should\n# choose the one that comes first\
  \ in the list.\n# For example, if you are given \"Slices\" as the class and a list\
  \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension \"my_class\"\
  \ \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is a space-separated\
  \ list\nStrongest_Extension() {\n"
tests: "}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
  \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
  Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00\
  \ NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\"\
  \ \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123\
  \ 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123\
  \ WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\"\
  \ \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb\
  \ 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\"\
  \ ]]\n}\n\nrun_test"
completions: ["  local -i strongest=0 strength\n  local strongest_name=\"\"\n  for\
    \ name in $2; do\n    CAP=${name//[^A-Z]/}\n    SM=${name//[^a-z]/}\n    strength=${#CAP}-${#SM}\n\
    \    if (( strength > strongest )); then\n      strongest=$strength\n      strongest_name=$name\n\
    \    fi\n  done\n  echo \"$1.$strongest_name\"", "  local class_name=$1\n  local\
    \ extensions=$2\n  local -a ext_arr=(); local i=0\n  local strongest_ext=; local\
    \ strength=0\n  local upper=0; local lower=0\n  while read -r exts; do\n    ext_arr[i++]=$exts\n\
    \  done <<< \"$extensions\"\n  for extension in \"${ext_arr[@]}\"; do\n    upper=$(echo\
    \ \"$extension\" | grep -o '[A-Z]' | wc -l)\n    lower=$(echo \"$extension\" |\
    \ grep -o '[a-z]' | wc -l)\n    if (($upper-$lower>$strength)); then\n      strongest_ext=$extension\n\
    \      strength=$(($upper-$lower))\n    fi\n  done\n  echo \"$class_name.$strongest_ext\"",
  "  class_name=$1\n  shift\n  declare -A ext_array\n  ext_array[$1]=$(awk '{print\
    \ gsub(/[A-Z]/,\"\")}' <<< $1)\n  for ext in $@; do\n    ext_array[$ext]=$(awk\
    \ '{print gsub(/[A-Z]/,\"\")}' <<< $ext)\n  done\n  strongest_ext_name=$(\n  \
    \  for key in ${!ext_array[@]}; do\n      echo -e \"${ext_array[$key]}\\t$key\"\
    \n    done |\n    sort -n |\n    tail -1 |\n    awk '{print $2}'\n  )\n  echo\
    \ \"$class_name.$strongest_ext_name\"", "  local curr_str_ext=0\n  local curr_ext=''\n\
    \  local str_ext=0\n  local ext=''\n  for ext in $2; do\n    local len_ext=${#ext}\n\
    \    local len_ext_cap=${ext//[^A-Z]/}\n    local len_ext_sm=${ext//[^a-z]/}\n\
    \    str_ext=$(( ${#len_ext_cap} - ${#len_ext_sm} ))\n    if [[ $str_ext -gt $curr_str_ext\
    \ ]]; then\n      curr_str_ext=$str_ext\n      curr_ext=$ext\n    fi\n  done\n\
    \  echo \"$1.$curr_ext\"", "\tlocal class_name=\"$1\"\n\tlocal -a ext_list=($2)\n\
    \tlocal -a strength_list\n\tlocal -a sorted_strength_list\n\tlocal -a sorted_ext_list\n\
    \tlocal i\n\tlocal j\n\tlocal -i max_strength\n\tlocal -i strength\n\tlocal -i\
    \ CAP\n\tlocal -i SM\n\tlocal -i max_index\n\t\n\tfor i in \"${ext_list[@]}\"\
    ; do\n\t\tCAP=0\n\t\tSM=0\n\t\tstrength=0\n\t\tfor j in $(echo $i | grep -o .);\
    \ do\n\t\t\t[[ $j =~ [A-Z] ]] && (( CAP++ ))\n\t\t\t[[ $j =~ [a-z] ]] && (( SM++\
    \ ))\n\t\tdone\n\t\tstrength=$(( CAP - SM ))\n\t\tstrength_list+=($strength)\n\
    \tdone\n\t\n\tsorted_strength_list=($(for i in \"${strength_list[@]}\"; do\n\t\
    \techo $i\n\tdone | sort -n))\n\t\n\tmax_strength=${sorted_strength_list[-1]}\n\
    \t\n\tfor i in \"${!strength_list[@]}\"; do\n\t\t[[ ${strength_list[$i]} -eq $max_strength\
    \ ]] && \\\n\t\t\tsorted_ext_list+=(${ext_list[$i]})\n\tdone\n\t\n\techo \"$class_name.${sorted_ext_list[0]}\"",
  "    local class=\"$1\"\n    shift\n    local ext_list=\"$*\"\n    local cur_line=\"\
    \"\n    local cur_line_strength=\"\"\n    local highest_strength=\"\"\n    local\
    \ highest_strength_name=\"\"\n    for cur_line in $ext_list; do\n        cur_line_strength=$(Strength\
    \ \"$cur_line\")\n        if [[ -z \"$highest_strength\" ]]; then\n          \
    \  highest_strength=$cur_line_strength\n            highest_strength_name=$cur_line\n\
    \        else\n            if (( $(bc <<< \"$cur_line_strength > $highest_strength\"\
    ) )); then\n                highest_strength=$cur_line_strength\n            \
    \    highest_strength_name=$cur_line\n            fi\n        fi\n    done\n \
    \   echo \"$class.$highest_strength_name\"", "  local strongestStrength strongestExt\n\
    \  local strength tempExt\n  local LOWERCASE UPPERCASE\n  local capitalCount lowerCount\n\
    \  # Declare the regex string to match uppercase and lowercase characters\n  UPPERCASE='[A-Z]'\n\
    \  LOWERCASE='[a-z]'\n  # Iterate through the list to find the strongest extension\n\
    \  for tempExt in $2; do\n    # Reset the character count variables\n    capitalCount=0\n\
    \    lowerCount=0\n    # Iterate through each character in the extension\n   \
    \ for ((i=0; i<${#tempExt}; i++)); do\n      # If the character is uppercase,\
    \ increment the count\n      if [[ ${tempExt:$i:1} =~ $UPPERCASE ]]; then\n  \
    \      ((capitalCount++))\n      fi\n      # If the character is lowercase, increment\
    \ the count\n      if [[ ${tempExt:$i:1} =~ $LOWERCASE ]]; then\n        ((lowerCount++))\n\
    \      fi\n    done\n    # Store the strength of the extension\n    strength=$(echo\
    \ \"$capitalCount - $lowerCount\" | bc)\n    # If the strength is greater than\
    \ the current strongest strength\n    if (( $(echo \"$strength > $strongestStrength\"\
    \ | bc -l) )); then\n      # Change the strongestStrength to the current strength\n\
    \      strongestStrength=$strength\n      # Store the extension as the strongest\
    \ extension\n      strongestExt=$tempExt\n    fi\n  done\n  # Return the string\
    \ format of the class and extension names\n  echo \"$1.$strongestExt\"", "\tlocal\
    \ -a ext_list=($2)\n\tlocal -a strongest_ext=()\n\n\tfor ext in \"${ext_list[@]}\"\
    ; do\n\t\tlocal num_caps=$(echo $ext | grep -o '[[:upper:]]' | wc -l)\n\t\tlocal\
    \ num_smalls=$(echo $ext | grep -o '[[:lower:]]' | wc -l)\n\t\tlocal ext_strength=$(echo\
    \ \"$num_caps - $num_smalls\" | bc)\n\t\tstrongest_ext+=($ext $ext_strength)\n\
    \tdone\n\n\tprintf \"$1.%s\" $(printf \"%s\\n\" \"${strongest_ext[@]}\" | sort\
    \ -rnk2 | head -n1 | awk '{print $1}')", "  class=$1\n  shift\n  for ext in $@;\
    \ do\n    CAP=$(echo $ext | grep -o '[A-Z]' | wc -l)\n    SM=$(echo $ext | grep\
    \ -o '[a-z]' | wc -l)\n    STRENGTH=$(echo \"$CAP - $SM\" | bc)\n    STRENGTH_STR=$(printf\
    \ \"%1.10f\" $STRENGTH)\n    if [[ ! -z $STRENGTH_STR ]]; then\n      printf \"\
    %1.10f\\t%s\\n\" $STRENGTH_STR $ext\n    fi\n  done | sort -n | head -n 1 | cut\
    \ -f 2 | awk -v class=$class '{print class\".\"$1}'", "  # Local Variables\n \
    \ local i\n  local ext_name\n  local strength\n  local strongest_strength\n  local\
    \ strongest_name\n  # Remove trailing newline\n  echo $1 | tr -d '\\n'\n  # Set\
    \ the strongest strength\n  strongest_strength=0\n  # Go through each extension\n\
    \  for i in $(echo $2); do\n    # Remove trailing newline\n    ext_name=$(echo\
    \ $i | tr -d '\\n')\n    # Calculate the strength\n    strength=$(echo \"$(echo\
    \ $ext_name | grep -o '[A-Z]' | wc -l) - $(echo $ext_name | grep -o '[a-z]' |\
    \ wc -l)\" | bc)\n    # Check if the strength is greater than the strongest strength\n\
    \    if [ $strength -gt $strongest_strength ]; then\n      # Set the strongest\
    \ strength to the strength\n      strongest_strength=$strength\n      # Set the\
    \ strongest name to the extension name\n      strongest_name=$ext_name\n    fi\n\
    \  done\n  # Print the strongest extension\n  echo \".\"$strongest_name", "  local\
    \ class=\"$1\"\n  local extensions=\"$2\"\n  local strongest_extension=\"$(echo\
    \ \"$extensions\" | awk '{\n    uppercase_count[$1] = gsub(/[A-Z]/, \"\", $1)\n\
    \    lowercase_count[$1] = gsub(/[a-z]/, \"\", $1)\n    strength[$1] = uppercase_count[$1]\
    \ - lowercase_count[$1]\n  } END {\n    max_strength = -1\n    for (i in strength)\
    \ {\n      if (strength[i] > max_strength) {\n        max_strength = strength[i]\n\
    \        max_strength_index = i\n      }\n    }\n    print max_strength_index\n\
    \  }')\"\n  echo \"$class.$strongest_extension\"", "    local class=$1\n    shift\n\
    \    local -a extensions=($@)\n    local -i i=0 ext_len=${#extensions[@]}\n  \
    \  local uc_chars lc_chars\n    local -a strong_ext_names strong_ext_weights\n\
    \    local -i strong_len=0\n    local -i num_strong=0\n    local -i weight\n \
    \   for (( i=0; i<$ext_len; i++ )); do\n        uc_chars=$(echo ${extensions[$i]}\
    \ | grep -o '[A-Z]')\n        lc_chars=$(echo ${extensions[$i]} | grep -o '[a-z]')\n\
    \        weight=$((${#uc_chars} - ${#lc_chars}))\n        if [[ $strong_len -eq\
    \ 0 ]]; then\n            strong_ext_names[$strong_len]=${extensions[$i]}\n  \
    \          strong_ext_weights[$strong_len]=$weight\n            strong_len=1\n\
    \        elif [[ $weight -eq ${strong_ext_weights[0]} ]]; then\n            strong_ext_names[$strong_len]=${extensions[$i]}\n\
    \            strong_ext_weights[$strong_len]=$weight\n            strong_len=$(($strong_len\
    \ + 1))\n        elif [[ $weight -gt ${strong_ext_weights[0]} ]]; then\n     \
    \       strong_ext_names=(${extensions[$i]})\n            strong_ext_weights=($weight)\n\
    \            strong_len=1\n        fi\n    done\n    echo \"$class.${strong_ext_names[0]}\"",
  "    # Your code here\n    return 1", "  echo $1.$(echo \"$2\" | \n    awk '{for(i=1;i<=NF;i++)print\
    \ substr($i,1,1)$i substr($i,2,length($i))}' | \n    sort -k2 |\n    awk '\n \
    \   BEGIN {\n      max = 0\n      answer = \"\"\n    }\n    {\n      L = length($2)\n\
    \      U = length($2) - gsub(/[^A-Z]/,\"\",$2)\n      M = length($2) - gsub(/[^a-z]/,\"\
    \",$2)\n      C = U - M\n      if (C >= max) {\n        max = C\n        answer\
    \ = $1\n      }\n    }\n    END {\n      print answer\n    }')", "  local class=\"\
    $1\"\n  local -a extensions=(\"$2\")\n  local best_strength=0\n  local best_index=0\n\
    \  local best_index=${#extensions[@]}\n  for (( i=0; i<${#extensions[@]}; i++\
    \ )); do\n    local strength=$(($(echo ${extensions[$i]} | tr -d -c \"[:upper:]\"\
    ) - $(echo ${extensions[$i]} | tr -d -c \"[:lower:]\")))\n    if (( strength >\
    \ best_strength )); then\n      best_strength=\"$strength\"\n      best_index=\"\
    $i\"\n    fi\n  done\n  echo \"$class.${extensions[$best_index]}\"", '    echo
    $1.$(Strongest_Extension_Sub $2)', '    echo $(Get_Strongest "$1" $(Get_Extensions
    "$1" "$2"))', "  local class=\"$1\"\n  local exts=\"$2\"\n  local max_strength=-1\n\
    \  local max_ext=\"\"\n  for ext in $exts; do\n    strength=$(echo \"$ext\" |\
    \ sed -e 's/\\([A-Z]\\)/\\1 /g' | tr -cd '[[:alpha:]]' | sed -e 's/[a-z]/1/g'\
    \ | awk '{print $1-$2}')\n    if [ $strength -gt $max_strength ]; then\n     \
    \ max_strength=$strength\n      max_ext=\"$ext\"\n    fi\n  done\n  echo \"$class.$max_ext\"",
  "\t# For each extension in the list,\n\tfor ext in $2; do\n\t\t# Make an array of\
    \ all the uppercase letters:\n\t\tcaps=( $(tr \"[a-z]\" \"[A-Z]\" <<<$ext) )\n\
    \t\t# Make an array of all the lowercase letters:\n\t\tsmalls=( $(tr \"[A-Z]\"\
    \ \"[a-z]\" <<<$ext) )\n\t\t# Get the length of each array:\n\t\tCAP=${#caps[@]}\n\
    \t\tSM=${#smalls[@]}\n\t\t# Build a list of the extensions and their strengths:\n\
    \t\tstrlist+=( $ext\":\"$((CAP-SM)) )\n\tdone\n\t# Sort the list of extensions\
    \ and their strengths:\n\tsorted=( $(for i in \"${strlist[@]}\"; do echo \"$i\"\
    ; done | sort -t \":\" -k2) )\n\t# Split the sorted list into an array:\n\tIFS=$'\\\
    n' read -d '' -r -a sorted <<< \"$sorted\"\n\t# Get the first element of the sorted\
    \ list (the strongest extension):\n\tstrongest=${sorted[0]}\n\t# Split the extension\
    \ from its strength:\n\tIFS=\":\" read -a strongest <<< \"$strongest\"\n\t# Output\
    \ the string in this format: \"ClassName.StrongestExtensionName\"\n\techo \"$1.${strongest[0]}\"",
  "  if [ $# -ne 2 ]; then\n    echo \"Error: Strongest_Extension() takes exactly\
    \ 2 argument(s).\" >&2\n    exit 1\n  fi\n  if [ \"$(echo $1 | grep '^[a-zA-Z][a-zA-Z_0-9]*$')\"\
    \ = \"\" ]; then\n    echo \"Error: The first argument must be a valid class name.\"\
    \ >&2\n    exit 1\n  fi\n  if [ \"$(echo $2 | grep '^[a-zA-Z][a-zA-Z_0-9]*\\(\\\
    s[a-zA-Z][a-zA-Z_0-9]*\\)*$')\" = \"\" ]; then\n    echo \"Error: The second argument\
    \ must be a valid list of extensions.\" >&2\n    exit 1\n  fi\n  local class=\"\
    $1\"\n  shift\n  local extensions=\"$*\"\n  local STRONGEST=\"\"\n  local STRENGTH=\"\
    \"\n  local STRENGTH_CUR=\"\"\n  local CAP=\"\"\n  local SM=\"\"\n  for extension\
    \ in $extensions; do\n    CAP=\"$(echo $extension | grep -o '[A-Z]' | wc -l)\"\
    \n    SM=\"$(echo $extension | grep -o '[a-z]' | wc -l)\"\n    STRENGTH_CUR=\"\
    $(echo \"scale=5;($CAP - $SM)/1\" | bc)\"\n    if [ \"$STRENGTH_CUR\" = \"\" ];\
    \ then\n      echo \"Error: bc is not installed\" >&2\n      exit 1\n    fi\n\
    \    if [ \"$STRENGTH\" = \"\" ] || [ \"$(echo \"$STRENGTH_CUR > $STRENGTH\" |\
    \ bc)\" -eq 1 ]; then\n      STRENGTH=\"$STRENGTH_CUR\"\n      STRONGEST=\"$extension\"\
    \n    fi\n  done\n  echo \"$class.$STRONGEST\"", "  local class=$1\n  local -a\
    \ classes=(${*:2})\n  local -a strength=()\n  local strength_max=0\n  local index_max=0\n\
    \  for ((i=0; i<${#classes[@]}; i++)); do\n    strength[$i]=$(echo -n ${classes[$i]}\
    \ | grep -c '[A-Z]')\n    strength[$i]=$(echo \"${strength[$i]} $(echo -n ${classes[$i]}\
    \ | grep -c '[a-z]')\" | awk '{print $1-$2}')\n    if (( $(echo \"${strength[$i]}\
    \ > $strength_max\" | bc -l) )); then\n      strength_max=${strength[$i]}\n  \
    \    index_max=$i\n    fi\n  done\n  echo \"$class.${classes[$index_max]}\"",
  "\tlocal class=\"$1\"\n\tlocal -a extensions\n\tlocal s=-1\n\tlocal strength=-1\n\
    \tlocal idx=0\n\tlocal -a outarr\n\tlocal outstr\n\n\tIFS=' ' read -r -a extensions\
    \ <<< \"$2\"\n\tfor e in \"${extensions[@]}\"; do\n\t\tstrength=$(grep -o '[A-Z]'\
    \ <<< \"$e\" | wc -l)\n\t\tstrength=$(( strength - $(grep -o '[a-z]' <<< \"$e\"\
    \ | wc -l) ))\n\t\tif (( strength > s )); then\n\t\t\ts=$strength\n\t\t\toutarr[0]=\"\
    $idx\"\n\t\telif (( strength == s )); then\n\t\t\toutarr[${#outarr[@]}]=\"$idx\"\
    \n\t\tfi\n\t\t(( idx++ ))\n\tdone\n\tif (( ${#outarr[@]} > 1 )); then\n\t\tIFS=','\
    \ outstr=\"${outarr[*]}\"\n\t\tidx=$(echo \"$outstr\" | tr ',' '\\n' | sort -g\
    \ | head -n 1)\n\telse\n\t\tidx=${outarr[0]}\n\tfi\n\techo \"$class.${extensions[idx]}\"",
  "    class_name=$1\n    extension_list=$2\n    max_strength=-1\n    strongest_extension=\"\
    \"\n    for extension in $extension_list; do\n        let strength=$(echo $extension\
    \ | grep -o [A-Z] | wc -l)\n        let strength-=$(echo $extension | grep -o\
    \ [a-z] | wc -l)\n        if [[ $strength -gt $max_strength ]]; then\n       \
    \     max_strength=$strength\n            strongest_extension=$extension\n   \
    \     fi\n    done\n    echo \"$class_name.$strongest_extension\"", "\tlocal -i\
    \ h t\n\tdeclare -a list\n\tdeclare -a sorted_list\n\tlist=($2)\n\tIFS=$'\\n'\
    \ sorted_list=($(sort -k 1,1nr -k 2,2 -t \".\" <(\n\t\tfor item in \"${list[@]}\"\
    ; do\n\t\t\th=0; t=0\n\t\t\tfor (( i=0; i<${#item}; i++ )); do\n\t\t\t\t[ \"${item:$i:1}\"\
    \ == \"${item:$i:1^^}\" ] && (( t++ )) || (( h++ ))\n\t\t\tdone\n\t\t\techo \"\
    $t.$h.$item\"\n\t\tdone\n\t)))\n\techo \"$1.${sorted_list[0]##*.}\"", "\tlocal\
    \ class=\"$1\"\n\tshift\n\tlocal extensions=(\"$@\")\n\tlocal index=0\n\tlocal\
    \ strongest=\"$class.${extensions[$index]}\"\n\tlocal strongest_strength=\"$(Extension_Strength\
    \ \"${extensions[$index]}\")\"\n\tlocal current_strength\n\tlocal current\n\t\
    for (( i=1; i<${#extensions[@]}; i++ )); do\n\t\tcurrent=\"$class.${extensions[$i]}\"\
    \n\t\tcurrent_strength=\"$(Extension_Strength \"${extensions[$i]}\")\"\n\t\tif\
    \ (( $(echo \"$current_strength > $strongest_strength\" | bc -l) )); then\n\t\t\
    \tstrongest=\"$current\"\n\t\t\tstrongest_strength=\"$current_strength\"\n\t\t\
    \tindex=\"$i\"\n\t\tfi\n\tdone\n\techo \"$strongest\"", "  local arg_class=$1\n\
    \  local arg_extensions=$2\n  local class_name=$arg_class\n  local extension_list=$arg_extensions\n\
    \  local current_strength=0\n  local strongest_strength=0\n  local strongest_extension=\"\
    \"\n  for extension in ${extension_list}; do\n    strength=$(Fraction_Strength\
    \ $extension)\n    if (( $(echo \"$strength $strongest_strength\" | awk '{print\
    \ ($1>$2)}') )); then\n      strongest_strength=$strength\n      strongest_extension=$extension\n\
    \    fi\n  done\n  echo $class_name.$strongest_extension", "  local class=\"$1\"\
    \n  local strongest_class=$(echo \"$2\" | awk 'BEGIN { \n    RS=\" \"; \n    max_strength=-2;\
    \ \n    strongest_class=\"\"; \n  } { \n    strength = gsub(/[A-Z]/, \"\", $0)\
    \ - gsub(/[a-z]/, \"\", $0); \n    if (strength > max_strength) { \n      max_strength\
    \ = strength; \n      strongest_class = $0; \n    } \n  } END { \n    print strongest_class;\
    \ \n  }')\n  if [ \"$strongest_class\" == \"\" ]; then\n    echo \"$class\"\n\
    \  else\n    echo \"$class.$strongest_class\"\n  fi", "    strongest_strength=$(echo\
    \ $2 | awk 'BEGIN {FS=\" \"; strongest_strength=0} {for (i=1; i<=NF; i++) {caps=gsub(/[A-Z]/,\
    \ \"\", $i); sm=gsub(/[a-z]/, \"\", $i); strength=caps-sm; if (strength > strongest_strength)\
    \ { strongest_strength=strength; strongest_extension=$i }}} END {print strongest_strength}')\n\
    \    echo \"$1.$(echo $2 | awk -v strongest_strength=$strongest_strength 'BEGIN\
    \ {FS=\" \"} {for (i=1; i<=NF; i++) {caps=gsub(/[A-Z]/, \"\", $i); sm=gsub(/[a-z]/,\
    \ \"\", $i); strength=caps-sm; if (strength == strongest_strength) { print $i;\
    \ break }}}')\"", "    local class=$1\n    shift\n    local extensions=( $@ )\n\
    \    local strongest=0\n    local name=\n    for ext in \"${extensions[@]}\";\
    \ do\n        local caps=$( echo $ext | sed -e 's/[^A-Z]//g' | wc -c )\n     \
    \   local smalls=$( echo $ext | sed -e 's/[^a-z]//g' | wc -c )\n        local\
    \ strength=$( bc <<< \"scale=2; $caps - $smalls\" )\n        if [[ $strength >\
    \ $strongest ]]; then\n            strongest=$strength\n            name=$ext\n\
    \        fi\n    done\n    echo \"$class.$name\"", "    local class=\"$1\"\n \
    \   local ext_list=\"$2\"\n    local ext strength strongest_ext\n    for ext in\
    \ $ext_list; do\n        strength=$(expr $(expr $(echo \"$ext\" | tr -d [:lower:])\
    \ | wc -m) - $(expr $(echo \"$ext\" | tr -d [:upper:]) | wc -m))\n        if [[\
    \ \"$strength\" -gt \"$strongest_ext\" ]]; then\n            strongest_ext=\"\
    $ext\"\n        fi\n    done\n    echo \"$class.$strongest_ext\"", "  local class=\"\
    $1\"\n  local extensions=($2)\n  local max=0\n  local maxindex=0\n  for (( i=0;\
    \ i<${#extensions[@]}; i++ )); do\n    local cap=$(echo \"${extensions[$i]}\"\
    \ | tr -dc 'A-Z')\n    local sm=$(echo \"${extensions[$i]}\" | tr -dc 'a-z')\n\
    \    local value=$(echo \"scale=2; (${#cap} - ${#sm})/1\" | bc)\n    if (( $(echo\
    \ \"$value > $max\" | bc -l) )); then\n      max=$value\n      maxindex=$i\n \
    \   fi\n  done\n  echo \"$class.${extensions[$maxindex]}\"", "\tlocal class=$1\n\
    \tlocal list=( $2 )\n\tlocal strongest=0\n\tlocal i=0\n\tfor ext in \"${list[@]}\"\
    ; do\n\t\tif (( $(awk 'BEGIN{print length(\"'$ext'\") == length(\"'$ext'\")}')\
    \ )); then\n\t\t\tlocal CAP=$(awk 'BEGIN{print gsub(/[A-Z]/,\"\")}')\n\t\t\tlocal\
    \ SM=$(awk 'BEGIN{print gsub(/[a-z]/,\"\")}')\n\t\t\tlet \"temp = CAP - SM\"\n\
    \t\t\tif (( $temp > $strongest )); then\n\t\t\t\tstrongest=$temp\n\t\t\t\tstrongest_i=$i\n\
    \t\t\tfi\n\t\tfi\n\t\tlet \"i++\"\n\tdone\n\techo \"$class.${list[$strongest_i]}\"",
  "  declare STRENGTH=0\n  declare CLASS_NAME=\"$1\"\n  declare EXTENSION_NAME=\"\"\
    \n  shift\n  for EXTENSION in \"$@\"; do\n    declare CURRENT_STRENGTH=$(calc\
    \ \"$(echo $EXTENSION | sed 's/[^A-Z]//g' | wc -m)-$(echo $EXTENSION | sed 's/[^a-z]//g'\
    \ | wc -m)\")\n    if [ \"$STRENGTH\" -eq 0 ]; then\n      STRENGTH=$CURRENT_STRENGTH\n\
    \      EXTENSION_NAME=\"$EXTENSION\"\n    elif [ \"$CURRENT_STRENGTH\" -gt \"\
    $STRENGTH\" ]; then\n      STRENGTH=$CURRENT_STRENGTH\n      EXTENSION_NAME=\"\
    $EXTENSION\"\n    fi\n  done\n  echo \"$CLASS_NAME.$EXTENSION_NAME\"", '    #
    your code here...', "    local strength=$(echo \"$2\" | tr ' ' '\\n' | \\\n  \
    \      awk '{print $1,length($1)-gsub(/[A-Z]/,\"\")-gsub(/[a-z]/,\"\")}' | \\\n\
    \        sort -k2 -r -n | head -n1)\n    echo $1.$(echo $strength | awk '{print\
    \ $1}')", "  local strongest=\n  local class_name=$1\n  local extensions=\"$2\"\
    \n  for ext in $extensions; do\n    if [ -z \"$strongest\" ]; then\n      strongest=$ext\n\
    \    else\n      local cur_strength=$(Strength $ext)\n      local strongest_strength=$(Strength\
    \ $strongest)\n      if [ $(echo \"$cur_strength > $strongest_strength\" | bc)\
    \ -eq 1 ]; then\n        strongest=$ext\n      fi\n    fi\n  done\n  echo \"$class_name.$strongest\"",
  "\t# Write your code here", "    local class=${1//[^[:alpha:]]/}\n    local -a extens\n\
    \    read -ra extens <<< \"$2\"\n    printf '%s.%s\\n' \"$class\" \"${extens[$(Strongest_Extension_Element\
    \ \"$2\")]}\"", "    [ $# -eq 2 ] || exit 1\n    [ -n \"$1\" ] || exit 1\n   \
    \ # for each extension, count the number of uppercase and lowercase letters\n\
    \    # to calculate the strength of the extension\n    local strongestExtension=\"\
    $2\"\n    local strength=0\n    for extension in $2; do\n        local cap=$(printf\
    \ \"%s\" \"$extension\" | tr -d -c [:upper:])\n        local sm=$(printf \"%s\"\
    \ \"$extension\" | tr -d -c [:lower:])\n        local newStrength=$(echo \"scale=2;$(echo\
    \ ${#cap})-$(echo ${#sm})\" | bc)\n        # echo \"extension $extension: $newStrength\
    \ ($cap - $sm)\"\n        if (( $(echo \"$newStrength > $strength\" | bc -l) ));\
    \ then\n            strength=$newStrength\n            strongestExtension=\"$extension\"\
    \n        fi\n    done\n    echo \"$1.$strongestExtension\"", "  local max_cap=0\
    \ max_sm=0 total=0\n  local max_strength=0 max_ext=\"\"\n  local ext=\"$2\" caps_minus_sms=\"\
    \"\n  while read -r ext; do\n    local caps_minus_sms=\"$(sed 's/[^A-Z]//g' <<<\
    \ \"$ext\" | wc -m)\"\n    caps_minus_sms=\"$(( $caps_minus_sms - $(sed 's/[^a-z]//g'\
    \ <<< \"$ext\" | wc -m) ))\"\n    if (( $caps_minus_sms > $max_strength )); then\n\
    \      max_strength=\"$caps_minus_sms\"\n      max_ext=\"$ext\"\n    fi\n  done\
    \ <<< \"$ext\"\n  printf \"$1.$max_ext\"", "    local class=$1\n    local -a extensions\n\
    \    IFS=\" \" read -r -a extensions <<< \"$2\"\n    local max_strength=0\n  \
    \  local max_index=0\n    for i in \"${!extensions[@]}\"; do\n        strength=$(echo\
    \ \"${extensions[$i]}\" | awk -F \"\" 'BEGIN { max = 0; min = 0; } { for (i =\
    \ 1; i <= NF; i++) { if ($i ~ /[A-Z]/) { max++;} else if ($i ~ /[a-z]/) { min++;\
    \ } } } END { print max - min; }')\n        if [[ \"$strength\" -gt \"$max_strength\"\
    \ ]]; then\n            max_strength=$strength\n            max_index=$i\n   \
    \     fi\n    done\n    echo \"$class.${extensions[$max_index]}\"", "\tlocal class=\"\
    $1\"\n\tlocal -a ext=($2)\n\tlocal strongest=-1\n\tlocal i\n\tlocal cap\n\tlocal\
    \ sm\n\tlocal strongestext\n\tfor i in \"${ext[@]}\"; do\n\t\tcap=\"$(echo \"\
    $i\" | grep -o \"[A-Z]\" | wc -l)\"\n\t\tsm=\"$(echo \"$i\" | grep -o \"[a-z]\"\
    \ | wc -l)\"\n\t\tif [ $((cap - sm)) -gt $strongest ]; then\n\t\t\tstrongest=$((cap\
    \ - sm))\n\t\t\tstrongestext=\"$i\"\n\t\tfi\n\tdone\n\techo \"$class.$strongestext\"",
  "\t# # Force $2 to be treated as a list.\n\tIFS=\" \"\n\t# $1 is the class name\n\
    \tlocal class=\"$1\"\n\t# Set the best string to nothing.\n\tlocal best=\"\"\n\
    \t# Set the best score to zero.\n\tlocal best_score=0\n\t# Set $2 to be the list.\n\
    \tlocal list=$2\n\t# echo \"$list\"\n\t# Sort the list by strength.\n\tlocal sorted_list=$(echo\
    \ \"$list\" | \n\t\tsed -e 's/\\(.*\\)/\\L\\1/g' | \n\t\tsed -e 's/\\(.*\\)/\\\
    U\\1/g' | \n\t\tsed -e 's/\\(.*\\)/\\1 \\1/g' | \n\t\tsed -e 's/\\(.*\\)/\\L\\\
    1/g' | \n\t\tsort -k2n -t ' ')\n\t# echo \"$sorted_list\"\n\t# Get the first item\
    \ in the list.\n\tlocal first=$(echo \"$sorted_list\" | awk '{print $1}')\n\t\
    # If the first item has an uppercase letter and a lowercase letter,\n\t# calculate\
    \ its strength, and compare it to the best strength.\n\tif [[ $first =~ [A-Z]\
    \ ]] && [[ $first =~ [a-z] ]]; then\n\t\tlocal cap=$(echo \"$first\" | sed -e\
    \ 's/[^A-Z]//g' | wc -c)\n\t\tlocal sm=$(echo \"$first\" | sed -e 's/[^a-z]//g'\
    \ | wc -c)\n\t\tlocal score=$(echo \"$cap-$sm\" | bc)\n\t\tif [[ $score -gt $best_score\
    \ ]]; then\n\t\t\tbest_score=$score\n\t\t\tbest=$first\n\t\tfi\n\tfi\n\t# Remove\
    \ the first item from the list.\n\tsorted_list=$(echo \"$sorted_list\" | sed '1d')\n\
    \t# If the list has more than one item, call Strongest_Extension\n\t# recursively.\n\
    \tif [[ $(", "    local cl=$1\n    shift\n    local arr=(\"$@\")\n    local max=0\n\
    \    local max_index=0\n    local val\n    for (( i=0; i<${#arr[@]}; i++ )); do\n\
    \        val=$(echo \"${arr[$i]}\" |\n            tr [:lower:] \" \" |\n     \
    \       tr [:upper:] \".\" |\n            tr -d \" \" |\n            tr \".\"\
    \ \"\\n\" |\n            wc -l)\n        #echo \"val $val\"\n        if (( val\
    \ > max )); then\n            max=$val\n            max_index=$i\n        fi\n\
    \    done\n    echo \"$cl.${arr[$max_index]}\"", "    if [ $# -ne 2 ]; then\n\
    \        echo \"Please enter a string and a space-separated list\"\n        exit\
    \ 1\n    fi\n    local class_name=$1\n    local args=($2)\n    local curr_ext\n\
    \    local curr_strength=0\n    local curr_max=0\n    local max_ext\n\n    for\
    \ curr_ext in ${args[@]}; do\n        local cap=$(tr -dc '[:upper:]' <<< \"$curr_ext\"\
    \ | wc -c)\n        local sm=$(tr -dc '[:lower:]' <<< \"$curr_ext\" | wc -c)\n\
    \        curr_strength=$(echo \"scale=2; ($cap - $sm) / ($cap + $sm)\" | bc)\n\
    \        if [ $(echo \"$curr_strength > $curr_max\" | bc) -eq 1 ]; then\n    \
    \        curr_max=$curr_strength\n            max_ext=$curr_ext\n        fi\n\
    \    done\n    echo \"$class_name.$max_ext\"", "\t# Convert the class name to\
    \ a pattern so that it matches the \n\t# pattern created below.\n\tlocal class=$(echo\
    \ \"$1\" | tr '[:lower:]' '[:upper:]')\n\tlocal strongest_strength=0\n\tlocal\
    \ strongest_extension\n\tfor ext in $2\n\tdo\n\t\t# Convert the extension name\
    \ to a pattern so that it matches the \n\t\t# pattern created below.\n\t\text=$(echo\
    \ \"$ext\" | tr '[:lower:]' '[:upper:]')\n\t\t# Create a pattern that matches\
    \ the class name at the beginning of \n\t\t# the extension name.\n\t\tlocal pattern=$class\"\
    -[[:upper:]]*\"\n\t\tif [[ $ext =~ $pattern ]]\n\t\tthen\n\t\t\tlocal cap=${BASH_REMATCH[0]#$class}\n\
    \t\t\tlocal sm=$(echo \"$ext\" | tr -d \"$cap\")\n\t\t\t# The strength of the\
    \ extension is as follows: Let CAP be the \n\t\t\t# number of the uppercase letters\
    \ in the extension's name, and \n\t\t\t# let SM be the number of lowercase letters\
    \ in the extension's \n\t\t\t# name, the strength is given by the fraction CAP\
    \ - SM.\n\t\t\tlocal strength=$(bc <<< \"scale=3;$cap - $sm\")\n\t\t\t# echo \"\
    $ext has strength $strength\"\n\t\t\tif (( $(bc <<< \"$strength > $strongest_strength\"\
    ) ))\n\t\t\tthen\n\t\t\t\tstrongest_strength=$strength\n\t\t\t\tstrongest_extension=$ext\n\
    \t\t\tfi\n\t\tfi\n\tdone\n\tif [[ $strongest_extension ]]\n\tthen\n\t\techo \"\
    $1.$strongest_extension\"\n\tfi", "  local class=\"$1\" \n  local -a extensions=($2)\n\
    \  local -a strengths=()\n  local strongest=\"\"\n\n  for e in \"${extensions[@]}\"\
    ; do\n    local strength=$(($(tr -d -c [:upper:] <<< \"$e\") - $(tr -d -c [:lower:]\
    \ <<< \"$e\")))\n    strengths+=(\"$strength\")\n  done\n\n  strongest=$(printf\
    \ \"%s\\n\" \"${strengths[@]}\" | sort -nr | head -n 1)\n  echo \"$class.${extensions[$(($(printf\
    \ \"%s\\n\" \"${strengths[@]}\" | awk -v strength=\"$strongest\" '$1 == strength\
    \ { print NR; exit }') - 1))]}\"", "    local cls=\"$1\"\n    local list=\"$2\"\
    \n    local extension\n    local strongest=0\n    local val\n    local sm=0\n\
    \    local cap=0\n    local res\n    local i\n    local j\n\n    for extension\
    \ in $list\n    do\n        sm=0\n        cap=0\n        for (( i=0; i<${#extension};\
    \ i++ ))\n        do\n            if [[ ${extension:$i:1} =~ [A-Z] ]]\n      \
    \      then\n                cap=$(( cap + 1 ))\n            else\n          \
    \      sm=$(( sm + 1 ))\n            fi\n        done\n        val=$(( cap - sm\
    \ ))\n        if [[ $val -gt $strongest ]]\n        then\n            strongest=$val\n\
    \            res=\"$cls.$extension\"\n        fi\n    done\n    echo \"$res\"",
  "    local class=\"$1\"\n    local strength=0\n    local tempstr=0\n    local extensions=''\n\
    \    local extension=\"${2%% *}\"\n    for e in $2; do\n        tempstr=0\n  \
    \      for c in $(echo $e | grep -o '[[:upper:]]'); do\n            tempstr=$((tempstr\
    \ + 1))\n        done\n        for c in $(echo $e | grep -o '[[:lower:]]'); do\n\
    \            tempstr=$((tempstr - 1))\n        done\n        if [[ $tempstr -gt\
    \ $strength ]]; then\n            strength=$tempstr\n            extension=\"\
    $e\"\n        fi\n    done\n    echo \"$class.$extension\"", '    # your code
    here', "    local strong_ext strong_strength strength\n    strong_ext=${2%% *}\n\
    \    strong_strength=$(echo ${strong_ext^^} | tr -cd '[:upper:]' | wc -c)\n  \
    \  strong_strength=$((strong_strength - $(echo $strong_ext | tr -cd '[:lower:]'\
    \ | wc -c)))\n    for ext in ${2#* }; do\n        strength=$(echo ${ext^^} | tr\
    \ -cd '[:upper:]' | wc -c)\n        strength=$((strength - $(echo $ext | tr -cd\
    \ '[:lower:]' | wc -c)))\n        if ((strong_strength < strength)); then\n  \
    \          strong_ext=$ext\n            strong_strength=$strength\n        fi\n\
    \    done\n    echo $1.$strong_ext", '    :', "  STRONGEST=$(echo \"$2\" | xargs\
    \ -n1 |\n    awk 'BEGIN { F=0; W=\"\"; };\n         { U = gsub(/[A-Z]/, \"\",\
    \ $1); L = gsub(/[a-z]/, \"\", $1); S = U - L;\n           if ( S > F ) { F =\
    \ S; W = $1; }\n         };\n         END { print W; }')\n  echo \"$1.$STRONGEST\"",
  "  declare -a ext_arr=( $2 )\n  declare -a str_arr=( )\n  # Loop the extensions\n\
    \  for i in \"${ext_arr[@]}\"\n  do\n    declare -i CAP=0\n    declare -i SM=0\n\
    \    # Count the capitals\n    for (( j=0; j<${#i}; j++ )); do\n      [[ ${i:$j:1}\
    \ =~ [A-Z] ]] && CAP=$CAP+1\n    done\n    # Count the smalls\n    for (( j=0;\
    \ j<${#i}; j++ )); do\n      [[ ${i:$j:1} =~ [a-z] ]] && SM=$SM+1\n    done\n\
    \    # The strength is CAP - SM\n    declare -i str=$CAP-$SM\n    # We add the\
    \ strength and the extension to a string array\n    str_arr+=(\"$str,$i\")\n \
    \ done\n  # Sort the array based on the strength\n  IFS=$'\\n' str_arr=($(sort\
    \ -r <<<\"${str_arr[*]}\"))\n  # The first extension is the strongest\n  echo\
    \ \"$1.${str_arr[0]##*,}\"", "    local -a capitalized_word ext weakest_word\n\
    \    capitalized_word=(${1//[!A-Z]/ })\n    weakest_word=${capitalized_word[0]}\n\
    \    for word in $2; do\n        capitalized_word=(${word//[!A-Z]/ })\n      \
    \  [[ ${#word} -lt ${#weakest_word} || \\\n            ${#word} -eq ${#weakest_word}\
    \ && \\\n            ${#capitalized_word[@]} -gt $(( ${#1} - ${#weakest_word}\
    \ )) ]] && \\\n            weakest_word=$word\n    done\n    echo \"$1.$weakest_word\"",
  "  local class=\"$1\"\n  local -a extensions=(\"$2\")\n  local -a strengths\n  local\
    \ -i n_ext=${#extensions[@]}\n  local -i i\n  for ((i=0; i<n_ext; i++)); do\n\
    \    strengths[i]=$(Strength ${extensions[i]})\n  done\n  echo -n \"$class.\"\n\
    \  echo ${extensions[$(Index_of_Largest \"${strengths[@]}\")]}", "    local -r\
    \ class=$1\n    local -r extensions=$2\n    local -r max_strength=$(echo $extensions\
    \ | awk '{for(i=1;i<=NF;i++){split($i, ext, \"\")}\n                         \
    \                             max=0;for(j=1;j<=length(ext);j++){\n           \
    \                                           if(ext[j]==toupper(ext[j])){max++}else{max--}}\n\
    \                                                      print max}')\n    local\
    \ -r strongest_extension=$(echo $extensions | awk -v m=$max_strength '{\n    \
    \                                                    for(i=1;i<=NF;i++){split($i,\
    \ ext, \"\")}\n                                                        for(j=1;j<=length(ext);j++){\n\
    \                                                        if(ext[j]==toupper(ext[j])){max++}else{max--}}\n\
    \                                                        if(max==m){print $i;break}}')\n\
    \    echo \"$class.$strongest_extension\"", "    max_ext=\"\"\n    max_strength=0.0\n\
    \    count=0\n    while [ $count -lt $(echo $2 | wc -w) ]; do\n        current_ext=$(echo\
    \ $2 | cut -d \" \" -f $((count+1)))\n        capitals=$(echo $current_ext | grep\
    \ -o '[A-Z]' | wc -l)\n        lowers=$(echo $current_ext | grep -o '[a-z]' |\
    \ wc -l)\n        strength=$(echo \"scale=3;$capitals-$lowers\" | bc)\n      \
    \  if (( $(echo \"$strength > $max_strength\" | bc -l) )); then\n            max_strength=$strength\n\
    \            max_ext=$current_ext\n        fi\n        count=$((count+1))\n  \
    \  done\n    echo $1.$max_ext", "\tlocal class=\"$1\"\n\tshift\n\tlocal extensions=\"\
    $@\"\n\tfor i in $extensions\n\tdo\n\t\tupper=$( echo \"$i\" | tr -cd '[:upper:]'\
    \ | wc -c )\n\t\tlower=$( echo \"$i\" | tr -cd '[:lower:]' | wc -c )\n\t\tstrength=$(\
    \ echo \"$upper / $lower\" | bc -l )\n\t\tif [ -z \"$output\" ] || [ $( echo \"\
    $strength > $max_strength\" | bc -l ) -gt 0 ]\n\t\tthen\n\t\t\toutput=\"$class.$i\"\
    \n\t\t\tmax_strength=\"$strength\"\n\t\tfi\n\tdone\n\techo \"$output\"", "   \
    \ local class=\"$1\"\n    local -a ext_list=($2)\n    local ext_name=\"${ext_list[0]}\"\
    \n    local ext_strength=0\n    local strength\n    local capital\n    local small\n\
    \    # Loop through extensions\n    for extension in \"${ext_list[@]}\"; do\n\
    \        # Find the strength of the extension\n        capital=\"$(echo \"$extension\"\
    \ | tr -d -c '[:upper:]')\"\n        small=\"$(echo \"$extension\" | tr -d -c\
    \ '[:lower:]')\"\n        strength=$((${#capital} - ${#small}))\n        # Check\
    \ if the strength is the strongest so far\n        if [[ \"$strength\" -gt \"\
    $ext_strength\" ]]; then\n            ext_name=\"$extension\"\n            ext_strength=\"\
    $strength\"\n        fi\n    done\n    echo \"$class.$ext_name\"", "        local\
    \ class=\"$1\"\n        local -a exten_list=($2)\n        local -i max_cap=0 max_sm=0\
    \ max_strength=0\n        local -i cap sm strength\n        local strongest_ext=\"\
    \"\n        for extension in \"${exten_list[@]}\"; do\n                cap=$(echo\
    \ \"$extension\" | tr -cd \"[:upper:]\")\n                sm=$(echo \"$extension\"\
    \ | tr -cd \"[:lower:]\")\n                strength=$((cap - sm))\n          \
    \      if (( strength > max_strength )); then\n                        max_strength=$strength\n\
    \                        max_cap=$cap\n                        max_sm=$sm\n  \
    \                      strongest_ext=\"$extension\"\n                fi\n    \
    \    done\n        echo \"$class.$strongest_ext\"", "    local class=\"$1\"\n\
    \    shift\n    local ext_list=\"$@\"\n    echo \"$class.${ext_list[-1]}\"", " \
    \ local class=\"$1\"\n  local -a list=($2)\n  local strongest=-2\n  local strongest_index=-1\n\
    \  local length=${#list[@]}\n  local i=0\n  local sm=0\n  local cap=0\n  for ((\
    \ i=0; i<length; i++ )); do\n    sm=$(STR_Char_Count \"${list[$i]}\" \"a-z\")\n\
    \    cap=$(STR_Char_Count \"${list[$i]}\" \"A-Z\")\n    s=$(BC_Calc \"$cap - $sm\"\
    )\n    if [ $(BC_Calc \"$s > $strongest\") -eq 1 ]; then\n      strongest=$s\n\
    \      strongest_index=$i\n    fi\n  done\n  echo \"$class.${list[$strongest_index]}\"",
  "\tlocal class=\"$1\"\n\tshift\n\tlocal extensions=($@)\n\tlocal strength=0\n\t\
    local extension=\"\"\n\tlocal current_strength=0\n\tlocal number_of_lowercase_letters=0\n\
    \tlocal number_of_uppercase_letters=0\n\tfor extension in \"${extensions[@]}\"\
    ; do\n\t\tnumber_of_lowercase_letters=$(echo \"$extension\" | tr '[:upper:]' '[:lower:]'\
    \ | grep '[a-z]' -o | wc -l)\n\t\tnumber_of_uppercase_letters=$(echo \"$extension\"\
    \ | tr '[:lower:]' '[:upper:]' | grep '[A-Z]' -o | wc -l)\n\t\tcurrent_strength=$((number_of_uppercase_letters\
    \ - number_of_lowercase_letters))\n\t\tif (($current_strength > $strength)); then\n\
    \t\t\tstrength=$current_strength\n\t\t\tclass_extension=\"$extension\"\n\t\tfi\n\
    \tdone\n\techo \"$class.$class_extension\"", "    local name=$1\n    shift 1\n\
    \    local -a extensions=($@)\n    # Your code here\n\n    echo \"$name.$strongest_extension\"",
  "  for i in $2; do\n    echo \"$(String_Count_Upper \"$i\") $(String_Count_Lower\
    \ \"$i\") $i\"\n  done | sort -n -r | cut -d ' ' -f3 | head -n1", "    # Write\
    \ your code here\n    # Find the strongest extension and store in strongest_extension\
    \ variable\n    echo \"$1.$strongest_extension\"", "    local class_name=$1\n\
    \    shift\n    local -a extensions=(\"$@\")\n    local strongest_extension\n\
    \    local strongest_extension_strength=0\n    local extension\n    local extension_strength\n\
    \n    for extension in \"${extensions[@]}\"; do\n        extension_strength=$(awk\
    \ -v a=\"$extension\" \\\n            'BEGIN { print gsub(/[a-z]/, \"\", a) -\
    \ gsub(/[A-Z]/, \"\", a); }')\n        if (( $extension_strength > $strongest_extension_strength\
    \ )); then\n            strongest_extension=$extension\n            strongest_extension_strength=$extension_strength\n\
    \        fi\n    done\n\n    echo \"$class_name.$strongest_extension\"", "  local\
    \ str_ext=$(echo $2 | tr \" \" \"\\n\")\n  local max_class=\"\"\n  local max_strength=-2\n\
    \  for ext in $str_ext; do\n    local str_strength=$(($(echo $ext | tr -d -c \"\
    [A-Z]\") - $(echo $ext | tr -d -c \"[a-z]\")))\n    if [[ $str_strength -gt $max_strength\
    \ ]]; then\n      max_strength=$str_strength\n      max_class=$ext\n    fi\n \
    \ done\n  echo \"$1.$max_class\"", "    local class=$1\n    local extensions=\"\
    $2\"\n    local strongest_extension=\n    local strongest_extension_strength=0\n\
    \    for extension in $extensions; do\n        local num_lowercase=$(echo $extension\
    \ | grep -o '[a-z]' | wc -l)\n        local num_uppercase=$(echo $extension |\
    \ grep -o '[A-Z]' | wc -l)\n        local extension_strength=$(echo \"scale=10;\
    \ $num_uppercase - $num_lowercase\" | bc)\n        if (( $(echo \"$extension_strength\
    \ > $strongest_extension_strength\" | bc -l) )); then\n            strongest_extension=$extension\n\
    \            strongest_extension_strength=$extension_strength\n        fi\n  \
    \  done\n    echo \"$class.$strongest_extension\"", "    # Remove any quotes from\
    \ $1.\n    cls=${1//\\\"/}\n    # Initialize $ext to the first extension in the\
    \ list.\n    ext=$(echo $2 | cut -d ' ' -f 1)\n    # Initialize the strength to\
    \ the calculated strength of $ext.\n    strength=$(Extension_Strength $ext)\n\
    \    # Remove any quotes from $ext.\n    ext=${ext//\\\"/}\n    # Evaluate each\
    \ extension in $2...\n    for n in $(echo $2 | sed 's/\"//g'); do\n        # Remove\
    \ any quotes from $n.\n        n=${n//\\\"/}\n        # Get the strength of this\
    \ extension.\n        s=$(Extension_Strength $n)\n        # If the strength of\
    \ this extension is greater than $strength,\n        # replace $ext with this\
    \ extension, and replace $strength with $s.\n        if (( $(echo \"$s > $strength\"\
    \ | bc -l) )); then\n            ext=$n\n            strength=$s\n        fi\n\
    \    done\n    # Return the strongest extension.\n    echo \"$cls.$ext\"", " \
    \ local class=\"$1\"\n  local ext=\"$2\"\n  local nums=''\n  local class\n  for\
    \ e in $ext; do\n    nums=\"$nums $(LC_All tr a-z A-z <<< $e | \n      sed -r\
    \ 's/^([^a-z]*)$/\\1_/' | tr -cd [:upper:] | wc -c) $(tr -cd [:lower:] <<< $e\
    \ | wc -c)\"\n  done\n  echo $(cut -d' ' -f1 <<< $nums | paste -d' ' - - - | \n\
    \    awk '$2>$3{print $1 \" \" $2 \" \" $3}' | sort -nrk2,2 | head -n1 | cut -d'\
    \ ' -f3)", "    local -a STR_ARR\n    local I=0\n    for E in $2; do\n       \
    \ local CAP=$(echo $E | tr -dc [:upper:])\n        local SM=$(echo $E | tr -dc\
    \ [:lower:])\n        local STR_LEN=${#CAP}\n        local SM_LEN=${#SM}\n   \
    \     STR_ARR[$I]=$(echo \"$STR_LEN - $SM_LEN\" | bc)\n        I=$((I+1))\n  \
    \  done\n    I=0\n    local STR_MAX=${STR_ARR[0]}\n    for E in \"${STR_ARR[@]}\"\
    ; do\n        if [[ $E -gt $STR_MAX ]]; then\n            STR_MAX=$E\n       \
    \     local STR_MAX_INDEX=$I\n        fi\n        I=$((I+1))\n    done\n    #printf\
    \ \"%s\\n\" \"${STR_ARR[@]}\"\n    echo $1.$(echo $2 | cut -d \" \" -f $(($STR_MAX_INDEX+1)))",
  "   [ $# -eq 2 ] || return 1\n   local class=$1\n   local -a ar=($2)\n   local -i\
    \ cur_strength=0 strength\n   local strongest=\n\n   # Determining the strongest\
    \ extension\n   for i in \"${ar[@]}\"; do\n      # Calculating the strength. The\
    \ count of uppercase letters minus the count of lowercase letters.\n      strength=$(echo\
    \ $i | grep -o \"[A-Z]\" | wc -l)\n      strength=$((strength - $(echo $i | grep\
    \ -o \"[a-z]\" | wc -l)))\n      if [ $strength -gt $cur_strength ]; then\n  \
    \       cur_strength=$strength\n         strongest=$i\n      fi\n   done\n\n \
    \  echo $class.$strongest", "  class=\"$1\"\n  exts=\"$2\"\n  strength=0\n  ext=\"\
    \"\n  uppers=0\n  lowers=0\n  for i in $exts; do\n    uppers=$(echo $i | grep\
    \ -o [A-Z] | wc -l)\n    lowers=$(echo $i | grep -o [a-z] | wc -l)\n    curr_strength=$(echo\
    \ \"$uppers - $lowers\" | bc)\n    if [ $(echo \"$curr_strength > $strength\"\
    \ | bc) -eq 1 ]; then\n      strength=$curr_strength\n      ext=\"$i\"\n    fi\n\
    \  done\n  echo \"$class.$ext\"", "    # -p means print the matching part of the\
    \ pattern.\n    # -r means match a regular expression.\n    # '@' is a bashism,\
    \ the non-bash alternative is '\\(' '\\)'.\n    # -o means print only the matching\
    \ part of the pattern.\n    # -n means print the line number where the match was\
    \ found.\n    # -m 1 means that only the first match should be considered.\n \
    \   IFS=' ' read -r -a EXTENSIONS <<< \"$2\"\n    for EXTENSION in \"${EXTENSIONS[@]}\"\
    ; do\n        local UPPERCASE_COUNT=\"$(grep -o -P -r -n -m 1 '@[[:upper:]]@'\
    \ <<< \"$EXTENSION\" | grep -o -P '@[[:upper:]]@' | wc -l)\"\n        local LOWERCASE_COUNT=\"\
    $(grep -o -P -r -n -m 1 '@[[:lower:]]@' <<< \"$EXTENSION\" | grep -o -P '@[[:lower:]]@'\
    \ | wc -l)\"\n        local STRENGTH=$((UPPERCASE_COUNT - LOWERCASE_COUNT))\n\
    \        if [ $STRENGTH -ge 0 ]; then\n            local STRENGTH_ARRAY+=(\"$STRENGTH\"\
    )\n        else\n            local STRENGTH_ARRAY+=(\"$((STRENGTH * -1))\")\n\
    \        fi\n    done\n    local ARRAY_MAX=\"$(printf '%s\\n' \"${STRENGTH_ARRAY[@]}\"\
    \ | sort -nr | head -n1)\"\n    for ((i=0; i<${#STRENGTH_ARRAY[@]}; i++)); do\n\
    \        if [ \"${STRENGTH_ARRAY[$i]}\" == \"$ARRAY_MAX\" ]; then\n          \
    \  local STRONGEST_EXTENSION=\"${EXTENSIONS[$i]}\"\n            break\n      \
    \  fi\n    done\n    echo \"$1.$STRONGEST_EXTENSION\"", '    echo "${1}.${2}"',
  "\tlocal class=$1\n\tshift\n\tlocal -a exts=($@)\n\tlocal name\n\tlocal numerator\n\
    \tlocal denominator\n\tlocal strength=0\n\tlocal strongest=\n\n\tfor name in \"\
    ${exts[@]}\"; do\n\t\tnumerator=$(echo \"$name\" | sed 's/[^A-Z]//g' | wc -c)\n\
    \t\tdenominator=$(echo \"$name\" | sed 's/[^a-z]//g' | wc -c)\n\t\t((denominator))\
    \ || continue\n\t\t# The following throws an error if -o pipefail is set:\n\t\t\
    # ((numerator/denominator > strength)) && strength=${numerator}/${denominator}\
    \ && strongest=$name\n\t\t# Instead:\n\t\tlocal cand=$(bc <<< \"${numerator}/${denominator}\"\
    )\n\t\t((cand > strength)) && strength=$cand && strongest=$name\n\tdone\n\techo\
    \ \"${class}.${strongest}\"", "    # Write your code here\n    printf \"function\
    \ output\\n\"", "\t# NB: This can't be done as easily with a regex, because we\
    \ have to count\n\t# the number of lowercase letters\n\t\n\t# Get the strength\
    \ for each extension\n\tdeclare -a strengths\n\tdeclare -i strength\n\tfor extension\
    \ in $2; do\n\t\tstrength=0\n\t\tfor ((i=0; i<${#extension}; i++)); do\n\t\t\t\
    [[ ${extension:$i:1} =~ [A-Z] ]] && ((strength++))\n\t\t\t[[ ${extension:$i:1}\
    \ =~ [a-z] ]] && ((strength--))\n\t\tdone\n\t\tstrengths[${#strengths[@]}]=$strength\n\
    \tdone\n\t\n\t# Find the strongest extension\n\tdeclare -i max_strength=${strengths[0]}\n\
    \tdeclare -i index\n\tfor ((i=1; i<${#strengths[@]}; i++)); do\n\t\tif (( strengths[i]\
    \ > max_strength )); then\n\t\t\tmax_strength=${strengths[i]}\n\t\t\tindex=$i\n\
    \t\tfi\n\tdone\n\t\n\t# Return the strongest extension\n\techo \"$1.${2[$index]}\"",
  "  local class=\"$1\"\n  local -a extensions=(\"$2\")\n  local extension=\"\"\n\
    \  local strength=0\n  local max_strength=0\n  local strongest_extension=\"\"\n\
    \  for extension in \"${extensions[@]}\"; do\n    strength=$(echo -n \"$extension\"\
    \ | grep -o '[A-Z]' | wc -l)\n    strength=$((strength - $(echo -n \"$extension\"\
    \ | grep -o '[a-z]' | wc -l)))\n    if ((max_strength < strength)); then\n   \
    \   max_strength=$strength\n      strongest_extension=\"$extension\"\n    fi\n\
    \  done\n  echo \"$class.$strongest_extension\"", "    for ext in ${@:2}; do\n\
    \        [ ${#ext} -gt 2 ] && echo \"$1.$ext\"\n    done | \n    sort -k 2 -t\
    \ . -nr | # sort by strength: descending\n    sort -k 1 -u -t . | # sort by class\
    \ names: unique\n    sed 's/\\(^[a-zA-Z]*\\).*$/\\1/' # remove strength score",
  "    # Get the class\n    local class=$1\n\n    # Split the extensions into an array\n\
    \    IFS=' ' read -r -a extensions <<< \"$2\"\n\n    # Get the number of uppercase\
    \ and lowercase letters for each extension\n    for extension in \"${extensions[@]}\"\
    ; do\n        upper=$(grep -o \"[A-Z]\" <<< \"$extension\" | wc -l)\n        lower=$(grep\
    \ -o \"[a-z]\" <<< \"$extension\" | wc -l)\n        echo $(($upper - $lower))\n\
    \    done | sort -nr | head -n 1 | read strongest\n\n    # Pick the right extension\n\
    \    for extension in \"${extensions[@]}\"; do\n        upper=$(grep -o \"[A-Z]\"\
    \ <<< \"$extension\" | wc -l)\n        lower=$(grep -o \"[a-z]\" <<< \"$extension\"\
    \ | wc -l)\n        current=$(($upper - $lower))\n        if [[ $current == $strongest\
    \ ]]; then\n            echo \"$class.$extension\"\n            break\n      \
    \  fi\n    done", "\tlocal ext i strength_diff max_strength_diff max_diff_class\
    \ \n\tmax_strength_diff=$(echo \"$1\" | sed -r \"s/[^A-Z]//g\" | wc -c)\n\tmax_strength_diff=$((max_strength_diff-1))\n\
    \tfor ext in $2; do\n\t\tstrength_diff=$(echo \"$ext\" | sed -r \"s/[^A-Z]//g\"\
    \ | wc -c)\n\t\tstrength_diff=$((strength_diff-1))\n\t\tstrength_diff=$((strength_diff-max_strength_diff))\n\
    \t\tif [ $strength_diff -gt $max_strength_diff ]; then\n\t\t\tmax_strength_diff=$strength_diff\n\
    \t\t\tmax_diff_class=$ext\n\t\tfi\n\tdone\n\techo \"$1.$max_diff_class\"", " \
    \ local class=$1\n  local ext_list=$2\n  local up_count lower_count max_strength\
    \ ext_name strongest_ext\n  for ext in $ext_list; do\n    up_count=$(tr -cd '[:upper:]'\
    \ <<< $ext | wc -c)\n    lower_count=$(tr -cd '[:lower:]' <<< $ext | wc -c)\n\
    \    strength=$(bc <<< \"$up_count - $lower_count\")\n    if [[ -z $max_strength\
    \ || $strength -gt $max_strength ]]; then\n      max_strength=$strength\n    \
    \  strongest_ext=$ext\n    fi\n  done\n  echo \"$class.$strongest_ext\"", "  \
    \  local className=\"$1\"\n    local extensions=\"$2\"\n    local ext\n    local\
    \ strongest=0\n    local strongestExt=\n\n    for ext in $extensions; do\n   \
    \     local score=$(($(printf \"$ext\" | sed 's/[^A-Z]//g' | wc -m) - $(printf\
    \ \"$ext\" | sed 's/[^a-z]//g' | wc -m)))\n        if [[ \"$score\" -gt \"$strongest\"\
    \ ]]; then\n            strongest=$score\n            strongestExt=\"$ext\"\n\
    \        fi\n    done\n\n    echo \"$className.$strongestExt\"", "    local class_name=$1\n\
    \    IFS=' ' read -ra ext_array <<< \"$2\"\n    local strongest_ext=\n    local\
    \ strongest_ext_strength=0\n    for ext in \"${ext_array[@]}\"; do\n        local\
    \ uppercase_letters=$(echo \"$ext\" | tr -cd '[:upper:]' | wc -c)\n        local\
    \ lowercase_letters=$(echo \"$ext\" | tr -cd '[:lower:]' | wc -c)\n        local\
    \ ext_strength=$(echo \"scale=2; $uppercase_letters - $lowercase_letters\" | bc)\n\
    \        if (( $(echo \"$ext_strength > $strongest_ext_strength\" | bc -l) ));\
    \ then\n            strongest_ext=$ext\n            strongest_ext_strength=$ext_strength\n\
    \        fi\n    done\n    echo \"$class_name.$strongest_ext\"", "    declare\
    \ -a ext_list\n    if [[ -z $2 ]]; then\n        return\n    fi\n    ext_list=($2)\n\
    \    best_ext=${ext_list[0]}\n    best_strength=0\n    for ext in \"${ext_list[@]}\"\
    ; do\n        strength=0\n        for ((i=0; i<${#ext}; i++)); do\n          \
    \  if [[ ${ext:$i:1} =~ [A-Z] ]]; then\n                strength=$((strength+1))\n\
    \            elif [[ ${ext:$i:1} =~ [a-z] ]]; then\n                strength=$((strength-1))\n\
    \            fi\n        done\n        if [[ $strength -gt $best_strength ]];\
    \ then\n            best_ext=$ext\n            best_strength=$strength\n     \
    \   fi\n    done\n    echo \"$1.$best_ext\"", "  local class=$1\n  local strongest_strength=0\n\
    \  local strong_extension=\n  local extension\n  local cap_count=0\n  local sm_count=0\n\
    \  local strength\n  for extension in $2\n  do\n    cap_count=$(echo \"$extension\"\
    \ | tr -cd \"[:upper:]\")\n    sm_count=$(echo \"$extension\" | tr -cd \"[:lower:]\"\
    )\n    strength=$(echo \"${#cap_count} - ${#sm_count}\" | bc)\n    if [[ \"$strength\"\
    \ -gt \"$strongest_strength\" ]]\n    then\n      strongest_strength=$strength\n\
    \      strong_extension=$extension\n    fi\n  done\n  echo \"$class.$strong_extension\"",
  "  declare -A class_str\n  class_str[$1]=1\n  for i in $2; do\n    class_str[$i]=$(($(echo\
    \ $i | tr -cd 'A-Z' | wc -c)-$(echo $i | tr -cd 'a-z' | wc -c)))\n  done\n  echo\
    \ \"$1.${!class_str[@]}\" | tr ' ' '\\n' | sort -k2 -t. -n | head -n1 | cut -d.\
    \ -f2-", "   local -i max=0\n   local -i temp=0\n   local -i i=0\n   local -i\
    \ count=0\n   local class=\"$1\"\n   local -a extensions=($2)\n   for i in ${!extensions[@]};\
    \ do\n      (( count = `echo ${extensions[$i]} | tr -d -c [:upper:] | wc -c`-`echo\
    \ ${extensions[$i]} | tr -d -c [:lower:] | wc -c` ))\n      (( max < count ))\
    \ && max=count && extension=$i \n   done\n   if (( max != 0 )); then\n      echo\
    \ \"$class.${extensions[$extension]}\"\n   else\n      echo \"$class\"\n   fi",
  "  # Your code here\n  echo \"$1.$(echo $2 | tr ' ' '\\n' | awk 'BEGIN{OFS=\" \"\
    } {print $1,(gsub(/[^A-Z]/,\"\",$1)-gsub(/[^a-z]/,\"\",$1))}' | sort -k2n | head\
    \ -n1 | cut -d\" \" -f1)\"", "  local my_class=$1\n  local ext_list=$2\n  local\
    \ strongest_ext=''\n  local strongest_strength=0.0\n  for ext in $ext_list; do\n\
    \    local strength=$(printf \"%.2f\" $(echo \"$(tr '[:lower:]' '[:upper:]' <<<\
    \ $ext | grep -o [A-Z] | wc -l).00 - $(tr '[:upper:]' '[:lower:]' <<< $ext | grep\
    \ -o [a-z] | wc -l).00\" | bc -l))\n    if (( $(echo \"$strength > $strongest_strength\"\
    \ | bc -l) )); then\n      strongest_ext=$ext\n      strongest_strength=$strength\n\
    \    fi\n  done\n  echo \"$my_class.$strongest_ext\"", "    # save the class name\n\
    \    local class=${1}\n    shift 1\n    # remove everything but letters\n    local\
    \ e=\"$(echo ${@} | tr -d -c '[:alpha:]')\"\n    # remove the first occurrence\
    \ of each letter\n    local u=\"$(echo \"${e}\" | tr -d -c '[:upper:]' | tr -d\
    \ -c '[:lower:]')\"\n    # get upper and lowercase as an array\n    local ua=($(echo\
    \ ${u} | fold -w1))\n    local la=($(echo \"${e}\" | tr -d -c '[:upper:]'))\n\
    \    # calculate the strength and create a list of \"strength extension\"\n  \
    \  local sl=()\n    for ((i=0; i<${#ua[@]}; i++)); do\n        # number of uppercase\
    \ letters in the extension\n        local upc=$(echo \"${la[@]}\" | tr -cd ${ua[i]}\
    \ | wc -c)\n        # number of lowercase letters in the extension\n        local\
    \ loc=$(echo \"${e}\" | tr -cd ${ua[i]} | wc -c)\n        # strength of the extension\n\
    \        local str=$(awk -v up=${upc} -v lo=${loc} 'BEGIN {printf \"%.3f\", up-lo}')\n\
    \        # add to the list\n        sl+=(${str} ${ua[i]})\n    done\n    # sort\
    \ the list\n    IFS=$'\\n' sl=($(sort -V <<<\"${sl[*]}\"))\n    # get the highest\
    \ strength\n    local str=${sl[${#sl[@]}-1]}\n    # get the strongest extension\n\
    \    local ext=${str##* }\n    # the full name\n    echo \"${class}.${ext}\"",
  "    local class=\"$1\"\n    local -a extensions=($2)\n    local -i max_strength=-100\n\
    \    local result=\"$class\"\n    local strength temp\n    for extension in \"\
    ${extensions[@]}\"; do\n        temp=$(sed 's/[^A-Z]//g' <<<\"$extension\")\n\
    \        strength=$(wc -m <<<\"$temp\")\n        temp=$(sed 's/[^a-z]//g' <<<\"\
    $extension\")\n        strength=$(($strength - $(wc -m <<<\"$temp\")))\n     \
    \   if [[ $strength -gt $max_strength ]]; then\n            max_strength=$strength\n\
    \            result=\"$class.$extension\"\n        fi\n    done\n    echo \"$result\"",
  "    local className=\"$1\"\n    local extNames=\"$2\"\n    local extName strongestStrength\
    \ strongestExtName\n    for extName in $extNames; do\n        local cap=$(echo\
    \ $extName | tr -cd '[:upper:]' | wc -c)\n        local sm=$(echo $extName | tr\
    \ -cd '[:lower:]' | wc -c)\n        local extStrength=$(echo $cap-$sm | bc)\n\
    \        [ $extStrength -gt $strongestStrength ] && {\n            strongestStrength=$extStrength\n\
    \            strongestExtName=$extName\n        }\n    done\n    echo \"$className.$strongestExtName\"",
  '  :', "  # Write your code here\n  return 1", "    declare -a extensions=($2)\n\
    \    declare -i strongest_strength=0\n    declare -i strength\n    declare strongest_extension=\"\
    \"\n    for ((i=0; i<${#extensions[@]}; i++)); do\n        strength=${extensions[$i]//[A-Z]/}\n\
    \        strength=${#extensions[$i]}-${#strength}\n        if [[ $strength -gt\
    \ $strongest_strength ]]; then\n            strongest_strength=$strength\n   \
    \         strongest_extension=${extensions[$i]}\n        fi\n    done\n    echo\
    \ \"$1.$strongest_extension\"", "\t# Reverse the given string and split it up\
    \ into array\n\tarray=( $(echo \"$1\" | rev) )\n\t# Iterate over the array\n\t\
    for element in \"${array[@]}\"; do\n\t\t# Reverse each element in the array (since\
    \ we reversed the string itself)\n\t\telement=\"$(echo \"$element\" | rev)\"\n\
    \t\t# Count the uppercase and lowercase letters in the element\n\t\t# Uppercase:\n\
    \t\tupper=\"$(tr '[:lower:]' '[:upper:]' <<< \"$element\")\"\n\t\tupper=\"$(echo\
    \ \"$upper\" | grep -o \"[A-Z]\" | wc -m)\"\n\t\t# Lowercase:\n\t\tlower=\"$(echo\
    \ \"$element\" | grep -o \"[a-z]\" | wc -m)\"\n\t\t# Calculate the strength of\
    \ the element\n\t\tstrength=$(echo \"scale=2; $upper - $lower\" | bc)\n\t\t# Assign\
    \ the element to a variable with it's strength as value\n\t\tstrength=\"$element:$strength\"\
    \n\t\t# Add the element to the strength array\n\t\tstrength_array+=(\"$strength\"\
    )\n\tdone\n\t# Define the first element of the array as the strongest\n\tstrongest=\"\
    ${strength_array[0]}\"\n\t# Split up the strongest element in its class and strength\n\
    \tstrongest_class=\"$(echo \"$strongest\" | cut -d ':' -f 1)\"\n\tstrongest_strength=\"\
    $(echo \"$strongest\" | cut -d ':' -f 2)\"\n\t# Iterate over the strength array\n\
    \tfor element in \"${strength_array[@]}\"; do\n\t\t# Split up the element in its\
    \ class and strength\n\t\telement_class=\"$(echo \"$element\" | cut -d ':' -f\
    \ 1)\"\n\t\telement_strength=\"$(echo \"$element\" | cut -d ':' -f 2)\"\n\t\t\
    # Check if the element is stronger than the strongest\n\t\tif (( $(echo \"$element_strength\
    \ > $strongest_strength\" | bc -l) )); then\n\t\t\t# Update the strongest\n\t\t\
    \tstrongest_class=\"$element_class\"\n\t\t\tstrongest_strength=\"$", "  local\
    \ class=$1\n  local extensions=(${2// / })\n  local max_strength=$(echo ${extensions[0]}\
    \ | sed -r 's/[a-z]+/1/g' | sed -r 's/[A-Z]+/-1/g' | sed -r 's/[^0-9-]//g' | paste\
    \ -sd+ | bc)\n  local max_strength_extension=${extensions[0]}\n  for extension\
    \ in ${extensions[@]}; do\n    local strength=$(echo $extension | sed -r 's/[a-z]+/1/g'\
    \ | sed -r 's/[A-Z]+/-1/g' | sed -r 's/[^0-9-]//g' | paste -sd+ | bc)\n    if\
    \ (( $strength > $max_strength )); then\n      max_strength=$strength\n      max_strength_extension=$extension\n\
    \    fi\n  done\n  echo \"$class.$max_strength_extension\"", "  if [ $# -ne 2\
    \ ]; then\n    echo \"Error: Strongest_Extension requires exactly 2 arguments.\"\
    \n    return 1\n  fi\n  local num_upper num_lower ext_name\n  local strongest_name=''\n\
    \  local strongest_score=0.0\n  local strongest_index=0\n  local index=0\n  local\
    \ i\n  for i in $2; do\n    num_upper=$(echo \"$i\" | tr -cd '[:upper:]' | wc\
    \ -c)\n    num_lower=$(echo \"$i\" | tr -cd '[:lower:]' | wc -c)\n    if [ $num_upper\
    \ -gt 0 ]; then\n      score=$(echo \"$num_upper - $num_lower\" | bc -l)\n   \
    \   if [ $(echo \"$score > $strongest_score\" | bc -l) -eq 1 ]; then\n       \
    \ strongest_score=$score\n        strongest_name=$i\n        strongest_index=$index\n\
    \      fi\n    fi\n    index=$((index + 1))\n  done\n  # If strongest_name is\
    \ empty, then the extension must be Cheese\n  if [ \"$strongest_name\" == \"\"\
    \ ]; then\n    echo \"$1.Cheese\"\n  else\n    echo \"$1.$strongest_name\"\n \
    \ fi", "  local name\n  local strongest=-2\n  local strength=0\n  local length\n\
    \  local cap=0\n  local sm=0\n  local i\n  local char\n  for name in $2\n  do\n\
    \    length=${#name}\n    for ((i=0; i<$length; i++))\n    do\n      char=${name:$i:1}\n\
    \      if [[ $char =~ [A-Z] ]]\n      then\n        (( cap += 1 ))\n      elif\
    \ [[ $char =~ [a-z] ]]\n      then\n        (( sm += 1 ))\n      fi\n    done\n\
    \    strength=$(( cap - sm ))\n    if [[ $strength -gt $strongest ]]\n    then\n\
    \      strongest=$strength\n      strongest_name=$name\n    fi\n    cap=0\n  \
    \  sm=0\n  done\n  echo \"$1.$strongest_name\"", "\tline=''\n\tfor word in $2;\
    \ do\n\t\tcap=$(echo $word | tr -d -c '[:upper:]')\n\t\tsm=$(echo $word | tr -d\
    \ -c '[:lower:]')\n\t\t#echo $cap\n\t\t#echo $sm\n\t\t#len=$(echo $word | wc -c)\n\
    \t\tstrength=$(bc <<< \"scale=4;$(echo ${#cap})/${#sm}\")\n\t\t#echo $strength\n\
    \t\tif [ \"$line\" == '' ]; then\n\t\t\tline=\"$strength $word\"\n\t\telse\n\t\
    \t\tline+=\" $strength $word\"\n\t\tfi\n\tdone\n\t#echo $line\n\tmax=$(echo $line\
    \ | tr ' ' '\\n' | sort -n | tail -n 1)\n\t#echo $max\n\text=$(echo $line | tr\
    \ ' ' '\\n' | grep -A 1 $max | tail -n 1)\n\techo $1.$ext", "\tlocal _str=${1^^}\n\
    \tlocal _ex=${2^^}\n\tlocal _val=-1\n\tfor i in $_ex; do\n\t\tlocal _LC=\"${i,,}\"\
    \n\t\tlocal _diff=`echo \"${i^^}${_LC}\" | sed 's/\\(.\\)/\\1\\n/g' | grep -Ev\
    \ '[A-Z]\\s+[A-Z]' | wc -l`\n\t\tlocal _temp=`echo \"$_diff / 2\" | bc -l`\n\t\
    \tif [ \"$_temp\" -gt \"$_val\" ]; then\n\t\t\t_val=$_temp\n\t\t\t_ext=$i\n\t\t\
    fi\n\tdone\n\techo $_str.$_ext", "  local class=$1\n  local extension_list=$2\n\
    \  local ext i\n  ext=${extension_list%% *}\n  local strength=999999\n  local\
    \ score=0\n  for i in $extension_list; do\n    score=$(($(LC_ALL=C printf \"%s\"\
    \ \"$i\" | tr -cd 'A-Z')-$(LC_ALL=C printf \"%s\" \"$i\" | tr -cd 'a-z')))\n \
    \   if (( $score < $strength )); then\n      strength=$score\n      ext=$i\n \
    \   fi\n  done\n  echo \"$class.$ext\"", "\tif [[ ! -z $1 ]] && [[ ! -z $2 ]];\
    \ then\n\t\tlocal strongest=\"\"\n\t\tlocal strength=0\n\t\tfor extension in $2;\
    \ do\n\t\t\tlocal cap=$(echo $extension | sed 's/[^A-Z]//g' | wc -c)\n\t\t\tlocal\
    \ sm=$(echo $extension | sed 's/[^a-z]//g' | wc -c)\n\t\t\tlocal test_strength=$(bc\
    \ <<< \"scale=3; $cap - $sm\")\n\t\t\t#echo \"$extension ($test_strength)\"\n\t\
    \t\tif (( $(bc <<< \"$test_strength > $strength\") )); then\n\t\t\t\tstrongest=$extension\n\
    \t\t\t\tstrength=$test_strength\n\t\t\tfi\n\t\tdone\n\t\techo \"$1.$strongest\"\
    \n\telse\n\t\techo \"Error: you must specify a string and a space-separated list.\"\
    \n\tfi", "  local strength\n  strength=$(for ext in $2; do\n    echo \"${ext}\
    \ $(($(echo \"${ext}\" | sed -e 's/[^A-Z]//g' | wc -m) - $(echo \"${ext}\" | sed\
    \ -e 's/[^a-z]//g' | wc -m)))\"\n  done | sort -nk2 | tail -n1)\n  echo \"$1.${strength%\
    \ *}\"", "  local -i max_strength max_str_index\n  local -a class=( $(echo $1\
    \ | sed 's/./& /g') )\n  local -a extensions=( $(for i in $2; do echo $i | sed\
    \ 's/./& /g'; done) )\n  local -a strength\n  local -i i j\n  max_strength=-1\n\
    \  max_str_index=1\n  for ((i=0; i<${#extensions[@]}; i++)); do\n    strength[i]=0\n\
    \    for ((j=0; j<${#extensions[i]}; j++)); do\n      case ${extensions[i]:j:1}\
    \ in\n        [A-Z]) (( strength[i]++ )) ;;\n        [a-z]) (( strength[i]-- ))\
    \ ;;\n      esac\n    done\n    if [[ ${strength[i]} -gt $max_strength ]]; then\n\
    \      max_strength=${strength[i]}\n      max_str_index=$(( i + 1 ))\n    fi\n\
    \  done\n  echo ${class[@]}'.'${extensions[$((max_str_index - 1))]}", "\techo\
    \ $1.`printf \"%s\\n\" $2 | grep -Eo '([A-Z]+[a-z]*)' | awk '{ print substr($0,1,\
    \ length($0)-1) }' | sort -k2n | head -n1`", "\tlocal class=\"$1\"\n\tlocal old_IFS=\"\
    $IFS\"\n\tIFS=' '\n\tlocal -a ext=($2)\n\tlocal strongest_strength=99999\n\tlocal\
    \ strongest_ext=''\n\tfor e in \"${ext[@]}\"; do\n\t\tlocal uc=$(echo \"$e\" |\
    \ sed 's/[^A-Z]//g')\n\t\tlocal lc=$(echo \"$e\" | sed 's/[^a-z]//g')\n\t\tlocal\
    \ strength=$((${#uc} - ${#lc}))\n\t\tif [[ $strength -lt $strongest_strength ]];\
    \ then\n\t\t\tstrongest_strength=$strength\n\t\t\tstrongest_ext=\"$e\"\n\t\tfi\n\
    \tdone\n\tIFS=\"$old_IFS\"\n\techo \"$class.$strongest_ext\"", "  local class=\"\
    $1\"\n  local -a list=(\"$2\")\n  local strongest_ext=\"\"\n  local strongest_value=0\n\
    \  local current_value=0\n  local i\n  for i in \"${list[@]}\"; do\n    current_value=$(awk\
    \ -F\"[a-z]\" '{print NF-1}' <<< $i)\n    current_value=$(($current_value - $(tr\
    \ -d -c [:upper:] <<< $i)))\n    [[ $current_value -gt $strongest_value ]] &&\
    \ strongest_ext=\"$i\" && strongest_value=$current_value\n  done\n  echo \"$class.$strongest_ext\"",
  "  local class=\"$1\"\n  local -a ext=($2)\n  local -i strongest=\"$(echo \"${ext[0]}\"\
    \ | grep -o [A-Z] | wc -l) - $(echo \"${ext[0]}\" | grep -o [a-z] | wc -l)\"\n\
    \  local -i strength=0\n  local ext_name=\"${ext[0]}\"\n  local -i len=\"${#ext[@]}\"\
    \n  local -i i\n  for ((i=1; i<len; i++)); do\n    strength=\"$(echo \"${ext[i]}\"\
    \ | grep -o [A-Z] | wc -l) - $(echo \"${ext[i]}\" | grep -o [a-z] | wc -l)\"\n\
    \    if (( \"$strength\" > \"$strongest\" )); then\n      strongest=\"$strength\"\
    \n      ext_name=\"${ext[i]}\"\n    fi\n  done\n  echo \"$class.$ext_name\"",
  "  local NAMES=($2)\n  local STRENGTHS=()\n  for NAME in ${NAMES[@]}; do\n    local\
    \ CAPS=0\n    local SMALLS=0\n    for C in $(echo $NAME | grep -o .); do\n   \
    \   [[ $C =~ [[:upper:]] ]] && CAPS=$((CAPS+1))\n      [[ $C =~ [[:lower:]] ]]\
    \ && SMALLS=$((SMALLS+1))\n    done\n    STRENGTHS+=($((CAPS-SMALLS)))\n  done\n\
    \  STRENGTH=$(printf \"%d \" ${STRENGTHS[@]} | tr \" \" \"\\n\" | sort -nr | head\
    \ -n 1)\n  echo \"$1.${NAMES[$(printf \"%d \" ${STRENGTHS[@]} | tr \" \" \"\\\
    n\" | sort -nr | \\\n    grep \"^$STRENGTH$\" | awk '{print NR}' | head -n 1)]}\"",
  "    local class_name=$1\n    local str=\"\"\n    local strongest=\"\"\n    local\
    \ strength=0\n    local tmp_strength=0\n    local caps=0\n    local sm=0\n   \
    \ for i in $2; do\n        str=\"$class_name.$i\"\n        caps=$(echo \"$i\"\
    \ | grep -o \"[A-Z]\" | wc -l)\n        sm=$(echo \"$i\" | grep -o \"[a-z]\" |\
    \ wc -l)\n        tmp_strength=$(echo \"$caps - $sm\" | bc)\n        # echo \"\
    $i = $tmp_strength\"\n        if [ $tmp_strength -gt $strength ]; then\n     \
    \       strongest=\"$str\"\n            strength=$tmp_strength\n        fi\n \
    \   done\n    echo \"$strongest\"", "    class_name=\"$1\"\n    IFS=' ' read -r\
    \ -a extension_array <<< \"$2\"\n    IFS=$'\\n'\n    strongest_ext=${extension_array[0]}\n\
    \    strongest_ext_strength=0\n    for extension in \"${extension_array[@]}\"\
    ; do\n        if [ -z \"$extension\" ]; then\n            continue\n        fi\n\
    \        upper_count=$(echo \"$extension\" | tr -dc '[[:upper:]]' | wc -c)\n \
    \       lower_count=$(echo \"$extension\" | tr -dc '[[:lower:]]' | wc -c)\n  \
    \      curr_strength=$(echo \"scale=2; $upper_count/$lower_count\" | bc)\n   \
    \     if (( $(echo \"$curr_strength > $strongest_ext_strength\" | bc -l) )); then\n\
    \            strongest_ext=$extension\n            strongest_ext_strength=$curr_strength\n\
    \        fi\n    done\n    echo \"$class_name.$strongest_ext\"", "    local class_name\n\
    \    local extension_name\n    local strongest_extension\n    local strongest_strength\n\
    \    local extension_strength\n    local extension_size\n    local CAP\n    local\
    \ SM\n    local extension_list\n\n    class_name=\"$1\"\n    extension_list=\"\
    $2\"\n\n    strongest_strength=0\n    for extension_name in $extension_list; do\n\
    \        CAP=$(echo \"$extension_name\" | sed 's/[^A-Z]//g' | wc -c)\n       \
    \ SM=$(echo \"$extension_name\" | sed 's/[^a-z]//g' | wc -c)\n        extension_strength=$(echo\
    \ \"$CAP - $SM\" | bc)\n        if [[ \"$extension_strength\" -gt \"$strongest_strength\"\
    \ ]]; then\n            strongest_strength=\"$extension_strength\"\n         \
    \   strongest_extension=\"$extension_name\"\n        fi\n    done\n    echo \"\
    $class_name.$strongest_extension\"", "\tlocal class=$1\n\tlocal exts=$2\n\t\n\t\
    local nums=$(echo $exts | sed -e 's/[^[:upper:]]//g')\n\tlocal denoms=$(echo $exts\
    \ | sed -e 's/[^[:lower:]]//g')\n\tlocal res=$(\n\t\tpaste <(echo \"$nums\") <(echo\
    \ \"$denoms\") | \n\t\tawk '{print length($1) - length($2)}'\n\t)\n\t\n\tlocal\
    \ max=$(echo \"$res\" | head -n 1)\n\tlocal max_ext=$(echo \"$exts\" | head -n\
    \ 1)\n\t\n\tfor i in $(seq 2 $(echo \"$res\" | wc -l)); do\n\t\tif [ $(echo \"\
    $res\" | head -n $i | tail -n 1) -gt $max ]; then\n\t\t\tmax=$(echo \"$res\" |\
    \ head -n $i | tail -n 1)\n\t\t\tmax_ext=$(echo \"$exts\" | head -n $i | tail\
    \ -n 1)\n\t\tfi\n\tdone\n\t\n\techo \"$class.$max_ext\"", "  local class=$1\n\
    \  local -a extensions=($2)\n  local strongest_extension=${extensions[0]}\n  local\
    \ strongest_extension_strength=$(Extension_Strength $strongest_extension)\n  for\
    \ extension in \"${extensions[@]}\"; do\n    if [ $(Extension_Strength $extension)\
    \ -gt \"$strongest_extension_strength\" ]; then\n      strongest_extension_strength=$(Extension_Strength\
    \ $extension)\n      strongest_extension=$extension\n    fi\n  done\n  echo \"\
    $class.$strongest_extension\"", "\tlocal class=\"$1\"\n\tlocal list=( $2 )\n\t\
    local num_ext=\"${#list[@]}\"\n\tlocal i=0\n\tlocal strength=0\n\tlocal tmp=0\n\
    \tlocal count=0\n\tlocal index=0\n\tfor (( i=0; i<$num_ext; i++ )); do\n\t\ttmp=$(echo\
    \ ${list[$i]} | egrep -o \"[A-Z]\" | wc -l)\n\t\ttmp=$(( tmp - $(echo ${list[$i]}\
    \ | egrep -o \"[a-z]\" | wc -l) ))\n\t\tif [[ $tmp -gt $strength ]]; then\n\t\t\
    \tstrength=$tmp\n\t\t\tindex=$i\n\t\tfi\n\tdone\n\techo \"$class.${list[$index]}\"",
  "  echo $1.$(echo \"$2\" | tr ' ' '\\n' | \n    awk '{CAP = gsub(/[A-Z]/, \"\",\
    \ $0); SM = gsub(/[a-z]/, \"\", $0); print CAP-SM}' | \n    sort -n | tail -1\
    \ | sed -n $(($1+1))p)", "    local class_name=$1\n    local -a extensions=($2)\n\
    \    local extension\n    local strength\n    local strongest_extension\n    local\
    \ strength_of_strongest_extension=0\n    for extension in \"${extensions[@]}\"\
    ; do\n        strength=$(Calculate_Strength \"$extension\")\n        if (( $(echo\
    \ \"$strength > $strength_of_strongest_extension\" | bc -l) )); then\n       \
    \     strongest_extension=$extension\n            strength_of_strongest_extension=$strength\n\
    \        fi\n    done\n    echo \"$class_name.$strongest_extension\"", "  CAP=0\n\
    \  SM=0\n  S=\"\"\n  I=0\n  for ext in $2; do\n    CAP1=0\n    SM1=0\n    for\
    \ ((I=0; I<${#ext}; I++)); do\n      if [[ ${ext:$I:1} =~ [A-Z] ]]; then\n   \
    \     ((CAP1++))\n      else\n        ((SM1++))\n      fi\n    done\n    if ((\
    \ (CAP1 - SM1) > (CAP - SM) )); then\n      CAP=$CAP1\n      SM=$SM1\n      S=$ext\n\
    \    fi\n  done\n  if [[ \"$S\" == \"\" ]]; then\n    echo \"Nothing\"\n  else\n\
    \    echo \"$1.$S\"\n  fi", "  local count=0\n  local upper=0\n  local cap=0\n\
    \  local lower=0\n  local lower_case=$(echo $2 | sed 's/[^a-z]//g')\n  local upper_case=$(echo\
    \ $2 | sed 's/[^A-Z]//g')\n  local extensions=$(echo $2 | tr ' ' '\\n')\n  local\
    \ strongest=$2\n  local strongest_strength=0\n  while read ext; do\n    count=$((\
    \ count + 1 ))\n    upper=$(echo $ext | sed 's/[^A-Z]//g' | wc -m)\n    cap=$((\
    \ upper - 1 ))\n    lower=$(echo $ext | sed 's/[^a-z]//g' | wc -m)\n    strength=$((\
    \ cap - lower ))\n    if [ $strength -gt $strongest_strength ]; then\n      strongest_strength=$strength\n\
    \      strongest=${extensions[$count]}\n    fi\n  done <<< \"$extensions\"\n \
    \ echo \"$1.$strongest\"", "    local name=$1\n    local my_array=$2\n    declare\
    \ -a extensions=($my_array)\n    declare -a strengths\n    local count=0\n   \
    \ local max_strength\n    local str_max_strength\n\n    for index in ${!extensions[*]}\n\
    \    do\n        strengths[$index]=$(echo \"${extensions[$index]}\" | sed -e 's/[^A-Z]//g'\
    \ | tr -d '\\n' | wc -c)\n        strengths[$index]=$((${strengths[$index]} -\
    \ $(echo \"${extensions[$index]}\" | sed -e 's/[^a-z]//g' | tr -d '\\n' | wc -c)))\n\
    \    done\n\n    max_strength=${strengths[0]}\n    str_max_strength=${extensions[0]}\n\
    \    for index in ${!strengths[*]}\n    do\n        if [ ${strengths[$index]}\
    \ -gt $max_strength ]\n        then\n            max_strength=${strengths[$index]}\n\
    \            str_max_strength=${extensions[$index]}\n        fi\n    done\n\n\
    \    echo \"$name.$str_max_strength\"", "\tlocal name=$1; shift\n\tlocal strength=-1\n\
    \tlocal strongest_ext=''\n\tfor ext in $@; do\n\t\tlocal cap_letters=$(echo $ext\
    \ | grep -o '[[:upper:]]' | wc -l)\n\t\tlocal sm_letters=$(echo $ext | grep -o\
    \ '[[:lower:]]' | wc -l)\n\t\tlocal ext_strength=$(($cap_letters - $sm_letters))\n\
    \t\tif [ $ext_strength -gt $strength ]; then\n\t\t\tstrength=$ext_strength\n\t\
    \t\tstrongest_ext=$ext\n\t\tfi\n\tdone\n\techo \"$name.$strongest_ext\"", "  \
    \  declare -a arr=(\"$@\")\n    strength=($(\n        echo \"${arr[@]:1}\"|tr\
    \ \" \" \"\\n\"|\n        awk 'BEGIN{OFS=\"\\t\"} {print $0,length($0)-gsub(/[A-Z]/,\"\
    \")}'|\n        sort -nk2|\n        awk 'BEGIN{FS=\"\\t\"}{print $2}'|\n     \
    \   awk '!x[$0]++'|\n        sort -n|\n        tail -1\n    ))\n    echo \"${arr[0]}.$(\n\
    \        echo \"${arr[@]:1}\"|tr \" \" \"\\n\"|\n        awk 'BEGIN{OFS=\"\\t\"\
    } {print $0,length($0)-gsub(/[A-Z]/,\"\")}'|\n        sort -nk2|\n        awk\
    \ 'BEGIN{FS=\"\\t\"}{print $1}'|\n        awk '$1==\"'${strength[0]}'\"{print\
    \ $0}'|\n        head -1\n    )\"", "    local class=$1\n    local extensions=\"\
    $2\"\n    local -i max_strength=0\n    local strongest_extension=\"\"\n    for\
    \ ext in $extensions; do\n        local -i CAP=$(grep -o [[:upper:]] <<< $ext\
    \ | wc -l)\n        local -i SM=$(grep -o [[:lower:]] <<< $ext | wc -l)\n    \
    \    local -i strength=$((CAP - SM))\n        if [[ \"$strength\" -gt \"$max_strength\"\
    \ ]]; then\n            max_strength=$strength\n            strongest_extension=$ext\n\
    \        fi\n    done\n    echo \"$class.$strongest_extension\"", "  local a=\"\
    $1\"\n  shift\n  local lst=($*)\n  local lstStrength=()\n  local lstUpper=()\n\
    \  local lstLower=()\n  for i in ${lst[@]}; do\n    lstStrength+=($(echo $i |\
    \ grep -o -E '[A-Z]' | tr -d '\\n' | wc -c))\n    lstUpper+=($(echo $i | grep\
    \ -o -E '[A-Z]' | tr -d '\\n' | wc -c))\n    lstLower+=($(echo $i | grep -o -E\
    \ '[a-z]' | tr -d '\\n' | wc -c))\n  done\n  local lstDiff=()\n  for (( i=0; i<${#lstStrength[@]};\
    \ i++ )); do\n    lstDiff+=($((${lstUpper[$i]}-${lstLower[$i]})))\n  done\n  local\
    \ maxStrength=${lstDiff[0]}\n  local maxIndex=0\n  for (( i=1; i<${#lstDiff[@]};\
    \ i++ )); do\n    if [[ ${lstDiff[$i]} -gt $maxStrength ]]; then\n      maxStrength=${lstDiff[$i]}\n\
    \      maxIndex=$i\n    fi\n  done\n  echo \"$a.${lst[$maxIndex]}\"", "    # first,\
    \ we eliminate the non-alpha chars\n    local class_name=$(echo $1 | tr -cd '[[:alpha:]]')\n\
    \    local ext_list=$(echo $2 | tr -cd '[[:alpha:]]')\n    local max_strength=0\n\
    \    local strongest_ext=\n    for ext in $ext_list; do\n        local ext_strength=$(echo\
    \ $ext | \\\n            tr -cd '[[:upper:]]' | wc -c)\n        ext_strength=$((ext_strength-$(echo\
    \ $ext | \\\n            tr -cd '[[:lower:]]' | wc -c)))\n        if [[ ext_strength\
    \ -gt max_strength ]]; then\n            max_strength=$ext_strength\n        \
    \    strongest_ext=$ext\n        fi\n    done\n    echo \"$class_name.$strongest_ext\"",
  "  local class=$1\n  IFS=' ' read -r -a list <<< \"$2\"\n  local name=${list[0]}\n\
    \  local strength=0\n  local i=0\n  while [ $i -lt ${#list[@]} ]; do\n    local\
    \ name=${list[$i]}\n    local caps=$(echo \"$name\" | sed 's/[^A-Z]//g')\n   \
    \ local smalls=$(echo \"$name\" | sed 's/[^a-z]//g')\n    local strength_new=$(echo\
    \ \"${#caps} - ${#smalls}\" | bc)\n    if [ $strength_new -gt $strength ]; then\n\
    \      strength=$strength_new\n      strongest=$name\n    fi\n    i=$(($i + 1))\n\
    \  done\n  echo \"$class.$strongest\"", "  maxStrength=-1\n  for s in $2; do\n\
    \    sStrength=$(echo $s | sed -e 's/\\(.*\\)/\\L\\1/' | \\\n      sed -e 's/\\\
    (.*\\)/\\U\\1/' | \\\n      sed -e 's/[^A-Z]//g' | \\\n      sed -e 's/[^a-z]//g'\
    \ | \\\n      awk '{print length($0)}')\n    if [ $sStrength -gt $maxStrength\
    \ ]; then\n      maxStrength=$sStrength\n      maxStr=$s\n    fi\n  done\n  echo\
    \ \"$1.$maxStr\"", "  re='[a-z]'\n  if [[ $1 =~ $re ]]; then\n    echo \"ERROR:\
    \ the name must be uppercase.\"\n    return 0\n  fi\n  if [ -z \"$2\" ]; then\n\
    \    echo \"ERROR: no extensions given.\"\n    return 0\n  fi\n  strongest=0.0\n\
    \  strongestext=\"\"\n  extlist=( $2 )\n  for ext in \"${extlist[@]}\"; do\n \
    \   if [[ $ext =~ $re ]]; then\n      echo \"ERROR: the extension must be uppercase.\"\
    \n      return 0\n    fi\n    name=( ${ext//[A-Z]/-} )\n    strength=$(echo \"\
    ${#name[@]}/${#ext}\" | bc -l)\n    if [ \"$strength\" \\> \"$strongest\" ]; then\n\
    \      strongest=\"$strength\"\n      strongestext=\"$ext\"\n    fi\n  done\n\
    \  echo \"$1.$strongestext\"", "  local class=$1\n  local extensions=( $2 )\n\
    \  local ext_strength=()\n  for ext in \"${extensions[@]}\"; do\n    ext_strength+=(\"\
    $(LC \"$ext\")/$(UC \"$ext\")\")\n  done\n  local idx_sorted_exts=$(Array_Sort\
    \ \"${ext_strength[@]}\")\n  local i=0\n  for ext in \"${extensions[@]}\"; do\n\
    \    if [[ $(expr index \"$idx_sorted_exts\" \"$i\") -ne \"0\" ]]; then\n    \
    \  echo \"$class.$ext\"\n      break\n    fi\n    ((i++))\n  done", "  # Extract\
    \ the class name from $1\n  # Create a list of the extensions in $2\n  # Create\
    \ a list of the strengths of the extensions\n  # Create a list of the positions\
    \ of the extensions in the original list\n  # Create a list of the strengths and\
    \ positions of the extensions in the original list\n  # Sort the list of strengths\
    \ and positions\n  # Use the last position of the sorted list to find the extension\
    \ with the highest strength\n  # Return the class name and the strongest extension\
    \ name.", "  local _class=$1\n  local _extensions=$2\n  local _max_strength=0\n\
    \  local _max_ext=\"\"\n  local _ext_strength\n\n  for ext in $_extensions; do\n\
    \    ((_ext_strength=${#ext}-`echo \"$ext\" | tr '[:upper:]' '[:lower:]' | tr\
    \ -d '[:alpha:]' | wc -c`))\n    if ((_ext_strength > _max_strength)); then\n\
    \      _max_strength=$_ext_strength\n      _max_ext=$ext\n    fi\n  done\n  echo\
    \ $_class.$_max_ext", "    class=$1\n    tmp=$(echo $2 | tr \" \" \",\")\n   \
    \ maxStrength=-1\n    maxExt=${tmp##*,}\n    for ext in $(echo $tmp | tr \",\"\
    \ \" \"); do\n        CAP=$(echo $ext | tr -d -c '[:upper:]')\n        SM=$(echo\
    \ $ext | tr -d -c '[:lower:]')\n        strength=$(($((${#CAP}-${#SM}))+1))\n\
    \        if [ $strength -gt $maxStrength ]; then\n            maxStrength=$strength\n\
    \            maxExt=$ext\n        fi\n    done\n    echo \"$class.$maxExt\"",
  "\tlocal class=$1\n\tshift\n\tlocal strongest_ext=\n\tlocal strongest_ext_strength=0\n\
    \tfor ext in $@; do\n\t\tlocal caps=$(echo \"$ext\" | tr -cd '[:upper:]' | wc\
    \ -c)\n\t\tlocal smalls=$(echo \"$ext\" | tr -cd '[:lower:]' | wc -c)\n\t\tlocal\
    \ strength=$(bc <<< \"scale=3; $caps/$smalls\")\n\t\tif [[ $(bc <<< \"$strength\
    \ > $strongest_ext_strength\") -eq 1 ]]; then\n\t\t\tstrongest_ext=$ext\n\t\t\t\
    strongest_ext_strength=$strength\n\t\tfi\n\tdone\n\techo \"$class.$strongest_ext\"",
  "    local class=\"$1\"\n    local S=\"\"\n    local x=\"\"\n    local U=\"\"\n\
    \    local L=\"\"\n    local strength=\"\"\n    local strongest=\"\"\n    local\
    \ strength_max=\"\"\n    for x in $2; do\n        U=$(echo \"$x\" | tr -cd '[:upper:]')\n\
    \        L=$(echo \"$x\" | tr -cd '[:lower:]')\n        strength=$(echo \"scale=10;${#U}\
    \ - ${#L}\" | bc)\n        if [[ $strength -gt $strength_max ]]; then\n      \
    \      strength_max=$strength\n            strongest=\"$x\"\n        fi\n    done\n\
    \    echo \"$class.$strongest\"", "  local -a extensions=($2)\n  local name=$1\n\
    \n  # https://stackoverflow.com/questions/14550113/use-bash-associative-array-to-count-uppercase-lowercase-characters\n\
    \  declare -A ch\n  for char in {A..Z} {a..z}; do\n    ch[$char]=0\n  done\n\n\
    \  local ext strength strongest strength_max=0\n  for ext in \"${extensions[@]}\"\
    ; do\n    for ((i=0; i<${#ext}; i++)); do\n      ((ch[${ext:i:1}]++))\n    done\n\
    \    strength=${ch[A]}-${ch[a]}\n    if (($strength > $strength_max)); then\n\
    \      strength_max=$strength\n      strongest=$ext\n    fi\n    unset ch\n  \
    \  for char in {A..Z} {a..z}; do\n      ch[$char]=0\n    done\n  done\n  echo\
    \ \"$name.$strongest\"", "\texts=()\n\twhile read ext; do\n\t\texts+=( \"$ext\"\
    \ )\n\tdone < <(\n\t\tprintf '%s\\n' \"$2\" | cut -d' ' -f1-\n\t)\n\t#echo \"\
    exts: ${exts[@]}\"\n\n\tstrength=0\n\tstrongest_ext=\"\"\n\tfor ext in \"${exts[@]}\"\
    ; do\n\t\tthis_strength=$(\n\t\t\techo \"$ext\" | grep -o '[[:upper:]]' | wc -l\n\
    \t\t)\n\t\tthis_strength=$((\n\t\t\tthis_strength - (\n\t\t\t\techo \"$ext\" |\
    \ grep -o '[[:lower:]]' | wc -l\n\t\t\t)\n\t\t))\n\t\t#echo \"ext: $ext; strength:\
    \ $this_strength\"\n\t\tif [ $this_strength -gt $strength ]; then\n\t\t\tstrongest_ext=\"\
    $ext\"\n\t\t\tstrength=$this_strength\n\t\tfi\n\tdone\n\t#echo \"strongest_ext:\
    \ $strongest_ext\"\n\techo \"$1.$strongest_ext\"", "\tlocal class_name=$1\n\t\
    local -a extensions=( $2 )\n\tlocal -i max_cap=0\n\tlocal -i max_sm=0\n\tlocal\
    \ -i cap=0\n\tlocal -i sm=0\n\tlocal -i i=0\n\tlocal strongest_extension\n\tfor\
    \ extension in \"${extensions[@]}\"; do\n\t\tsm=0\n\t\tcap=0\n\t\tfor (( i=0;\
    \ i<${#extension}; i++ )); do\n\t\t\tif [[ ${extension:$i:1} =~ [A-Z] ]]; then\n\
    \t\t\t\t(( cap++ ))\n\t\t\telif [[ ${extension:$i:1} =~ [a-z] ]]; then\n\t\t\t\
    \t(( sm++ ))\n\t\t\tfi\n\t\tdone\n\t\t(( strength = cap - sm ))\n\t\tif [[ $strength\
    \ -gt $max_cap ]]; then\n\t\t\tmax_cap=$strength\n\t\t\tmax_sm=$sm\n\t\t\tstrongest_extension=\"\
    $extension\"\n\t\telif [[ $strength -eq $max_cap ]]; then\n\t\t\tif [[ $sm -lt\
    \ $max_sm ]]; then\n\t\t\t\tmax_sm=$sm\n\t\t\t\tstrongest_extension=\"$extension\"\
    \n\t\t\tfi\n\t\tfi\n\tdone\n\tprintf \"%s.%s\" \"$class_name\" \"$strongest_extension\"",
  "\t# do something here\n\t# this code is correct, but not the one required\n\t#\
    \ echo \"$1.$(echo $2 | sed -e 's/\\b[a-z]\\b//g' -e 's/ //g')\"\n\t\n\t# this\
    \ one works\n\tmax=0\n\tfor i in $2; do\n\t\tif [[ \"$i\" =~ [a-z] ]]; then\n\t\
    \t\tsm=$(echo $i | tr -cd [a-z] | wc -c)\n\t\telse\n\t\t\tsm=0\n\t\tfi\n\t\tif\
    \ [[ \"$i\" =~ [A-Z] ]]; then\n\t\t\tcap=$(echo $i | tr -cd [A-Z] | wc -c)\n\t\
    \telse\n\t\t\tcap=0\n\t\tfi\n\t\tstrength=$(echo \"$cap - $sm\" | bc)\n\t\tif\
    \ [[ $(echo \"$strength > $max\" | bc) -eq 1 ]]; then\n\t\t\tmax=$strength\n\t\
    \t\tstrongest=$i\n\t\tfi\n\tdone\n\techo \"$1.$strongest\"", "\tlocal cl=$1\n\t\
    local exts=$2\n\techo \"$cl.$(echo \"$exts\" | sed 's/ /\\n/g' | sort -b -k3 -n\
    \ -t. | head -n1)\"", "    local classname=$1\n    local extlist=$2\n    local\
    \ extension\n    local strength=-2\n    local strongest\n    for extension in\
    \ $extlist; do\n        local newstrength=$(($(tr -d -c '[:upper:]' <<< $extension)-$(tr\
    \ -d -c '[:lower:]' <<< $extension)))\n        if ((newstrength>strength)); then\n\
    \            strength=$newstrength\n            strongest=$extension\n       \
    \ fi\n    done\n    echo \"$classname.$strongest\"", "    local extension ext_strngth\
    \ class_strngth strongest\n    local class_strngth=$(echo $1 | sed 's/[^A-Z]//g'\
    \ | wc -m)\n    class_strngth=$(( $class_strngth - 1 ))\n    strongest=$class_strngth\n\
    \    for extension in $2\n    do\n        ext_strngth=$(echo $extension | sed\
    \ 's/[^A-Z]//g' | wc -m)\n        ext_strngth=$(( $ext_strngth - 1 ))\n      \
    \  ext_strngth=$(( $ext_strngth - $(echo $extension | sed 's/[^a-z]//g' | wc -m)\
    \ + 1 ))\n        if [[ $ext_strngth -gt $strongest ]]\n        then\n       \
    \     strongest=$ext_strngth\n            strongest_extension=$extension\n   \
    \     fi\n    done\n    echo \"$1.$strongest_extension\"", "  local class=\"$1\"\
    \n  local extensions=($2)\n  local ext\n  local strength=-1\n  local strongest\n\
    \  for ext in \"${extensions[@]}\"; do\n    local cap=$(echo \"$ext\" | tr -cd\
    \ '[[:upper:]]' | wc -c)\n    local sm=$(echo \"$ext\" | tr -cd '[[:lower:]]'\
    \ | wc -c)\n    local s=$(awk \"BEGIN {printf \\\"%.5f\\\", $cap - $sm}\")\n \
    \   if (( $(echo \"$s > $strength\" | bc -l) )); then\n      strength=$s\n   \
    \   strongest=\"$ext\"\n    fi\n  done\n  echo \"$class.$strongest\"", "  local\
    \ strongest_extension=''\n  local strongest_extension_strength=0\n  local extension_strength=0\n\
    \  local extension=''\n  local uppercase_letter_count=0\n  local lowercase_letter_count=0\n\
    \  local letter=''\n  local extension_name=''\n  local class_name=\"$1\"\n  local\
    \ extension_list=($2)\n  local extension_list_len=${#extension_list[@]}\n  #echo\
    \ \"DEBUG: class_name: $class_name\"\n  #echo \"DEBUG: extension_list: ${extension_list[@]}\"\
    \n  #echo \"DEBUG: extension_list_len: $extension_list_len\"\n  #echo \"DEBUG:\
    \ \"\n  for ((i=0; i<$extension_list_len; i++)); do\n    extension=\"${extension_list[$i]}\"\
    \n    extension_strength=0\n    uppercase_letter_count=0\n    lowercase_letter_count=0\n\
    \    for ((j=0; j<${#extension}; j++)); do\n      letter=\"${extension:$j:1}\"\
    \n      if [[ \"$letter\" =~ [A-Z] ]]; then\n        ((uppercase_letter_count++))\n\
    \      elif [[ \"$letter\" =~ [a-z] ]]; then\n        ((lowercase_letter_count++))\n\
    \      fi\n    done\n    extension_strength=$((uppercase_letter_count - lowercase_letter_count))\n\
    \    #echo \"DEBUG: extension: $extension\"\n    #echo \"DEBUG: extension_strength:\
    \ $extension_strength\"\n    #echo \"DEBUG: strongest_extension_strength: $strongest_extension_strength\"\
    \n    #echo \"DEBUG: \"\n    if [[ $extension_strength -gt $strongest_extension_strength\
    \ ]]; then\n      strongest_extension=\"$extension\"\n      strongest_extension_strength=\"\
    $extension_strength\"\n    fi\n  done\n  extension_name=$(echo \"$strongest_extension\"\
    \ | cut -c 1-1 | tr '[:lower:]' '[:upper:]')$(echo \"$strongest_", "  local class=${1}\n\
    \  local extensions=($2)\n  local extension_name\n  local extension_strength\n\
    \  local strongest_strength=-1\n  local strongest_extension=\"\"\n  local cap\n\
    \  local sm\n  for extension_name in \"${extensions[@]}\"; do\n    (( cap=0, sm=0\
    \ ))\n    for (( i=0; i<${#extension_name}; i++ )); do\n      c=${extension_name:$i:1}\n\
    \      if [[ $c =~ [A-Z] ]]; then\n        (( cap++ ))\n      elif [[ $c =~ [a-z]\
    \ ]]; then\n        (( sm++ ))\n      fi\n    done\n    extension_strength=$((\
    \ cap - sm ))\n    if (( extension_strength > strongest_strength )); then\n  \
    \    strongest_strength=$extension_strength\n      strongest_extension=$extension_name\n\
    \    fi\n  done\n  echo \"${class}.${strongest_extension}\"", "    local class=\"\
    $1\"\n    local -a ext_list=($2)\n    local max_strength=0\n    local -i i max_i\n\
    \    max_i=${#ext_list[@]}\n    for ((i=0; i<max_i; i++)); do\n        local extension=${ext_list[$i]}\n\
    \        local strength=$(Strength $extension)\n        if [[ $strength -gt $max_strength\
    \ ]]; then\n            max_strength=$strength\n            max_i=$i\n       \
    \ fi\n    done\n    echo \"$class.${ext_list[$max_i]}\"", "    local i j\n   \
    \ local a b strength strongest=0\n    for i in $2; do\n        [[ $i =~ ^[[:upper:]]+$\
    \ ]] && a=$i || a=\n        [[ $i =~ ^[[:lower:]]+$ ]] && b=$i || b=\n       \
    \ strength=$(echo \"scale=4; ${#a} - ${#b}\" | bc -l)\n        if (( $(echo \"\
    $strength > $strongest\" | bc -l) )); then\n            strongest=$strength\n\
    \            j=$i\n        fi\n    done\n    echo \"$1.$j\"", "    local arg1\
    \ arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10\n    arg1=${1} arg2=${2} arg3=${3}\
    \ arg4=${4} arg5=${5} arg6=${6} arg7=${7} arg8=${8} arg9=${9} arg10=${10}\n  \
    \  local max_strength\n    max_strength=0\n    local current_strength\n    current_strength=0\n\
    \    local max_strength_extension\n    local current_extension\n    local i\n\
    \    local extension\n    for ((i=2; i<=$#; i++)); do\n        extension=${!i}\n\
    \        current_strength=$(echo \"${extension}\" | sed -e 's/[^A-Z]//g' | wc\
    \ -c)\n        current_strength=$((current_strength - $(echo \"${extension}\"\
    \ | sed -e 's/[^a-z]//g' | wc -c)))\n        if (( $(echo \"${current_strength}\
    \ > ${max_strength}\" | bc -l) )); then\n            max_strength=\"${current_strength}\"\
    \n            max_strength_extension=\"${extension}\"\n        fi\n    done\n\
    \    echo \"${arg1}.${max_strength_extension}\"", "    local class=\"$1\"\n  \
    \  local extensions=\"$2\"\n    local strongest_ext\n    local strongest_ext_strength=0\n\
    \    local current_ext\n    local current_ext_strength\n    for current_ext in\
    \ ${extensions}; do\n        local upper_chars=$(echo \"${current_ext}\" | tr\
    \ '[:lower:]' '[:upper:]')\n        local upper_chars_num=$(echo \"${upper_chars}\"\
    \ | wc -c)\n        local lower_chars=$(echo \"${current_ext}\" | tr '[:upper:]'\
    \ '[:lower:]')\n        local lower_chars_num=$(echo \"${lower_chars}\" | wc -c)\n\
    \        current_ext_strength=$((upper_chars_num - lower_chars_num))\n       \
    \ if (( current_ext_strength > strongest_ext_strength )); then\n            strongest_ext=\"\
    ${current_ext}\"\n            strongest_ext_strength=\"${current_ext_strength}\"\
    \n        fi\n    done\n    echo \"${class}.${strongest_ext}\"", "    echo $1.$(python3\
    \ -c \"from itertools import islice;\n                          inp = \\\"$2\\\
    \".split(' ');\n                          min_strength = 1;\n                \
    \          strength = 0;\n                          min_elem = '';\n         \
    \                 for line in inp:\n                              strength = sum(1\
    \ for c in line if c.isupper())\n                              strength -= sum(1\
    \ for c in line if c.islower())\n                              if strength < min_strength:\n\
    \                                  min_strength = strength;\n                \
    \                  min_elem = line;\n                          print(min_elem);\"\
    );", "    declare -a extensions=($2)\n    local -i max_strength=$((${#1} * 2))\n\
    \    local current_extension=\"\"\n    local -i current_strength=0\n    local\
    \ chosen_extension=\"\"\n    for current_extension in \"${extensions[@]}\"; do\n\
    \        ((current_strength = $(echo $current_extension | grep -o \"[[:upper:]]\"\
    \ | wc -l) - $(echo $current_extension | grep -o \"[[:lower:]]\" | wc -l)))\n\
    \        if ((current_strength > max_strength)); then\n            max_strength=$current_strength\n\
    \            chosen_extension=$current_extension\n        fi\n    done\n    echo\
    \ \"$1.$chosen_extension\"", "   class=$1\n   shift\n   strongest_ext=0\n   strongest_name=\"\
    \"\n   for ext in $@\n   do\n      sum=0\n      for c in $(echo $ext | fold -w1)\n\
    \      do\n         case $c in\n         [A-Z]) let sum+=1;;\n         [a-z])\
    \ let sum-=1;;\n         esac\n      done\n      if [ $sum -gt $strongest_ext\
    \ ]\n      then\n         strongest_ext=$sum\n         strongest_name=$ext\n \
    \     fi\n   done\n   echo $class.$strongest_name", "    local S=$1\n    local\
    \ L=$2\n    local T\n    for x in $L; do\n        T=\"$(awk 'BEGIN{print '$(echo\
    \ $x | grep -o [A-Z] | wc -l)'-'$(echo $x | grep -o [a-z] | wc -l)'}')\"\n   \
    \     if [[ $T -gt $M ]]; then\n            M=$T\n            N=$x\n        fi\n\
    \    done\n    echo \"$S.$N\"", '    echo $2', "    local class=$1\n    local\
    \ -a list=( $2 )\n    local -i idx=0 i=0 max=-100\n    for i in $(seq 0 $((${#list[@]}-1)));\
    \ do\n        count_upper=$(tr -dc 'A-Z' <<< \"${list[$i]}\" | wc -c)\n      \
    \  count_lower=$(tr -dc 'a-z' <<< \"${list[$i]}\" | wc -c)\n        strength=$((count_upper\
    \ - count_lower))\n        if [[ $strength -gt $max ]]; then\n            max=$strength\n\
    \            idx=$i\n        fi\n    done\n    echo $class.${list[$idx]}", "\t\
    local class=$1\n\tlocal extensions=$2\n\tlocal extension=$(echo $extensions |\
    \ sed -e 's/ /\\n/g' | \\\n\t\tcut -c-1 | sort | uniq -c | sort -nr | head -1\
    \ | sed -e 's/ *//g' | cut -c2-)\n\tlocal extension=$(echo $extensions | sed -e\
    \ 's/ /\\n/g' | \\\n\t\ttr [:lower:] [:upper:] | grep -w $extension | head -1)\n\
    \tlocal extension=$(echo $extensions | sed -e 's/ /\\n/g' | \\\n\t\tgrep $extension\
    \ | head -1)\n\techo \"$class.$extension\"", "  local class_name=$1\n  local extension_list=(${2//\
    \ / })\n  local strongest_ext=${extension_list[0]}\n  local strongest_strength=0\n\
    \  local strength\n  for ext in \"${extension_list[@]}\"; do\n    strength=$(($(tr\
    \ '[:upper:]' '[:lower:]' <<< $ext | grep -o '[a-z]' | wc -l)-$(tr '[:lower:]'\
    \ '[:upper:]' <<< $ext | grep -o '[A-Z]' | wc -l)))\n    [[ $strength -gt $strongest_strength\
    \ ]] && strongest_ext=$ext && strongest_strength=$strength\n  done\n  echo \"\
    $class_name.$strongest_ext\"", "  # Take the list of extensions and count the\
    \ number of CAPITAL and lowercase\n  # letters in each.\n  local strength=\"\"\
    \n  local curr_strength=\"\"\n  local caps=\"\"\n  local smalls=\"\"\n  local\
    \ weakest_index=\"\"\n  local weakest_value=\"\"\n  local curr_index=\"\"\n  local\
    \ curr_caps=\"\"\n  local curr_smalls=\"\"\n  local temp=\"\"\n  local j=0\n \
    \ local list=( $2 )\n  for i in ${list[@]}; do\n    curr_index=$j\n    curr_caps=$(\
    \ echo $i | grep -o \"[A-Z]\" | wc -l )\n    curr_smalls=$( echo $i | grep -o\
    \ \"[a-z]\" | wc -l )\n    curr_strength=$( echo \"$curr_caps - $curr_smalls\"\
    \ | bc )\n    if [[ $strength -eq \"\" ]]; then\n      strength=$curr_strength\n\
    \      weakest_index=$curr_index\n      weakest_value=$curr_strength\n    else\n\
    \      strength=$( echo \"$strength\\n$curr_strength\" | sort -n | tail -n 1 )\n\
    \      if [[ $curr_strength -lt $weakest_value ]]; then\n        weakest_index=$curr_index\n\
    \        weakest_value=$curr_strength\n      fi\n    fi\n    j=$(( $j + 1 ))\n\
    \  done\n  echo \"$1.${list[$weakest_index]}\"", "  local class=\"$1\"\n  local\
    \ -n extensions=\"$2\"\n  #printf \"%s\\n\" \"name of array: $name\" \"size of\
    \ array: ${#array[@]}\"\n  #printf \"%s\\n\" \"content of array: ${array[@]}\"\
    \n  #printf \"%s\\n\" \"content of array: ${!array[@]}\"\n  #printf \"%s\\n\"\
    \ \"all keys: ${!array[*]}\"\n  #printf \"%s\\n\" \"all keys: ${!array[@]}\"\n\
    \  #printf \"%s\\n\" \"all values: ${array[*]}\"\n  #printf \"%s\\n\" \"all values:\
    \ ${array[@]}\"\n  extension=\"${extensions[0]}\"\n  strength=0\n  for ext in\
    \ \"${extensions[@]}\"; do\n    c=$(echo \"$ext\" | grep -o \"[A-Z]\" | wc -l)\n\
    \    s=$(echo \"$ext\" | grep -o \"[a-z]\" | wc -l)\n    #printf \"%s\\n\" \"\
    c=$c s=$s\"\n    if [ $((c-s)) -gt $strength ]; then\n      strength=$((c-s))\n\
    \      extension=\"$ext\"\n    fi\n  done\n  echo \"$class.$extension\"", "  \
    \  [[ \"$1\" =~ ^[[:space:]]*$ ]] && {\n        echo \"ERROR: $FUNCNAME: No class\
    \ was given.\" >&2\n        return 1\n    }\n    local class=\"$1\"\n    local\
    \ -a ext=( $2 )\n    [[ ${#ext[@]} -eq 0 ]] && {\n        echo \"ERROR: $FUNCNAME:\
    \ No extensions were given.\" >&2\n        return 1\n    }\n    local -i max_strength=-1\n\
    \    local strongest_ext=\"\"\n    for ext in \"${ext[@]}\"; do\n        [[ $ext\
    \ =~ ^[[:upper:]]*[[:lower:]]*$ ]] || {\n            echo \"ERROR: $FUNCNAME:\
    \ The extension has a non-letter character '$ext'.\" >&2\n            return 1\n\
    \        }\n        local -i strength=${#ext}\n        local -i uppers=$(egrep\
    \ -o \"[[:upper:]]\" <<< \"$ext\" | wc -c)\n        strength=$(( uppers - strength\
    \ ))\n        if [[ $strength -gt $max_strength ]]; then\n            max_strength=$strength\n\
    \            strongest_ext=\"$ext\"\n        fi\n    done\n    echo \"$class.$strongest_ext\"",
  "    # Remove leading and trailing spaces\n    class=$(echo $1 | sed 's/^[ ]*//;s/[\
    \ ]*$//')\n    # Separate the list\n    extensions=($(echo $2 | sed 's/[ ]*//g'))\n\
    \    strongest=-1\n    strongest_index=0\n    for (( i=0; i<${#extensions[@]};\
    \ i++ )); do\n        strength=$(LC_ALL=C \\\n            printf \"%d\" \"'${extensions[$i]}\"\
    \ | \\\n            grep -o \"[A-Z]\" | wc -l | sed 's/^[ ]*//;s/[ ]*$//')\n \
    \       strength=\"${strength} - $(LC_ALL=C \\\n            printf \"%d\" \"'${extensions[$i]}\"\
    \ | \\\n            grep -o \"[a-z]\" | wc -l | sed 's/^[ ]*//;s/[ ]*$//')\"\n\
    \        if (( $(echo \"$strength > $strongest\" | bc -l) )); then\n         \
    \   strongest=$strength\n            strongest_index=$i\n        fi\n    done\n\
    \    echo \"${class}.${extensions[$strongest_index]}\"", "  local str=0\n  local\
    \ strongest_ext=\"$2\"\n  echo \"$2\" | sed -e 's/ /\\n/g' | while read e; do\n\
    \    local s=$(echo $e | sed -e 's/[a-z]//g' | sed -e 's/[A-Z]//g' | tr -d '\\\
    n' | wc -c)\n    local c=$(echo $e | sed -e 's/[A-Z]//g' | tr -d '\\n' | wc -c)\n\
    \    local new_str=$(echo \"$s - $c\" | bc)\n    if [[ $new_str -lt $str ]]; then\n\
    \      str=$new_str\n      strongest_ext=$e\n    fi\n  done\n  echo \"$1.$strongest_ext\"",
  "    local -a hd=()\n    local var strength\n    for var in $2; do\n        var=$(echo\
    \ $var | tr '[:lower:]' '[:upper:]')\n        strength=$(grep -o '[A-Z]' <<<\"\
    $var\" | wc -l)\n        strength=$((strength - $(grep -o '[a-z]' <<<\"$var\"\
    \ | wc -l)))\n        var=$(printf \"%04d\" $strength)$var\n        hd+=(\"$var\"\
    )\n    done\n    echo \"$1.$(echo ${hd[@]} | tr ' ' '\\n' | sort -V | tail -1\
    \ | cut -d '.' -f 2)\"", "    if (( $# != 2 )); then\n        echo \"Usage: Strongest_Extension\
    \ <class name> <extension list>\"\n        return 1\n    fi\n    local strongest_extension_name\n\
    \    local strongest_extension_strength=0\n    # shellcheck disable=SC2206\n \
    \   local extensions=($2)\n    for extension in \"${extensions[@]}\"; do\n   \
    \     local extension_strength=$(let \"${extension^^} - ${extension,,}\" 2>/dev/null)\n\
    \        if [[ -z \"$extension_strength\" ]]; then\n            echo \"Non-alphabetic\
    \ characters are not allowed in the extension name.\"\n            return 1\n\
    \        fi\n        if (( \"$extension_strength\" > \"$strongest_extension_strength\"\
    \ )); then\n            strongest_extension_name=\"$extension\"\n            strongest_extension_strength=\"\
    $extension_strength\"\n        fi\n    done\n    if [[ -z \"$strongest_extension_name\"\
    \ ]]; then\n        echo \"The strongest extension is missing.\"\n        return\
    \ 1\n    fi\n    echo \"$1.$strongest_extension_name\"", "    local class=\"$1\"\
    \n    local extensions=(\"$2\")\n    local strongest=\"${extensions[0]}\"\n  \
    \  local strongest_strength=\"$(Strength \"${strongest}\")\"\n    for extension\
    \ in \"${extensions[@]}\"; do\n        local strength=\"$(Strength \"${extension}\"\
    )\"\n        if [[ \"${strength}\" -gt \"${strongest_strength}\" ]]; then\n  \
    \          strongest=\"${extension}\"\n            strongest_strength=\"${strength}\"\
    \n        fi\n    done\n    echo \"${class}.${strongest}\"", "  local class ext\
    \ strength_list strongest\n  class=$1\n  IFS=\" \" read -r -a strength_list <<<\
    \ $(echo \"$2\" | tr ' ' '\\n' |\n    awk '{print gsub(/[a-z]/,\"\") - gsub(/[A-Z]/,\"\
    \")}')\n  # Get the index of the strongest extension.\n  strongest=$(max_index\
    \ \"${strength_list[@]}\")\n  # Get the extension at the index of the strongest.\n\
    \  ext=$(echo \"$2\" | cut -d' ' -f \"$((strongest + 1))\")\n  echo \"$class.$ext\"",
  "  # Write your code here\n  echo \"my_class.AA\"", "    local str=\"$1\"\n    local\
    \ str_low=${str,,}\n    local arr=(\"$@\")\n    local max_idx=0\n    local max_val=0\n\
    \    local cur_val=0\n    local upper=0\n    local lower=0\n    #echo \"Here is\
    \ str: $str\"\n    #echo \"Here is arr: $arr\"\n    #echo \"Here is len(arr):\
    \ ${#arr[@]}\"\n    for ((i=1; i<=${#arr[@]}; i++)); do\n        local cur=${arr[$i]}\n\
    \        upper=$(echo \"$cur\" | grep -o \"[A-Z]\" | wc -l)\n        lower=$(echo\
    \ \"$cur\" | grep -o \"[a-z]\" | wc -l)\n        cur_val=$(echo \"$upper - $lower\"\
    \ | bc)\n        #echo \"Here is cur_val: $cur_val\"\n        if (( $(echo \"\
    $cur_val > $max_val\" | bc -l) )); then\n            max_val=$cur_val\n      \
    \      max_idx=$i\n        fi\n    done\n    #echo \"Here is max_idx: $max_idx\"\
    \n    #echo \"Here is max_val: $max_val\"\n    echo \"$str.${arr[$max_idx]}\"",
  "    if [[ $# -eq 2 ]]; then\n        local __class=\"$1\"\n        local __extensions=($2)\n\
    \        local __ext_strength=()\n        for (( i=0; i<${#__extensions[@]}; i++\
    \ )); do\n            local __capitals=$(grep -o '[A-Z]' <<< \"${__extensions[$i]}\"\
    \ | wc -l)\n            local __smalls=$(grep -o '[a-z]' <<< \"${__extensions[$i]}\"\
    \ | wc -l)\n            local __ext_strength[$i]=$(echo \"scale=2; ${__capitals}\
    \ / ${__smalls}\" | bc)\n        done\n        local __strongest=${__extensions[0]}\n\
    \        local __strength=${__ext_strength[0]}\n        for (( i=1; i<${#__extensions[@]};\
    \ i++ )); do\n            if [[ $(echo \"${__ext_strength[$i]} > ${__strength}\"\
    \ | bc) -eq 1 ]]; then\n                __strongest=${__extensions[$i]}\n    \
    \            __strength=${__ext_strength[$i]}\n            fi\n        done\n\
    \        echo \"${__class}.${__strongest}\"\n    else\n        echo 'ERROR: Must\
    \ provide two arguments.'\n    fi", "    extension=$(echo \"${2}\" | tr ' ' '\\\
    n' | \\\n        awk '\n        {\n            strength = gsub(/[A-Z]/, \"&\"\
    , $0) - gsub(/[a-z]/, \"&\", $0)\n            print $0, strength\n        }' |\
    \ \\\n        sort -k 2,2 -k 1,1nr | \\\n        head -n 1 | \\\n        awk '{print\
    \ $1}')\n    echo \"${1}.${extension}\"", "    local class=\"$1\"\n    local extension_list=($2)\n\
    \    local -i strongest_strength=0\n    local strongest_extension=\"\"\n    for\
    \ extension in \"${extension_list[@]}\"; do\n        local -i CAP=$(echo \"$extension\"\
    \ | tr -d -c 'A-Z')\n        local -i SM=$(echo \"$extension\" | tr -d -c 'a-z')\n\
    \        local -i strength=CAP-SM\n        if (( strength > strongest_strength\
    \ )); then\n            strongest_strength=$strength\n            strongest_extension=\"\
    $extension\"\n        fi\n    done\n    echo \"$class.$strongest_extension\"",
  "  local class=\"$1\"\n  local extensions=\"$2\"\n  local cap sm\n  local strongest_ext=''\n\
    \  local strongest_strengt=1\n  while read ext\n  do\n    cap=$(tr -cd '[[:upper:]]'\
    \ <<< \"$ext\" | wc -c)\n    sm=$(tr -cd '[[:lower:]]' <<< \"$ext\" | wc -c)\n\
    \    strength=$(bc <<< \"scale=9; ($cap - $sm) / 1\")\n    if (( $(bc <<< \"$strength\
    \ > $strongest_strengt\") ))\n    then\n      strongest_ext=\"$ext\"\n      strongest_strengt=\"\
    $strength\"\n    fi\n  done <<< \"$extensions\"\n  echo \"$class.$strongest_ext\"",
  "    best_score=1000\n    best_name=\n    for arg; do\n        [[ $arg =~ ^[[:lower:]]*$\
    \ ]] && break\n        local score=$(tr -d -c '[:upper:]' <<< $arg | wc -c)\n\
    \        local score2=$(tr -d -c '[:lower:]' <<< $arg | wc -c)\n        local\
    \ score=$(( score - score2 ))\n        if (( score < best_score )); then\n   \
    \         best_score=$score\n            best_name=$arg\n        fi\n    done\n\
    \    echo \"$1.$best_name\"", "    local class=\"$1\"\n    local -a extensions=($2)\n\
    \    local extension strength\n    local strongest_extension_strength=0\n    local\
    \ strongest_extension\n\n    for extension in \"${extensions[@]}\"; do\n     \
    \   strength=$(($(echo \"$extension\" | tr '[:upper:]' '[:lower:]' | wc -m) -\
    \ $(echo \"$extension\" | tr '[:lower:]' '[:upper:]' | wc -m)))\n        if ((strength\
    \ > strongest_extension_strength)); then\n            strongest_extension_strength=$strength\n\
    \            strongest_extension=\"$extension\"\n        fi\n    done\n\n    echo\
    \ \"$class.$strongest_extension\"", "  class=$1\n  IFS=\" \" read -r -a array\
    \ <<< \"$2\"\n  strength=0\n  index=0\n  for (( i=0; i<${#array[@]}; i++ )); do\n\
    \    count=$(echo \"${array[$i]}\" | grep -o '[A-Z]' | wc -l)\n    count=$(( count\
    \ - $(echo \"${array[$i]}\" | grep -o '[a-z]' | wc -l) ))\n    if [[ $count -gt\
    \ $strength ]]; then\n      strength=$count\n      index=$i\n    fi\n  done\n\
    \  echo \"$class.${array[$index]}\"", "    local class=$1\n    IFS=\" \" read\
    \ -r -a extensions <<< $2\n    local strongest_extension=\"\"\n    local strongest_extension_strength=0\n\
    \    for extension in \"${extensions[@]}\"; do\n        local extension_strength=$(($(tr\
    \ -d -c '[[:upper:]]' <<< \"$extension\")-$(tr -d -c '[[:lower:]]' <<< \"$extension\"\
    )))\n        if [ \"$extension_strength\" -gt \"$strongest_extension_strength\"\
    \ ]; then\n            strongest_extension_strength=$extension_strength\n    \
    \        strongest_extension=$extension\n        fi\n    done\n    echo \"$class.$strongest_extension\"",
  "\tI=0\n\tCA_MAX=0\n\tSM_MAX=0\n\tSTRENGTH_MAX=0\n\tSTRONGEST_EXTENSION=\"\"\n\t\
    for CA in ${2}; do\n\t\tlet CA_MAX=\"$(echo \"${CA}\" | grep -o \"[A-Z]\" | wc\
    \ -l)\"\n\t\tlet SM_MAX=\"$(echo \"${CA}\" | grep -o \"[a-z]\" | wc -l)\"\n\t\t\
    STRENGTH_MAX=\"$(bc <<< \"scale=5; ${CA_MAX} - ${SM_MAX}\")\"\n\t\tif [ \"${STRENGTH_MAX}\"\
    \ == \"${STRENGTH_CURRENT}\" ]; then\n\t\t\tif [ \"${I}\" -lt \"${STRONGEST_EXTENSION_INDEX}\"\
    \ ]; then\n\t\t\t\tSTRONGEST_EXTENSION_INDEX=\"${I}\"\n\t\t\t\tSTRONGEST_EXTENSION=\"\
    ${CA}\"\n\t\t\tfi\n\t\telif [ \"${STRENGTH_MAX}\" -gt \"${STRENGTH_CURRENT}\"\
    \ ]; then\n\t\t\tSTRENGTH_CURRENT=\"${STRENGTH_MAX}\"\n\t\t\tSTRONGEST_EXTENSION_INDEX=\"\
    ${I}\"\n\t\t\tSTRONGEST_EXTENSION=\"${CA}\"\n\t\tfi\n\t\tlet I+=1\n\tdone\n\t\
    echo \"${1}.${STRONGEST_EXTENSION}\"", "  local class=\"$1\"\n  local ext_list=(${2//\
    \ / })\n  local strongest_ext=${ext_list[0]}\n  local strongest_num=-100000000\n\
    \  for ext in \"${ext_list[@]}\"; do\n    local cap_num=$(echo \"$ext\" | tr -dc\
    \ '[:upper:]' | wc -c)\n    local sm_num=$(echo \"$ext\" | tr -dc '[:lower:]'\
    \ | wc -c)\n    local ext_num=$((cap_num - sm_num))\n    if [[ $ext_num -gt $strongest_num\
    \ ]]; then\n      strongest_num=$ext_num\n      strongest_ext=$ext\n    fi\n \
    \ done\n  echo \"$class.$strongest_ext\"", "    # The function should return a\
    \ string\n    # Write your code here", "    local -i max_cap=0 max_sm=0 max_index=0\n\
    \    local -i cap=0 sm=0 index=0\n    IFS=' ' read -a list <<< \"$2\"\n    for\
    \ ((i=0; i<${#list[@]}; i++)); do\n        cap=0 sm=0\n        for ((j=0; j<${#list[i]};\
    \ j++)); do\n            if [[ ${list[i]:j:1} =~ [A-Z] ]]; then\n            \
    \    cap=$((cap+1))\n            else\n                sm=$((sm+1))\n        \
    \    fi\n        done\n        if ((cap-sm>max_cap-max_sm)); then\n          \
    \  max_cap=$cap\n            max_sm=$sm\n            max_index=$i\n        fi\n\
    \    done\n    echo \"$1.${list[max_index]}\"", "  tmp_file=$(mktemp)\n  local\
    \ i=0\n  local len=$(wc -w <<< $2)\n  while read -r extension; do\n    CAP=$(tr\
    \ -dc '[:upper:]' <<< $extension | wc -c)\n    SM=$(tr -dc '[:lower:]' <<< $extension\
    \ | wc -c)\n    strength=$(bc <<< \"scale=3;($CAP-$SM)/1\")\n    echo \"$strength\
    \ $extension\" >> $tmp_file\n    let i++\n  done <<< \"$2\"\n  strongest=$(sort\
    \ -n -k1 $tmp_file | head -n 1 | cut -d' ' -f2)\n  echo \"$1.$strongest\"\n  rm\
    \ $tmp_file", "  local class=\"$1\"\n  local extensions=\"$2\"\n  local strong_ext=\"\
    $(IFS=' '; echo $extensions | tr ' ' '\\n' | sort -r -t. -k1,1n -k2,2r -k3,3n\
    \ | head -n1)\"\n  echo \"$class.$strong_ext\"", "    local class=$1\n    local\
    \ extlist=($2)\n    local ext\n    local result\n    local strength\n    local\
    \ best_strength=-1\n    local best_ext\n    local i\n    for ext in \"${extlist[@]}\"\
    ; do\n        strength=$(Strength \"$ext\")\n        if (( strength > best_strength\
    \ )); then\n            best_strength=$strength\n            best_ext=$ext\n \
    \       fi\n    done\n    printf \"%s.%s\" \"$class\" \"$best_ext\"", "  # Find\
    \ the extension with the strongest strength\n  # Call it strongest_extension\n\
    \  ##\n  ## Your solution starts here\n  ##\n  strength=0;\n  for ext in $2; do\n\
    \tcurr=`echo $ext | grep -o '[A-Z]' | wc -l`\n\tcurr2=`echo $ext | grep -o '[a-z]'\
    \ | wc -l`\n\tif [ $curr -gt $curr2 ]; then\n\t\tif [ $(($curr - $curr2)) -gt\
    \ $strength ]; then\n\t\t\tstrength=$(($curr - $curr2))\n\t\t\tstrongest_extension=$ext\n\
    \t\tfi\n\tfi\n  done\n  ##\n  ## Your solution ends here\n  ##\n  echo $1.$strongest_extension",
  "    if [ -z \"$1\" ]; then\n        echo \"Missing class name\"\n        return\
    \ 1\n    fi\n    if [ -z \"$2\" ]; then\n        echo \"Missing extensions\"\n\
    \        return 1\n    fi\n    declare -a extensions=( $2 )\n    num_extensions=${#extensions[@]}\n\
    \    if [ \"$num_extensions\" -eq 0 ]; then\n        echo \"Missing extensions\"\
    \n        return 1\n    fi\n    best_extension=${extensions[0]}\n    best_strength=-1\n\
    \    for extension in \"${extensions[@]}\"; do\n        declare -i caps_ext=0\n\
    \        declare -i sm_ext=0\n        declare -i i=0\n        while [ \"$i\" -lt\
    \ \"${#extension}\" ]; do\n            ch=\"${extension:$i:1}\"\n            if\
    \ [[ \"$ch\" =~ [A-Z] ]]; then\n                ((caps_ext++))\n            elif\
    \ [[ \"$ch\" =~ [a-z] ]]; then\n                ((sm_ext++))\n            fi\n\
    \            ((i++))\n        done\n        if [ \"$caps_ext\" -ne 0 ]; then\n\
    \            strength=$((caps_ext - sm_ext))\n            if [ \"$strength\" -gt\
    \ \"$best_strength\" ]; then\n                best_strength=$strength\n      \
    \          best_extension=$extension\n            fi\n        fi\n    done\n \
    \   echo \"$1.$best_extension\"", "    # Check if the list is empty\n    if [\
    \ -z \"$2\" ]; then\n        echo $1\n        return\n    fi\n    # Save the class\
    \ name\n    class=\"$1\"\n    # Split the list of extensions to an array\n   \
    \ IFS=' ' read -r -a extensions <<< \"$2\"\n    # Initialize variables for the\
    \ strongest extension\n    strength=0\n    strongest_extension=\"\"\n    # Loop\
    \ through the list of extensions\n    for ext in \"${extensions[@]}\"; do\n  \
    \      # Count the number of uppercase letters in the extension\n        cap=$(echo\
    \ $ext | sed -e 's/[^A-Z]//g' | wc -c)\n        # Count the number of lowercase\
    \ letters in the extension\n        sm=$(echo $ext | sed -e 's/[^a-z]//g' | wc\
    \ -c)\n        # Calculate the strength of the extension\n        local str=$(bc\
    \ <<< \"scale=5; $cap - $sm\")\n        # If the strength is higher, save the\
    \ extension as the strongest extension\n        if (( $(echo \"$str > $strength\"\
    \ | bc -l) )); then\n            strength=$str\n            strongest_extension=$ext\n\
    \        fi\n    done\n    # Return the class name concatenated with the strongest\
    \ extension\n    echo \"$class.$strongest_extension\"", "    local max_strength=0.0\n\
    \    local strongest_extension=\"${1}\"\n    for extension in $2; do\n       \
    \ local upper=$(echo \"${extension}\" | tr -d [:lower:])\n        local lower=$(echo\
    \ \"${extension}\" | tr -d [:upper:])\n        local strength=$(bc <<< \"scale=2;\
    \ ${#upper} - ${#lower}\")\n        if (( $(bc <<< \"${strength} > ${max_strength}\"\
    ) )); then\n            max_strength=${strength}\n            strongest_extension=\"\
    ${extension}\"\n        fi\n    done\n    echo \"${1}.${strongest_extension}\"",
  "    local class=\"$1\"\n    local extension\n    local strength\n    local strongest_extension\n\
    \    local strongest_strength=-1\n    local uppercase_count\n    local lowercase_count\n\
    \    local -a extensions_array\n    extensions_array=(${2})\n    for extension\
    \ in \"${extensions_array[@]}\"; do\n        uppercase_count=$(echo -n \"$extension\"\
    \ | tr -dc '[:upper:]' | wc -c)\n        lowercase_count=$(echo -n \"$extension\"\
    \ | tr -dc '[:lower:]' | wc -c)\n        strength=$(( $uppercase_count - $lowercase_count\
    \ ))\n        if [[ $strength -gt $strongest_strength ]]; then\n            strongest_strength=$strength\n\
    \            strongest_extension=\"$extension\"\n        fi\n    done\n    echo\
    \ \"$class.$strongest_extension\"", "  local class_name=$1; shift\n  local extensions=(\"\
    $@\")\n  local -i best_strength=0; local best_extension\n  local -i strength;\
    \ local current_extension\n  local -i current_upper_count=0; local current_lower_count=0\n\
    \  local -i max_upper_count=0; local max_lower_count=0\n  for current_extension\
    \ in \"${extensions[@]}\"; do\n    strength=0\n    current_upper_count=0; current_lower_count=0\n\
    \    for ((i=0; i<${#current_extension}; i++)); do\n      ((${current_extension:$i:1}\
    \ == \"${current_extension:$i:1^^}\")) && ((current_upper_count++)) || ((current_lower_count++))\n\
    \    done\n    (( strength = current_upper_count - current_lower_count ))\n  \
    \  if ((strength > best_strength)); then\n      best_strength=$strength\n    \
    \  best_extension=$current_extension\n    fi\n  done\n  echo \"$class_name.$best_extension\"",
  "  local class_name=\"$1\"\n  local ext_lst=\"$2\"\n  local strongest_ext\n  strongest_ext=\"\
    $(echo \"$ext_lst\" | sed 's/^/\\//g' | sed 's/ /\\//g' | xargs -n1 printf \"\
    %s\\n\" | awk '{print $1, toupper($0) - tolower($0)}' | sort -k2nr | head -n1\
    \ | awk '{print $1}')\"\n  echo \"$class_name.$strongest_ext\"", "  class=$1;\n\
    \  ext_list=$2;\n  strongest=-2;\n  for ext in ${ext_list}; do\n    # Count the\
    \ number of lowercase letters in the extension\n    small=$(echo ${ext} | grep\
    \ -o '[a-z]' | wc -l);\n    # Count the number of uppercase letters in the extension\n\
    \    cap=$(echo ${ext} | grep -o '[A-Z]' | wc -l);\n    # Calculate the extension's\
    \ strength\n    strength=$(echo \"${cap} - ${small}\" | bc);\n    # If the current\
    \ extension's strength is greater than the strongest\n    # we've seen so far,\
    \ set it as the strongest\n    if [[ $(echo \"${strength} > ${strongest}\" | bc)\
    \ -eq 1 ]]; then\n      strongest=${strength};\n      strongest_ext=${ext};\n\
    \    fi\n  done\n  echo \"${class}.${strongest_ext}\";", "    # Get the strength\
    \ of the given string\n    # $1 is a string\n    Get_Strength() {\n        local\
    \ -i cap=0\n        local -i sm=0\n        local -i len=${#1}\n        local -i\
    \ i=0\n        while [ $i -lt $len ]; do\n            if [[ ${1:$i:1} =~ [A-Z]\
    \ ]]; then\n                cap+=1\n            else\n                sm+=1\n\
    \            fi\n            i+=1\n        done\n        echo \"$((cap - sm))\"\
    \n    }\n    # Given a list of strings, return the string with the highest strength\n\
    \    # $1 is a list of strings\n    local strongest\n    local -i strength=-1\n\
    \    for word in $1; do\n        local str=$(Get_Strength \"$word\")\n       \
    \ if [ $str -gt $strength ]; then\n            strength=$str\n            strongest=$word\n\
    \        fi\n    done\n    echo \"$strongest\"", "    local -a extensions=($2)\n\
    \    local strongest_strength=-1\n    local class_name=\"$1\"\n    local strongest_extension_name=\n\
    \    for (( i=0; i<${#extensions[@]}; i++ )); do\n        local strength=$(echo\
    \ \"${extensions[$i]}\" | awk '{print gsub(/[a-z]/, \"\") - gsub(/[A-Z]/, \"\"\
    )}')\n        if (( strength > strongest_strength )); then\n            strongest_strength=$strength\n\
    \            strongest_extension_name=\"${extensions[$i]}\"\n        fi\n    done\n\
    \    echo \"$class_name.$strongest_extension_name\"", "  local class_name=\"$1\"\
    \n  local -a arr\n  IFS=' ' read -a arr <<< \"$2\"\n  local answer=${arr[0]}\n\
    \  local score=0\n  local tmp=0\n  for i in \"${arr[@]}\"; do\n    tmp=$(Strongness\
    \ \"$i\")\n    if [[ $tmp -gt $score ]]; then\n      score=$tmp\n      answer=$i\n\
    \    fi\n  done\n  echo \"$class_name.$answer\"", "    echo \"$2\" | awk -v class=$1\
    \ '\n        function strength(s) {\n            return gsub(/[A-Z]/, \"\", s)\
    \ - gsub(/[a-z]/, \"\", s)\n        }\n        BEGIN {\n            max_strength\
    \ = 0\n            max_extension = \"\"\n        }\n        {\n            if\
    \ (strength($1) > max_strength) {\n                max_strength = strength($1)\n\
    \                max_extension = $1\n            }\n        }\n        END {\n\
    \            print class \".\" max_extension\n        }\n    '", "    local class=$1\n\
    \    local -a list=($2)\n    local extension=${list[0]}\n    local strength=0\n\
    \    for ext in \"${list[@]}\"; do\n        s=$(ext_strength \"$ext\")\n     \
    \   if (( $(bc <<< \"$s > $strength\") )); then\n            strength=$s\n   \
    \         extension=$ext\n        fi\n    done\n    echo \"$class.$extension\""]
stop_tokens:
- "\n}"
