name: HumanEval_163_generate_integers
language: jl
results:
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp19nd7sqi.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19nd7sqi.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19nd7sqi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp19nd7sqi.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19nd7sqi.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19nd7sqi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp19nd7sqi.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19nd7sqi.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19nd7sqi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp19nd7sqi.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp19nd7sqi.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp19nd7sqi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpta7bwa6k.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpta7bwa6k.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpta7bwa6k.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpta7bwa6k.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpta7bwa6k.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpta7bwa6k.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpta7bwa6k.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpta7bwa6k.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpta7bwa6k.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpta7bwa6k.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpta7bwa6k.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpta7bwa6k.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcu0aukvh.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcu0aukvh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcu0aukvh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcu0aukvh.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcu0aukvh.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcu0aukvh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcu0aukvh.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcu0aukvh.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcu0aukvh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcu0aukvh.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcu0aukvh.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcu0aukvh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv7qyg771.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv7qyg771.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7qyg771.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv7qyg771.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv7qyg771.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7qyg771.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv7qyg771.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv7qyg771.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7qyg771.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv7qyg771.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv7qyg771.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv7qyg771.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoc62b7xi.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoc62b7xi.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoc62b7xi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoc62b7xi.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoc62b7xi.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoc62b7xi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoc62b7xi.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoc62b7xi.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoc62b7xi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoc62b7xi.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpoc62b7xi.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoc62b7xi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjspdy8gw.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjspdy8gw.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjspdy8gw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjspdy8gw.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjspdy8gw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjspdy8gw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjspdy8gw.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjspdy8gw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjspdy8gw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjspdy8gw.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjspdy8gw.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjspdy8gw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgvy5sjrh.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgvy5sjrh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgvy5sjrh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgvy5sjrh.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgvy5sjrh.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgvy5sjrh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgvy5sjrh.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgvy5sjrh.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgvy5sjrh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgvy5sjrh.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgvy5sjrh.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgvy5sjrh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxgq3whmm.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxgq3whmm.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxgq3whmm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxgq3whmm.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxgq3whmm.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxgq3whmm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxgq3whmm.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxgq3whmm.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxgq3whmm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxgq3whmm.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxgq3whmm.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxgq3whmm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa9fv646p.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9fv646p.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9fv646p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa9fv646p.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9fv646p.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9fv646p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa9fv646p.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9fv646p.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9fv646p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa9fv646p.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa9fv646p.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa9fv646p.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu9ish_ts.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9ish_ts.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9ish_ts.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu9ish_ts.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9ish_ts.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9ish_ts.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu9ish_ts.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9ish_ts.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9ish_ts.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu9ish_ts.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpu9ish_ts.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu9ish_ts.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp52ol7otj.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp52ol7otj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp52ol7otj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp52ol7otj.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp52ol7otj.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp52ol7otj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp52ol7otj.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp52ol7otj.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp52ol7otj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp52ol7otj.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp52ol7otj.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp52ol7otj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj4f4w8kk.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4f4w8kk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4f4w8kk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj4f4w8kk.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4f4w8kk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4f4w8kk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj4f4w8kk.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4f4w8kk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4f4w8kk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj4f4w8kk.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj4f4w8kk.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj4f4w8kk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8gzn6xlj.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8gzn6xlj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8gzn6xlj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8gzn6xlj.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8gzn6xlj.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8gzn6xlj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8gzn6xlj.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8gzn6xlj.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8gzn6xlj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8gzn6xlj.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8gzn6xlj.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8gzn6xlj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5g8716cy.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g8716cy.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g8716cy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5g8716cy.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g8716cy.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g8716cy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5g8716cy.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g8716cy.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g8716cy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5g8716cy.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5g8716cy.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5g8716cy.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjww1ycay.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjww1ycay.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjww1ycay.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjww1ycay.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjww1ycay.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjww1ycay.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjww1ycay.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjww1ycay.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjww1ycay.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjww1ycay.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjww1ycay.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjww1ycay.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxn_0i3es.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxn_0i3es.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxn_0i3es.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxn_0i3es.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxn_0i3es.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxn_0i3es.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxn_0i3es.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxn_0i3es.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxn_0i3es.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxn_0i3es.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxn_0i3es.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxn_0i3es.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi_hrn9md.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi_hrn9md.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_hrn9md.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi_hrn9md.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi_hrn9md.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_hrn9md.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi_hrn9md.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi_hrn9md.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_hrn9md.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi_hrn9md.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi_hrn9md.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi_hrn9md.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj7yx7hgh.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj7yx7hgh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj7yx7hgh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj7yx7hgh.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj7yx7hgh.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj7yx7hgh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj7yx7hgh.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj7yx7hgh.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj7yx7hgh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj7yx7hgh.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj7yx7hgh.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj7yx7hgh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppkupoond.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppkupoond.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppkupoond.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppkupoond.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppkupoond.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppkupoond.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppkupoond.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppkupoond.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppkupoond.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppkupoond.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppkupoond.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppkupoond.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplvfnadn9.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvfnadn9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvfnadn9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplvfnadn9.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvfnadn9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvfnadn9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplvfnadn9.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvfnadn9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvfnadn9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplvfnadn9.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplvfnadn9.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplvfnadn9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_2ltkk3y.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2ltkk3y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2ltkk3y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_2ltkk3y.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2ltkk3y.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2ltkk3y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_2ltkk3y.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2ltkk3y.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2ltkk3y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_2ltkk3y.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_2ltkk3y.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_2ltkk3y.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxda4qeaj.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxda4qeaj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxda4qeaj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxda4qeaj.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxda4qeaj.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxda4qeaj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxda4qeaj.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxda4qeaj.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxda4qeaj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxda4qeaj.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxda4qeaj.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxda4qeaj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpextwb421.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpextwb421.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpextwb421.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpextwb421.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpextwb421.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpextwb421.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpextwb421.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpextwb421.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpextwb421.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpextwb421.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpextwb421.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpextwb421.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    if a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n\
    \        b -= 1\n    end\n    if a > b\n        return []\n    end\n    return\
    \ collect(a:2:b)\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfosku1n9.jl:33\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfosku1n9.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfosku1n9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfosku1n9.jl:34\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfosku1n9.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfosku1n9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfosku1n9.jl:35\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfosku1n9.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfosku1n9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfosku1n9.jl:36\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfosku1n9.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfosku1n9.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmput6mzen1.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmput6mzen1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmput6mzen1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmput6mzen1.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmput6mzen1.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmput6mzen1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmput6mzen1.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmput6mzen1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmput6mzen1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmput6mzen1.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmput6mzen1.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmput6mzen1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2l3372r8.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2l3372r8.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2l3372r8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2l3372r8.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2l3372r8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2l3372r8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2l3372r8.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2l3372r8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2l3372r8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2l3372r8.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2l3372r8.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2l3372r8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    if a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n\
    \        b -= 1\n    end\n    return collect(a:2:b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2oc8225f.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2oc8225f.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2oc8225f.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp2oc8225f.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2oc8225f.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2oc8225f.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp2oc8225f.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2oc8225f.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2oc8225f.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp2oc8225f.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2oc8225f.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2oc8225f.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj75c53qj.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj75c53qj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj75c53qj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj75c53qj.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj75c53qj.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj75c53qj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj75c53qj.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj75c53qj.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj75c53qj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj75c53qj.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj75c53qj.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj75c53qj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfdavq61g.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfdavq61g.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfdavq61g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfdavq61g.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfdavq61g.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfdavq61g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfdavq61g.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfdavq61g.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfdavq61g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfdavq61g.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfdavq61g.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfdavq61g.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1_aynhok.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1_aynhok.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1_aynhok.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1_aynhok.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1_aynhok.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1_aynhok.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1_aynhok.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1_aynhok.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1_aynhok.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1_aynhok.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1_aynhok.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1_aynhok.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc659b94_.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc659b94_.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc659b94_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc659b94_.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc659b94_.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc659b94_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc659b94_.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc659b94_.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc659b94_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc659b94_.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc659b94_.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc659b94_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8gv77uo7.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8gv77uo7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8gv77uo7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8gv77uo7.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8gv77uo7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8gv77uo7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8gv77uo7.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8gv77uo7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8gv77uo7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8gv77uo7.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8gv77uo7.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8gv77uo7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe1hbx6b1.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe1hbx6b1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1hbx6b1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe1hbx6b1.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe1hbx6b1.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1hbx6b1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe1hbx6b1.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe1hbx6b1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1hbx6b1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe1hbx6b1.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe1hbx6b1.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe1hbx6b1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwlknf6tf.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwlknf6tf.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwlknf6tf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwlknf6tf.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwlknf6tf.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwlknf6tf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwlknf6tf.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwlknf6tf.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwlknf6tf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwlknf6tf.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwlknf6tf.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwlknf6tf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf1r2vv34.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf1r2vv34.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf1r2vv34.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf1r2vv34.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf1r2vv34.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf1r2vv34.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf1r2vv34.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf1r2vv34.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf1r2vv34.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf1r2vv34.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf1r2vv34.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf1r2vv34.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaai5956d.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaai5956d.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaai5956d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaai5956d.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaai5956d.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaai5956d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaai5956d.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaai5956d.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaai5956d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaai5956d.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaai5956d.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaai5956d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfurd0cm7.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfurd0cm7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfurd0cm7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfurd0cm7.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfurd0cm7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfurd0cm7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfurd0cm7.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfurd0cm7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfurd0cm7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfurd0cm7.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfurd0cm7.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfurd0cm7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5_srcuxe.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_srcuxe.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_srcuxe.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5_srcuxe.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_srcuxe.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_srcuxe.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5_srcuxe.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_srcuxe.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_srcuxe.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5_srcuxe.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5_srcuxe.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5_srcuxe.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkh7r3i6f.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkh7r3i6f.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkh7r3i6f.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkh7r3i6f.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkh7r3i6f.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkh7r3i6f.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkh7r3i6f.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkh7r3i6f.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkh7r3i6f.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkh7r3i6f.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkh7r3i6f.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkh7r3i6f.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ibeh0qs.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ibeh0qs.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ibeh0qs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8ibeh0qs.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ibeh0qs.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ibeh0qs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8ibeh0qs.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ibeh0qs.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ibeh0qs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8ibeh0qs.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8ibeh0qs.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ibeh0qs.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    if\
    \ a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n   \
    \ end\n    if a > b\n        return Int64[]\n    end\n    return collect(a:2:b)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2bt5fbp8.jl:33\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2bt5fbp8.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2bt5fbp8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp2bt5fbp8.jl:34\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2bt5fbp8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2bt5fbp8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp2bt5fbp8.jl:35\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2bt5fbp8.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2bt5fbp8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp2bt5fbp8.jl:36\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2bt5fbp8.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2bt5fbp8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg694b_l0.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg694b_l0.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg694b_l0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpg694b_l0.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg694b_l0.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg694b_l0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpg694b_l0.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg694b_l0.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg694b_l0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpg694b_l0.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpg694b_l0.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg694b_l0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    if a % 2 == 1\n        a += 1\n    end\n    return a:2:b\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw6baxizq.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw6baxizq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw6baxizq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpw6baxizq.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw6baxizq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw6baxizq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpw6baxizq.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw6baxizq.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw6baxizq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpw6baxizq.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw6baxizq.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw6baxizq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp054s3k55.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp054s3k55.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp054s3k55.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp054s3k55.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp054s3k55.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp054s3k55.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp054s3k55.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp054s3k55.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp054s3k55.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp054s3k55.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp054s3k55.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp054s3k55.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp65ofznje.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp65ofznje.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp65ofznje.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp65ofznje.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp65ofznje.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp65ofznje.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp65ofznje.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp65ofznje.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp65ofznje.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp65ofznje.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp65ofznje.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp65ofznje.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5n1ikxez.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5n1ikxez.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5n1ikxez.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5n1ikxez.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5n1ikxez.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5n1ikxez.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5n1ikxez.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5n1ikxez.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5n1ikxez.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5n1ikxez.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5n1ikxez.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5n1ikxez.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_axz2p80.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_axz2p80.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_axz2p80.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_axz2p80.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_axz2p80.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_axz2p80.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_axz2p80.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_axz2p80.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_axz2p80.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_axz2p80.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_axz2p80.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_axz2p80.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp52yzf7ij.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp52yzf7ij.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp52yzf7ij.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp52yzf7ij.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp52yzf7ij.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp52yzf7ij.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp52yzf7ij.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp52yzf7ij.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp52yzf7ij.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp52yzf7ij.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp52yzf7ij.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp52yzf7ij.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcxfix0s7.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcxfix0s7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcxfix0s7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcxfix0s7.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcxfix0s7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcxfix0s7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcxfix0s7.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcxfix0s7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcxfix0s7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcxfix0s7.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcxfix0s7.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcxfix0s7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    return [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfkh6qx81.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfkh6qx81.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfkh6qx81.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfkh6qx81.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfkh6qx81.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfkh6qx81.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfkh6qx81.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfkh6qx81.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfkh6qx81.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfkh6qx81.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfkh6qx81.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfkh6qx81.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpff0haxd2.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpff0haxd2.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpff0haxd2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpff0haxd2.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpff0haxd2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpff0haxd2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpff0haxd2.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpff0haxd2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpff0haxd2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpff0haxd2.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpff0haxd2.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpff0haxd2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd0aizqvw.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd0aizqvw.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd0aizqvw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpd0aizqvw.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd0aizqvw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd0aizqvw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpd0aizqvw.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd0aizqvw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd0aizqvw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpd0aizqvw.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd0aizqvw.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd0aizqvw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a < b\n        return [i for i in a:b if i\
    \ % 2 == 0]\n    else\n        return [i for i in b:a if i % 2 == 0]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfgoqrevz.jl:25\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfgoqrevz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfgoqrevz.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpfgoqrevz.jl:26\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfgoqrevz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfgoqrevz.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpfgoqrevz.jl:27\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfgoqrevz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfgoqrevz.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpfgoqrevz.jl:28\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfgoqrevz.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfgoqrevz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    return [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqmwck367.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqmwck367.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqmwck367.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqmwck367.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqmwck367.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqmwck367.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqmwck367.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqmwck367.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqmwck367.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqmwck367.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqmwck367.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqmwck367.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2u29sprb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2u29sprb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2u29sprb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2u29sprb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2u29sprb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2u29sprb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2u29sprb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2u29sprb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2u29sprb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2u29sprb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2u29sprb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2u29sprb.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [x for x in a:b if x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppd1dr8s2.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppd1dr8s2.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppd1dr8s2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppd1dr8s2.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppd1dr8s2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppd1dr8s2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppd1dr8s2.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppd1dr8s2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppd1dr8s2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppd1dr8s2.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppd1dr8s2.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppd1dr8s2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [x for x in a:b if x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuijq9tc4.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijq9tc4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijq9tc4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuijq9tc4.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijq9tc4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijq9tc4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuijq9tc4.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijq9tc4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijq9tc4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuijq9tc4.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuijq9tc4.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuijq9tc4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnu56_38r.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnu56_38r.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnu56_38r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnu56_38r.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnu56_38r.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnu56_38r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnu56_38r.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnu56_38r.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnu56_38r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnu56_38r.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnu56_38r.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnu56_38r.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    if\
    \ a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n   \
    \ end\n    if a > b\n        return Int64[]\n    end\n    return collect(a:2:b)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfkj68dwg.jl:33\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfkj68dwg.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfkj68dwg.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfkj68dwg.jl:34\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfkj68dwg.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfkj68dwg.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfkj68dwg.jl:35\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfkj68dwg.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfkj68dwg.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfkj68dwg.jl:36\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfkj68dwg.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfkj68dwg.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8a3kd_5k.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8a3kd_5k.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8a3kd_5k.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8a3kd_5k.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8a3kd_5k.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8a3kd_5k.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8a3kd_5k.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8a3kd_5k.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8a3kd_5k.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8a3kd_5k.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8a3kd_5k.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8a3kd_5k.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb_qolvh7.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb_qolvh7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb_qolvh7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb_qolvh7.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb_qolvh7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb_qolvh7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb_qolvh7.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb_qolvh7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb_qolvh7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb_qolvh7.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb_qolvh7.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb_qolvh7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    if a % 2 == 1\n        a += 1\n    end\n    return collect(a:2:b)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0u08yz0x.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0u08yz0x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0u08yz0x.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0u08yz0x.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0u08yz0x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0u08yz0x.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0u08yz0x.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0u08yz0x.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0u08yz0x.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0u08yz0x.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0u08yz0x.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0u08yz0x.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa0b6n4g2.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa0b6n4g2.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa0b6n4g2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa0b6n4g2.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa0b6n4g2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa0b6n4g2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa0b6n4g2.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa0b6n4g2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa0b6n4g2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa0b6n4g2.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa0b6n4g2.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa0b6n4g2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmqrrq9o7.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmqrrq9o7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmqrrq9o7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmqrrq9o7.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmqrrq9o7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmqrrq9o7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmqrrq9o7.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmqrrq9o7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmqrrq9o7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmqrrq9o7.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmqrrq9o7.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmqrrq9o7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a == b\n        return [a]\n    elseif a >\
    \ b\n        return [i for i in a:b if i % 2 == 0]\n    else\n        return [i\
    \ for i in a:b if i % 2 == 0]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptblkq9al.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptblkq9al.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptblkq9al.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptblkq9al.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptblkq9al.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptblkq9al.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptblkq9al.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptblkq9al.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptblkq9al.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptblkq9al.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptblkq9al.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptblkq9al.jl:26\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptblkq9al.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuctu1g1d.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuctu1g1d.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuctu1g1d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuctu1g1d.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuctu1g1d.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuctu1g1d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuctu1g1d.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuctu1g1d.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuctu1g1d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuctu1g1d.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuctu1g1d.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuctu1g1d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_m2joto4.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_m2joto4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_m2joto4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_m2joto4.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_m2joto4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_m2joto4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_m2joto4.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_m2joto4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_m2joto4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_m2joto4.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_m2joto4.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_m2joto4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3wx9d_tr.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3wx9d_tr.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3wx9d_tr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3wx9d_tr.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3wx9d_tr.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3wx9d_tr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3wx9d_tr.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3wx9d_tr.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3wx9d_tr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3wx9d_tr.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3wx9d_tr.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3wx9d_tr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjvd6jhhr.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjvd6jhhr.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjvd6jhhr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjvd6jhhr.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjvd6jhhr.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjvd6jhhr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjvd6jhhr.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjvd6jhhr.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjvd6jhhr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjvd6jhhr.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjvd6jhhr.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjvd6jhhr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    if\
    \ a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n   \
    \ end\n    return collect(a:2:b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprjiuub_t.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprjiuub_t.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprjiuub_t.jl:29\ntest set: Test\
    \ Failed at /tmp/tmprjiuub_t.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprjiuub_t.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprjiuub_t.jl:29\ntest set: Test\
    \ Failed at /tmp/tmprjiuub_t.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprjiuub_t.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprjiuub_t.jl:29\ntest set: Test\
    \ Failed at /tmp/tmprjiuub_t.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprjiuub_t.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprjiuub_t.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [x for x in a:b if x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpflb6ajbt.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpflb6ajbt.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpflb6ajbt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpflb6ajbt.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpflb6ajbt.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpflb6ajbt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpflb6ajbt.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpflb6ajbt.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpflb6ajbt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpflb6ajbt.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpflb6ajbt.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpflb6ajbt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpauyib99i.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpauyib99i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpauyib99i.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpauyib99i.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpauyib99i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpauyib99i.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpauyib99i.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpauyib99i.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpauyib99i.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpauyib99i.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpauyib99i.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpauyib99i.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvkb6dthg.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvkb6dthg.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvkb6dthg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvkb6dthg.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvkb6dthg.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvkb6dthg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvkb6dthg.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvkb6dthg.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvkb6dthg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvkb6dthg.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvkb6dthg.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvkb6dthg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    return [x for x in a:b if x % 2 == 0]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplkbcn520.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplkbcn520.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplkbcn520.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplkbcn520.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplkbcn520.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplkbcn520.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplkbcn520.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplkbcn520.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplkbcn520.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplkbcn520.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplkbcn520.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplkbcn520.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpydhamrjm.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydhamrjm.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydhamrjm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpydhamrjm.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydhamrjm.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydhamrjm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpydhamrjm.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydhamrjm.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydhamrjm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpydhamrjm.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydhamrjm.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpydhamrjm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyorumpjc.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyorumpjc.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyorumpjc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyorumpjc.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyorumpjc.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyorumpjc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyorumpjc.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyorumpjc.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyorumpjc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyorumpjc.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyorumpjc.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyorumpjc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc235x0og.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc235x0og.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc235x0og.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc235x0og.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc235x0og.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc235x0og.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc235x0og.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc235x0og.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc235x0og.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc235x0og.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc235x0og.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc235x0og.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppj3vmfad.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppj3vmfad.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppj3vmfad.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppj3vmfad.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppj3vmfad.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppj3vmfad.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppj3vmfad.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppj3vmfad.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppj3vmfad.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppj3vmfad.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppj3vmfad.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppj3vmfad.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgn956osw.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgn956osw.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgn956osw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgn956osw.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgn956osw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgn956osw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgn956osw.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgn956osw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgn956osw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgn956osw.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgn956osw.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgn956osw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg6rqe8w3.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6rqe8w3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6rqe8w3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpg6rqe8w3.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6rqe8w3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6rqe8w3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpg6rqe8w3.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6rqe8w3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6rqe8w3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpg6rqe8w3.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpg6rqe8w3.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg6rqe8w3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr33mydhx.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr33mydhx.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr33mydhx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpr33mydhx.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr33mydhx.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr33mydhx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpr33mydhx.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr33mydhx.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr33mydhx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpr33mydhx.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr33mydhx.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr33mydhx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyw0t5m_6.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyw0t5m_6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyw0t5m_6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyw0t5m_6.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyw0t5m_6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyw0t5m_6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyw0t5m_6.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyw0t5m_6.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyw0t5m_6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyw0t5m_6.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyw0t5m_6.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyw0t5m_6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    if\
    \ a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n   \
    \ end\n    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxvzvb30_.jl:33\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxvzvb30_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxvzvb30_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxvzvb30_.jl:34\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxvzvb30_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxvzvb30_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxvzvb30_.jl:35\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxvzvb30_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxvzvb30_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxvzvb30_.jl:36\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxvzvb30_.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxvzvb30_.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwl1xt6e9.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwl1xt6e9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwl1xt6e9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwl1xt6e9.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwl1xt6e9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwl1xt6e9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwl1xt6e9.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwl1xt6e9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwl1xt6e9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwl1xt6e9.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwl1xt6e9.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwl1xt6e9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphltadhqj.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphltadhqj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphltadhqj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphltadhqj.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphltadhqj.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphltadhqj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphltadhqj.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphltadhqj.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphltadhqj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphltadhqj.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphltadhqj.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphltadhqj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9fv7_0oq.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9fv7_0oq.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fv7_0oq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9fv7_0oq.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9fv7_0oq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fv7_0oq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9fv7_0oq.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9fv7_0oq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fv7_0oq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9fv7_0oq.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9fv7_0oq.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9fv7_0oq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbgh1721d.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbgh1721d.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbgh1721d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbgh1721d.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbgh1721d.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbgh1721d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbgh1721d.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbgh1721d.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbgh1721d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbgh1721d.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbgh1721d.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbgh1721d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpidl6ukat.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpidl6ukat.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidl6ukat.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpidl6ukat.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpidl6ukat.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidl6ukat.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpidl6ukat.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpidl6ukat.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidl6ukat.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpidl6ukat.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpidl6ukat.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpidl6ukat.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm8t9r8dw.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm8t9r8dw.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8t9r8dw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm8t9r8dw.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm8t9r8dw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8t9r8dw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm8t9r8dw.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm8t9r8dw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8t9r8dw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm8t9r8dw.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm8t9r8dw.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm8t9r8dw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    return [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3pmmeobp.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3pmmeobp.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3pmmeobp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3pmmeobp.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3pmmeobp.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3pmmeobp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3pmmeobp.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3pmmeobp.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3pmmeobp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3pmmeobp.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3pmmeobp.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3pmmeobp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpty60y0ke.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty60y0ke.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty60y0ke.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpty60y0ke.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty60y0ke.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty60y0ke.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpty60y0ke.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty60y0ke.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty60y0ke.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpty60y0ke.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpty60y0ke.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpty60y0ke.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb78tdmgw.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb78tdmgw.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb78tdmgw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb78tdmgw.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb78tdmgw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb78tdmgw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb78tdmgw.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb78tdmgw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb78tdmgw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb78tdmgw.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb78tdmgw.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb78tdmgw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplkt5fu6a.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplkt5fu6a.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplkt5fu6a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplkt5fu6a.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplkt5fu6a.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplkt5fu6a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplkt5fu6a.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplkt5fu6a.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplkt5fu6a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplkt5fu6a.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplkt5fu6a.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplkt5fu6a.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa7g30es3.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7g30es3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7g30es3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa7g30es3.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7g30es3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7g30es3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa7g30es3.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7g30es3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7g30es3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa7g30es3.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa7g30es3.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa7g30es3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqgpya9xh.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgpya9xh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgpya9xh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqgpya9xh.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgpya9xh.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgpya9xh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqgpya9xh.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgpya9xh.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgpya9xh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqgpya9xh.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqgpya9xh.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqgpya9xh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpccgtl6u2.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccgtl6u2.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccgtl6u2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpccgtl6u2.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccgtl6u2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccgtl6u2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpccgtl6u2.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccgtl6u2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccgtl6u2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpccgtl6u2.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpccgtl6u2.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpccgtl6u2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0f38ipr6.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0f38ipr6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0f38ipr6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0f38ipr6.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0f38ipr6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0f38ipr6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0f38ipr6.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0f38ipr6.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0f38ipr6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0f38ipr6.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0f38ipr6.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0f38ipr6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpexowl3h8.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpexowl3h8.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpexowl3h8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpexowl3h8.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpexowl3h8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpexowl3h8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpexowl3h8.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpexowl3h8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpexowl3h8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpexowl3h8.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpexowl3h8.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpexowl3h8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    return [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqauchwh7.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqauchwh7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqauchwh7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqauchwh7.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqauchwh7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqauchwh7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqauchwh7.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqauchwh7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqauchwh7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqauchwh7.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqauchwh7.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqauchwh7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaymbzi9w.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaymbzi9w.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaymbzi9w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaymbzi9w.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaymbzi9w.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaymbzi9w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaymbzi9w.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaymbzi9w.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaymbzi9w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaymbzi9w.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaymbzi9w.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaymbzi9w.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj7m25kk9.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj7m25kk9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj7m25kk9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj7m25kk9.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj7m25kk9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj7m25kk9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj7m25kk9.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj7m25kk9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj7m25kk9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj7m25kk9.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj7m25kk9.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj7m25kk9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptz123ozv.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptz123ozv.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptz123ozv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptz123ozv.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptz123ozv.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptz123ozv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptz123ozv.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptz123ozv.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptz123ozv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptz123ozv.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptz123ozv.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptz123ozv.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo98vhda8.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo98vhda8.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo98vhda8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo98vhda8.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo98vhda8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo98vhda8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo98vhda8.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo98vhda8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo98vhda8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo98vhda8.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo98vhda8.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo98vhda8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0mpjgd7g.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0mpjgd7g.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0mpjgd7g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0mpjgd7g.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0mpjgd7g.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0mpjgd7g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0mpjgd7g.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0mpjgd7g.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0mpjgd7g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0mpjgd7g.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0mpjgd7g.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0mpjgd7g.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpem7b2om3.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpem7b2om3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpem7b2om3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpem7b2om3.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpem7b2om3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpem7b2om3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpem7b2om3.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpem7b2om3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpem7b2om3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpem7b2om3.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpem7b2om3.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpem7b2om3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprwe3bv8d.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprwe3bv8d.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprwe3bv8d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprwe3bv8d.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprwe3bv8d.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprwe3bv8d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprwe3bv8d.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprwe3bv8d.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprwe3bv8d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprwe3bv8d.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprwe3bv8d.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprwe3bv8d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    if\
    \ a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n   \
    \ end\n    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2t4sfhqx.jl:33\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2t4sfhqx.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2t4sfhqx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp2t4sfhqx.jl:34\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2t4sfhqx.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2t4sfhqx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp2t4sfhqx.jl:35\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2t4sfhqx.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2t4sfhqx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp2t4sfhqx.jl:36\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2t4sfhqx.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2t4sfhqx.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmjm4m9zf.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjm4m9zf.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjm4m9zf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmjm4m9zf.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjm4m9zf.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjm4m9zf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmjm4m9zf.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjm4m9zf.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjm4m9zf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmjm4m9zf.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmjm4m9zf.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmjm4m9zf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0lazbffn.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0lazbffn.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0lazbffn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0lazbffn.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0lazbffn.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0lazbffn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0lazbffn.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0lazbffn.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0lazbffn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0lazbffn.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0lazbffn.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0lazbffn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    if a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n\
    \        b -= 1\n    end\n    if a > b\n        return []\n    end\n    return\
    \ [a:2:b]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpthhv6ff1.jl:33\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type StepRange{Int64, Int64} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{Int64}, x::StepRange{Int64,\
    \ Int64}, i1::Int64)\n      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{Int64},\
    \ doffs::Int64, src::Vector{StepRange{Int64, Int64}}, soffs::Int64, n::Int64)\n\
    \      @ Base ./array.jl:253\n    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n\
    \    [4] _copyto_impl!\n      @ ./array.jl:331 [inlined]\n    [5] copyto!\n  \
    \    @ ./array.jl:317 [inlined]\n    [6] copyto!\n      @ ./array.jl:343 [inlined]\n\
    \    [7] copyto_axcheck!\n      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Int64}(x::Vector{StepRange{Int64,\
    \ Int64}})\n      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554\
    \ [inlined]\n   [10] generate_integers(a::Int64, b::Int64)\n      @ Main /tmp/tmpthhv6ff1.jl:26\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpthhv6ff1.jl:33 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpthhv6ff1.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpthhv6ff1.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object\
    \ of type StepRange{Int64, Int64} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpthhv6ff1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyinz_f87.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyinz_f87.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyinz_f87.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyinz_f87.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyinz_f87.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyinz_f87.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyinz_f87.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyinz_f87.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyinz_f87.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyinz_f87.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyinz_f87.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyinz_f87.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi2ibuz1h.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi2ibuz1h.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi2ibuz1h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi2ibuz1h.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi2ibuz1h.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi2ibuz1h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi2ibuz1h.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi2ibuz1h.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi2ibuz1h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi2ibuz1h.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi2ibuz1h.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi2ibuz1h.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb3yu9uhk.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3yu9uhk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3yu9uhk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb3yu9uhk.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3yu9uhk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3yu9uhk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb3yu9uhk.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3yu9uhk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3yu9uhk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb3yu9uhk.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb3yu9uhk.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb3yu9uhk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgc09i_ev.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgc09i_ev.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgc09i_ev.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgc09i_ev.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgc09i_ev.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgc09i_ev.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgc09i_ev.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgc09i_ev.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgc09i_ev.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgc09i_ev.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgc09i_ev.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgc09i_ev.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk7vokhg8.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk7vokhg8.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk7vokhg8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk7vokhg8.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk7vokhg8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk7vokhg8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk7vokhg8.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk7vokhg8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk7vokhg8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk7vokhg8.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk7vokhg8.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk7vokhg8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp78wf98rz.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78wf98rz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78wf98rz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp78wf98rz.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78wf98rz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78wf98rz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp78wf98rz.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78wf98rz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78wf98rz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp78wf98rz.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp78wf98rz.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp78wf98rz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaj2zm7b4.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaj2zm7b4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaj2zm7b4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaj2zm7b4.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaj2zm7b4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaj2zm7b4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaj2zm7b4.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaj2zm7b4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaj2zm7b4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaj2zm7b4.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaj2zm7b4.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaj2zm7b4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [x for x in a:b if x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpthmoho6r.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpthmoho6r.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpthmoho6r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpthmoho6r.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpthmoho6r.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpthmoho6r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpthmoho6r.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpthmoho6r.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpthmoho6r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpthmoho6r.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpthmoho6r.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpthmoho6r.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwp66c4m7.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwp66c4m7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwp66c4m7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwp66c4m7.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwp66c4m7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwp66c4m7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwp66c4m7.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwp66c4m7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwp66c4m7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwp66c4m7.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwp66c4m7.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwp66c4m7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi6tizhee.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6tizhee.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6tizhee.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi6tizhee.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6tizhee.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6tizhee.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi6tizhee.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6tizhee.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6tizhee.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi6tizhee.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi6tizhee.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi6tizhee.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppcj__9m_.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppcj__9m_.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppcj__9m_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppcj__9m_.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppcj__9m_.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppcj__9m_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppcj__9m_.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppcj__9m_.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppcj__9m_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppcj__9m_.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppcj__9m_.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppcj__9m_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv_rkzo9v.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv_rkzo9v.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv_rkzo9v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv_rkzo9v.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv_rkzo9v.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv_rkzo9v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv_rkzo9v.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv_rkzo9v.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv_rkzo9v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv_rkzo9v.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv_rkzo9v.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv_rkzo9v.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph_clac_w.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_clac_w.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_clac_w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph_clac_w.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_clac_w.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_clac_w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph_clac_w.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_clac_w.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_clac_w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph_clac_w.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph_clac_w.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph_clac_w.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuqznk4rh.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuqznk4rh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuqznk4rh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuqznk4rh.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuqznk4rh.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuqznk4rh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuqznk4rh.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuqznk4rh.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuqznk4rh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuqznk4rh.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuqznk4rh.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuqznk4rh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0olfw_tk.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0olfw_tk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0olfw_tk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0olfw_tk.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0olfw_tk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0olfw_tk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0olfw_tk.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0olfw_tk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0olfw_tk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0olfw_tk.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0olfw_tk.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0olfw_tk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2nki_s9g.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2nki_s9g.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2nki_s9g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2nki_s9g.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2nki_s9g.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2nki_s9g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2nki_s9g.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2nki_s9g.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2nki_s9g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2nki_s9g.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2nki_s9g.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2nki_s9g.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppio632uk.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppio632uk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppio632uk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppio632uk.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppio632uk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppio632uk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppio632uk.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppio632uk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppio632uk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppio632uk.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppio632uk.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppio632uk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    return [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp09xftpxh.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp09xftpxh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp09xftpxh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp09xftpxh.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp09xftpxh.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp09xftpxh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp09xftpxh.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp09xftpxh.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp09xftpxh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp09xftpxh.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp09xftpxh.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp09xftpxh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaisrkw_4.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaisrkw_4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaisrkw_4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaisrkw_4.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaisrkw_4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaisrkw_4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaisrkw_4.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaisrkw_4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaisrkw_4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaisrkw_4.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaisrkw_4.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaisrkw_4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdru3dvjd.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdru3dvjd.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdru3dvjd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdru3dvjd.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdru3dvjd.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdru3dvjd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdru3dvjd.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdru3dvjd.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdru3dvjd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdru3dvjd.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdru3dvjd.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdru3dvjd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprfo39nc2.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprfo39nc2.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprfo39nc2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprfo39nc2.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprfo39nc2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprfo39nc2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprfo39nc2.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprfo39nc2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprfo39nc2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprfo39nc2.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprfo39nc2.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprfo39nc2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp134l3n9w.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp134l3n9w.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp134l3n9w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp134l3n9w.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp134l3n9w.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp134l3n9w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp134l3n9w.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp134l3n9w.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp134l3n9w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp134l3n9w.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp134l3n9w.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp134l3n9w.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk501i5nl.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk501i5nl.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk501i5nl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk501i5nl.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk501i5nl.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk501i5nl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk501i5nl.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk501i5nl.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk501i5nl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk501i5nl.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk501i5nl.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk501i5nl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_nssrc47.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_nssrc47.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_nssrc47.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_nssrc47.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_nssrc47.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_nssrc47.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_nssrc47.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_nssrc47.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_nssrc47.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_nssrc47.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_nssrc47.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_nssrc47.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    if a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n\
    \        b -= 1\n    end\n    return collect(a:2:b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpin_ybkx8.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpin_ybkx8.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpin_ybkx8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpin_ybkx8.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpin_ybkx8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpin_ybkx8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpin_ybkx8.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpin_ybkx8.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpin_ybkx8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpin_ybkx8.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpin_ybkx8.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpin_ybkx8.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7ndaf2mj.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7ndaf2mj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7ndaf2mj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7ndaf2mj.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7ndaf2mj.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7ndaf2mj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7ndaf2mj.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7ndaf2mj.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7ndaf2mj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7ndaf2mj.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7ndaf2mj.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7ndaf2mj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp447xpfv6.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp447xpfv6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp447xpfv6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp447xpfv6.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp447xpfv6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp447xpfv6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp447xpfv6.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp447xpfv6.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp447xpfv6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp447xpfv6.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp447xpfv6.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp447xpfv6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcu2scz7_.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcu2scz7_.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcu2scz7_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcu2scz7_.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcu2scz7_.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcu2scz7_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcu2scz7_.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcu2scz7_.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcu2scz7_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcu2scz7_.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcu2scz7_.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcu2scz7_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp8t1rxt8.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp8t1rxt8.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp8t1rxt8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp8t1rxt8.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp8t1rxt8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp8t1rxt8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp8t1rxt8.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp8t1rxt8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp8t1rxt8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp8t1rxt8.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpp8t1rxt8.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp8t1rxt8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    if a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n\
    \        b -= 1\n    end\n    if a > b\n        return []\n    end\n    return\
    \ collect(a:2:b)\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpynvaxisx.jl:33\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynvaxisx.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynvaxisx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpynvaxisx.jl:34\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynvaxisx.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynvaxisx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpynvaxisx.jl:35\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynvaxisx.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynvaxisx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpynvaxisx.jl:36\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpynvaxisx.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpynvaxisx.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2a5684uy.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2a5684uy.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2a5684uy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2a5684uy.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2a5684uy.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2a5684uy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2a5684uy.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2a5684uy.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2a5684uy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2a5684uy.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2a5684uy.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2a5684uy.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgw4zbnvt.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgw4zbnvt.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgw4zbnvt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgw4zbnvt.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgw4zbnvt.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgw4zbnvt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgw4zbnvt.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgw4zbnvt.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgw4zbnvt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgw4zbnvt.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgw4zbnvt.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgw4zbnvt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2zmi43ha.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2zmi43ha.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2zmi43ha.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2zmi43ha.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2zmi43ha.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2zmi43ha.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2zmi43ha.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2zmi43ha.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2zmi43ha.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2zmi43ha.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2zmi43ha.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2zmi43ha.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyynrzxzt.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyynrzxzt.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyynrzxzt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyynrzxzt.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyynrzxzt.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyynrzxzt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyynrzxzt.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyynrzxzt.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyynrzxzt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyynrzxzt.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyynrzxzt.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyynrzxzt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    if a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n\
    \        b -= 1\n    end\n    return collect(a:2:b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3v8lzlgs.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3v8lzlgs.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3v8lzlgs.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3v8lzlgs.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3v8lzlgs.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3v8lzlgs.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3v8lzlgs.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3v8lzlgs.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3v8lzlgs.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3v8lzlgs.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3v8lzlgs.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3v8lzlgs.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsxfb2mnf.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsxfb2mnf.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsxfb2mnf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsxfb2mnf.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsxfb2mnf.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsxfb2mnf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsxfb2mnf.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsxfb2mnf.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsxfb2mnf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsxfb2mnf.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsxfb2mnf.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsxfb2mnf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp17of1fzb.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp17of1fzb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp17of1fzb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp17of1fzb.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp17of1fzb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp17of1fzb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp17of1fzb.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp17of1fzb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp17of1fzb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp17of1fzb.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp17of1fzb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp17of1fzb.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmo9esv0x.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmo9esv0x.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmo9esv0x.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmo9esv0x.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmo9esv0x.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmo9esv0x.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmo9esv0x.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmo9esv0x.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmo9esv0x.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmo9esv0x.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmo9esv0x.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmo9esv0x.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd2xtn5e5.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd2xtn5e5.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd2xtn5e5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpd2xtn5e5.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd2xtn5e5.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd2xtn5e5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpd2xtn5e5.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd2xtn5e5.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd2xtn5e5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpd2xtn5e5.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd2xtn5e5.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd2xtn5e5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa32yaquo.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa32yaquo.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa32yaquo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa32yaquo.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa32yaquo.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa32yaquo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa32yaquo.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa32yaquo.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa32yaquo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa32yaquo.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa32yaquo.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa32yaquo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx_kczf2m.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_kczf2m.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_kczf2m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpx_kczf2m.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_kczf2m.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_kczf2m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpx_kczf2m.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_kczf2m.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_kczf2m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpx_kczf2m.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx_kczf2m.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx_kczf2m.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_xfyy0iz.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_xfyy0iz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_xfyy0iz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_xfyy0iz.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_xfyy0iz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_xfyy0iz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_xfyy0iz.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_xfyy0iz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_xfyy0iz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_xfyy0iz.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_xfyy0iz.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_xfyy0iz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp285asmy.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp285asmy.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp285asmy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp285asmy.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp285asmy.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp285asmy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp285asmy.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp285asmy.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp285asmy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp285asmy.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpp285asmy.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp285asmy.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    if a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n\
    \        b -= 1\n    end\n    return collect(a:2:b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzfjrgwxm.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfjrgwxm.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfjrgwxm.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzfjrgwxm.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfjrgwxm.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfjrgwxm.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzfjrgwxm.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfjrgwxm.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfjrgwxm.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzfjrgwxm.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzfjrgwxm.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzfjrgwxm.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5kcl9wxk.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kcl9wxk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kcl9wxk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5kcl9wxk.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kcl9wxk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kcl9wxk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5kcl9wxk.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kcl9wxk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kcl9wxk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5kcl9wxk.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5kcl9wxk.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5kcl9wxk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [x for x in a:b if x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq6fc3nef.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6fc3nef.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6fc3nef.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq6fc3nef.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6fc3nef.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6fc3nef.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq6fc3nef.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6fc3nef.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6fc3nef.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq6fc3nef.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6fc3nef.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq6fc3nef.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgaopw13z.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgaopw13z.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgaopw13z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgaopw13z.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgaopw13z.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgaopw13z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgaopw13z.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgaopw13z.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgaopw13z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgaopw13z.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgaopw13z.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgaopw13z.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcajg59cs.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcajg59cs.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcajg59cs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcajg59cs.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcajg59cs.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcajg59cs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcajg59cs.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcajg59cs.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcajg59cs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcajg59cs.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcajg59cs.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcajg59cs.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq8my6fbj.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq8my6fbj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq8my6fbj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq8my6fbj.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq8my6fbj.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq8my6fbj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq8my6fbj.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq8my6fbj.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq8my6fbj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq8my6fbj.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq8my6fbj.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq8my6fbj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq6fg010g.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6fg010g.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6fg010g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq6fg010g.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6fg010g.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6fg010g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq6fg010g.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6fg010g.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6fg010g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq6fg010g.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6fg010g.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq6fg010g.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe4v4zj0q.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe4v4zj0q.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe4v4zj0q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe4v4zj0q.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe4v4zj0q.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe4v4zj0q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe4v4zj0q.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe4v4zj0q.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe4v4zj0q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe4v4zj0q.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe4v4zj0q.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe4v4zj0q.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgfy2727w.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfy2727w.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfy2727w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgfy2727w.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfy2727w.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfy2727w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgfy2727w.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfy2727w.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfy2727w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgfy2727w.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgfy2727w.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgfy2727w.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3cmwdgd0.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cmwdgd0.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cmwdgd0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3cmwdgd0.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cmwdgd0.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cmwdgd0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3cmwdgd0.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cmwdgd0.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cmwdgd0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3cmwdgd0.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3cmwdgd0.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3cmwdgd0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2o2zn0wz.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2o2zn0wz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2o2zn0wz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2o2zn0wz.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2o2zn0wz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2o2zn0wz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2o2zn0wz.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2o2zn0wz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2o2zn0wz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2o2zn0wz.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2o2zn0wz.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2o2zn0wz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpru91fdf3.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpru91fdf3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpru91fdf3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpru91fdf3.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpru91fdf3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpru91fdf3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpru91fdf3.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpru91fdf3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpru91fdf3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpru91fdf3.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpru91fdf3.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpru91fdf3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    if a % 2 == 1\n        a += 1\n    end\n    return [i for i\
    \ in a:2:b]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6p45w807.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6p45w807.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6p45w807.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6p45w807.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6p45w807.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6p45w807.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6p45w807.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6p45w807.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6p45w807.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6p45w807.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6p45w807.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6p45w807.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    # if a > b, swap them\n    if a > b\n       \
    \ a, b = b, a\n    end\n    # if a is even, start with it\n    if a % 2 == 0\n\
    \        start = a\n    else\n        start = a + 1\n    end\n    # if b is even,\
    \ end with it\n    if b % 2 == 0\n        end = b\n    else\n        end = b -\
    \ 1\n    end\n    # if start is greater than end, return empty array\n    if start\
    \ > end\n        return []\n    end\n    # otherwise, return the range\n    return\
    \ collect(start:2:end)\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp73p5ajmh.jl:13 expected\
    \ \"end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp73p5ajmh.jl:27\n\
    in expression starting at /tmp/tmp73p5ajmh.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    if\
    \ a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n   \
    \ end\n    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxqiglol0.jl:33\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxqiglol0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxqiglol0.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxqiglol0.jl:34\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxqiglol0.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxqiglol0.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxqiglol0.jl:35\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxqiglol0.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxqiglol0.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxqiglol0.jl:36\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxqiglol0.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxqiglol0.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9c50vpve.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9c50vpve.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9c50vpve.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9c50vpve.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9c50vpve.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9c50vpve.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9c50vpve.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9c50vpve.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9c50vpve.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9c50vpve.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9c50vpve.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9c50vpve.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    if\
    \ a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n   \
    \ end\n    return collect(a:2:b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6h0vq1c7.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6h0vq1c7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6h0vq1c7.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp6h0vq1c7.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6h0vq1c7.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6h0vq1c7.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp6h0vq1c7.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6h0vq1c7.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6h0vq1c7.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp6h0vq1c7.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6h0vq1c7.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6h0vq1c7.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    if a % 2 == 1\n        a += 1\n    end\n    return [i for i\
    \ in a:2:b]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpof0o9j4l.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpof0o9j4l.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpof0o9j4l.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpof0o9j4l.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpof0o9j4l.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpof0o9j4l.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpof0o9j4l.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpof0o9j4l.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpof0o9j4l.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpof0o9j4l.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpof0o9j4l.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpof0o9j4l.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6s21m3sl.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6s21m3sl.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6s21m3sl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6s21m3sl.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6s21m3sl.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6s21m3sl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6s21m3sl.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6s21m3sl.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6s21m3sl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6s21m3sl.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6s21m3sl.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6s21m3sl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmeu7o77l.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmeu7o77l.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmeu7o77l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmeu7o77l.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmeu7o77l.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmeu7o77l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmeu7o77l.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmeu7o77l.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmeu7o77l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmeu7o77l.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmeu7o77l.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmeu7o77l.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    if\
    \ a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n   \
    \ end\n    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprl99v3mc.jl:33\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprl99v3mc.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprl99v3mc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprl99v3mc.jl:34\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprl99v3mc.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprl99v3mc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprl99v3mc.jl:35\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprl99v3mc.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprl99v3mc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprl99v3mc.jl:36\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprl99v3mc.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprl99v3mc.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnp_dwvv_.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnp_dwvv_.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnp_dwvv_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnp_dwvv_.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnp_dwvv_.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnp_dwvv_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnp_dwvv_.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnp_dwvv_.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnp_dwvv_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnp_dwvv_.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnp_dwvv_.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnp_dwvv_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkwz7lvpv.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkwz7lvpv.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkwz7lvpv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkwz7lvpv.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkwz7lvpv.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkwz7lvpv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkwz7lvpv.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkwz7lvpv.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkwz7lvpv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkwz7lvpv.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkwz7lvpv.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkwz7lvpv.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnh54rfc2.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnh54rfc2.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnh54rfc2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnh54rfc2.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnh54rfc2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnh54rfc2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnh54rfc2.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnh54rfc2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnh54rfc2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnh54rfc2.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnh54rfc2.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnh54rfc2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp45sniqky.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp45sniqky.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp45sniqky.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp45sniqky.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp45sniqky.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp45sniqky.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp45sniqky.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp45sniqky.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp45sniqky.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp45sniqky.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp45sniqky.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp45sniqky.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyvhoth30.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvhoth30.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvhoth30.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyvhoth30.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvhoth30.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvhoth30.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyvhoth30.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvhoth30.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvhoth30.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyvhoth30.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyvhoth30.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyvhoth30.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    if a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n\
    \        b -= 1\n    end\n    if a > b\n        return []\n    end\n    return\
    \ collect(a:2:b)\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp03vki25w.jl:33\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp03vki25w.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp03vki25w.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp03vki25w.jl:34\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp03vki25w.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp03vki25w.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp03vki25w.jl:35\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp03vki25w.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp03vki25w.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp03vki25w.jl:36\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp03vki25w.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp03vki25w.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        return generate_integers(b,\
    \ a)\n    end\n    if a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n\
    \        b -= 1\n    end\n    if a > b\n        return []\n    end\n    return\
    \ collect(a:2:b)\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl2rwy9z2.jl:33\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl2rwy9z2.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl2rwy9z2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpl2rwy9z2.jl:34\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl2rwy9z2.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl2rwy9z2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpl2rwy9z2.jl:35\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl2rwy9z2.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl2rwy9z2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpl2rwy9z2.jl:36\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpl2rwy9z2.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl2rwy9z2.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0401uky4.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0401uky4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0401uky4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0401uky4.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0401uky4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0401uky4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0401uky4.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0401uky4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0401uky4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0401uky4.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0401uky4.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0401uky4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_8tq_ipc.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_8tq_ipc.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_8tq_ipc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_8tq_ipc.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_8tq_ipc.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_8tq_ipc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_8tq_ipc.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_8tq_ipc.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_8tq_ipc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_8tq_ipc.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_8tq_ipc.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_8tq_ipc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    if\
    \ a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n   \
    \ end\n    if a > b\n        return Int64[]\n    end\n    return collect(a:2:b)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxeqsq14k.jl:33\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxeqsq14k.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxeqsq14k.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxeqsq14k.jl:34\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxeqsq14k.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxeqsq14k.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxeqsq14k.jl:35\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxeqsq14k.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxeqsq14k.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxeqsq14k.jl:36\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxeqsq14k.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxeqsq14k.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu50dy_b7.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu50dy_b7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu50dy_b7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu50dy_b7.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu50dy_b7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu50dy_b7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu50dy_b7.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu50dy_b7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu50dy_b7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu50dy_b7.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpu50dy_b7.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu50dy_b7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm98oe91i.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm98oe91i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm98oe91i.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm98oe91i.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm98oe91i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm98oe91i.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm98oe91i.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm98oe91i.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm98oe91i.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm98oe91i.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm98oe91i.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm98oe91i.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf3emax2o.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3emax2o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3emax2o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf3emax2o.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3emax2o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3emax2o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf3emax2o.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3emax2o.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3emax2o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf3emax2o.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf3emax2o.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf3emax2o.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr5c2v3zz.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr5c2v3zz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr5c2v3zz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpr5c2v3zz.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr5c2v3zz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr5c2v3zz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpr5c2v3zz.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr5c2v3zz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr5c2v3zz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpr5c2v3zz.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr5c2v3zz.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr5c2v3zz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2a3a4w7s.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2a3a4w7s.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2a3a4w7s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2a3a4w7s.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2a3a4w7s.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2a3a4w7s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2a3a4w7s.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2a3a4w7s.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2a3a4w7s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2a3a4w7s.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2a3a4w7s.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2a3a4w7s.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0jx3zzue.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0jx3zzue.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0jx3zzue.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0jx3zzue.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0jx3zzue.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0jx3zzue.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0jx3zzue.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0jx3zzue.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0jx3zzue.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0jx3zzue.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0jx3zzue.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0jx3zzue.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcyh15w63.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcyh15w63.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcyh15w63.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcyh15w63.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcyh15w63.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcyh15w63.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcyh15w63.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcyh15w63.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcyh15w63.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcyh15w63.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcyh15w63.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcyh15w63.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2dvgfrhs.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2dvgfrhs.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2dvgfrhs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2dvgfrhs.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2dvgfrhs.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2dvgfrhs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2dvgfrhs.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2dvgfrhs.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2dvgfrhs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2dvgfrhs.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2dvgfrhs.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2dvgfrhs.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkye9m5lc.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkye9m5lc.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkye9m5lc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkye9m5lc.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkye9m5lc.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkye9m5lc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkye9m5lc.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkye9m5lc.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkye9m5lc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkye9m5lc.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkye9m5lc.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkye9m5lc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwf6qkpe2.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwf6qkpe2.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwf6qkpe2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwf6qkpe2.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwf6qkpe2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwf6qkpe2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwf6qkpe2.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwf6qkpe2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwf6qkpe2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwf6qkpe2.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwf6qkpe2.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwf6qkpe2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b \n        a, b = b, a\n    end\n   \
    \ return [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl4li13b0.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl4li13b0.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl4li13b0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl4li13b0.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl4li13b0.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl4li13b0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl4li13b0.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl4li13b0.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl4li13b0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl4li13b0.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpl4li13b0.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl4li13b0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_gppdd8s.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_gppdd8s.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_gppdd8s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_gppdd8s.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_gppdd8s.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_gppdd8s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_gppdd8s.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_gppdd8s.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_gppdd8s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_gppdd8s.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_gppdd8s.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_gppdd8s.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3ebxl0kh.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ebxl0kh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ebxl0kh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3ebxl0kh.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ebxl0kh.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ebxl0kh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3ebxl0kh.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ebxl0kh.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ebxl0kh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3ebxl0kh.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3ebxl0kh.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ebxl0kh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmwwr34a1.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmwwr34a1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmwwr34a1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmwwr34a1.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmwwr34a1.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmwwr34a1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmwwr34a1.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmwwr34a1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmwwr34a1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmwwr34a1.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmwwr34a1.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmwwr34a1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvv7t_3l9.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvv7t_3l9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvv7t_3l9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvv7t_3l9.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvv7t_3l9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvv7t_3l9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvv7t_3l9.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvv7t_3l9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvv7t_3l9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvv7t_3l9.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvv7t_3l9.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvv7t_3l9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2,\
    \ 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n  \
    \  >>> generate_integers(10, 14)\n    []\n    \"\"\"\nfunction generate_integers(a::Int64,\
    \ b::Int64)::Vector{Int64} \n    if a > b\n        a, b = b, a\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjhvpnadu.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjhvpnadu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjhvpnadu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjhvpnadu.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjhvpnadu.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjhvpnadu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjhvpnadu.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjhvpnadu.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjhvpnadu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjhvpnadu.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjhvpnadu.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjhvpnadu.jl:21\n"
  exit_code: 1
  status: SyntaxError
