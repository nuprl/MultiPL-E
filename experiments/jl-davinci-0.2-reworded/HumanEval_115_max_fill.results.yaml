name: HumanEval_115_max_fill
language: jl
results:
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmponvvpvm8.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponvvpvm8.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponvvpvm8.jl:36\ntest set: Test\
    \ Failed at /tmp/tmponvvpvm8.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponvvpvm8.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponvvpvm8.jl:36\ntest set: Test\
    \ Failed at /tmp/tmponvvpvm8.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponvvpvm8.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponvvpvm8.jl:36\ntest set: Test\
    \ Failed at /tmp/tmponvvpvm8.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponvvpvm8.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponvvpvm8.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmponvvpvm8.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # Your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdx1jr91z.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdx1jr91z.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdx1jr91z.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdx1jr91z.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdx1jr91z.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdx1jr91z.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdx1jr91z.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdx1jr91z.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdx1jr91z.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdx1jr91z.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdx1jr91z.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdx1jr91z.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdx1jr91z.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdag3eex0.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdag3eex0.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdag3eex0.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdag3eex0.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdag3eex0.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdag3eex0.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdag3eex0.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdag3eex0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdag3eex0.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdag3eex0.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdag3eex0.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdag3eex0.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdag3eex0.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnnw567nm.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnnw567nm.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnnw567nm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnnw567nm.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnnw567nm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnnw567nm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnnw567nm.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnnw567nm.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnnw567nm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnnw567nm.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnnw567nm.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnnw567nm.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnnw567nm.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    This function takes a grid of wells\
    \ and a bucket capacity as input.\n    It returns the number of times you need\
    \ to lower the buckets.\n    \"\"\"\n    # Initialize the number of times you\
    \ need to lower the buckets\n    lowers = 0\n    # Initialize the number of wells\n\
    \    wells = length(grid)\n    # Initialize the number of units of water\n   \
    \ units = 0\n    # Initialize the number of units of water per well\n    units_per_well\
    \ = zeros(wells)\n    # Initialize the number of units of water per bucket\n \
    \   units_per_bucket = zeros(wells)\n    # Initialize the number of units of water\
    \ per bucket per well\n    units_per_bucket_per_well = zeros(wells)\n    # Initialize\
    \ the number of units of water per bucket per well per row\n    units_per_bucket_per_well_per_row\
    \ = zeros(wells)\n    # Initialize the number of units of water per bucket per\
    \ well per row per column\n    units_per_bucket_per_well_per_row_per_column =\
    \ zeros(wells)\n    # Initialize the number of units of water per bucket per well\
    \ per row per column per bucket\n    units_per_bucket_per_well_per_row_per_column_per_bucket\
    \ = zeros(wells)\n    # Initialize the number of buckets\n    buckets = zeros(wells)\n\
    \    # Initialize the number of buckets per well\n    buckets_per_well = zeros(wells)\n\
    \    # Initialize the number of buckets per well per row\n    buckets_per_well_per_row\
    \ = zeros(wells)\n    # Initialize the number of buckets per well per row per\
    \ column\n    buckets_per_well_per_row_per_column = zeros(wells)\n    # Initialize\
    \ the number of buckets per well per row per column per bucket\n    buckets_per_well_per_row_per_column_per_bucket\
    \ = zeros(wells)\n    # Initialize the number of buckets per well per row per\
    \ column per bucket per capacity\n    buckets_per_well_per_row_per_column_per_buck\n\
    using Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjl9w94p7.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjl9w94p7.jl:1\n\
    in expression starting at /tmp/tmpjl9w94p7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n_rows, n_cols = size(grid)\n    n_fills = 0\n\
    \    for col in 1:n_cols\n        for row in 1:n_rows\n            if grid[row,\
    \ col] == 1\n                n_fills += 1\n                grid[row, col] = 0\n\
    \                if row < n_rows\n                    grid[row+1, col] = 1\n \
    \               end\n            end\n        end\n    end\n    return n_fills\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprt60s5a7.jl:49\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmprt60s5a7.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprt60s5a7.jl:49 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprt60s5a7.jl:48\ntest set:\
    \ Error During Test at /tmp/tmprt60s5a7.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmprt60s5a7.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprt60s5a7.jl:50 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprt60s5a7.jl:48\ntest set:\
    \ Error During Test at /tmp/tmprt60s5a7.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 0], [0, 0, 0]], 5) == 0\n  BoundsError: attempt to access\
    \ Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89\
    \ [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n \
    \    @ Main /tmp/tmprt60s5a7.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprt60s5a7.jl:51 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprt60s5a7.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwrw779hv.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwrw779hv.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwrw779hv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwrw779hv.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwrw779hv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwrw779hv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwrw779hv.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwrw779hv.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwrw779hv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwrw779hv.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwrw779hv.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwrw779hv.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwrw779hv.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code goes here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwg2wdlj_.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwg2wdlj_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwg2wdlj_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwg2wdlj_.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwg2wdlj_.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwg2wdlj_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwg2wdlj_.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwg2wdlj_.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwg2wdlj_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwg2wdlj_.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwg2wdlj_.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwg2wdlj_.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwg2wdlj_.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    You are given a rectangular grid of\
    \ wells. Each row represents a single well,\n    and each 1 in a row represents\
    \ a single unit of water.\n    Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n    and all buckets have the same capacity.\n\
    \    Your task is to use the buckets to empty the wells.\n    Output the number\
    \ of times you need to lower the buckets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfj4vfr_t.jl:1\nin expression starting at /tmp/tmpfj4vfr_t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    Calculates the number of times the\
    \ buckets need to be lowered.\n    \"\"\"\n    # Initialize the number of times\
    \ the buckets need to be lowered\n    num_lowers = 0\n    # Initialize the number\
    \ of wells that are filled\n    num_filled = 0\n    # Initialize the number of\
    \ wells that are empty\n    num_empty = 0\n    # Initialize the number of wells\
    \ that are partially filled\n    num_partially_filled = 0\n    # Initialize the\
    \ number of wells that are completely filled\n    num_completely_filled = 0\n\
    \    # Initialize the number of wells that are completely empty\n    num_completely_empty\
    \ = 0\n    # Initialize the number of wells that are partially empty\n    num_partially_empty\
    \ = 0\n    # Initialize the number of wells that are partially filled and partially\
    \ empty\n    num_partially_filled_and_partially_empty = 0\n    # Initialize the\
    \ number of wells that are completely filled and completely empty\n    num_completely_filled_and_completely_empty\
    \ = 0\n    # Initialize the number of wells that are completely filled and partially\
    \ empty\n    num_completely_filled_and_partially_empty = 0\n    # Initialize the\
    \ number of wells that are partially filled and completely empty\n    num_partially_filled_and_completely_empty\
    \ = 0\n    # Initialize the number of wells that are partially filled and partially\
    \ empty\n    num_partially_filled_and_partially_empty = 0\n    # Initialize the\
    \ number of wells that are completely filled and completely empty\n    num_completely_filled_and_completely_empty\
    \ = 0\n    # Initialize the number of wells that are completely filled and partially\
    \ empty\n    num_completely_filled_and_partially_empty = 0\n    # Initialize the\
    \ number of wells that are partially filled and completely empty\n    num_partially_filled_and_completely_empty\
    \ = 0\n    # Initialize the number of wells that are partially filled and partially\
    \ empty\n    num_partially_filled_and_partially_empty = 0\n    # Initialize the\
    \ number of wells that are completely filled and completely empty\n    num_completely_filled_and_completely_empty\
    \ = 0\n    # Initialize the number of wells that are completely filled and partially\
    \ empty\n    num_\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplijyhlno.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplijyhlno.jl:1\n\
    in expression starting at /tmp/tmplijyhlno.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  # Initialize the grid\n    grid_fill = zeros(Int64, n, m)\n    # Fill the first\
    \ row\n    for i in 1:m\n        grid_fill[1, i] = grid[1, i] * capacity\n   \
    \ end\n    # Fill the rest of the grid\n    for i in 2:n\n        for j in 1:m\n\
    \            if grid[i, j] == 1\n                grid_fill[i, j] = grid_fill[i-1,\
    \ j] + capacity\n            else\n                grid_fill[i, j] = grid_fill[i-1,\
    \ j]\n            end\n        end\n    end\n    # Return the maximum value\n\
    \    return maximum(grid_fill)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0vystk1m.jl:55\\n  Test threw\
    \ exception\\n  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\
    \ 1) == 6\\n  MethodError: Cannot `convert` an object of type Vector{Int64} to\
    \ an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!\\n     @ ./array.jl:905 [inlined]\\\
    n   [2] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\\n     @ Main /tmp/tmp0vystk1m.jl:35\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp0vystk1m.jl:55 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp0vystk1m.jl:54\\ntest set:\
    \ Error During Test at /tmp/tmp0vystk1m.jl:56\\n  Test threw exception\\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\\\
    n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object\
    \ of type Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!\\n     @ ./array.jl:905 [inlined]\\\
    n   [2] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\\n     @ Main /tmp/tmp0vystk1m.jl:35\\\
    n   [3] macro expansion\\n     @ /shared/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk4ztjjbn.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4ztjjbn.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4ztjjbn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpk4ztjjbn.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4ztjjbn.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4ztjjbn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpk4ztjjbn.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4ztjjbn.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4ztjjbn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpk4ztjjbn.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4ztjjbn.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4ztjjbn.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk4ztjjbn.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement me\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_cp95866.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_cp95866.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_cp95866.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_cp95866.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_cp95866.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_cp95866.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_cp95866.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_cp95866.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_cp95866.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_cp95866.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_cp95866.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_cp95866.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_cp95866.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_fwq34b1.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_fwq34b1.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_fwq34b1.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_fwq34b1.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_fwq34b1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_fwq34b1.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_fwq34b1.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_fwq34b1.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_fwq34b1.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_fwq34b1.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_fwq34b1.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_fwq34b1.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_fwq34b1.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjl3fnhhm.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjl3fnhhm.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjl3fnhhm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjl3fnhhm.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjl3fnhhm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjl3fnhhm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjl3fnhhm.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjl3fnhhm.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjl3fnhhm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjl3fnhhm.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjl3fnhhm.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjl3fnhhm.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjl3fnhhm.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4464ipu4.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4464ipu4.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4464ipu4.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4464ipu4.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4464ipu4.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4464ipu4.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4464ipu4.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4464ipu4.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4464ipu4.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4464ipu4.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4464ipu4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4464ipu4.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4464ipu4.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  total = 0\n    for i in 1:n\n        for j in 1:m\n            if grid[i][j]\
    \ == 1\n                total += 1\n            end\n        end\n    end\n  \
    \  return total / capacity\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\
    \t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp00oys_5a.jl:47\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5\n  InexactError: Int64(4.5)\n  Stacktrace:\n   [1] Int64\n    \
    \ @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n     @ Main /tmp/tmp00oys_5a.jl:39\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp00oys_5a.jl:47 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp00oys_5a.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp00oys_5a.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2\n  InexactError: Int64(0.8888888888888888)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmp00oys_5a.jl:39\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp00oys_5a.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp00oys_5a.jl:45\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp00oys_5a.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    This function takes a grid of wells\
    \ and a bucket capacity,\n    and returns the number of times you need to lower\
    \ the buckets.\n    \"\"\"\n    # Initialize the number of times you need to lower\
    \ the buckets\n    lowers = 0\n    # Loop through each row in the grid\n    for\
    \ row in grid\n        # Initialize the number of units of water in the row\n\
    \        units = 0\n        # Loop through each well in the row\n        for well\
    \ in row\n            # If the well is full, increment the number of units of\
    \ water\n            if well == 1\n                units += 1\n            end\n\
    \        end\n        # Increment the number of times you need to lower the buckets\n\
    \        lowers += div(units, capacity)\n        # If the number of units of water\
    \ is not divisible by the capacity,\n        # increment the number of times you\
    \ need to lower the buckets\n        if units % capacity != 0\n            lowers\
    \ += 1\n        end\n    end\n    # Return the number of times you need to lower\
    \ the buckets\n    return lowers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjie14f4w.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjie14f4w.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjie14f4w.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjie14f4w.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjie14f4w.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjie14f4w.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjie14f4w.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjie14f4w.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjie14f4w.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjie14f4w.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjie14f4w.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjie14f4w.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjie14f4w.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqqtdot8b.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqqtdot8b.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqqtdot8b.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqqtdot8b.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqqtdot8b.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqqtdot8b.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqqtdot8b.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqqtdot8b.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqqtdot8b.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqqtdot8b.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqqtdot8b.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqqtdot8b.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqqtdot8b.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement me\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpba9z5kbe.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpba9z5kbe.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpba9z5kbe.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpba9z5kbe.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpba9z5kbe.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpba9z5kbe.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpba9z5kbe.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpba9z5kbe.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpba9z5kbe.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpba9z5kbe.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpba9z5kbe.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpba9z5kbe.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpba9z5kbe.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    >>> max_fill([[0, 0, 1, 0], [0, 1,\
    \ 0, 0], [1, 1, 1, 1]], 1)\n    6\nusing Test\n\n@testset begin\n\ncandidate =\
    \ max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd0r_6wff.jl:1\nin expression starting at /tmp/tmpd0r_6wff.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6inucb31.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6inucb31.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6inucb31.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6inucb31.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6inucb31.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6inucb31.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6inucb31.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6inucb31.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6inucb31.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6inucb31.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6inucb31.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6inucb31.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6inucb31.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0jus8kkv.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0jus8kkv.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0jus8kkv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0jus8kkv.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0jus8kkv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0jus8kkv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0jus8kkv.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0jus8kkv.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0jus8kkv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0jus8kkv.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0jus8kkv.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0jus8kkv.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0jus8kkv.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2udnag16.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2udnag16.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2udnag16.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2udnag16.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2udnag16.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2udnag16.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2udnag16.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2udnag16.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2udnag16.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2udnag16.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2udnag16.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2udnag16.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2udnag16.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  total = 0\n    for i in 1:n\n        for j in 1:m\n            if grid[i][j]\
    \ == 1\n                total += 1\n            end\n        end\n    end\n  \
    \  return total / capacity\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\
    \t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr4fe9l7g.jl:47\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5\n  InexactError: Int64(4.5)\n  Stacktrace:\n   [1] Int64\n    \
    \ @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n     @ Main /tmp/tmpr4fe9l7g.jl:39\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpr4fe9l7g.jl:47 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpr4fe9l7g.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpr4fe9l7g.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2\n  InexactError: Int64(0.8888888888888888)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpr4fe9l7g.jl:39\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpr4fe9l7g.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpr4fe9l7g.jl:45\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr4fe9l7g.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  max_water = 0\n    for i in 1:n\n        for j in 1:m\n            max_water\
    \ += grid[i][j]\n        end\n    end\n    return max_water / capacity\nend\n\
    using Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmporq13cay.jl:45\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5\n  InexactError: Int64(4.5)\n  Stacktrace:\n   [1] Int64\n    \
    \ @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n     @ Main /tmp/tmporq13cay.jl:37\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmporq13cay.jl:45 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmporq13cay.jl:43\ntest set:\
    \ Error During Test at /tmp/tmporq13cay.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2\n  InexactError: Int64(0.8888888888888888)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmporq13cay.jl:37\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmporq13cay.jl:48 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmporq13cay.jl:43\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmporq13cay.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdvi9hwc3.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvi9hwc3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvi9hwc3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdvi9hwc3.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvi9hwc3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvi9hwc3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdvi9hwc3.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvi9hwc3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvi9hwc3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdvi9hwc3.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvi9hwc3.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvi9hwc3.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdvi9hwc3.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv8fg77y5.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv8fg77y5.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv8fg77y5.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpv8fg77y5.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv8fg77y5.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv8fg77y5.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpv8fg77y5.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv8fg77y5.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv8fg77y5.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpv8fg77y5.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv8fg77y5.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv8fg77y5.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv8fg77y5.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr_96ql10.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_96ql10.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_96ql10.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpr_96ql10.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_96ql10.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_96ql10.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpr_96ql10.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_96ql10.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_96ql10.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpr_96ql10.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_96ql10.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_96ql10.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr_96ql10.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # YOUR CODE HERE\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_adui3gv.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_adui3gv.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_adui3gv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_adui3gv.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_adui3gv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_adui3gv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_adui3gv.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_adui3gv.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_adui3gv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_adui3gv.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_adui3gv.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_adui3gv.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_adui3gv.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    You are given a rectangular grid of\
    \ wells. Each row represents a single well,\n    and each 1 in a row represents\
    \ a single unit of water.\n    Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n    and all buckets have the same capacity.\n\
    \    Your task is to use the buckets to empty the wells.\n    Output the number\
    \ of times you need to lower the buckets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm8jrhdxk.jl:1\nin expression starting at /tmp/tmpm8jrhdxk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_t5wyrge.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_t5wyrge.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_t5wyrge.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_t5wyrge.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_t5wyrge.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_t5wyrge.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_t5wyrge.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_t5wyrge.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_t5wyrge.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_t5wyrge.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_t5wyrge.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_t5wyrge.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_t5wyrge.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # Initialize the number of times we need to lower\
    \ the buckets\n    num_lower = 0\n    # Initialize the number of wells that are\
    \ filled\n    num_filled = 0\n    # Initialize the number of wells that are empty\n\
    \    num_empty = 0\n    # Initialize the number of wells that are partially filled\n\
    \    num_partial = 0\n    # Initialize the number of wells that are partially\
    \ filled\n    num_full = 0\n    # Initialize the number of wells that are partially\
    \ filled\n    num_overflow = 0\n    # Initialize the number of wells that are\
    \ partially filled\n    num_underflow = 0\n    # Initialize the number of wells\
    \ that are partially filled\n    num_overflow_partial = 0\n    # Initialize the\
    \ number of wells that are partially filled\n    num_underflow_partial = 0\n \
    \   # Initialize the number of wells that are partially filled\n    num_overflow_full\
    \ = 0\n    # Initialize the number of wells that are partially filled\n    num_underflow_full\
    \ = 0\n    # Initialize the number of wells that are partially filled\n    num_overflow_empty\
    \ = 0\n    # Initialize the number of wells that are partially filled\n    num_underflow_empty\
    \ = 0\n    # Initialize the number of wells that are partially filled\n    num_overflow_filled\
    \ = 0\n    # Initialize the number of wells that are partially filled\n    num_underflow_filled\
    \ = 0\n    # Initialize the number of wells that are partially filled\n    num_overflow_partial\
    \ = 0\n    # Initialize the number of wells that are partially filled\n    num_underflow_partial\
    \ = 0\n    # Initialize the number of wells that are partially filled\n    num_overflow_full\
    \ = 0\n    # Initialize the number of wells that are partially filled\n    num_underflow_full\
    \ = 0\n    # Initialize the number of wells that are partially filled\n    num_overflow_empty\
    \ = 0\n    # Initialize the number of wells that are partially filled\n    num_underflow_empty\
    \ = 0\n    # Initialize the number of wells that are partially filled\n    num_overflow_filled\
    \ = 0\n    # Initialize the number of wells that are partially filled\n    num_underflow_filled\
    \ = 0\n   \nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9w4btx9i.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9w4btx9i.jl:1\n\
    in expression starting at /tmp/tmp9w4btx9i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    Returns the number of times you need\
    \ to lower the buckets.\n    \"\"\"\n    # YOUR CODE HERE\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpppv4e_lh.jl:39\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  MethodError: Cannot `convert` an object of type String to an object of type\
    \ Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n\
    \     @ Main /tmp/tmpppv4e_lh.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpppv4e_lh.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpppv4e_lh.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpppv4e_lh.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  MethodError: Cannot `convert` an object of type String to an object of type\
    \ Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n\
    \     @ Main /tmp/tmpppv4e_lh.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpppv4e_lh.jl:40 [inlined]\n\
    \   [4] macro "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpppv4e_lh.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement me\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz3k84p4h.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3k84p4h.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3k84p4h.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpz3k84p4h.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3k84p4h.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3k84p4h.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpz3k84p4h.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3k84p4h.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3k84p4h.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpz3k84p4h.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3k84p4h.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3k84p4h.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz3k84p4h.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # Initialize\n    n = length(grid)\n    m = length(grid[1])\n\
    \    water = 0\n    count = 0\n    # Iterate through each row\n    for i in 1:n\n\
    \        # Iterate through each column\n        for j in 1:m\n            # If\
    \ there is water in the well\n            if grid[i][j] == 1\n               \
    \ # Add water to the bucket\n                water += 1\n                # If\
    \ the bucket is full\n                if water == capacity\n                 \
    \   # Empty the bucket\n                    water = 0\n                    # Increment\
    \ the count\n                    count += 1\n                end\n           \
    \ end\n        end\n    end\n    # Return the count\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsztafqmz.jl:61\n  Expression: candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated:\
    \ 4 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsztafqmz.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsztafqmz.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpsztafqmz.jl:64\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsztafqmz.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsztafqmz.jl:59\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsztafqmz.jl:57\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkcbyed9k.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcbyed9k.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcbyed9k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpkcbyed9k.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcbyed9k.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcbyed9k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpkcbyed9k.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcbyed9k.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcbyed9k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpkcbyed9k.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcbyed9k.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcbyed9k.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkcbyed9k.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_l3f87af.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_l3f87af.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_l3f87af.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_l3f87af.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_l3f87af.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_l3f87af.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_l3f87af.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_l3f87af.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_l3f87af.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_l3f87af.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_l3f87af.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_l3f87af.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_l3f87af.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    rows, cols = size(grid)\n    max_row = maximum(grid,\
    \ dims=1)[1]\n    max_col = maximum(grid, dims=2)[1]\n    max_fill = 0\n    for\
    \ i in 1:rows\n        for j in 1:cols\n            max_fill += max(max_row[j],\
    \ max_col[i]) - grid[i, j]\n        end\n    end\n    return max_fill\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjzi62nny.jl:45\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpjzi62nny.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjzi62nny.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjzi62nny.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpjzi62nny.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpjzi62nny.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjzi62nny.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjzi62nny.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpjzi62nny.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 0], [0, 0, 0]], 5) == 0\n  BoundsError: attempt to access\
    \ Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89\
    \ [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n \
    \    @ Main /tmp/tmpjzi62nny.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjzi62nny.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjzi62nny.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement me\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2k5v0yxq.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2k5v0yxq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2k5v0yxq.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2k5v0yxq.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2k5v0yxq.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2k5v0yxq.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2k5v0yxq.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2k5v0yxq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2k5v0yxq.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2k5v0yxq.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2k5v0yxq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2k5v0yxq.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2k5v0yxq.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr7zqy54_.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr7zqy54_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr7zqy54_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpr7zqy54_.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr7zqy54_.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr7zqy54_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpr7zqy54_.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr7zqy54_.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr7zqy54_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpr7zqy54_.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr7zqy54_.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr7zqy54_.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr7zqy54_.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    num_rows = length(grid)\n    num_cols = length(grid[1])\n\
    \    num_fills = 0\n    for i in 1:num_rows\n        for j in 1:num_cols\n   \
    \         if grid[i][j] == 1\n                num_fills += 1\n               \
    \ for k in i:num_rows\n                    grid[k][j] = 0\n                end\n\
    \            end\n        end\n    end\n    return num_fills\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeyg94gyy.jl:49\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 4 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyg94gyy.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyg94gyy.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpeyg94gyy.jl:50\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 4 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyg94gyy.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyg94gyy.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpeyg94gyy.jl:53\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyg94gyy.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyg94gyy.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeyg94gyy.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    Calculates the number of times you\
    \ need to lower the buckets.\n    \"\"\"\n    # get the number of wells\n    n_wells\
    \ = length(grid)\n    # get the number of units of water in each well\n    n_water\
    \ = [sum(row) for row in grid]\n    # get the number of buckets needed to empty\
    \ the wells\n    n_buckets = ceil(Int64, n_water / capacity)\n    # get the number\
    \ of times you need to lower the buckets\n    n_times = sum(n_buckets)\n    return\
    \ n_times\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiqvi9zlf.jl:47\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  MethodError: no method matching ceil(::Type{Int64}, ::Vector{Float64})\n  Closest\
    \ candidates are:\n    ceil(::Type{T}, !Matched::Missing) where T at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:154\n\
    \    ceil(::Type{T}, !Matched::Rational) where T at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:457\n\
    \    ceil(::Type{T}, !Matched::BigFloat) where T<:Union{Signed, Unsigned} at /shared/centos7/julia/1.7.3/share/julia/base/mpfr.jl:318\n\
    \    ...\n  Stacktrace:\n   [1] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n\
    \     @ Main /tmp/tmpiqvi9zlf.jl:37\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiqvi9zlf.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiqvi9zlf.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpiqvi9zlf.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  MethodError: no method matching ceil(::Type{Int64}, ::Vector{Float64})\n  Closest\
    \ candidates are:\n    ceil(::Type{T}, !Matched::Missing) where T at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:154\n\
    \    ceil(::Type{T}, !Matched::Rational) where T at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:457\n\
    \    ceil(::Type{T}, !Matched::BigFloat) where T<:Union{Signed, Unsigned} at /shared/centos7/julia/1.7.3/share/julia/base/mpfr.jl:318\n\
    \    ...\n  Stacktrace:\n   [1] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n\
    \     @ Main /tmp/tmpiqvi9zlf.jl:37\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiqvi9zlf.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiqvi9zlf.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    Calculates the number of times the\
    \ buckets need to be lowered to empty the wells.\n    \"\"\"\n    # initialize\
    \ the number of times the buckets need to be lowered\n    num_lowerings = 0\n\
    \    # initialize the number of wells that are not empty\n    num_not_empty =\
    \ 0\n    # initialize the number of wells that are empty\n    num_empty = 0\n\
    \    # initialize the number of wells that are full\n    num_full = 0\n    # initialize\
    \ the number of wells that are partially full\n    num_partially_full = 0\n  \
    \  # initialize the number of wells that are partially empty\n    num_partially_empty\
    \ = 0\n    # initialize the number of wells that are partially full and partially\
    \ empty\n    num_partially_full_and_empty = 0\n    # initialize the number of\
    \ wells that are partially full and partially empty\n    num_partially_full_and_empty\
    \ = 0\n    # initialize the number of wells that are partially full and partially\
    \ empty\n    num_partially_full_and_empty = 0\n    # initialize the number of\
    \ wells that are partially full and partially empty\n    num_partially_full_and_empty\
    \ = 0\n    # initialize the number of wells that are partially full and partially\
    \ empty\n    num_partially_full_and_empty = 0\n    # initialize the number of\
    \ wells that are partially full and partially empty\n    num_partially_full_and_empty\
    \ = 0\n    # initialize the number of wells that are partially full and partially\
    \ empty\n    num_partially_full_and_empty = 0\n    # initialize the number of\
    \ wells that are partially full and partially empty\n    num_partially_full_and_empty\
    \ = 0\n    # initialize the number of wells that are partially full and partially\
    \ empty\n    num_partially_full_and_empty = 0\n    # initialize the number of\
    \ wells that are partially full and partially empty\n    num_partially_full_and_empty\
    \ = 0\n    # initialize the number of wells that are partially full and partially\
    \ empty\n    num_partially_full_and_empty = 0\n    # initialize the number of\
    \ wells that are partially full and partially empty\n    num_partially_full_and_empty\
    \ = 0\n    # initialize the number of wells that are partially full and partially\
    \ empty\n\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc_whfn0m.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc_whfn0m.jl:1\n\
    in expression starting at /tmp/tmpc_whfn0m.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  max_fill = 0\n    for i in 1:n\n        for j in 1:m\n            if grid[i][j]\
    \ == 1\n                max_fill += 1\n            end\n        end\n    end\n\
    \    max_fill = max_fill / capacity\n    return max_fill\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpydc8bvwt.jl:48\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5\n  InexactError: Int64(4.5)\n  Stacktrace:\n   [1] Int64\n    \
    \ @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n     @ Main /tmp/tmpydc8bvwt.jl:40\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpydc8bvwt.jl:48 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpydc8bvwt.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpydc8bvwt.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2\n  InexactError: Int64(0.8888888888888888)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpydc8bvwt.jl:40\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpydc8bvwt.jl:51 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpydc8bvwt.jl:46\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpydc8bvwt.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  max_height = maximum(map(maximum, grid))\n    total_water = sum(map(sum, grid))\n\
    \    total_water_per_bucket = capacity * n\n    num_buckets = ceil(Int64, total_water\
    \ / total_water_per_bucket)\n    return num_buckets * max_height\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp64h3ome_.jl:42\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 2 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64h3ome_.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64h3ome_.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp64h3ome_.jl:43\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 2 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64h3ome_.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64h3ome_.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp64h3ome_.jl:45\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64h3ome_.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64h3ome_.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp64h3ome_.jl:46\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64h3ome_.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64h3ome_.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp64h3ome_.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    You are given a rectangular grid of\
    \ wells. Each row represents a single well,\n    and each 1 in a row represents\
    \ a single unit of water.\n    Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n    and all buckets have the same capacity.\n\
    \    Your task is to use the buckets to empty the wells.\n    Output the number\
    \ of times you need to lower the buckets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwgxt50b.jl:1\nin expression starting at /tmp/tmphwgxt50b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    You are given a rectangular grid of\
    \ wells. Each row represents a single well,\n    and each 1 in a row represents\
    \ a single unit of water.\n    Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n    and all buckets have the same capacity.\n\
    \    Your task is to use the buckets to empty the wells.\n    Output the number\
    \ of times you need to lower the buckets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphfa4stz4.jl:1\nin expression starting at /tmp/tmphfa4stz4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # find the max height of the wells\n    max_height\
    \ = maximum([maximum(row) for row in grid])\n    # find the number of wells\n\
    \    num_wells = length(grid[1])\n    # initialize the number of times we need\
    \ to lower the buckets\n    num_lower = 0\n    # loop through the max height\n\
    \    for i in 1:max_height\n        # loop through the wells\n        for j in\
    \ 1:num_wells\n            # if the well has water in it\n            if grid[i][j]\
    \ == 1\n                # lower the bucket\n                num_lower += 1\n \
    \           end\n        end\n    end\n    # return the number of times we need\
    \ to lower the buckets\n    return num_lower\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
    \ 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt5_7quqf.jl:54\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 1 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt5_7quqf.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt5_7quqf.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpt5_7quqf.jl:55\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 2 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt5_7quqf.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt5_7quqf.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpt5_7quqf.jl:58\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt5_7quqf.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt5_7quqf.jl:53\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt5_7quqf.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm79iwize.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm79iwize.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm79iwize.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpm79iwize.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm79iwize.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm79iwize.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpm79iwize.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm79iwize.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm79iwize.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpm79iwize.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm79iwize.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm79iwize.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm79iwize.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # initialize variables\n    n_rows = length(grid)\n\
    \    n_cols = length(grid[1])\n    n_buckets = 0\n    # loop through the rows\n\
    \    for row in grid\n        # loop through the columns\n        for col in row\n\
    \            # if the column is 1\n            if col == 1\n                #\
    \ add 1 to the number of buckets\n                n_buckets += 1\n           \
    \ end\n        end\n    end\n    # return the number of buckets\n    return n_buckets\
    \ * capacity\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprpnz9b4c.jl:53\n  Expression: candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated:\
    \ 18 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprpnz9b4c.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprpnz9b4c.jl:51\ntest set: Test\
    \ Failed at /tmp/tmprpnz9b4c.jl:55\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 16 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprpnz9b4c.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprpnz9b4c.jl:51\ntest set: Test\
    \ Failed at /tmp/tmprpnz9b4c.jl:56\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 72 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprpnz9b4c.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprpnz9b4c.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprpnz9b4c.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    You are given a rectangular grid of\
    \ wells. Each row represents a single well,\n    and each 1 in a row represents\
    \ a single unit of water.\n    Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n    and all buckets have the same capacity.\n\
    \    Your task is to use the buckets to empty the wells.\n    Output the number\
    \ of times you need to lower the buckets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyezuke5q.jl:1\nin expression starting at /tmp/tmpyezuke5q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    This function takes a grid of wells\
    \ and a bucket capacity and returns the number of times \n    the bucket needs\
    \ to be lowered to empty the wells.\n    \"\"\"\n    # Initialize the number of\
    \ times the bucket needs to be lowered\n    lowers = 0\n    \n    # Loop through\
    \ the wells\n    for i in 1:length(grid)\n        # Initialize the number of units\
    \ of water in the current well\n        units = 0\n        \n        # Loop through\
    \ the units of water in the current well\n        for j in 1:length(grid[i])\n\
    \            # If the unit is filled, add it to the number of units in the well\n\
    \            if grid[i][j] == 1\n                units += 1\n            end\n\
    \        end\n        \n        # If the number of units in the well is greater\
    \ than the capacity of the bucket,\n        # add the number of times the bucket\
    \ needs to be lowered to the total number of lowers\n        if units > capacity\n\
    \            lowers += units - capacity\n        end\n    end\n    \n    # Return\
    \ the total number of lowers\n    return lowers\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
    \ 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnoy9_xwk.jl:64\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 3 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnoy9_xwk.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnoy9_xwk.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpnoy9_xwk.jl:65\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 3 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnoy9_xwk.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnoy9_xwk.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpnoy9_xwk.jl:68\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnoy9_xwk.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnoy9_xwk.jl:63\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnoy9_xwk.jl:61\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpljvmlxh4.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpljvmlxh4.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljvmlxh4.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpljvmlxh4.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpljvmlxh4.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljvmlxh4.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpljvmlxh4.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpljvmlxh4.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljvmlxh4.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpljvmlxh4.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpljvmlxh4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljvmlxh4.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpljvmlxh4.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n_rows, n_cols = size(grid)\n    n_fill = 0\n\
    \    for i in 1:n_rows\n        for j in 1:n_cols\n            if grid[i, j] ==\
    \ 1\n                n_fill += 1\n                grid[i, j] = 0\n           \
    \     if i < n_rows\n                    grid[i+1, j] = max(grid[i+1, j] - capacity,\
    \ 0)\n                end\n                if j < n_cols\n                   \
    \ grid[i, j+1] = max(grid[i, j+1] - capacity, 0)\n                end\n      \
    \      end\n        end\n    end\n    return n_fill\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]],\
    \ 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjjwhbzp6.jl:52\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpjjwhbzp6.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjjwhbzp6.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjjwhbzp6.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpjjwhbzp6.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpjjwhbzp6.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjjwhbzp6.jl:53 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjjwhbzp6.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpjjwhbzp6.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 0], [0, 0, 0]], 5) == 0\n  BoundsError: attempt to access\
    \ Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89\
    \ [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n \
    \    @ Main /tmp/tmpjjwhbzp6.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjjwhbzp6.jl:54 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjjwhbzp6.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code goes here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwtpaav5k.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwtpaav5k.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwtpaav5k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwtpaav5k.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwtpaav5k.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwtpaav5k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwtpaav5k.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwtpaav5k.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwtpaav5k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwtpaav5k.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwtpaav5k.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwtpaav5k.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwtpaav5k.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0pfyi7ko.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0pfyi7ko.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0pfyi7ko.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0pfyi7ko.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0pfyi7ko.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0pfyi7ko.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0pfyi7ko.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0pfyi7ko.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0pfyi7ko.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0pfyi7ko.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0pfyi7ko.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0pfyi7ko.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0pfyi7ko.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy1qxprmy.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy1qxprmy.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy1qxprmy.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpy1qxprmy.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy1qxprmy.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy1qxprmy.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpy1qxprmy.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy1qxprmy.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy1qxprmy.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpy1qxprmy.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy1qxprmy.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy1qxprmy.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy1qxprmy.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code goes here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr5k24rsw.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr5k24rsw.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr5k24rsw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpr5k24rsw.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr5k24rsw.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr5k24rsw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpr5k24rsw.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr5k24rsw.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr5k24rsw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpr5k24rsw.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr5k24rsw.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr5k24rsw.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr5k24rsw.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphp1r7g31.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphp1r7g31.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphp1r7g31.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphp1r7g31.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphp1r7g31.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphp1r7g31.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphp1r7g31.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphp1r7g31.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphp1r7g31.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphp1r7g31.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphp1r7g31.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphp1r7g31.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphp1r7g31.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # Your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9wmjxo_o.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9wmjxo_o.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9wmjxo_o.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp9wmjxo_o.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9wmjxo_o.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9wmjxo_o.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp9wmjxo_o.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9wmjxo_o.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9wmjxo_o.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp9wmjxo_o.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9wmjxo_o.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9wmjxo_o.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9wmjxo_o.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n_rows, n_cols = size(grid)\n    n_buckets = 0\n\
    \    for i in 1:n_rows\n        for j in 1:n_cols\n            if grid[i, j] ==\
    \ 1\n                n_buckets += 1\n            end\n        end\n    end\n \
    \   return n_buckets * capacity\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyjck4zzy.jl:45\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpyjck4zzy.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyjck4zzy.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyjck4zzy.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpyjck4zzy.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpyjck4zzy.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyjck4zzy.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyjck4zzy.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpyjck4zzy.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 0], [0, 0, 0]], 5) == 0\n  BoundsError: attempt to access\
    \ Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89\
    \ [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n \
    \    @ Main /tmp/tmpyjck4zzy.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyjck4zzy.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyjck4zzy.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpah3pp8li.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpah3pp8li.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpah3pp8li.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpah3pp8li.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpah3pp8li.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpah3pp8li.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpah3pp8li.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpah3pp8li.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpah3pp8li.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpah3pp8li.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpah3pp8li.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpah3pp8li.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpah3pp8li.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]],\
    \ 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsjzkighy.jl:36\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n\
    \     @ Main /tmp/tmpsjzkighy.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsjzkighy.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsjzkighy.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpsjzkighy.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n\
    \     @ Main /tmp/tmpsjzkighy.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsjzkighy.jl:37 [inlined]\n\
    \   [4] macr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsjzkighy.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy1orm96k.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy1orm96k.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy1orm96k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpy1orm96k.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy1orm96k.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy1orm96k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpy1orm96k.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy1orm96k.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy1orm96k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpy1orm96k.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy1orm96k.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy1orm96k.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy1orm96k.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    wells = length(grid)\n    width = length(grid[1])\n\
    \    total_water = 0\n    for i in 1:wells\n        for j in 1:width\n       \
    \     total_water += grid[i][j]\n        end\n    end\n    return total_water\
    \ / capacity\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv4sh6upg.jl:45\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5\n  InexactError: Int64(4.5)\n  Stacktrace:\n   [1] Int64\n    \
    \ @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n     @ Main /tmp/tmpv4sh6upg.jl:37\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpv4sh6upg.jl:45 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpv4sh6upg.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpv4sh6upg.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2\n  InexactError: Int64(0.8888888888888888)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpv4sh6upg.jl:37\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpv4sh6upg.jl:48 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpv4sh6upg.jl:43\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv4sh6upg.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpth95jc_m.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpth95jc_m.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpth95jc_m.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpth95jc_m.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpth95jc_m.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpth95jc_m.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpth95jc_m.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpth95jc_m.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpth95jc_m.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpth95jc_m.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpth95jc_m.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpth95jc_m.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpth95jc_m.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyis4cyjn.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyis4cyjn.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyis4cyjn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyis4cyjn.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyis4cyjn.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyis4cyjn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyis4cyjn.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyis4cyjn.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyis4cyjn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyis4cyjn.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyis4cyjn.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyis4cyjn.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyis4cyjn.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  count = 0\n    for i in 1:n\n        for j in 1:m\n            if grid[i][j]\
    \ == 1\n                count += 1\n            end\n        end\n    end\n  \
    \  return count * capacity\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\
    \t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppl4hew5j.jl:47\n  Expression: candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated:\
    \ 18 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppl4hew5j.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppl4hew5j.jl:45\ntest set: Test\
    \ Failed at /tmp/tmppl4hew5j.jl:49\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 16 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppl4hew5j.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppl4hew5j.jl:45\ntest set: Test\
    \ Failed at /tmp/tmppl4hew5j.jl:50\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 72 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppl4hew5j.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppl4hew5j.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppl4hew5j.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # find the max height of the wells\n    max_height\
    \ = 0\n    for i in 1:length(grid)\n        max_height = max(max_height, maximum(grid[i]))\n\
    \    end\n    \n    # count the number of times we need to lower the buckets\n\
    \    count = 0\n    for i in 1:max_height\n        for j in 1:length(grid)\n \
    \           for k in 1:length(grid[j])\n                if grid[j][k] > 0\n  \
    \                  grid[j][k] -= 1\n                    count += 1\n         \
    \       end\n            end\n        end\n    end\n    \n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp12d_rddt.jl:56\n  Expression: candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp12d_rddt.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp12d_rddt.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp12d_rddt.jl:58\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp12d_rddt.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp12d_rddt.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp12d_rddt.jl:59\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 8 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp12d_rddt.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp12d_rddt.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp12d_rddt.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg_bry5gl.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_bry5gl.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_bry5gl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpg_bry5gl.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_bry5gl.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_bry5gl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpg_bry5gl.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_bry5gl.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_bry5gl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpg_bry5gl.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_bry5gl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_bry5gl.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg_bry5gl.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb2rfjejk.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb2rfjejk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2rfjejk.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpb2rfjejk.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb2rfjejk.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2rfjejk.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpb2rfjejk.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb2rfjejk.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2rfjejk.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpb2rfjejk.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb2rfjejk.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2rfjejk.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb2rfjejk.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1bkunfk1.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1bkunfk1.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1bkunfk1.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1bkunfk1.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1bkunfk1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1bkunfk1.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1bkunfk1.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1bkunfk1.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1bkunfk1.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1bkunfk1.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1bkunfk1.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1bkunfk1.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1bkunfk1.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3v_twke1.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3v_twke1.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3v_twke1.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp3v_twke1.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3v_twke1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3v_twke1.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp3v_twke1.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3v_twke1.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3v_twke1.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp3v_twke1.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3v_twke1.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3v_twke1.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3v_twke1.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # initialize the number of times the bucket is\
    \ lowered\n    lowers = 0\n    # initialize the number of wells filled\n    wells_filled\
    \ = 0\n    # initialize the number of wells\n    wells = length(grid)\n    # initialize\
    \ the number of units of water in each well\n    units = length(grid[1])\n   \
    \ # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    # initialize the number of units of water in each well\n    units = length(grid[1])\n\
    \    #\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd64azagy.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd64azagy.jl:1\n\
    in expression starting at /tmp/tmpd64azagy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnsjx54pp.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsjx54pp.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsjx54pp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnsjx54pp.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsjx54pp.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsjx54pp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnsjx54pp.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsjx54pp.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsjx54pp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnsjx54pp.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsjx54pp.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsjx54pp.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnsjx54pp.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    You are given a rectangular grid of\
    \ wells. Each row represents a single well,\n    and each 1 in a row represents\
    \ a single unit of water.\n    Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n    and all buckets have the same capacity.\n\
    \    Your task is to use the buckets to empty the wells.\n    Output the number\
    \ of times you need to lower the buckets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpope86q7l.jl:1\nin expression starting at /tmp/tmpope86q7l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbaubt2_t.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbaubt2_t.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbaubt2_t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpbaubt2_t.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbaubt2_t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbaubt2_t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpbaubt2_t.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbaubt2_t.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbaubt2_t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpbaubt2_t.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbaubt2_t.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbaubt2_t.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbaubt2_t.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement me\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpij4sqs4f.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpij4sqs4f.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpij4sqs4f.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpij4sqs4f.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpij4sqs4f.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpij4sqs4f.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpij4sqs4f.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpij4sqs4f.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpij4sqs4f.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpij4sqs4f.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpij4sqs4f.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpij4sqs4f.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpij4sqs4f.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # Initialize the number of times we have to lower\
    \ the buckets\n    num_lower = 0\n    # Initialize the number of wells that are\
    \ full\n    num_full = 0\n    # Initialize the number of wells that are empty\n\
    \    num_empty = 0\n    # Initialize the number of wells that are partially full\n\
    \    num_partially_full = 0\n    # Initialize the number of wells that are partially\
    \ empty\n    num_partially_empty = 0\n    # Initialize the number of wells that\
    \ are full\n    num_full = 0\n    # Initialize the number of wells that are empty\n\
    \    num_empty = 0\n    # Initialize the number of wells that are partially full\n\
    \    num_partially_full = 0\n    # Initialize the number of wells that are partially\
    \ empty\n    num_partially_empty = 0\n    # Initialize the number of wells that\
    \ are full\n    num_full = 0\n    # Initialize the number of wells that are empty\n\
    \    num_empty = 0\n    # Initialize the number of wells that are partially full\n\
    \    num_partially_full = 0\n    # Initialize the number of wells that are partially\
    \ empty\n    num_partially_empty = 0\n    # Initialize the number of wells that\
    \ are full\n    num_full = 0\n    # Initialize the number of wells that are empty\n\
    \    num_empty = 0\n    # Initialize the number of wells that are partially full\n\
    \    num_partially_full = 0\n    # Initialize the number of wells that are partially\
    \ empty\n    num_partially_empty = 0\n    # Initialize the number of wells that\
    \ are full\n    num_full = 0\n    # Initialize the number of wells that are empty\n\
    \    num_empty = 0\n    # Initialize the number of wells that are partially full\n\
    \    num_partially_full = 0\n    # Initialize the number of wells that are partially\
    \ empty\n    num_partially_empty = 0\n    # Initialize the number of wells that\
    \ are full\n    num_full = 0\n    # Initialize the number of wells that are empty\n\
    \    num_empty = 0\n    # Initialize the number of wells that are partially full\n\
    \    num_partially_full = 0\n    # Initialize the number of wells\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjx7ed0v_.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjx7ed0v_.jl:1\n\
    in expression starting at /tmp/tmpjx7ed0v_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0b6alwef.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0b6alwef.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0b6alwef.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0b6alwef.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0b6alwef.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0b6alwef.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0b6alwef.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0b6alwef.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0b6alwef.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0b6alwef.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0b6alwef.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0b6alwef.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0b6alwef.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9bu4bzfb.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bu4bzfb.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bu4bzfb.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp9bu4bzfb.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bu4bzfb.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bu4bzfb.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp9bu4bzfb.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bu4bzfb.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bu4bzfb.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp9bu4bzfb.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bu4bzfb.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bu4bzfb.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9bu4bzfb.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx2u9lv9c.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx2u9lv9c.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx2u9lv9c.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpx2u9lv9c.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx2u9lv9c.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx2u9lv9c.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpx2u9lv9c.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx2u9lv9c.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx2u9lv9c.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpx2u9lv9c.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx2u9lv9c.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx2u9lv9c.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx2u9lv9c.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    You are given a rectangular grid of\
    \ wells. Each row represents a single well,\n    and each 1 in a row represents\
    \ a single unit of water.\n    Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n    and all buckets have the same capacity.\n\
    \    Your task is to use the buckets to empty the wells.\n    Output the number\
    \ of times you need to lower the buckets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5bid6c2p.jl:1\nin expression starting at /tmp/tmp5bid6c2p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8yl8bskm.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8yl8bskm.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8yl8bskm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8yl8bskm.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8yl8bskm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8yl8bskm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8yl8bskm.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8yl8bskm.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8yl8bskm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8yl8bskm.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8yl8bskm.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8yl8bskm.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8yl8bskm.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp52frvfwd.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp52frvfwd.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp52frvfwd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp52frvfwd.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp52frvfwd.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp52frvfwd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp52frvfwd.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp52frvfwd.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp52frvfwd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp52frvfwd.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp52frvfwd.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp52frvfwd.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp52frvfwd.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  count = 0\n    for i in 1:n\n        for j in 1:m\n            if grid[i][j]\
    \ == 1\n                count += 1\n            end\n        end\n    end\n  \
    \  return count * capacity\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\
    \t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeoifezht.jl:47\n  Expression: candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated:\
    \ 18 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeoifezht.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeoifezht.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpeoifezht.jl:49\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 16 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeoifezht.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeoifezht.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpeoifezht.jl:50\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 72 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeoifezht.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeoifezht.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeoifezht.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # initialize the number of times we need to lower\
    \ the buckets\n    num_lower = 0\n    # loop over the wells\n    for i in 1:length(grid)\n\
    \        # loop over the units of water in each well\n        for j in 1:length(grid[i])\n\
    \            # if there is water in the well\n            if grid[i][j] == 1\n\
    \                # lower the bucket\n                num_lower += 1\n        \
    \        # if the bucket is not full\n                if capacity > 0\n      \
    \              # fill the bucket\n                    capacity -= 1\n        \
    \            # remove the water from the well\n                    grid[i][j]\
    \ = 0\n                # if the bucket is full\n                else\n       \
    \             # empty the bucket\n                    capacity = 0\n         \
    \       end\n            end\n        end\n    end\n    # return the number of\
    \ times we need to lower the buckets\n    return num_lower\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6tahh6t3.jl:62\n  Expression: candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6tahh6t3.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6tahh6t3.jl:60\ntest set: Test\
    \ Failed at /tmp/tmp6tahh6t3.jl:64\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6tahh6t3.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6tahh6t3.jl:60\ntest set: Test\
    \ Failed at /tmp/tmp6tahh6t3.jl:65\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 8 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6tahh6t3.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6tahh6t3.jl:60\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6tahh6t3.jl:58\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptj3ftmg8.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptj3ftmg8.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptj3ftmg8.jl:36\ntest set: Test\
    \ Failed at /tmp/tmptj3ftmg8.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptj3ftmg8.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptj3ftmg8.jl:36\ntest set: Test\
    \ Failed at /tmp/tmptj3ftmg8.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptj3ftmg8.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptj3ftmg8.jl:36\ntest set: Test\
    \ Failed at /tmp/tmptj3ftmg8.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptj3ftmg8.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptj3ftmg8.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptj3ftmg8.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  count = 0\n    for i in 1:n\n        for j in 1:m\n            if grid[i][j]\
    \ == 1\n                grid[i][j] = 0\n                count += 1\n         \
    \       for k in 1:capacity\n                    if i + k <= n && grid[i + k][j]\
    \ == 1\n                        grid[i + k][j] = 0\n                    end\n\
    \                    if j + k <= m && grid[i][j + k] == 1\n                  \
    \      grid[i][j + k] = 0\n                    end\n                end\n    \
    \        end\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]],\
    \ 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph9oec_5d.jl:55\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 4 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph9oec_5d.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph9oec_5d.jl:54\ntest set: Test\
    \ Failed at /tmp/tmph9oec_5d.jl:56\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 4 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph9oec_5d.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph9oec_5d.jl:54\ntest set: Test\
    \ Failed at /tmp/tmph9oec_5d.jl:58\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph9oec_5d.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph9oec_5d.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9oec_5d.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n, m = size(grid)\n    total = 0\n    for i in\
    \ 1:n\n        for j in 1:m\n            if grid[i, j] == 1\n                total\
    \ += 1\n            end\n        end\n    end\n    return total / capacity\nend\n\
    using Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpygdssg0u.jl:45\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpygdssg0u.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpygdssg0u.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpygdssg0u.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpygdssg0u.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpygdssg0u.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpygdssg0u.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpygdssg0u.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpygdssg0u.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 0], [0, 0, 0]], 5) == 0\n  BoundsError: attempt to access\
    \ Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89\
    \ [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n \
    \    @ Main /tmp/tmpygdssg0u.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpygdssg0u.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpygdssg0u.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # get the number of wells\n    n_wells = length(grid)\n\
    \    # get the length of the wells\n    well_length = length(grid[1])\n    # initialize\
    \ the number of times the buckets are lowered\n    n_lowerings = 0\n    # initialize\
    \ the number of buckets used\n    n_buckets = 0\n    # initialize the number of\
    \ wells filled\n    n_filled = 0\n    # initialize the number of wells empty\n\
    \    n_empty = 0\n    # initialize the number of wells partially filled\n    n_partially_filled\
    \ = 0\n    # initialize the number of wells filled to capacity\n    n_filled_to_capacity\
    \ = 0\n    # initialize the number of wells partially filled to capacity\n   \
    \ n_partially_filled_to_capacity = 0\n    # initialize the number of wells partially\
    \ filled to capacity\n    n_partially_filled_to_capacity = 0\n    # initialize\
    \ the number of wells partially filled to capacity\n    n_partially_filled_to_capacity\
    \ = 0\n    # initialize the number of wells partially filled to capacity\n   \
    \ n_partially_filled_to_capacity = 0\n    # initialize the number of wells partially\
    \ filled to capacity\n    n_partially_filled_to_capacity = 0\n    # initialize\
    \ the number of wells partially filled to capacity\n    n_partially_filled_to_capacity\
    \ = 0\n    # initialize the number of wells partially filled to capacity\n   \
    \ n_partially_filled_to_capacity = 0\n    # initialize the number of wells partially\
    \ filled to capacity\n    n_partially_filled_to_capacity = 0\n    # initialize\
    \ the number of wells partially filled to capacity\n    n_partially_filled_to_capacity\
    \ = 0\n    # initialize the number of wells partially filled to capacity\n   \
    \ n_partially_filled_to_capacity = 0\n    # initialize the number of wells partially\
    \ filled to capacity\n    n_partially_filled_to_capacity = 0\n    # initialize\
    \ the number of wells partially filled to capacity\n    n_partially_filled_to_capacity\
    \ = 0\n    # initialize the number of wells partially filled to capacity\n   \
    \ n_partially_filled_to_capacity = 0\n    # initialize the number of wells partially\
    \ filled to capacity\n    n_partially_filled_to_\nusing Test\n\n@testset begin\n\
    \ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
    \ 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfuwvoy5i.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfuwvoy5i.jl:1\n\
    in expression starting at /tmp/tmpfuwvoy5i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code goes here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_8a3m18e.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_8a3m18e.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_8a3m18e.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_8a3m18e.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_8a3m18e.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_8a3m18e.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_8a3m18e.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_8a3m18e.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_8a3m18e.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_8a3m18e.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_8a3m18e.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_8a3m18e.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_8a3m18e.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe55rm2sv.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe55rm2sv.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe55rm2sv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpe55rm2sv.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe55rm2sv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe55rm2sv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpe55rm2sv.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe55rm2sv.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe55rm2sv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpe55rm2sv.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe55rm2sv.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe55rm2sv.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe55rm2sv.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi3cc4k90.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi3cc4k90.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi3cc4k90.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpi3cc4k90.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi3cc4k90.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi3cc4k90.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpi3cc4k90.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi3cc4k90.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi3cc4k90.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpi3cc4k90.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi3cc4k90.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi3cc4k90.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi3cc4k90.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt25bx4m7.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt25bx4m7.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt25bx4m7.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpt25bx4m7.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt25bx4m7.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt25bx4m7.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpt25bx4m7.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt25bx4m7.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt25bx4m7.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpt25bx4m7.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt25bx4m7.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt25bx4m7.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt25bx4m7.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8tjuj7ya.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8tjuj7ya.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8tjuj7ya.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8tjuj7ya.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8tjuj7ya.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8tjuj7ya.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8tjuj7ya.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8tjuj7ya.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8tjuj7ya.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8tjuj7ya.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8tjuj7ya.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8tjuj7ya.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8tjuj7ya.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw_qlxt56.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw_qlxt56.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw_qlxt56.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpw_qlxt56.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw_qlxt56.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw_qlxt56.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpw_qlxt56.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw_qlxt56.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw_qlxt56.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpw_qlxt56.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw_qlxt56.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw_qlxt56.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw_qlxt56.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_b9npdf3.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_b9npdf3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_b9npdf3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_b9npdf3.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_b9npdf3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_b9npdf3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_b9npdf3.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_b9npdf3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_b9npdf3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_b9npdf3.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_b9npdf3.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_b9npdf3.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_b9npdf3.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n_rows, n_cols = size(grid)\n    n_buckets = 0\n\
    \    for i in 1:n_rows\n        row = grid[i]\n        if sum(row) == 0\n    \
    \        continue\n        end\n        for j in 1:n_cols\n            if row[j]\
    \ == 1\n                n_buckets += 1\n                row[j] = 0\n         \
    \       if j + capacity <= n_cols\n                    row[j+1:j+capacity] .=\
    \ 0\n                else\n                    row[j:n_cols] .= 0\n          \
    \      end\n            end\n        end\n    end\n    return n_buckets\nend\n\
    using Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph0kejvac.jl:55\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmph0kejvac.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph0kejvac.jl:55 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph0kejvac.jl:54\ntest set:\
    \ Error During Test at /tmp/tmph0kejvac.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmph0kejvac.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph0kejvac.jl:56 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph0kejvac.jl:54\ntest set:\
    \ Error During Test at /tmp/tmph0kejvac.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 0], [0, 0, 0]], 5) == 0\n  BoundsError: attempt to access\
    \ Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89\
    \ [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n \
    \    @ Main /tmp/tmph0kejvac.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph0kejvac.jl:57 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph0kejvac.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  max_height = maximum(map(x -> maximum(x), grid))\n    max_height = maximum(max_height,\
    \ capacity)\n    max_height = max_height + 1\n    total_water = 0\n    for height\
    \ in 1:max_height\n        for i in 1:n\n            for j in 1:m\n          \
    \      if grid[i][j] >= height\n                    total_water += 1\n       \
    \         end\n            end\n        end\n    end\n    return total_water\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn2pthnmz.jl:51\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  MethodError: objects of type Int64 are not callable\n  Maybe you forgot to\
    \ use an operator such as *, ^, %, / etc. ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64,\
    \ op::Function, x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64,\
    \ op::Function, a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Int64,\
    \ a::Int64; kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n\
    \     @ Base ./reduce.jl:678\n   [4] maximum(f::Int64, a::Int64)\n     @ Base\
    \ ./reduce.jl:678\n   [5] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n\
    \     @ Main /tmp/tmpn2pthnmz.jl:32\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpn2pthnmz.jl:51 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpn2pthnmz.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpn2pthnmz.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  MethodError: objects of type Int64 are not callable\n  Maybe you forgot to\
    \ use an operator such as *, ^, %, / etc. ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64,\
    \ op::Function, x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64,\
    \ op::Function, a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Int64,\
    \ a::Int64; kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n\
    \     @ Base ./reduce.jl:678\n   [4] maximum(f::Int64, a::Int64)\n     @ Base\
    \ ./reduce.jl:678\n   [5] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n\
    \     @ Main /tmp/tmpn2pthnmz.jl:32\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpn2pthnmz.jl:52 [inlined]\n\
    \   [8] macro expansion\n     @ /shared"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn2pthnmz.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj0vpt7ye.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj0vpt7ye.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj0vpt7ye.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpj0vpt7ye.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj0vpt7ye.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj0vpt7ye.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpj0vpt7ye.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj0vpt7ye.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj0vpt7ye.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpj0vpt7ye.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj0vpt7ye.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj0vpt7ye.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj0vpt7ye.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptb5mhad_.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptb5mhad_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptb5mhad_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmptb5mhad_.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptb5mhad_.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptb5mhad_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmptb5mhad_.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptb5mhad_.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptb5mhad_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmptb5mhad_.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptb5mhad_.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptb5mhad_.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptb5mhad_.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgwbrhg72.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgwbrhg72.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgwbrhg72.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpgwbrhg72.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgwbrhg72.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgwbrhg72.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpgwbrhg72.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgwbrhg72.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgwbrhg72.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpgwbrhg72.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgwbrhg72.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgwbrhg72.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgwbrhg72.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  max_fill = 0\n    for i in 1:n\n        for j in 1:m\n            if grid[i][j]\
    \ == 1\n                max_fill += 1\n            end\n        end\n    end\n\
    \    return max_fill\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\
    \t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaxz9xp0d.jl:47\n  Expression: candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaxz9xp0d.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaxz9xp0d.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpaxz9xp0d.jl:49\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaxz9xp0d.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaxz9xp0d.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpaxz9xp0d.jl:50\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 8 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaxz9xp0d.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaxz9xp0d.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaxz9xp0d.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_cxsph1t.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_cxsph1t.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_cxsph1t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_cxsph1t.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_cxsph1t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_cxsph1t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_cxsph1t.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_cxsph1t.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_cxsph1t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_cxsph1t.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_cxsph1t.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_cxsph1t.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_cxsph1t.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    >>> max_fill([[0, 0, 1, 0], [0, 1,\
    \ 0, 0], [1, 1, 1, 1]], 1)\n    6\nusing Test\n\n@testset begin\n\ncandidate =\
    \ max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzyd_qlfq.jl:1\nin expression starting at /tmp/tmpzyd_qlfq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps6oyb25x.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps6oyb25x.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps6oyb25x.jl:36\ntest set: Test\
    \ Failed at /tmp/tmps6oyb25x.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps6oyb25x.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps6oyb25x.jl:36\ntest set: Test\
    \ Failed at /tmp/tmps6oyb25x.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps6oyb25x.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps6oyb25x.jl:36\ntest set: Test\
    \ Failed at /tmp/tmps6oyb25x.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps6oyb25x.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps6oyb25x.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps6oyb25x.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]],\
    \ 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvrzxgh45.jl:36\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n\
    \     @ Main /tmp/tmpvrzxgh45.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvrzxgh45.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvrzxgh45.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpvrzxgh45.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n\
    \     @ Main /tmp/tmpvrzxgh45.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvrzxgh45.jl:37 [inlined]\n\
    \   [4] macr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvrzxgh45.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyiaf6usr.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyiaf6usr.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyiaf6usr.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyiaf6usr.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyiaf6usr.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyiaf6usr.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyiaf6usr.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyiaf6usr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyiaf6usr.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyiaf6usr.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyiaf6usr.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyiaf6usr.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyiaf6usr.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  # initialize the number of buckets used\n    buckets = 0\n    # iterate over\
    \ all wells\n    for i in 1:n\n        # iterate over all units of water in a\
    \ well\n        for j in 1:m\n            # if there is a unit of water in the\
    \ well\n            if grid[i][j] == 1\n                # fill the bucket\n  \
    \              buckets += 1\n                # empty the bucket in the well\n\
    \                grid[i][j] = 0\n            end\n        end\n    end\n    #\
    \ return the number of buckets used\n    return buckets\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]],\
    \ 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq36041tf.jl:55\n  Expression: candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq36041tf.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq36041tf.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpq36041tf.jl:57\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq36041tf.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq36041tf.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpq36041tf.jl:58\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 8 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq36041tf.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq36041tf.jl:53\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq36041tf.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code goes here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnb1eem_b.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnb1eem_b.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnb1eem_b.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnb1eem_b.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnb1eem_b.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnb1eem_b.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnb1eem_b.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnb1eem_b.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnb1eem_b.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnb1eem_b.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnb1eem_b.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnb1eem_b.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnb1eem_b.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqgk_z_zh.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgk_z_zh.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgk_z_zh.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqgk_z_zh.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgk_z_zh.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgk_z_zh.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqgk_z_zh.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgk_z_zh.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgk_z_zh.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqgk_z_zh.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgk_z_zh.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgk_z_zh.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqgk_z_zh.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n_rows, n_cols = size(grid)\n    n_fills = 0\n\
    \    for i in 1:n_rows\n        for j in 1:n_cols\n            if grid[i, j] ==\
    \ 1\n                n_fills += 1\n                grid[i, j] = 0\n          \
    \      if i + 1 <= n_rows && grid[i + 1, j] == 1 && capacity > 0\n           \
    \         grid[i + 1, j] = 0\n                    capacity -= 1\n            \
    \    end\n                if j + 1 <= n_cols && grid[i, j + 1] == 1 && capacity\
    \ > 0\n                    grid[i, j + 1] = 0\n                    capacity -=\
    \ 1\n                end\n            end\n        end\n    end\n    return n_fills\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpizjkmq0h.jl:54\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpizjkmq0h.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpizjkmq0h.jl:54 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpizjkmq0h.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpizjkmq0h.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpizjkmq0h.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpizjkmq0h.jl:55 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpizjkmq0h.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpizjkmq0h.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 0], [0, 0, 0]], 5) == 0\n  BoundsError: attempt to access\
    \ Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89\
    \ [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n \
    \    @ Main /tmp/tmpizjkmq0h.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpizjkmq0h.jl:56 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpizjkmq0h.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8z3kmu8w.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8z3kmu8w.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8z3kmu8w.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8z3kmu8w.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8z3kmu8w.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8z3kmu8w.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8z3kmu8w.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8z3kmu8w.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8z3kmu8w.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8z3kmu8w.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8z3kmu8w.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8z3kmu8w.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8z3kmu8w.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5c3v85c2.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5c3v85c2.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5c3v85c2.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp5c3v85c2.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5c3v85c2.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5c3v85c2.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp5c3v85c2.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5c3v85c2.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5c3v85c2.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp5c3v85c2.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5c3v85c2.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5c3v85c2.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5c3v85c2.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvhl5vkb2.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvhl5vkb2.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvhl5vkb2.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvhl5vkb2.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvhl5vkb2.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvhl5vkb2.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvhl5vkb2.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvhl5vkb2.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvhl5vkb2.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvhl5vkb2.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvhl5vkb2.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvhl5vkb2.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvhl5vkb2.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpelftnrhv.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpelftnrhv.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpelftnrhv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpelftnrhv.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpelftnrhv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpelftnrhv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpelftnrhv.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpelftnrhv.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpelftnrhv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpelftnrhv.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpelftnrhv.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpelftnrhv.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpelftnrhv.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    Calculates the number of times the\
    \ buckets need to be lowered to empty the wells.\n    \"\"\"\n    # number of\
    \ times the buckets need to be lowered\n    num_lowers = 0\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]],\
    \ 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp_dkeg8.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp_dkeg8.jl:1\n\
    in expression starting at /tmp/tmpgp_dkeg8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # Initialize the number of times you need to lower\
    \ the buckets\n    num_lower = 0\n    # Initialize the number of wells\n    num_wells\
    \ = length(grid[1])\n    # Initialize the number of rows\n    num_rows = length(grid)\n\
    \    # Initialize the number of buckets\n    num_buckets = num_wells * num_rows\n\
    \    # Initialize the number of buckets filled\n    num_buckets_filled = 0\n \
    \   # Initialize the number of buckets that can be filled\n    num_buckets_can_fill\
    \ = 0\n    # Initialize the number of buckets that can't be filled\n    num_buckets_cant_fill\
    \ = 0\n    # Initialize the number of buckets that need to be filled\n    num_buckets_need_fill\
    \ = 0\n    # Initialize the number of buckets that are filled\n    num_buckets_filled\
    \ = 0\n    # Initialize the number of buckets that are not filled\n    num_buckets_not_filled\
    \ = 0\n    # Initialize the number of buckets that are filled\n    num_buckets_filled\
    \ = 0\n    # Initialize the number of buckets that are not filled\n    num_buckets_not_filled\
    \ = 0\n    # Initialize the number of buckets that are filled\n    num_buckets_filled\
    \ = 0\n    # Initialize the number of buckets that are not filled\n    num_buckets_not_filled\
    \ = 0\n    # Initialize the number of buckets that are filled\n    num_buckets_filled\
    \ = 0\n    # Initialize the number of buckets that are not filled\n    num_buckets_not_filled\
    \ = 0\n    # Initialize the number of buckets that are filled\n    num_buckets_filled\
    \ = 0\n    # Initialize the number of buckets that are not filled\n    num_buckets_not_filled\
    \ = 0\n    # Initialize the number of buckets that are filled\n    num_buckets_filled\
    \ = 0\n    # Initialize the number of buckets that are not filled\n    num_buckets_not_filled\
    \ = 0\n    # Initialize the number of buckets that are filled\n    num_buckets_filled\
    \ = 0\n    # Initialize the number of buckets that are not filled\n    num_buckets_not_filled\n\
    using Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5hn_q5g9.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5hn_q5g9.jl:1\n\
    in expression starting at /tmp/tmp5hn_q5g9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # Initialize the number of times we need to lower\
    \ the buckets\n    num_lowering = 0\n    # Initialize the number of wells that\
    \ are not empty\n    num_not_empty = 0\n    # Initialize the number of wells that\
    \ are empty\n    num_empty = 0\n    # Initialize the number of wells that are\
    \ full\n    num_full = 0\n    # Initialize the number of wells that are partially\
    \ full\n    num_partially_full = 0\n    # Initialize the number of wells that\
    \ are partially empty\n    num_partially_empty = 0\n    # Initialize the number\
    \ of wells that are partially full and partially empty\n    num_partially_full_partially_empty\
    \ = 0\n    # Initialize the number of wells that are partially full and partially\
    \ empty\n    num_partially_full_partially_empty = 0\n    # Initialize the number\
    \ of wells that are partially full and partially empty\n    num_partially_full_partially_empty\
    \ = 0\n    # Initialize the number of wells that are partially full and partially\
    \ empty\n    num_partially_full_partially_empty = 0\n    # Initialize the number\
    \ of wells that are partially full and partially empty\n    num_partially_full_partially_empty\
    \ = 0\n    # Initialize the number of wells that are partially full and partially\
    \ empty\n    num_partially_full_partially_empty = 0\n    # Initialize the number\
    \ of wells that are partially full and partially empty\n    num_partially_full_partially_empty\
    \ = 0\n    # Initialize the number of wells that are partially full and partially\
    \ empty\n    num_partially_full_partially_empty = 0\n    # Initialize the number\
    \ of wells that are partially full and partially empty\n    num_partially_full_partially_empty\
    \ = 0\n    # Initialize the number of wells that are partially full and partially\
    \ empty\n    num_partially_full_partially_empty = 0\n    # Initialize the number\
    \ of wells that are partially full and partially empty\n    num_partially_full_partially_empty\
    \ = 0\n    # Initialize the number of wells that are partially full and partially\
    \ empty\n    num_partially_full_partially_empty = 0\n    # Initialize the number\
    \ of wells that are\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t\
    @test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbn2xhjox.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbn2xhjox.jl:1\n\
    in expression starting at /tmp/tmpbn2xhjox.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu7lu0xig.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu7lu0xig.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu7lu0xig.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpu7lu0xig.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu7lu0xig.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu7lu0xig.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpu7lu0xig.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu7lu0xig.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu7lu0xig.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpu7lu0xig.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu7lu0xig.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu7lu0xig.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu7lu0xig.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4pg53t2m.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4pg53t2m.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4pg53t2m.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4pg53t2m.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4pg53t2m.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4pg53t2m.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4pg53t2m.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4pg53t2m.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4pg53t2m.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4pg53t2m.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4pg53t2m.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4pg53t2m.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4pg53t2m.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm1b81tnq.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm1b81tnq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm1b81tnq.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpm1b81tnq.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm1b81tnq.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm1b81tnq.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpm1b81tnq.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm1b81tnq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm1b81tnq.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpm1b81tnq.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm1b81tnq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm1b81tnq.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm1b81tnq.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7lz7o6nd.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7lz7o6nd.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7lz7o6nd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp7lz7o6nd.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7lz7o6nd.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7lz7o6nd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp7lz7o6nd.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7lz7o6nd.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7lz7o6nd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp7lz7o6nd.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7lz7o6nd.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7lz7o6nd.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7lz7o6nd.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  count = 0\n    for i in 1:n\n        for j in 1:m\n            if grid[i][j]\
    \ == 1\n                count += 1\n            end\n        end\n    end\n  \
    \  return count * capacity\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\
    \t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq0bsc57x.jl:47\n  Expression: candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated:\
    \ 18 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq0bsc57x.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq0bsc57x.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpq0bsc57x.jl:49\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 16 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq0bsc57x.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq0bsc57x.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpq0bsc57x.jl:50\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 72 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq0bsc57x.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq0bsc57x.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq0bsc57x.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgpfjxpxj.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgpfjxpxj.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgpfjxpxj.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpgpfjxpxj.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgpfjxpxj.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgpfjxpxj.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpgpfjxpxj.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgpfjxpxj.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgpfjxpxj.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpgpfjxpxj.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgpfjxpxj.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgpfjxpxj.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgpfjxpxj.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphuvw7p4l.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphuvw7p4l.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphuvw7p4l.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphuvw7p4l.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphuvw7p4l.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphuvw7p4l.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphuvw7p4l.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphuvw7p4l.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphuvw7p4l.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphuvw7p4l.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphuvw7p4l.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphuvw7p4l.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphuvw7p4l.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp69wsu8z6.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69wsu8z6.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69wsu8z6.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp69wsu8z6.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69wsu8z6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69wsu8z6.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp69wsu8z6.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69wsu8z6.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69wsu8z6.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp69wsu8z6.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69wsu8z6.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69wsu8z6.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp69wsu8z6.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvxa272rs.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvxa272rs.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvxa272rs.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvxa272rs.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvxa272rs.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvxa272rs.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvxa272rs.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvxa272rs.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvxa272rs.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvxa272rs.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvxa272rs.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvxa272rs.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvxa272rs.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    Calculates the number of times the\
    \ buckets need to be lowered.\n    \"\"\"\n    n_rows = length(grid)\n    n_cols\
    \ = length(grid[1])\n    n_buckets = n_rows * n_cols\n    n_buckets_lowered =\
    \ 0\n    for i in 1:n_rows\n        for j in 1:n_cols\n            if grid[i][j]\
    \ == 1\n                n_buckets_lowered += 1\n            end\n        end\n\
    \    end\n    return n_buckets_lowered * capacity\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]],\
    \ 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2v1lsow2.jl:51\n  Expression: candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated:\
    \ 18 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v1lsow2.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v1lsow2.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp2v1lsow2.jl:53\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 16 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v1lsow2.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v1lsow2.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp2v1lsow2.jl:54\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 72 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v1lsow2.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v1lsow2.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2v1lsow2.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    Calculates the number of times you\
    \ need to lower the buckets.\n    \"\"\"\n    # get the number of wells\n    n_wells\
    \ = length(grid)\n    # get the number of units of water in each well\n    n_water\
    \ = [sum(grid[i]) for i in 1:n_wells]\n    # get the number of buckets needed\
    \ to fill each well\n    n_buckets = [ceil(Int64, n_water[i] / capacity) for i\
    \ in 1:n_wells]\n    # get the total number of buckets needed\n    n_total = sum(n_buckets)\n\
    \    return n_total\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\
    \t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # Your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuejqwefa.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuejqwefa.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuejqwefa.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpuejqwefa.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuejqwefa.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuejqwefa.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpuejqwefa.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuejqwefa.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuejqwefa.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpuejqwefa.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuejqwefa.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuejqwefa.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuejqwefa.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # Initialize the number of times the bucket is\
    \ lowered\n    num_lowerings = 0\n    # Initialize the number of wells filled\n\
    \    num_filled = 0\n    # Initialize the number of wells\n    num_wells = length(grid)\n\
    \    # Initialize the number of units in a well\n    num_units = length(grid[1])\n\
    \    # Initialize the number of units that can be filled\n    num_fillable = num_wells\
    \ * num_units\n    # Initialize the number of units that are filled\n    num_filled\
    \ = 0\n    # Initialize the number of units that are not filled\n    num_unfilled\
    \ = num_fillable\n    # Initialize the number of units that are filled in a well\n\
    \    num_filled_in_well = 0\n    # Initialize the number of units that are not\
    \ filled in a well\n    num_unfilled_in_well = 0\n    # Initialize the number\
    \ of units that are filled in a unit\n    num_filled_in_unit = 0\n    # Initialize\
    \ the number of units that are not filled in a unit\n    num_unfilled_in_unit\
    \ = 0\n    # Initialize the number of units that are filled in a well\n    num_filled_in_well\
    \ = 0\n    # Initialize the number of units that are not filled in a well\n  \
    \  num_unfilled_in_well = 0\n    # Initialize the number of units that are filled\
    \ in a unit\n    num_filled_in_unit = 0\n    # Initialize the number of units\
    \ that are not filled in a unit\n    num_unfilled_in_unit = 0\n    # Initialize\
    \ the number of units that are filled in a well\n    num_filled_in_well = 0\n\
    \    # Initialize the number of units that are not filled in a well\n    num_unfilled_in_well\
    \ = 0\n    # Initialize the number of units that are filled in a unit\n    num_filled_in_unit\
    \ = 0\n    # Initialize the number of units that are not filled in a unit\n  \
    \  num_unfilled_in_unit = 0\n    # Initialize the number of units that are filled\
    \ in a well\n    num_filled_in_well = 0\n    # Initialize the number of units\n\
    using Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5x_mt_op.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5x_mt_op.jl:1\n\
    in expression starting at /tmp/tmp5x_mt_op.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_zpij2gv.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zpij2gv.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zpij2gv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_zpij2gv.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zpij2gv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zpij2gv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_zpij2gv.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zpij2gv.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zpij2gv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_zpij2gv.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zpij2gv.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zpij2gv.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_zpij2gv.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # Initialize the number of times the buckets are\
    \ lowered\n    lowers = 0\n    # Initialize the number of wells\n    wells = length(grid)\n\
    \    # Initialize the number of units of water in each well\n    water = [sum(grid[i])\
    \ for i in 1:wells]\n    # Initialize the number of buckets\n    buckets = length(grid[1])\n\
    \    # Initialize the number of units of water in each bucket\n    bucket_water\
    \ = zeros(Int64, buckets)\n    # Initialize the number of units of water in each\
    \ bucket\n    bucket_water = zeros(Int64, buckets)\n    # Initialize the number\
    \ of units of water in each bucket\n    bucket_water = zeros(Int64, buckets)\n\
    \    # Initialize the number of units of water in each bucket\n    bucket_water\
    \ = zeros(Int64, buckets)\n    # Initialize the number of units of water in each\
    \ bucket\n    bucket_water = zeros(Int64, buckets)\n    # Initialize the number\
    \ of units of water in each bucket\n    bucket_water = zeros(Int64, buckets)\n\
    \    # Initialize the number of units of water in each bucket\n    bucket_water\
    \ = zeros(Int64, buckets)\n    # Initialize the number of units of water in each\
    \ bucket\n    bucket_water = zeros(Int64, buckets)\n    # Initialize the number\
    \ of units of water in each bucket\n    bucket_water = zeros(Int64, buckets)\n\
    \    # Initialize the number of units of water in each bucket\n    bucket_water\
    \ = zeros(Int64, buckets)\n    # Initialize the number of units of water in each\
    \ bucket\n    bucket_water = zeros(Int64, buckets)\n    # Initialize the number\
    \ of units of water in each bucket\n    bucket_water = zeros(Int64, buckets)\n\
    \    # Initialize the number of units of water in each bucket\n    bucket_water\
    \ = zeros(Int64, buckets)\n    # Initialize the number of units of water in each\
    \ bucket\n    bucket_water = zeros(Int64, buckets)\n    # Initialize the number\
    \ of units of water in each bucket\n    bucket_water = zeros(Int64, buckets)\n\
    \    # Initialize\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpncqgjj0h.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpncqgjj0h.jl:1\n\
    in expression starting at /tmp/tmpncqgjj0h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  max_water = 0\n    for i in 1:n\n        for j in 1:m\n            max_water\
    \ += grid[i][j]\n        end\n    end\n    return max_water / capacity\nend\n\
    using Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplawhl_aj.jl:45\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5\n  InexactError: Int64(4.5)\n  Stacktrace:\n   [1] Int64\n    \
    \ @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n     @ Main /tmp/tmplawhl_aj.jl:37\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmplawhl_aj.jl:45 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmplawhl_aj.jl:43\ntest set:\
    \ Error During Test at /tmp/tmplawhl_aj.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2\n  InexactError: Int64(0.8888888888888888)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmplawhl_aj.jl:37\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmplawhl_aj.jl:48 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmplawhl_aj.jl:43\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplawhl_aj.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # get the maximum number of rows\n    max_row\
    \ = length(grid)\n    # get the maximum number of columns\n    max_col = length(grid[1])\n\
    \    # initialize the number of times the bucket is lowered\n    lowered = 0\n\
    \    # loop through the rows\n    for i in 1:max_row\n        # loop through the\
    \ columns\n        for j in 1:max_col\n            # if the current cell is 1\n\
    \            if grid[i][j] == 1\n                # lower the bucket\n        \
    \        lowered += 1\n                # fill the bucket\n                fill_bucket(grid,\
    \ capacity, i, j)\n            end\n        end\n    end\n    # return the number\
    \ of times the bucket is lowered\n    return lowered\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]],\
    \ 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3z59m_h4.jl:56\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  UndefVarError: fill_bucket not defined\n  Stacktrace:\n   [1] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmp3z59m_h4.jl:44\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3z59m_h4.jl:56 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3z59m_h4.jl:55\ntest set:\
    \ Error During Test at /tmp/tmp3z59m_h4.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  UndefVarError: fill_bucket not defined\n  Stacktrace:\n   [1] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmp3z59m_h4.jl:44\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3z59m_h4.jl:57 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3z59m_h4.jl:55\ntest set:\
    \ Error During Test at /tmp/tmp3z59m_h4.jl:59\n  Test threw exception\n  Expression:\
    \ candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4\n  UndefVarError: fill_bucket\
    \ not defined\n  Stacktrace:\n   [1] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n\
    \     @ Main /tmp/tmp3z59m_h4.jl:44\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3z59m_h4.jl:59 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3z59m_h4.jl:55\ntest set:\
    \ Error During Test at /tmp/tmp3z59m_h4.jl:60\n  Test threw exception\n  Expression:\
    \ candidate([[1"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3z59m_h4.jl:53\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]],\
    \ 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgp_clcbu.jl:36\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n\
    \     @ Main /tmp/tmpgp_clcbu.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgp_clcbu.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgp_clcbu.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpgp_clcbu.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n\
    \     @ Main /tmp/tmpgp_clcbu.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgp_clcbu.jl:37 [inlined]\n\
    \   [4] macr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgp_clcbu.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    Returns the number of times you need\
    \ to lower the buckets.\n    \"\"\"\n    # TODO: Implement me\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt35mbnxx.jl:40\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt35mbnxx.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt35mbnxx.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpt35mbnxx.jl:41\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt35mbnxx.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt35mbnxx.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpt35mbnxx.jl:43\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt35mbnxx.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt35mbnxx.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpt35mbnxx.jl:44\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt35mbnxx.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt35mbnxx.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt35mbnxx.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpikepkw5o.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikepkw5o.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikepkw5o.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpikepkw5o.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikepkw5o.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikepkw5o.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpikepkw5o.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikepkw5o.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikepkw5o.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpikepkw5o.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikepkw5o.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikepkw5o.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpikepkw5o.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # number of times the bucket was lowered\n   \
    \ num_lowers = 0\n    # number of wells\n    num_wells = length(grid)\n    # number\
    \ of units in a well\n    num_units = length(grid[1])\n    # number of units in\
    \ a row that are filled\n    num_filled = 0\n    # number of units in a row that\
    \ are empty\n    num_empty = 0\n    # number of units in a row that are filled\
    \ and can be emptied\n    num_filled_and_empty = 0\n    # number of units in a\
    \ row that are empty and can be filled\n    num_empty_and_fill = 0\n    # number\
    \ of units in a row that are filled and can be emptied\n    # and number of units\
    \ in a row that are empty and can be filled\n    num_filled_and_empty_and_fill\
    \ = 0\n    # number of units in a row that are filled and can be emptied\n   \
    \ # and number of units in a row that are empty and can be filled\n    # and number\
    \ of units in a row that are filled\n    num_filled_and_empty_and_fill_and_filled\
    \ = 0\n    # number of units in a row that are filled and can be emptied\n   \
    \ # and number of units in a row that are empty and can be filled\n    # and number\
    \ of units in a row that are filled\n    # and number of units in a row that are\
    \ empty\n    num_filled_and_empty_and_fill_and_filled_and_empty = 0\n    # number\
    \ of units in a row that are filled and can be emptied\n    # and number of units\
    \ in a row that are empty and can be filled\n    # and number of units in a row\
    \ that are filled\n    # and number of units in a row that are empty\n    # and\
    \ number of units in a row that are filled and can be emptied\n    num_filled_and_empty_and_fill_and_filled_and_empty_and_filled_and_empty\
    \ = 0\n    # number of units in a row that are filled and can be emptied\n   \
    \ # and number of units in a row that are empty and can be filled\n    # and number\
    \ of units in a row that are filled\n    # and number of units in a row that are\
    \ empty\n    #\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpic8nress.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpic8nress.jl:1\n\
    in expression starting at /tmp/tmpic8nress.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  count = 0\n    for i in 1:n\n        for j in 1:m\n            if grid[i][j]\
    \ == 1\n                count += 1\n            end\n        end\n    end\n  \
    \  return count * capacity\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\
    \t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq5ade182.jl:47\n  Expression: candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated:\
    \ 18 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5ade182.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5ade182.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpq5ade182.jl:49\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 16 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5ade182.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5ade182.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpq5ade182.jl:50\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 72 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5ade182.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5ade182.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq5ade182.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  total = 0\n    for i in 1:n\n        for j in 1:m\n            if grid[i][j]\
    \ == 1\n                total += 1\n            end\n        end\n    end\n  \
    \  return total * capacity\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\
    \t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph5ciuu3s.jl:47\n  Expression: candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated:\
    \ 18 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph5ciuu3s.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph5ciuu3s.jl:45\ntest set: Test\
    \ Failed at /tmp/tmph5ciuu3s.jl:49\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 16 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph5ciuu3s.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph5ciuu3s.jl:45\ntest set: Test\
    \ Failed at /tmp/tmph5ciuu3s.jl:50\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 72 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph5ciuu3s.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph5ciuu3s.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph5ciuu3s.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  total = 0\n    for i in 1:n\n        for j in 1:m\n            if grid[i][j]\
    \ == 1\n                total += 1\n            end\n        end\n    end\n  \
    \  return total // capacity\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3khrh751.jl:47\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5\n  InexactError: Int64(9//2)\n  Stacktrace:\n   [1] Integer\n \
    \    @ ./rational.jl:110 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n     @ Main /tmp/tmp3khrh751.jl:39\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3khrh751.jl:47 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3khrh751.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp3khrh751.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2\n  InexactError: Int64(8//9)\n\
    \  Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmp3khrh751.jl:39\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3khrh751.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3khrh751.jl:45\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3khrh751.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code goes here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmponyp7d5o.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponyp7d5o.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponyp7d5o.jl:36\ntest set: Test\
    \ Failed at /tmp/tmponyp7d5o.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponyp7d5o.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponyp7d5o.jl:36\ntest set: Test\
    \ Failed at /tmp/tmponyp7d5o.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponyp7d5o.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponyp7d5o.jl:36\ntest set: Test\
    \ Failed at /tmp/tmponyp7d5o.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponyp7d5o.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponyp7d5o.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmponyp7d5o.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2gdpn7yp.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2gdpn7yp.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2gdpn7yp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2gdpn7yp.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2gdpn7yp.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2gdpn7yp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2gdpn7yp.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2gdpn7yp.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2gdpn7yp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2gdpn7yp.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2gdpn7yp.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2gdpn7yp.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2gdpn7yp.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  total = 0\n    for i in 1:n\n        for j in 1:m\n            if grid[i][j]\
    \ == 1\n                total += 1\n            end\n        end\n    end\n  \
    \  return total / capacity\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\
    \t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7i4_wyn0.jl:47\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5\n  InexactError: Int64(4.5)\n  Stacktrace:\n   [1] Int64\n    \
    \ @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n     @ Main /tmp/tmp7i4_wyn0.jl:39\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp7i4_wyn0.jl:47 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7i4_wyn0.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp7i4_wyn0.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2\n  InexactError: Int64(0.8888888888888888)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmp7i4_wyn0.jl:39\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp7i4_wyn0.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7i4_wyn0.jl:45\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7i4_wyn0.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # fill the wells with water\n    for i in 1:length(grid)\n\
    \        for j in 1:length(grid[i])\n            if grid[i][j] == 1\n        \
    \        grid[i][j] = capacity\n            end\n        end\n    end\n    \n\
    \    # count the number of times the bucket needs to be lowered\n    count = 0\n\
    \    for i in 1:length(grid)\n        for j in 1:length(grid[i])\n           \
    \ if grid[i][j] > 0\n                count += 1\n            end\n        end\n\
    \    end\n    \n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpihgkf7vv.jl:56\n  Expression: candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpihgkf7vv.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpihgkf7vv.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpihgkf7vv.jl:58\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpihgkf7vv.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpihgkf7vv.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpihgkf7vv.jl:59\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 8 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpihgkf7vv.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpihgkf7vv.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpihgkf7vv.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    This function takes a grid of wells\
    \ and the capacity of the buckets,\n    and returns the number of times the buckets\
    \ need to be lowered.\n    \"\"\"\n    # Initialize the number of times the buckets\
    \ need to be lowered\n    num_lower = 0\n    \n    # Initialize the number of\
    \ wells that are not empty\n    num_not_empty = 0\n    \n    # Initialize the\
    \ number of wells that are empty\n    num_empty = 0\n    \n    # Initialize the\
    \ number of wells that are full\n    num_full = 0\n    \n    # Initialize the\
    \ number of wells that are partially full\n    num_partially_full = 0\n    \n\
    \    # Initialize the number of wells that are partially empty\n    num_partially_empty\
    \ = 0\n    \n    # Initialize the number of wells that are partially full and\
    \ partially empty\n    num_partially_full_and_empty = 0\n    \n    # Initialize\
    \ the number of wells that are partially full and partially empty\n    # and have\
    \ the same amount of water in them\n    num_partially_full_and_empty_same = 0\n\
    \    \n    # Initialize the number of wells that are partially full and partially\
    \ empty\n    # and have a different amount of water in them\n    num_partially_full_and_empty_different\
    \ = 0\n    \n    # Initialize the number of wells that are partially full and\
    \ partially empty\n    # and have a different amount of water in them and have\
    \ a different amount of water\n    # in them that is less than the capacity of\
    \ the buckets\n    num_partially_full_and_empty_different_less = 0\n    \n   \
    \ # Initialize the number of wells that are partially full and partially empty\n\
    \    # and have a different amount of water in them and have a different amount\
    \ of water\n    # in them that is greater than the capacity of the buckets\n \
    \   num_partially_full_and_empty_different_greater = 0\n    \n    # Initialize\
    \ the number of wells that are partially full and partially empty\n    # and have\
    \ a different amount of water in them and have a different amount of water\n \
    \   # in them that is equal to the capacity of the buckets\n    num_partially_full_and_empty_different_equal\
    \ = 0\n    \n    #\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t\
    @test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn1pspo9w.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn1pspo9w.jl:1\n\
    in expression starting at /tmp/tmpn1pspo9w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    >>> max_fill([[0, 0, 1, 0], [0, 1,\
    \ 0, 0], [1, 1, 1, 1]], 1)\n    6\nusing Test\n\n@testset begin\n\ncandidate =\
    \ max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp317xglbh.jl:1\nin expression starting at /tmp/tmp317xglbh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsu4dad0h.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsu4dad0h.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsu4dad0h.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpsu4dad0h.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsu4dad0h.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsu4dad0h.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpsu4dad0h.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsu4dad0h.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsu4dad0h.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpsu4dad0h.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsu4dad0h.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsu4dad0h.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsu4dad0h.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # Initialize the number of buckets used\n    buckets\
    \ = 0\n    # Initialize the number of wells filled\n    wells_filled = 0\n   \
    \ # Initialize the number of wells in the grid\n    wells = length(grid) * length(grid[1])\n\
    \    # Iterate through the grid\n    for i in 1:length(grid)\n        for j in\
    \ 1:length(grid[1])\n            # If the well is filled\n            if grid[i][j]\
    \ == 1\n                # Increment the number of wells filled\n             \
    \   wells_filled += 1\n                # If all wells are filled\n           \
    \     if wells_filled == wells\n                    # Return the number of buckets\
    \ used\n                    return buckets\n                end\n            \
    \    # Increment the number of buckets used\n                buckets += 1\n  \
    \              # Fill the well\n                grid[i][j] = 0\n            end\n\
    \        end\n    end\n    # Return the number of buckets used\n    return buckets\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjo3pganb.jl:63\n  Expression: candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjo3pganb.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjo3pganb.jl:61\ntest set: Test\
    \ Failed at /tmp/tmpjo3pganb.jl:65\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 7 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjo3pganb.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjo3pganb.jl:61\ntest set: Test\
    \ Failed at /tmp/tmpjo3pganb.jl:66\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 7 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjo3pganb.jl:66 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjo3pganb.jl:61\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjo3pganb.jl:59\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement me\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2n2i9f53.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2n2i9f53.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2n2i9f53.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2n2i9f53.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2n2i9f53.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2n2i9f53.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2n2i9f53.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2n2i9f53.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2n2i9f53.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2n2i9f53.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2n2i9f53.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2n2i9f53.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2n2i9f53.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # get number of rows\n    n = length(grid)\n \
    \   # get number of columns\n    m = length(grid[1])\n    # initialize number\
    \ of times we need to lower the buckets\n    num_lower = 0\n    # iterate over\
    \ rows\n    for i in 1:n\n        # iterate over columns\n        for j in 1:m\n\
    \            # if the current well is not empty\n            if grid[i][j] ==\
    \ 1\n                # lower the bucket\n                num_lower += 1\n    \
    \            # empty the well\n                grid[i][j] = 0\n              \
    \  # if we have not reached the end of the row\n                if j + capacity\
    \ - 1 <= m\n                    # empty the wells in the row that the bucket can\
    \ reach\n                    grid[i][j:j+capacity-1] = zeros(capacity)\n     \
    \           else\n                    # empty the wells in the row that the bucket\
    \ can reach\n                    grid[i][j:m] = zeros(m-j+1)\n               \
    \ end\n            end\n        end\n    end\n    # return the number of times\
    \ we need to lower the buckets\n    return num_lower\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]],\
    \ 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgmta7r2c.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgmta7r2c.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgmta7r2c.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpgmta7r2c.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgmta7r2c.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgmta7r2c.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpgmta7r2c.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgmta7r2c.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgmta7r2c.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpgmta7r2c.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgmta7r2c.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgmta7r2c.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgmta7r2c.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp80njvhw5.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp80njvhw5.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp80njvhw5.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp80njvhw5.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp80njvhw5.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp80njvhw5.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp80njvhw5.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp80njvhw5.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp80njvhw5.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp80njvhw5.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp80njvhw5.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp80njvhw5.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp80njvhw5.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # initialize the number of times we need to lower\
    \ the buckets\n    num_lowerings = 0\n    # initialize the number of wells that\
    \ are full\n    num_full_wells = 0\n    # initialize the number of wells that\
    \ are empty\n    num_empty_wells = 0\n    # initialize the number of wells that\
    \ are partially full\n    num_partially_full_wells = 0\n    # initialize the number\
    \ of units of water in the partially full wells\n    num_units_of_water = 0\n\
    \    # initialize the number of units of water in the full wells\n    num_units_of_water_in_full_wells\
    \ = 0\n    # initialize the number of units of water in the empty wells\n    num_units_of_water_in_empty_wells\
    \ = 0\n    # initialize the number of units of water in the partially full wells\n\
    \    num_units_of_water_in_partially_full_wells = 0\n    # initialize the number\
    \ of units of water in the partially full wells\n    num_units_of_water_in_partially_full_wells\
    \ = 0\n    # initialize the number of units of water in the partially full wells\n\
    \    num_units_of_water_in_partially_full_wells = 0\n    # initialize the number\
    \ of units of water in the partially full wells\n    num_units_of_water_in_partially_full_wells\
    \ = 0\n    # initialize the number of units of water in the partially full wells\n\
    \    num_units_of_water_in_partially_full_wells = 0\n    # initialize the number\
    \ of units of water in the partially full wells\n    num_units_of_water_in_partially_full_wells\
    \ = 0\n    # initialize the number of units of water in the partially full wells\n\
    \    num_units_of_water_in_partially_full_wells = 0\n    # initialize the number\
    \ of units of water in the partially full wells\n    num_units_of_water_in_partially_full_wells\
    \ = 0\n    # initialize the number of units of water in the partially full wells\n\
    \    num_units_of_water_in_partially_full_wells = 0\n    # initialize the number\
    \ of units of\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpur8pimwd.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpur8pimwd.jl:1\n\
    in expression starting at /tmp/tmpur8pimwd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: write your code here\n    return 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjen_hd8b.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjen_hd8b.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjen_hd8b.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjen_hd8b.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjen_hd8b.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjen_hd8b.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjen_hd8b.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjen_hd8b.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjen_hd8b.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjen_hd8b.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjen_hd8b.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjen_hd8b.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjen_hd8b.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpooz4q741.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpooz4q741.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpooz4q741.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpooz4q741.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpooz4q741.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpooz4q741.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpooz4q741.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpooz4q741.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpooz4q741.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpooz4q741.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpooz4q741.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpooz4q741.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpooz4q741.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2txtra52.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2txtra52.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2txtra52.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2txtra52.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2txtra52.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2txtra52.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2txtra52.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2txtra52.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2txtra52.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2txtra52.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2txtra52.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2txtra52.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2txtra52.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n, m = size(grid)\n    row_max = [maximum(grid[i,\
    \ :]) for i in 1:n]\n    col_max = [maximum(grid[:, j]) for j in 1:m]\n    row_max_sum\
    \ = sum(row_max)\n    col_max_sum = sum(col_max)\n    return row_max_sum + col_max_sum\
    \ - maximum(row_max) - maximum(col_max)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1,\
    \ 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp__wj8sv_.jl:41\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmp__wj8sv_.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp__wj8sv_.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp__wj8sv_.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp__wj8sv_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmp__wj8sv_.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp__wj8sv_.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp__wj8sv_.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp__wj8sv_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 0], [0, 0, 0]], 5) == 0\n  BoundsError: attempt to access\
    \ Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89\
    \ [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n \
    \    @ Main /tmp/tmp__wj8sv_.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp__wj8sv_.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp__wj8sv_.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    Function to calculate the number of\
    \ times you need to lower the buckets.\n    \"\"\"\n    # Initialize the number\
    \ of times you need to lower the buckets\n    num_times = 0\n    # Initialize\
    \ the number of buckets you need to lower\n    num_buckets = 0\n    # Initialize\
    \ the number of wells you need to fill\n    num_wells = 0\n    # Initialize the\
    \ number of wells you need to fill\n    num_wells_filled = 0\n    # Initialize\
    \ the number of wells you need to fill\n    num_wells_not_filled = 0\n    # Initialize\
    \ the number of wells you need to fill\n    num_wells_filled_per_bucket = 0\n\
    \    # Initialize the number of wells you need to fill\n    num_wells_not_filled_per_bucket\
    \ = 0\n    # Initialize the number of wells you need to fill\n    num_wells_filled_per_bucket_per_time\
    \ = 0\n    # Initialize the number of wells you need to fill\n    num_wells_not_filled_per_bucket_per_time\
    \ = 0\n    # Initialize the number of wells you need to fill\n    num_wells_filled_per_time\
    \ = 0\n    # Initialize the number of wells you need to fill\n    num_wells_not_filled_per_time\
    \ = 0\n    # Initialize the number of wells you need to fill\n    num_wells_filled_per_time_per_bucket\
    \ = 0\n    # Initialize the number of wells you need to fill\n    num_wells_not_filled_per_time_per_bucket\
    \ = 0\n    # Initialize the number of wells you need to fill\n    num_wells_filled_per_time_per_bucket_per_well\
    \ = 0\n    # Initialize the number of wells you need to fill\n    num_wells_not_filled_per_time_per_bucket_per_well\
    \ = 0\n    # Initialize the number of wells you need to fill\n    num_wells_filled_per_time_per_well\
    \ = 0\n    # Initialize the number of wells you need to fill\n    num_wells_not_filled_per_time\n\
    using Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp761gwfqj.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp761gwfqj.jl:1\n\
    in expression starting at /tmp/tmp761gwfqj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  total = 0\n    for i in 1:n\n        for j in 1:m\n            if grid[i][j]\
    \ == 1\n                total += 1\n            end\n        end\n    end\n  \
    \  return total / capacity\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\
    \t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpno94ng08.jl:47\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5\n  InexactError: Int64(4.5)\n  Stacktrace:\n   [1] Int64\n    \
    \ @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n     @ Main /tmp/tmpno94ng08.jl:39\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpno94ng08.jl:47 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpno94ng08.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpno94ng08.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2\n  InexactError: Int64(0.8888888888888888)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpno94ng08.jl:39\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpno94ng08.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpno94ng08.jl:45\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpno94ng08.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement the solution\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqs5udyi6.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqs5udyi6.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqs5udyi6.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqs5udyi6.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqs5udyi6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqs5udyi6.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqs5udyi6.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqs5udyi6.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqs5udyi6.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqs5udyi6.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqs5udyi6.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqs5udyi6.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqs5udyi6.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuujub3jl.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuujub3jl.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuujub3jl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpuujub3jl.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuujub3jl.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuujub3jl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpuujub3jl.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuujub3jl.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuujub3jl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpuujub3jl.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuujub3jl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuujub3jl.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuujub3jl.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement your solution here\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprc4bvxru.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprc4bvxru.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprc4bvxru.jl:36\ntest set: Test\
    \ Failed at /tmp/tmprc4bvxru.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprc4bvxru.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprc4bvxru.jl:36\ntest set: Test\
    \ Failed at /tmp/tmprc4bvxru.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprc4bvxru.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprc4bvxru.jl:36\ntest set: Test\
    \ Failed at /tmp/tmprc4bvxru.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprc4bvxru.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprc4bvxru.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprc4bvxru.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgl3fpf4_.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgl3fpf4_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgl3fpf4_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpgl3fpf4_.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgl3fpf4_.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgl3fpf4_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpgl3fpf4_.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgl3fpf4_.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgl3fpf4_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpgl3fpf4_.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgl3fpf4_.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgl3fpf4_.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgl3fpf4_.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyu_05_35.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyu_05_35.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyu_05_35.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyu_05_35.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyu_05_35.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyu_05_35.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyu_05_35.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyu_05_35.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyu_05_35.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyu_05_35.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyu_05_35.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyu_05_35.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyu_05_35.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n_rows, n_cols = size(grid)\n    n_empties = 0\n\
    \    for row in grid\n        n_empties += sum(row)\n    end\n    n_empties -=\
    \ n_rows\n    return n_empties * capacity\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
    \ 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqb8cueia.jl:42\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpqb8cueia.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqb8cueia.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqb8cueia.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpqb8cueia.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpqb8cueia.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqb8cueia.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqb8cueia.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpqb8cueia.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 0], [0, 0, 0]], 5) == 0\n  BoundsError: attempt to access\
    \ Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89\
    \ [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n \
    \    @ Main /tmp/tmpqb8cueia.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqb8cueia.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqb8cueia.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    wells_count = length(grid)\n    wells_length =\
    \ length(grid[1])\n    max_water = 0\n    for i in 1:wells_count\n        for\
    \ j in 1:wells_length\n            max_water += grid[i][j]\n        end\n    end\n\
    \    return max_water / capacity\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpid1jdbox.jl:45\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5\n  InexactError: Int64(4.5)\n  Stacktrace:\n   [1] Int64\n    \
    \ @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n     @ Main /tmp/tmpid1jdbox.jl:37\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpid1jdbox.jl:45 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpid1jdbox.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpid1jdbox.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2\n  InexactError: Int64(0.8888888888888888)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpid1jdbox.jl:37\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpid1jdbox.jl:48 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpid1jdbox.jl:43\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpid1jdbox.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n_rows, n_cols = size(grid)\n    # initialize\
    \ the water level to 0\n    water_level = 0\n    # initialize the number of times\
    \ we need to lower the buckets\n    n_lower = 0\n    # iterate over the rows\n\
    \    for row in grid\n        # iterate over the columns\n        for col in row\n\
    \            # if the current cell is 1, we need to lower the buckets\n      \
    \      if col == 1\n                n_lower += 1\n            end\n        end\n\
    \        # if we have lowered the buckets, we need to increase the water level\n\
    \        if n_lower > 0\n            water_level += 1\n        end\n    end\n\
    \    # if the water level is greater than the capacity, we need to lower the buckets\n\
    \    if water_level > capacity\n        n_lower += water_level - capacity\n  \
    \  end\n    return n_lower\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\
    \t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5jqbmg1e.jl:59\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmp5jqbmg1e.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5jqbmg1e.jl:59 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5jqbmg1e.jl:58\ntest set:\
    \ Error During Test at /tmp/tmp5jqbmg1e.jl:60\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmp5jqbmg1e.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5jqbmg1e.jl:60 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5jqbmg1e.jl:58\ntest set:\
    \ Error During Test at /tmp/tmp5jqbmg1e.jl:61\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 0], [0, 0, 0]], 5) == 0\n  BoundsError: attempt to access\
    \ Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89\
    \ [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n \
    \    @ Main /tmp/tmp5jqbmg1e.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5jqbmg1e.jl:61 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5jqbmg1e.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement the function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmgaw3579.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmgaw3579.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmgaw3579.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpmgaw3579.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmgaw3579.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmgaw3579.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpmgaw3579.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmgaw3579.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmgaw3579.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpmgaw3579.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmgaw3579.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmgaw3579.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmgaw3579.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqywyh4m6.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqywyh4m6.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqywyh4m6.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqywyh4m6.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqywyh4m6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqywyh4m6.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqywyh4m6.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqywyh4m6.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqywyh4m6.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqywyh4m6.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqywyh4m6.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqywyh4m6.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqywyh4m6.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement this function\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprtjzb_rn.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprtjzb_rn.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprtjzb_rn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmprtjzb_rn.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprtjzb_rn.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprtjzb_rn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmprtjzb_rn.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprtjzb_rn.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprtjzb_rn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmprtjzb_rn.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprtjzb_rn.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprtjzb_rn.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprtjzb_rn.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement me\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4vlqrkx3.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4vlqrkx3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4vlqrkx3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4vlqrkx3.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4vlqrkx3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4vlqrkx3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4vlqrkx3.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4vlqrkx3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4vlqrkx3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4vlqrkx3.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4vlqrkx3.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4vlqrkx3.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4vlqrkx3.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjxtbvf_0.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjxtbvf_0.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjxtbvf_0.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjxtbvf_0.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjxtbvf_0.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjxtbvf_0.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjxtbvf_0.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjxtbvf_0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjxtbvf_0.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjxtbvf_0.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjxtbvf_0.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjxtbvf_0.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjxtbvf_0.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpye6nidcn.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpye6nidcn.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpye6nidcn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpye6nidcn.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpye6nidcn.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpye6nidcn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpye6nidcn.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpye6nidcn.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpye6nidcn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpye6nidcn.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpye6nidcn.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpye6nidcn.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpye6nidcn.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: return the number of times you need to\
    \ lower the buckets\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0c2agnpo.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0c2agnpo.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0c2agnpo.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0c2agnpo.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0c2agnpo.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0c2agnpo.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0c2agnpo.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0c2agnpo.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0c2agnpo.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0c2agnpo.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0c2agnpo.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0c2agnpo.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0c2agnpo.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # get the number of rows\n    n_rows = length(grid)\n\
    \    # get the number of columns\n    n_cols = length(grid[1])\n    # initialize\
    \ the number of times we need to lower the buckets\n    n_times = 0\n    # loop\
    \ over the rows\n    for i in 1:n_rows\n        # loop over the columns\n    \
    \    for j in 1:n_cols\n            # if the current cell is filled\n        \
    \    if grid[i][j] == 1\n                # increment the number of times we need\
    \ to lower the buckets\n                n_times += 1\n                # fill the\
    \ current cell\n                grid[i][j] = 0\n                # fill the cells\
    \ above the current cell\n                for k in 1:capacity\n              \
    \      # if we are not in the first row\n                    if i - k > 0\n  \
    \                      # fill the cell above the current cell\n              \
    \          grid[i - k][j] = 0\n                    end\n                end\n\
    \            end\n        end\n    end\n    # return the number of times we need\
    \ to lower the buckets\n    return n_times\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
    \ 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpblpcvlff.jl:65\n  Expression: candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpblpcvlff.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpblpcvlff.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpblpcvlff.jl:67\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpblpcvlff.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpblpcvlff.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpblpcvlff.jl:68\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 8 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpblpcvlff.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpblpcvlff.jl:63\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpblpcvlff.jl:61\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  total = 0\n    for i in 1:n\n        for j in 1:m\n            if grid[i][j]\
    \ == 1\n                total += 1\n            end\n        end\n    end\n  \
    \  return total - capacity\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\
    \t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxbd8vhsr.jl:46\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 5 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxbd8vhsr.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxbd8vhsr.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpxbd8vhsr.jl:47\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 7 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxbd8vhsr.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxbd8vhsr.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpxbd8vhsr.jl:48\n  Expression: candidate([[0, 0, 0], [0, 0,\
    \ 0]], 5) == 0\n   Evaluated: -5 == 0\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxbd8vhsr.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxbd8vhsr.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpxbd8vhsr.jl:49\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 6 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxbd8vhsr.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxbd8vhsr.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpxbd8vhsr.jl:50\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: -1 == 2"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxbd8vhsr.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj465h2ud.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj465h2ud.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj465h2ud.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpj465h2ud.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj465h2ud.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj465h2ud.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpj465h2ud.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj465h2ud.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj465h2ud.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpj465h2ud.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj465h2ud.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj465h2ud.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj465h2ud.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    >>> max_fill([[0, 0, 1, 0], [0, 1,\
    \ 0, 0], [1, 1, 1, 1]], 1)\n    6\nusing Test\n\n@testset begin\n\ncandidate =\
    \ max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\
    \ == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1,\
    \ 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1,\
    \ 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeu_wqfv_.jl:1\nin expression starting at /tmp/tmpeu_wqfv_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu299eszw.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu299eszw.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu299eszw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpu299eszw.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu299eszw.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu299eszw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpu299eszw.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu299eszw.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu299eszw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpu299eszw.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu299eszw.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu299eszw.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu299eszw.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphkk8i4iz.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphkk8i4iz.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphkk8i4iz.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphkk8i4iz.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphkk8i4iz.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphkk8i4iz.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphkk8i4iz.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphkk8i4iz.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphkk8i4iz.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphkk8i4iz.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphkk8i4iz.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphkk8i4iz.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphkk8i4iz.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n_rows, n_cols = size(grid)\n    n_fills = 0\n\
    \    for col in 1:n_cols\n        for row in 1:n_rows\n            if grid[row,\
    \ col] == 1\n                n_fills += 1\n                grid[row, col] = 0\n\
    \                if row < n_rows\n                    grid[row+1, col] = 1\n \
    \               end\n            end\n        end\n    end\n    return n_fills\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmwyhzrc1.jl:49\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpmwyhzrc1.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmwyhzrc1.jl:49 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmwyhzrc1.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpmwyhzrc1.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmpmwyhzrc1.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmwyhzrc1.jl:50 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmwyhzrc1.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpmwyhzrc1.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 0], [0, 0, 0]], 5) == 0\n  BoundsError: attempt to access\
    \ Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89\
    \ [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n \
    \    @ Main /tmp/tmpmwyhzrc1.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmwyhzrc1.jl:51 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmwyhzrc1.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjf_vtwtg.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjf_vtwtg.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjf_vtwtg.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjf_vtwtg.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjf_vtwtg.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjf_vtwtg.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjf_vtwtg.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjf_vtwtg.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjf_vtwtg.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjf_vtwtg.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjf_vtwtg.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjf_vtwtg.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjf_vtwtg.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n = length(grid)\n    m = length(grid[1])\n  \
    \  count = 0\n    for i in 1:n\n        for j in 1:m\n            if grid[i][j]\
    \ == 1\n                count += 1\n            end\n        end\n    end\n  \
    \  return count * capacity\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\
    \t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz3nw7qfq.jl:47\n  Expression: candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated:\
    \ 18 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3nw7qfq.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3nw7qfq.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpz3nw7qfq.jl:49\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 16 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3nw7qfq.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3nw7qfq.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpz3nw7qfq.jl:50\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 72 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3nw7qfq.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3nw7qfq.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz3nw7qfq.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement me\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpln2qryzx.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpln2qryzx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln2qryzx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpln2qryzx.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpln2qryzx.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln2qryzx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpln2qryzx.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpln2qryzx.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln2qryzx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpln2qryzx.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpln2qryzx.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln2qryzx.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpln2qryzx.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpma8mkvb1.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpma8mkvb1.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpma8mkvb1.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpma8mkvb1.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpma8mkvb1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpma8mkvb1.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpma8mkvb1.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpma8mkvb1.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpma8mkvb1.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpma8mkvb1.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpma8mkvb1.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpma8mkvb1.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpma8mkvb1.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # TODO: Implement me!\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1sb_2vuy.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sb_2vuy.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sb_2vuy.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1sb_2vuy.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sb_2vuy.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sb_2vuy.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1sb_2vuy.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sb_2vuy.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sb_2vuy.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1sb_2vuy.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sb_2vuy.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sb_2vuy.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1sb_2vuy.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # count the number of wells\n    wells = 0\n \
    \   for row in grid\n        wells += sum(row)\n    end\n    # count the number\
    \ of buckets needed\n    buckets = ceil(Int64, wells / capacity)\n    # return\
    \ the number of times the buckets need to be lowered\n    return buckets\nend\n\
    using Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf_wr_8ck.jl:48\n  Expression: candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf_wr_8ck.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf_wr_8ck.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf_wr_8ck.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n_rows, n_cols = size(grid)\n    n_fills = 0\n\
    \    for col in 1:n_cols\n        for row in 1:n_rows\n            if grid[row,\
    \ col] == 1\n                n_fills += 1\n                grid[row, col] = 0\n\
    \                if row < n_rows\n                    grid[row+1, col] = 1\n \
    \               end\n            end\n        end\n    end\n    return n_fills\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp70dq1p37.jl:49\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmp70dq1p37.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp70dq1p37.jl:49 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp70dq1p37.jl:48\ntest set:\
    \ Error During Test at /tmp/tmp70dq1p37.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmp70dq1p37.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp70dq1p37.jl:50 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp70dq1p37.jl:48\ntest set:\
    \ Error During Test at /tmp/tmp70dq1p37.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 0], [0, 0, 0]], 5) == 0\n  BoundsError: attempt to access\
    \ Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89\
    \ [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n \
    \    @ Main /tmp/tmp70dq1p37.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp70dq1p37.jl:51 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp70dq1p37.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzmyptdmx.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzmyptdmx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzmyptdmx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpzmyptdmx.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzmyptdmx.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzmyptdmx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpzmyptdmx.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzmyptdmx.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzmyptdmx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpzmyptdmx.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzmyptdmx.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzmyptdmx.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzmyptdmx.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    \"\"\"\n    The function takes a grid of wells\
    \ and a bucket capacity and returns the number of times the bucket needs to be\
    \ lowered.\n    \"\"\"\n    # Initialize the number of times the bucket needs\
    \ to be lowered\n    lowers = 0\n    # Initialize the number of wells that are\
    \ full\n    full_wells = 0\n    # Initialize the number of wells that are empty\n\
    \    empty_wells = 0\n    # Initialize the number of wells that are partially\
    \ full\n    partial_wells = 0\n    # Initialize the number of units of water that\
    \ are left over\n    left_over = 0\n    # Initialize the number of units of water\
    \ that are needed to fill the wells\n    needed = 0\n    # Initialize the number\
    \ of units of water that are in the wells\n    water = 0\n    # Initialize the\
    \ number of units of water that are in the wells\n    water = 0\n    # Initialize\
    \ the number of units of water that are in the wells\n    water = 0\n    # Initialize\
    \ the number of units of water that are in the wells\n    water = 0\n    # Initialize\
    \ the number of units of water that are in the wells\n    water = 0\n    # Initialize\
    \ the number of units of water that are in the wells\n    water = 0\n    # Initialize\
    \ the number of units of water that are in the wells\n    water = 0\n    # Initialize\
    \ the number of units of water that are in the wells\n    water = 0\n    # Initialize\
    \ the number of units of water that are in the wells\n    water = 0\n    # Initialize\
    \ the number of units of water that are in the wells\n    water = 0\n    # Initialize\
    \ the number of units of water that are in the wells\n    water = 0\n    # Initialize\
    \ the number of units of water that are in the wells\n    water = 0\n    # Initialize\
    \ the number of units of water that are in the wells\n    water = 0\n    # Initialize\
    \ the number of units of water that are in the wells\n    water = 0\n    # Initialize\
    \ the number of units of water that are in the wells\n    water = 0\n    # Initialize\
    \ the number of units of water that are in the wells\n    water = 0\n    # Initialize\
    \ the number of units of water that are in the wells\n   \nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]],\
    \ 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo3da2h3r.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo3da2h3r.jl:1\n\
    in expression starting at /tmp/tmpo3da2h3r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxopy1jro.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxopy1jro.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxopy1jro.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxopy1jro.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxopy1jro.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxopy1jro.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxopy1jro.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxopy1jro.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxopy1jro.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxopy1jro.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxopy1jro.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxopy1jro.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxopy1jro.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy_l3h9lm.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy_l3h9lm.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy_l3h9lm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpy_l3h9lm.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy_l3h9lm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy_l3h9lm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpy_l3h9lm.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy_l3h9lm.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy_l3h9lm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpy_l3h9lm.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy_l3h9lm.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy_l3h9lm.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy_l3h9lm.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    n_rows, n_cols = size(grid)\n    n_buckets = 0\n\
    \    for row in grid\n        for col in row\n            if col == 1\n      \
    \          n_buckets += 1\n            end\n        end\n    end\n    return n_buckets\
    \ * capacity\nend\nusing Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]],\
    \ 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3wgup8jc.jl:45\n  Test threw exception\n\
    \  Expression: candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmp3wgup8jc.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3wgup8jc.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3wgup8jc.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp3wgup8jc.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n\
    \  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n \
    \  [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)\n     @ Main /tmp/tmp3wgup8jc.jl:29\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3wgup8jc.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3wgup8jc.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp3wgup8jc.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([[0, 0, 0], [0, 0, 0]], 5) == 0\n  BoundsError: attempt to access\
    \ Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89\
    \ [inlined]\n   [2] max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)\n \
    \    @ Main /tmp/tmp3wgup8jc.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3wgup8jc.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3wgup8jc.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    and each 1 in a row represents a single unit of water.\n\
    \    Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    and all buckets have the same capacity.\n    Your task is to use the\
    \ buckets to empty the wells.\n    Output the number of times you need to lower\
    \ the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n\
    \    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n    \
    \    * all wells have the same length\n        * 1 <= grid.length <= 10^2\n  \
    \      * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n      \
    \  * 1 <= capacity <= 10\n    \"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}},\
    \ capacity::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0,\
    \ 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\
    \t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp882gzkk_.jl:37\n  Expression: candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp882gzkk_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp882gzkk_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp882gzkk_.jl:38\n  Expression: candidate([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp882gzkk_.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp882gzkk_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp882gzkk_.jl:40\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp882gzkk_.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp882gzkk_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp882gzkk_.jl:41\n  Expression: candidate([[1, 1, 1, 1], [1,\
    \ 1, 1, 1]], 9) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp882gzkk_.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp882gzkk_.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp882gzkk_.jl:34\n"
  exit_code: 1
  status: SyntaxError
