name: HumanEval_67_fruit_distribution
language: jl
prompt: "\"\"\"\n    In this task, you will be given a string that represents a number\
  \ of apples and oranges \n    that are distributed in a basket of fruit this basket\
  \ contains \n    apples, oranges, and mango fruits. Given the string that represents\
  \ the total number of \n    the oranges and apples and an integer that represent\
  \ the total number of the fruits \n    in the basket return the number of the mango\
  \ fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"5 apples\
  \ and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and 1 oranges\"\
  , 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n    95\n\
  \    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n    19\n    \"\"\
  \"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"\
  5 apples and 6 oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\"\
  , 21) == 10)\n\t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"\
  1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
  , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
  1 apples and 100 oranges\", 120) == 19)\nend\n"
completions: ["    # your code here\nend", "    # your code here\n    return 0\nend",
  "    # your code here\nend", "    # your code here\nend", "    # your code goes\
    \ here\nend", "    # your code here\n    return 0\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # your code here\n    return 0\nend",
  "    # your code here\nend", "    # your code here\n    return 0\nend", "    a,\
    \ o = map(parse, split(s, \" \"))\n    return n - a - o\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # your code here\nend", "    #\
    \ your code here\nend", "    # your code here\n    return 0\nend", "    # your\
    \ code here\nend", "    # your code here\nend", "    # your code here\nend", " \
    \   # your code here\nend", "    # your code here\nend", "    # your code here\n\
    \    return 0\nend", "    # your code here\nend", "    # your code here\nend",
  "    # your code here\nend", "    # your code here\nend", "    # your code here\n\
    end", "    # your code here\nend", "    apples, oranges = parse(Int64, split(s,\
    \ \" \")[1]), parse(Int64, split(s, \" \")[4])\n    return n - apples - oranges\n\
    end", "    # your code here\n    return 0\nend", "    # your code here\nend",
  "    # your code here\nend", "    # your code here\n    return 0\nend", "    # your\
    \ code here\nend", "    # your code here\n    return 0\nend", "    # your code\
    \ here\n    return 0\nend", "    # your code here\nend", "    # your code here\n\
    end", "    # your code here\n    return 0\nend", "    # your code here\nend",
  "    # your code here\n    return 0\nend", "    # your code here\nend", "    # your\
    \ code here\nend", "    # YOUR CODE HERE\nend", "    # your code here\nend", " \
    \   # your code here\nend", "    # your code here\n    return 0\nend", "    #\
    \ your code here\n    return 0\nend", "    # your code here\nend", "    # your\
    \ code here\nend", "    # your code here\nend", "    # your code here\nend", " \
    \   # your code here\nend", "    # your code here\nend", "    # your code here\n\
    \    return 0\nend", "    # your code here\nend", "    # your code goes here\n\
    \    return 0\nend", "    # your code here\nend", "    # your code here\nend",
  "    # your code here\nend", "    # your code here\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # your code\
    \ here\n    return 0\nend", "    # your code here\n    return 0\nend", "    #\
    \ your code here\nend", "    # your code here\nend", "    # your code here\n \
    \   return 0\nend", "    # your code here\nend", "    # your code here\nend",
  "    # your code here\nend", "    # your code here\n    return 0\nend", "    # your\
    \ code here\nend", "    # your code here\nend", "    # your code goes here\n \
    \   return 0\nend", "    # your code here\nend", "    # your code here\nend",
  "    # your code here\nend", "    # your code here\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # your code here\nend", "    #\
    \ your code here\n    return 0\nend", "    # your code here\nend", "    # your\
    \ code here\nend", "    # your code here\n    return 0\nend", "    # your code\
    \ here\n    return 0\nend", "    # your code here\n    return 0\nend", "    #\
    \ your code here\n    return 0\nend", "    # your code here\nend", "    # your\
    \ code here\n    return 0\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # your code here\n    return 0\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # your code\
    \ here\n    return 0\nend", "    # your code here\nend", "    # your code here\n\
    \    return 0\nend", "    # your code here\nend", "    # your code here\n    return\
    \ 0\nend", "    # your code here\nend", "    # your code here\nend", "    # your\
    \ code here\n    return 0\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    # your code here\n    return 0\nend", "    # your code here\n\
    \    return 0\nend", "    # your code here\nend", "    # your code here\n    return\
    \ 0\nend", "    # your code here\nend", "    # your code here\nend", "    # your\
    \ code here\nend", "    # your code here\nend", "    # your code here\nend", " \
    \   apples, oranges = map(x->parse(Int64, x), split(s, \" \"))\n    return n -\
    \ apples - oranges\nend", "    # your code here\nend", "    # your code here\n\
    \    return 0\nend", "    # your code here\n    return 0\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # your code here\nend", "    #\
    \ your code goes here\n    return 0\nend", "    # your code here\nend", "    #\
    \ your code here\nend", "    # your code here\nend", "    # your code here\nend",
  "    # your code here\n    return 0\nend", "    # your code here\nend", "    # your\
    \ code here\n    return 0\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # your code here\nend", "    #\
    \ your code here\nend", "    # your code here\nend", "    # your code here\nend",
  "    # your code here\nend", "    # your code here\n    return 0\nend", "    # your\
    \ code here\nend", "    # your code here\nend", "    # your code here\nend", " \
    \   # your code goes here\nend", "    apples, oranges = map(x->parse(Int64, x),\
    \ split(s, \" \"))\n    return n - apples - oranges\nend", "    # your code here\n\
    \    return 0\nend", "    # your code here\n    return 0\nend", "    # your code\
    \ here\n    return 0\nend", "    # your code here\nend", "    # your code here\n\
    \    return 0\nend", "    # your code here\nend", "    # your code here\n    return\
    \ 0\nend", "    # your code here\nend", "    # your code here\nend", "    # your\
    \ code here\nend", "    # your code here\n    return 0\nend", "    # your code\
    \ here\nend", "    apples, oranges = parse(Int64, split(s, \" \")[1]), parse(Int64,\
    \ split(s, \" \")[3])\n    return n - apples - oranges\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # your code here\nend", "    #\
    \ your code here\nend", "    # your code here\nend", "    # your code here\n \
    \   return 0\nend", "    # your code here\n    return 0\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # your code here\nend", "    #\
    \ your code here\nend", "    # your code here\nend\n ", "    # your code here\n\
    \    return 0\nend", "    # your code here\n    return 0\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # your code goes here\nend", " \
    \   # your code here\n    return 0\nend", "    # your code here\nend", "    #\
    \ your code here\nend", "    # your code here\nend", "    # your code here\nend",
  "    # your code here\n    return 0\nend", "    # your code here\nend", "    # your\
    \ code here\nend", "    # your code here\nend", "    # your code here\nend", " \
    \   # your code here\nend", "    # your code here\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    apples, oranges = parse(Int64,\
    \ split(s, \" \")[1]), parse(Int64, split(s, \" \")[3])\n    return n - apples\
    \ - oranges\nend", "    # your code here\nend", "    # your code here\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
