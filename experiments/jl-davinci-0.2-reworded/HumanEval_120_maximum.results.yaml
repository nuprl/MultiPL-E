name: HumanEval_120_maximum
language: jl
results:
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2hgetswn.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2hgetswn.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2hgetswn.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp2hgetswn.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2hgetswn.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2hgetswn.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp2hgetswn.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2hgetswn.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2hgetswn.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp2hgetswn.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2hgetswn.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2hgetswn.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2hgetswn.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements of the sorted array\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplaq_dqva.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplaq_dqva.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplaq_dqva.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplaq_dqva.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplaq_dqva.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplaq_dqva.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplaq_dqva.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplaq_dqva.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplaq_dqva.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplaq_dqva.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplaq_dqva.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplaq_dqva.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplaq_dqva.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwlk2b1q1.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwlk2b1q1.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwlk2b1q1.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpwlk2b1q1.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwlk2b1q1.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwlk2b1q1.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpwlk2b1q1.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwlk2b1q1.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwlk2b1q1.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpwlk2b1q1.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwlk2b1q1.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwlk2b1q1.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwlk2b1q1.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array\n    sorted_arr = sort(arr)\n    # Return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    # return the first k elements\n    sort(arr)[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6cvoy8hv.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6cvoy8hv.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6cvoy8hv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp6cvoy8hv.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6cvoy8hv.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6cvoy8hv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp6cvoy8hv.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6cvoy8hv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6cvoy8hv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp6cvoy8hv.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6cvoy8hv.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6cvoy8hv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp6cvoy8hv.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6cvoy8hv.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    # return the first k elements\n    return sort(arr)[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpju59ijw6.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpju59ijw6.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpju59ijw6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpju59ijw6.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpju59ijw6.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpju59ijw6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpju59ijw6.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpju59ijw6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpju59ijw6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpju59ijw6.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpju59ijw6.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpju59ijw6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpju59ijw6.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpju59ijw6.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the vector\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the vector\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\
    \ of the sorted array\n    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the vector in descending order.\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements.\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3l6vcrr4.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3l6vcrr4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3l6vcrr4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp3l6vcrr4.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3l6vcrr4.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3l6vcrr4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp3l6vcrr4.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3l6vcrr4.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3l6vcrr4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp3l6vcrr4.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3l6vcrr4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3l6vcrr4.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3l6vcrr4.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdpr2nbow.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdpr2nbow.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdpr2nbow.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdpr2nbow.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdpr2nbow.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdpr2nbow.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdpr2nbow.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdpr2nbow.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdpr2nbow.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdpr2nbow.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdpr2nbow.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdpr2nbow.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdpr2nbow.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the vector in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpty3quyh2.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty3quyh2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty3quyh2.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpty3quyh2.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty3quyh2.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty3quyh2.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpty3quyh2.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty3quyh2.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty3quyh2.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpty3quyh2.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty3quyh2.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty3quyh2.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpty3quyh2.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv0qsryps.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv0qsryps.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv0qsryps.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpv0qsryps.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv0qsryps.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv0qsryps.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpv0qsryps.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv0qsryps.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv0qsryps.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpv0qsryps.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv0qsryps.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv0qsryps.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv0qsryps.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoznt_ylq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoznt_ylq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoznt_ylq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpoznt_ylq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoznt_ylq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoznt_ylq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpoznt_ylq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoznt_ylq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoznt_ylq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpoznt_ylq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoznt_ylq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoznt_ylq.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoznt_ylq.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\
    \ of the sorted array\n    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxyxtdcfh.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyxtdcfh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyxtdcfh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxyxtdcfh.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyxtdcfh.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyxtdcfh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxyxtdcfh.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyxtdcfh.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyxtdcfh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxyxtdcfh.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyxtdcfh.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyxtdcfh.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxyxtdcfh.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4m3g5lkb.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4m3g5lkb.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4m3g5lkb.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4m3g5lkb.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4m3g5lkb.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4m3g5lkb.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4m3g5lkb.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4m3g5lkb.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4m3g5lkb.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4m3g5lkb.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4m3g5lkb.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4m3g5lkb.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4m3g5lkb.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5tnfln1_.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5tnfln1_.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5tnfln1_.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5tnfln1_.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5tnfln1_.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5tnfln1_.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5tnfln1_.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5tnfln1_.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5tnfln1_.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5tnfln1_.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5tnfln1_.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5tnfln1_.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5tnfln1_.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzls5wmi0.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzls5wmi0.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzls5wmi0.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpzls5wmi0.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzls5wmi0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzls5wmi0.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpzls5wmi0.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzls5wmi0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzls5wmi0.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpzls5wmi0.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzls5wmi0.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzls5wmi0.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzls5wmi0.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    # return the first k elements\n    return sort(arr)[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo92nugr5.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo92nugr5.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo92nugr5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpo92nugr5.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo92nugr5.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo92nugr5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpo92nugr5.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo92nugr5.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo92nugr5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpo92nugr5.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo92nugr5.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo92nugr5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpo92nugr5.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo92nugr5.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0je5gj8k.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0je5gj8k.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0je5gj8k.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp0je5gj8k.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0je5gj8k.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0je5gj8k.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp0je5gj8k.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0je5gj8k.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0je5gj8k.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp0je5gj8k.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0je5gj8k.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0je5gj8k.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0je5gj8k.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6dttacst.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6dttacst.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6dttacst.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp6dttacst.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6dttacst.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6dttacst.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp6dttacst.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6dttacst.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6dttacst.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp6dttacst.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6dttacst.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6dttacst.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6dttacst.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph8orkasf.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph8orkasf.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph8orkasf.jl:35\ntest set: Test\
    \ Failed at /tmp/tmph8orkasf.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph8orkasf.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph8orkasf.jl:35\ntest set: Test\
    \ Failed at /tmp/tmph8orkasf.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph8orkasf.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph8orkasf.jl:35\ntest set: Test\
    \ Failed at /tmp/tmph8orkasf.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph8orkasf.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph8orkasf.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph8orkasf.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg2xszc58.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg2xszc58.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg2xszc58.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpg2xszc58.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg2xszc58.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg2xszc58.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpg2xszc58.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg2xszc58.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg2xszc58.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpg2xszc58.jl:40\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg2xszc58.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg2xszc58.jl:34\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg2xszc58.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoz1lbd45.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoz1lbd45.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoz1lbd45.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpoz1lbd45.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoz1lbd45.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoz1lbd45.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpoz1lbd45.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoz1lbd45.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoz1lbd45.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpoz1lbd45.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoz1lbd45.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoz1lbd45.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoz1lbd45.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements of the sorted array\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpushrg44h.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpushrg44h.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpushrg44h.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpushrg44h.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpushrg44h.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpushrg44h.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpushrg44h.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpushrg44h.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpushrg44h.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpushrg44h.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpushrg44h.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpushrg44h.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpushrg44h.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqosa1nht.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqosa1nht.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqosa1nht.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqosa1nht.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqosa1nht.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqosa1nht.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqosa1nht.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqosa1nht.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqosa1nht.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqosa1nht.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqosa1nht.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqosa1nht.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqosa1nht.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    if n == k\n        return sort(arr)\n    end\n    if\
    \ k == 1\n        return [maximum(arr)]\n    end\n    if k == 2\n        return\
    \ sort([maximum(arr), minimum(arr)])\n    end\n    if k == 3\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr)])\n    end\n    if k == 4\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[1:end-1])])\n    end\n    if k == 5\n\
    \        return sort([maximum(arr), minimum(arr), median(arr), median(arr[1:end-1]),\
    \ median(arr[2:end])])\n    end\n    if k == 6\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[1:end-1]), median(arr[2:end]), median(arr[3:end-2])])\n\
    \    end\n    if k == 7\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[1:end-1]), median(arr[2:end]), median(arr[3:end-2]), median(arr[4:end-3])])\n\
    \    end\n    if k == 8\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[1:end-1]), median(arr[2:end]), median(arr[3:end-2]), median(arr[4:end-3]),\
    \ median(arr[5:end-4])])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[1:end-1]), median(arr[2:end]), median(arr[3:end-2]),\
    \ median(arr[4:end-3]), median(arr[5:end-4]), median(arr[6:end-5])])\n    end\n\
    \    if k == 10\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[1:end-1]), median(arr[2:end]), median(arr[3:end-2]), median(arr[4:end-\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ict7yvx.jl:1\nin expression starting at /tmp/tmp5ict7yvx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the vector\n    sort!(arr)\n    # return the last k elements\n   \
    \ return arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements of the sorted array\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj5ftxip_.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5ftxip_.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5ftxip_.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpj5ftxip_.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5ftxip_.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5ftxip_.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpj5ftxip_.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5ftxip_.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5ftxip_.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpj5ftxip_.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5ftxip_.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5ftxip_.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj5ftxip_.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the vector in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements of the sorted vector\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyknc2m10.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyknc2m10.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyknc2m10.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpyknc2m10.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyknc2m10.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyknc2m10.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpyknc2m10.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyknc2m10.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyknc2m10.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpyknc2m10.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyknc2m10.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyknc2m10.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyknc2m10.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    # return the first k elements\n    return sort(arr)[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9l27yief.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9l27yief.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9l27yief.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp9l27yief.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9l27yief.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9l27yief.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp9l27yief.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9l27yief.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9l27yief.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp9l27yief.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9l27yief.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9l27yief.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp9l27yief.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9l27yief.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvbxvdeg8.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvbxvdeg8.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvbxvdeg8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpvbxvdeg8.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvbxvdeg8.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvbxvdeg8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpvbxvdeg8.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvbxvdeg8.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvbxvdeg8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpvbxvdeg8.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvbxvdeg8.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvbxvdeg8.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvbxvdeg8.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp249w1786.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp249w1786.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp249w1786.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp249w1786.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp249w1786.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp249w1786.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp249w1786.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp249w1786.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp249w1786.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp249w1786.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp249w1786.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp249w1786.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp249w1786.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements of the sorted array\n    return arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa2aboyvi.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa2aboyvi.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa2aboyvi.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpa2aboyvi.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa2aboyvi.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa2aboyvi.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpa2aboyvi.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa2aboyvi.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa2aboyvi.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpa2aboyvi.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa2aboyvi.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa2aboyvi.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa2aboyvi.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the vector in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp00kzomey.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00kzomey.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00kzomey.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp00kzomey.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00kzomey.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00kzomey.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp00kzomey.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00kzomey.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00kzomey.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp00kzomey.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00kzomey.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00kzomey.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp00kzomey.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements of the sorted array\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpislrx3kg.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpislrx3kg.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpislrx3kg.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpislrx3kg.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpislrx3kg.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpislrx3kg.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpislrx3kg.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpislrx3kg.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpislrx3kg.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpislrx3kg.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpislrx3kg.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpislrx3kg.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpislrx3kg.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the vector\n    sort!(arr)\n    # Return the last k elements\n   \
    \ return arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqgob8e9w.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgob8e9w.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgob8e9w.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqgob8e9w.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgob8e9w.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgob8e9w.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqgob8e9w.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgob8e9w.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgob8e9w.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqgob8e9w.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgob8e9w.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgob8e9w.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqgob8e9w.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements of the sorted array\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphedx3ycj.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphedx3ycj.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphedx3ycj.jl:35\ntest set: Test\
    \ Failed at /tmp/tmphedx3ycj.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphedx3ycj.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphedx3ycj.jl:35\ntest set: Test\
    \ Failed at /tmp/tmphedx3ycj.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphedx3ycj.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphedx3ycj.jl:35\ntest set: Test\
    \ Failed at /tmp/tmphedx3ycj.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphedx3ycj.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphedx3ycj.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphedx3ycj.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp99dsh338.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99dsh338.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99dsh338.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp99dsh338.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99dsh338.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99dsh338.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp99dsh338.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99dsh338.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99dsh338.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp99dsh338.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99dsh338.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99dsh338.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp99dsh338.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\
    \ of the sorted array\n    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array\n    sorted_arr = sort(arr)\n    # Return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the vector\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements of the array\n    return arr[1:k]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb81uyjnp.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb81uyjnp.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb81uyjnp.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpb81uyjnp.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb81uyjnp.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb81uyjnp.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpb81uyjnp.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb81uyjnp.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb81uyjnp.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpb81uyjnp.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb81uyjnp.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb81uyjnp.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb81uyjnp.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkqo0d9n7.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqo0d9n7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqo0d9n7.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpkqo0d9n7.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqo0d9n7.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqo0d9n7.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpkqo0d9n7.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqo0d9n7.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqo0d9n7.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpkqo0d9n7.jl:40\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqo0d9n7.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqo0d9n7.jl:34\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkqo0d9n7.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    if k == n\n        return sort(arr)\n    end\n    if\
    \ k == 1\n        return [maximum(arr)]\n    end\n    if k == 2\n        return\
    \ sort([maximum(arr), minimum(arr)])\n    end\n    if k == 3\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr)])\n    end\n    if k == 4\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)])])\n    end\n   \
    \ if k == 5\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr[arr .!= median(arr)])])])\n\
    \    end\n    if k == 6\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr[arr .!= median(arr)])]),\
    \ median(arr[arr .!= median(arr[arr .!= median(arr[arr .!= median(arr)])])])])\n\
    \    end\n    if k == 7\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr[arr .!= median(arr)])]),\
    \ median(arr[arr .!= median(arr[arr .!= median(arr[arr .!= median(arr)])])]),\
    \ median(arr[arr .!= median(arr[arr .!= median(arr[arr .!= median(arr[arr .!=\
    \ median(arr)])])])])])\n    end\n    if k == 8\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr[arr .!= median(arr)])]), median(arr[arr .!= median(arr[arr .!=\
    \ median(arr[arr .!= median(arr)])])]), median(arr[\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph0xif9n4.jl:1\nin expression starting at /tmp/tmph0xif9n4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprqgdkl29.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqgdkl29.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqgdkl29.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprqgdkl29.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqgdkl29.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqgdkl29.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprqgdkl29.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqgdkl29.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqgdkl29.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprqgdkl29.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqgdkl29.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqgdkl29.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprqgdkl29.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2b48_1ds.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2b48_1ds.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2b48_1ds.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp2b48_1ds.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2b48_1ds.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2b48_1ds.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp2b48_1ds.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2b48_1ds.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2b48_1ds.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp2b48_1ds.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2b48_1ds.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2b48_1ds.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2b48_1ds.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    if k == n\n        return sort(arr)\n    end\n    if\
    \ k == 1\n        return [maximum(arr)]\n    end\n    if k == 2\n        return\
    \ sort([maximum(arr), minimum(arr)])\n    end\n    if k == 3\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr)])\n    end\n    if k == 4\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)])])\n    end\n   \
    \ if k == 5\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr[arr .!= median(arr)])])])\n\
    \    end\n    if k == 6\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr[arr .!= median(arr)])]),\
    \ median(arr[arr .!= median(arr[arr .!= median(arr[arr .!= median(arr)])])])])\n\
    \    end\n    if k == 7\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr[arr .!= median(arr)])]),\
    \ median(arr[arr .!= median(arr[arr .!= median(arr[arr .!= median(arr)])])]),\
    \ median(arr[arr .!= median(arr[arr .!= median(arr[arr .!= median(arr[arr .!=\
    \ median(arr)])])])])])\n    end\n    if k == 8\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr[arr .!= median(arr)])]), median(arr[arr .!= median(arr[arr .!=\
    \ median(arr[arr .!= median(arr)])])]), median(arr[\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwl3z161r.jl:1\nin expression starting at /tmp/tmpwl3z161r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpztdd3u5j.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztdd3u5j.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztdd3u5j.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpztdd3u5j.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztdd3u5j.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztdd3u5j.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpztdd3u5j.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztdd3u5j.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztdd3u5j.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpztdd3u5j.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztdd3u5j.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztdd3u5j.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpztdd3u5j.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcjn4g8wz.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjn4g8wz.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjn4g8wz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpcjn4g8wz.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjn4g8wz.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjn4g8wz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpcjn4g8wz.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjn4g8wz.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjn4g8wz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpcjn4g8wz.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjn4g8wz.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjn4g8wz.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcjn4g8wz.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # get the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array\n    sorted_arr = sort(arr)\n    # Return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # return the first k elements of the sorted array\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr0ypd3i4.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0ypd3i4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0ypd3i4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpr0ypd3i4.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0ypd3i4.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0ypd3i4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpr0ypd3i4.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0ypd3i4.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0ypd3i4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpr0ypd3i4.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0ypd3i4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0ypd3i4.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr0ypd3i4.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    if k == n\n        return sort(arr)\n    end\n    if\
    \ k == 1\n        return [maximum(arr)]\n    end\n    if k == 2\n        return\
    \ sort([maximum(arr), minimum(arr)])\n    end\n    if k == 3\n        return sort([maximum(arr),\
    \ minimum(arr), arr[n-1]])\n    end\n    if k == 4\n        return sort([maximum(arr),\
    \ minimum(arr), arr[n-1], arr[n-2]])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), arr[n-1], arr[n-2], arr[n-3]])\n    end\n    if k == 6\n     \
    \   return sort([maximum(arr), minimum(arr), arr[n-1], arr[n-2], arr[n-3], arr[n-4]])\n\
    \    end\n    if k == 7\n        return sort([maximum(arr), minimum(arr), arr[n-1],\
    \ arr[n-2], arr[n-3], arr[n-4], arr[n-5]])\n    end\n    if k == 8\n        return\
    \ sort([maximum(arr), minimum(arr), arr[n-1], arr[n-2], arr[n-3], arr[n-4], arr[n-5],\
    \ arr[n-6]])\n    end\n    if k == 9\n        return sort([maximum(arr), minimum(arr),\
    \ arr[n-1], arr[n-2], arr[n-3], arr[n-4], arr[n-5], arr[n-6], arr[n-7]])\n   \
    \ end\n    if k == 10\n        return sort([maximum(arr), minimum(arr), arr[n-1],\
    \ arr[n-2], arr[n-3], arr[n-4], arr[n-5], arr[n-6], arr[n-7], arr[n-8]])\n   \
    \ end\n    if k == 11\n        return sort([maximum(arr), minimum(arr), arr[n-1],\
    \ arr[n-2], arr[n-3], arr[n-4], arr[n-5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuhet09fr.jl:1\nin expression starting at /tmp/tmpuhet09fr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    # return the first k elements\n    sort(arr)[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5f9qgxih.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5f9qgxih.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5f9qgxih.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp5f9qgxih.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5f9qgxih.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5f9qgxih.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp5f9qgxih.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5f9qgxih.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5f9qgxih.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp5f9qgxih.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5f9qgxih.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5f9qgxih.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp5f9qgxih.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5f9qgxih.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the vector\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ivscle4.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ivscle4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ivscle4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp9ivscle4.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ivscle4.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ivscle4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp9ivscle4.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ivscle4.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ivscle4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp9ivscle4.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ivscle4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ivscle4.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ivscle4.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpykp910jw.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpykp910jw.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpykp910jw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpykp910jw.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpykp910jw.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpykp910jw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpykp910jw.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpykp910jw.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpykp910jw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpykp910jw.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpykp910jw.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpykp910jw.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpykp910jw.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb9kos26f.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9kos26f.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9kos26f.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpb9kos26f.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9kos26f.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9kos26f.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpb9kos26f.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9kos26f.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9kos26f.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpb9kos26f.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9kos26f.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9kos26f.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb9kos26f.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array and return the first k elements\n    return sort(arr)[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqxp2b17b.jl:35\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqxp2b17b.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqxp2b17b.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqxp2b17b.jl:36\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqxp2b17b.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqxp2b17b.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqxp2b17b.jl:37\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqxp2b17b.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqxp2b17b.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqxp2b17b.jl:38\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqxp2b17b.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqxp2b17b.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqxp2b17b.jl:40\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqxp2b17b.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sort!(arr, rev=true)\n    # return\
    \ the first k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp48igkvj9.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48igkvj9.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48igkvj9.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp48igkvj9.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48igkvj9.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48igkvj9.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp48igkvj9.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48igkvj9.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48igkvj9.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp48igkvj9.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48igkvj9.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48igkvj9.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp48igkvj9.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the vector in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements of the sorted vector\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3cmdrxrd.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cmdrxrd.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cmdrxrd.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp3cmdrxrd.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cmdrxrd.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cmdrxrd.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp3cmdrxrd.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cmdrxrd.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cmdrxrd.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp3cmdrxrd.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cmdrxrd.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cmdrxrd.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3cmdrxrd.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    # return the last k elements\n    sort(arr)[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the vector\n    sorted_arr = sort(arr)\n    # return the last k elements\
    \ of the sorted vector\n    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted = sort(arr)\n    # return the last k elements\n\
    \    return sorted[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array\n    sorted_arr = sort(arr)\n    # Return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the vector\n    sort!(arr)\n    # return the last k elements\n   \
    \ return arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvu1lmy9q.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvu1lmy9q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvu1lmy9q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpvu1lmy9q.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvu1lmy9q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvu1lmy9q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpvu1lmy9q.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvu1lmy9q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvu1lmy9q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpvu1lmy9q.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvu1lmy9q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvu1lmy9q.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvu1lmy9q.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9_iwsvbv.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_iwsvbv.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_iwsvbv.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp9_iwsvbv.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_iwsvbv.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_iwsvbv.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp9_iwsvbv.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_iwsvbv.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_iwsvbv.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp9_iwsvbv.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_iwsvbv.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_iwsvbv.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9_iwsvbv.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    if k == n\n        return sort(arr)\n    end\n    if\
    \ k == 1\n        return [maximum(arr)]\n    end\n    if k == 2\n        return\
    \ sort([maximum(arr), minimum(arr)])\n    end\n    if k == 3\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr)])\n    end\n    if k == 4\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)])])\n    end\n   \
    \ if k == 5\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k ==\
    \ 6\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)])])\n\
    \    end\n    if k == 7\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k ==\
    \ 8\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n\
    \    if k == 9\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt89f4tgw.jl:56\nin expression starting at\
    \ /tmp/tmpt89f4tgw.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    # return the first k elements\n    return sort(arr)[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkm3ffrln.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkm3ffrln.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkm3ffrln.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpkm3ffrln.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkm3ffrln.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkm3ffrln.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpkm3ffrln.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkm3ffrln.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkm3ffrln.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpkm3ffrln.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkm3ffrln.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkm3ffrln.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpkm3ffrln.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkm3ffrln.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements of the sorted array\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbtvq7pla.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbtvq7pla.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbtvq7pla.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbtvq7pla.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbtvq7pla.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbtvq7pla.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbtvq7pla.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbtvq7pla.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbtvq7pla.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbtvq7pla.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbtvq7pla.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbtvq7pla.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbtvq7pla.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements of the sorted array\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxmzame_j.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxmzame_j.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxmzame_j.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxmzame_j.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxmzame_j.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxmzame_j.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxmzame_j.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxmzame_j.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxmzame_j.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxmzame_j.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxmzame_j.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxmzame_j.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxmzame_j.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpibwclpq7.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpibwclpq7.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpibwclpq7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpibwclpq7.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpibwclpq7.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpibwclpq7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpibwclpq7.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpibwclpq7.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpibwclpq7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpibwclpq7.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpibwclpq7.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpibwclpq7.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpibwclpq7.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array\n    sorted_arr = sort(arr)\n    # Return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    heap = Heap(arr)\n    return pop!(heap, k)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3qem0m1j.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp3qem0m1j.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3qem0m1j.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3qem0m1j.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp3qem0m1j.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp3qem0m1j.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3qem0m1j.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3qem0m1j.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp3qem0m1j.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp3qem0m1j.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3qem0m1j.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3qem0m1j.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp3qem0m1j.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ Heap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int6"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3qem0m1j.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array\n    sort!(arr)\n    # Return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements of the sorted array\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplnhl9qx0.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplnhl9qx0.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplnhl9qx0.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplnhl9qx0.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplnhl9qx0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplnhl9qx0.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplnhl9qx0.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplnhl9qx0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplnhl9qx0.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplnhl9qx0.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplnhl9qx0.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplnhl9qx0.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplnhl9qx0.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp2kqyvqx.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp2kqyvqx.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp2kqyvqx.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpp2kqyvqx.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp2kqyvqx.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp2kqyvqx.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpp2kqyvqx.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp2kqyvqx.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp2kqyvqx.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpp2kqyvqx.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp2kqyvqx.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp2kqyvqx.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp2kqyvqx.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcx9pfr0z.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcx9pfr0z.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcx9pfr0z.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpcx9pfr0z.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcx9pfr0z.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcx9pfr0z.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpcx9pfr0z.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcx9pfr0z.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcx9pfr0z.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpcx9pfr0z.jl:40\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcx9pfr0z.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcx9pfr0z.jl:34\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcx9pfr0z.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8aezde1o.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8aezde1o.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8aezde1o.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8aezde1o.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8aezde1o.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8aezde1o.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8aezde1o.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8aezde1o.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8aezde1o.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8aezde1o.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8aezde1o.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8aezde1o.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8aezde1o.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the vector\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the vector\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\
    \ of the sorted array\n    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    if k == n\n        return sort(arr)\n    end\n    if\
    \ k == 1\n        return [maximum(arr)]\n    end\n    if k == 2\n        return\
    \ sort([maximum(arr), minimum(arr)])\n    end\n    if k == 3\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr)])\n    end\n    if k > n\n        return sort(arr)\n\
    \    end\n    if k < n\n        return sort(arr)[end-k+1:end]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_hpfu94u.jl:52\n  Test threw exception\n\
    \  Expression: candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n \
    \ Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp_hpfu94u.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp_hpfu94u.jl:34\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_hpfu94u.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_hpfu94u.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp_hpfu94u.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n \
    \ Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp_hpfu94u.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp_hpfu94u.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_hpfu94u.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_hpfu94u.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp_hpfu94u.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: no\
    \ method matching maximum(::Vector{Int64})\n  You may have intended to import\
    \ Base.maximum\n  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64)\
    \ at /tmp/tmp_hpfu94u.jl:25\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmp_hpfu94u.jl:37\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_hpfu94u.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements of the array\n    return arr[1:k]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnez65zku.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnez65zku.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnez65zku.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpnez65zku.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnez65zku.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnez65zku.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpnez65zku.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnez65zku.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnez65zku.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpnez65zku.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnez65zku.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnez65zku.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnez65zku.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\
    \ of the sorted array\n    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0\n        return []\n    end\n    if k == 1\n        return [maximum(arr)]\n\
    \    end\n    if k == length(arr)\n        return sort(arr)\n    end\n    if k\
    \ > length(arr)\n        return sort(arr)\n    end\n    return sort(arr)[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp22whvpc0.jl:47\n  Test threw exception\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no\
    \ method matching maximum(::Vector{Int64})\n  You may have intended to import\
    \ Base.maximum\n  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64)\
    \ at /tmp/tmp22whvpc0.jl:25\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmp22whvpc0.jl:30\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp22whvpc0.jl:47 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp22whvpc0.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp22whvpc0.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 5, -7], 1) == [5]\n  MethodError: no method matching maximum(::Vector{Int64})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp22whvpc0.jl:25\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp22whvpc0.jl:30\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp22whvpc0.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp22whvpc0.jl:44\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    9      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp22whvpc0.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp83t8dser.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83t8dser.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83t8dser.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp83t8dser.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83t8dser.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83t8dser.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp83t8dser.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83t8dser.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83t8dser.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp83t8dser.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83t8dser.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83t8dser.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp83t8dser.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\
    \ of the sorted array\n    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in reverse order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvbwn4nm0.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvbwn4nm0.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvbwn4nm0.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpvbwn4nm0.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvbwn4nm0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvbwn4nm0.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpvbwn4nm0.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvbwn4nm0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvbwn4nm0.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpvbwn4nm0.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvbwn4nm0.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvbwn4nm0.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvbwn4nm0.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements of the sorted array\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpln99it0r.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpln99it0r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln99it0r.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpln99it0r.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpln99it0r.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln99it0r.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpln99it0r.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpln99it0r.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln99it0r.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpln99it0r.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpln99it0r.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln99it0r.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpln99it0r.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array and return the last k elements\n    sort(arr)[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # return the first k elements of the sorted array\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpixktfgzz.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpixktfgzz.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpixktfgzz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpixktfgzz.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpixktfgzz.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpixktfgzz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpixktfgzz.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpixktfgzz.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpixktfgzz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpixktfgzz.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpixktfgzz.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpixktfgzz.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpixktfgzz.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    # return the first k elements\n    sort(arr)[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjve875se.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjve875se.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjve875se.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpjve875se.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjve875se.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjve875se.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpjve875se.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjve875se.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjve875se.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpjve875se.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjve875se.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjve875se.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpjve875se.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjve875se.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array and return the first k elements\n    sort!(arr)\n    return\
    \ arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5t3ob5m2.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5t3ob5m2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5t3ob5m2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp5t3ob5m2.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5t3ob5m2.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5t3ob5m2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp5t3ob5m2.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5t3ob5m2.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5t3ob5m2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp5t3ob5m2.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5t3ob5m2.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5t3ob5m2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp5t3ob5m2.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5t3ob5m2.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp63et1y12.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp63et1y12.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp63et1y12.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp63et1y12.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp63et1y12.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp63et1y12.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp63et1y12.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array\n    sort!(arr)\n    # Return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmply_8qgs6.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmply_8qgs6.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmply_8qgs6.jl:35\ntest set: Test\
    \ Failed at /tmp/tmply_8qgs6.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmply_8qgs6.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmply_8qgs6.jl:35\ntest set: Test\
    \ Failed at /tmp/tmply_8qgs6.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmply_8qgs6.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmply_8qgs6.jl:35\ntest set: Test\
    \ Failed at /tmp/tmply_8qgs6.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmply_8qgs6.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmply_8qgs6.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmply_8qgs6.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array\n    sort!(arr)\n    # Return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4lqi2qwc.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4lqi2qwc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4lqi2qwc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4lqi2qwc.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4lqi2qwc.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4lqi2qwc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4lqi2qwc.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4lqi2qwc.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4lqi2qwc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4lqi2qwc.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4lqi2qwc.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4lqi2qwc.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4lqi2qwc.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    # return the first k elements\n    return sort(arr)[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz4w5e01d.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz4w5e01d.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz4w5e01d.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpz4w5e01d.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz4w5e01d.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz4w5e01d.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpz4w5e01d.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz4w5e01d.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz4w5e01d.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpz4w5e01d.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz4w5e01d.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz4w5e01d.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpz4w5e01d.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz4w5e01d.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the vector in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5navechi.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5navechi.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5navechi.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5navechi.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5navechi.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5navechi.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5navechi.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5navechi.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5navechi.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5navechi.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5navechi.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5navechi.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5navechi.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    # return the first k elements\n    return sort(arr)[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq3f5sn48.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3f5sn48.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3f5sn48.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpq3f5sn48.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3f5sn48.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3f5sn48.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpq3f5sn48.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3f5sn48.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3f5sn48.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpq3f5sn48.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3f5sn48.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3f5sn48.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpq3f5sn48.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) ="
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq3f5sn48.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjgq7y1jn.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjgq7y1jn.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjgq7y1jn.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjgq7y1jn.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjgq7y1jn.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjgq7y1jn.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjgq7y1jn.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjgq7y1jn.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjgq7y1jn.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjgq7y1jn.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjgq7y1jn.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjgq7y1jn.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjgq7y1jn.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzcsskqb8.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzcsskqb8.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzcsskqb8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpzcsskqb8.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzcsskqb8.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzcsskqb8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpzcsskqb8.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzcsskqb8.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzcsskqb8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpzcsskqb8.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzcsskqb8.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzcsskqb8.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzcsskqb8.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    pq = PriorityQueue{Int64, Int64}()\n    for i in 1:k\n        push!(pq, arr[i])\n\
    \    end\n    for i in k+1:length(arr)\n        if arr[i] > peek(pq)\n       \
    \     pop!(pq)\n            push!(pq, arr[i])\n        end\n    end\n    return\
    \ sort(collect(pq))\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbu7rbw20.jl:43\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: PriorityQueue\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpbu7rbw20.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbu7rbw20.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbu7rbw20.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpbu7rbw20.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: PriorityQueue not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpbu7rbw20.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbu7rbw20.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbu7rbw20.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpbu7rbw20.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: PriorityQueue\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpbu7rbw20.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbu7rbw20.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbu7rbw20.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpbu7rbw20.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ PriorityQueue not defined\n  Stacktrace:\n   [1]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbu7rbw20.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    if n == k\n        return sort(arr)\n    end\n    if\
    \ k == 1\n        return [maximum(arr)]\n    end\n    if k == 2\n        if arr[1]\
    \ > arr[2]\n            return [arr[1], arr[2]]\n        else\n            return\
    \ [arr[2], arr[1]]\n        end\n    end\n    if k == 3\n        if arr[1] > arr[2]\n\
    \            if arr[2] > arr[3]\n                return [arr[1], arr[2], arr[3]]\n\
    \            elseif arr[1] > arr[3]\n                return [arr[1], arr[3], arr[2]]\n\
    \            else\n                return [arr[3], arr[1], arr[2]]\n         \
    \   end\n        else\n            if arr[1] > arr[3]\n                return\
    \ [arr[2], arr[1], arr[3]]\n            elseif arr[2] > arr[3]\n             \
    \   return [arr[2], arr[3], arr[1]]\n            else\n                return\
    \ [arr[3], arr[2], arr[1]]\n            end\n        end\n    end\n    if k ==\
    \ 4\n        if arr[1] > arr[2]\n            if arr[2] > arr[3]\n            \
    \    if arr[3] > arr[4]\n                    return [arr[1], arr[2], arr[3], arr[4]]\n\
    \                elseif arr[1] > arr[4]\n                    return [arr[1], arr[4],\
    \ arr[3], arr[2]]\n                else\n                    return [arr[4], arr[1],\
    \ arr[3], arr[2]]\n                end\n            elseif arr[1] > arr[3]\n \
    \               if arr[3] > arr[4]\n                    return [arr[1], arr[3],\
    \ arr[4], arr[2]]\n                elseif arr[1] > arr[4]\n                  \
    \  return [arr[1], arr[4], arr[3], arr[2]]\n                else\n           \
    \         return [arr[4], arr[1], arr[3], arr[2]]\n                end\n     \
    \       else\n                if arr[1]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpur330o_2.jl:1\nin expression starting at /tmp/tmpur330o_2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Initialize a vector of length k\n    max_k = zeros(Int64, k)\n    # Initialize\
    \ a counter\n    counter = 0\n    # Loop through the array\n    for i in 1:length(arr)\n\
    \        # If the counter is less than k, add the element to the max_k vector\n\
    \        if counter < k\n            max_k[counter + 1] = arr[i]\n           \
    \ counter += 1\n        # If the counter is equal to k, check if the current element\
    \ is greater than the minimum of the max_k vector\n        elseif counter == k\n\
    \            # If the current element is greater than the minimum of the max_k\
    \ vector, replace the minimum with the current element\n            if arr[i]\
    \ > minimum(max_k)\n                max_k[findmin(max_k)[2]] = arr[i]\n      \
    \      end\n        end\n    end\n    # Sort the max_k vector\n    sort!(max_k)\n\
    \    # Return the max_k vector\n    return max_k\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr03z21sk.jl:64\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n\
    \  ArgumentError: reducing over an empty collection is not allowed\n  Stacktrace:\n\
    \    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function,\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_minimum#753\n      @ ./reducedim.jl:894 [inlined]\n   [12] _minimum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_minimum#752\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _minimum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #minimum#750\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] minimum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] maximum(arr::Vector{Int64}, k::Int64)\n      @ Main /tmp/tmpr03z21sk.jl:39\n\
    \   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpr03z21sk.jl:64 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpr03z21sk.jl:53\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |   10      1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr03z21sk.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the vector\n    sort!(arr)\n    # return the last k elements\n   \
    \ return arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp27yf6agy.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp27yf6agy.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp27yf6agy.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp27yf6agy.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp27yf6agy.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp27yf6agy.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp27yf6agy.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp27yf6agy.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp27yf6agy.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp27yf6agy.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp27yf6agy.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp27yf6agy.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp27yf6agy.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0\n        return []\n    end\n    if k == 1\n        return [maximum(arr)]\n\
    \    end\n    if k == length(arr)\n        return sort(arr)\n    end\n    if k\
    \ > length(arr)\n        return sort(arr)\n    end\n    return sort(arr)[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1jrc7rcu.jl:47\n  Test threw exception\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no\
    \ method matching maximum(::Vector{Int64})\n  You may have intended to import\
    \ Base.maximum\n  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64)\
    \ at /tmp/tmp1jrc7rcu.jl:25\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmp1jrc7rcu.jl:30\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1jrc7rcu.jl:47 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1jrc7rcu.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp1jrc7rcu.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 5, -7], 1) == [5]\n  MethodError: no method matching maximum(::Vector{Int64})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp1jrc7rcu.jl:25\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp1jrc7rcu.jl:30\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1jrc7rcu.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1jrc7rcu.jl:44\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    9      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1jrc7rcu.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq9h3ixve.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq9h3ixve.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq9h3ixve.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq9h3ixve.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq9h3ixve.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq9h3ixve.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq9h3ixve.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq9h3ixve.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq9h3ixve.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq9h3ixve.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq9h3ixve.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq9h3ixve.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq9h3ixve.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements of the sorted array\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpynn4mhz8.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynn4mhz8.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynn4mhz8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpynn4mhz8.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynn4mhz8.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynn4mhz8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpynn4mhz8.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynn4mhz8.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynn4mhz8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpynn4mhz8.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynn4mhz8.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynn4mhz8.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpynn4mhz8.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsm9__bpc.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsm9__bpc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsm9__bpc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsm9__bpc.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsm9__bpc.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsm9__bpc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsm9__bpc.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsm9__bpc.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsm9__bpc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsm9__bpc.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsm9__bpc.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsm9__bpc.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsm9__bpc.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx0iqpqx2.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0iqpqx2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0iqpqx2.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx0iqpqx2.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0iqpqx2.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0iqpqx2.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx0iqpqx2.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0iqpqx2.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0iqpqx2.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx0iqpqx2.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0iqpqx2.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0iqpqx2.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx0iqpqx2.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1sfvbejq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sfvbejq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sfvbejq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp1sfvbejq.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sfvbejq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sfvbejq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp1sfvbejq.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sfvbejq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sfvbejq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp1sfvbejq.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sfvbejq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sfvbejq.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1sfvbejq.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb2kvzpeo.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb2kvzpeo.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2kvzpeo.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpb2kvzpeo.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb2kvzpeo.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2kvzpeo.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpb2kvzpeo.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb2kvzpeo.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2kvzpeo.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpb2kvzpeo.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb2kvzpeo.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2kvzpeo.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb2kvzpeo.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyzswge18.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyzswge18.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyzswge18.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpyzswge18.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyzswge18.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyzswge18.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpyzswge18.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyzswge18.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyzswge18.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpyzswge18.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyzswge18.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyzswge18.jl:35\ntest set: Test\
    \ Failed "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyzswge18.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    if k == n\n        return sort(arr)\n    end\n    if\
    \ k == 1\n        return [maximum(arr)]\n    end\n    if k == 2\n        return\
    \ sort([maximum(arr), minimum(arr)])\n    end\n    return sort(maximum(arr[1:k-1],\
    \ k-1) .* maximum(arr[k:n], k-1))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp59_7srs7.jl:44\\n  Test threw\
    \ exception\\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\\n  MethodError:\
    \ no method matching maximum(::Vector{Int64})\\n  You may have intended to import\
    \ Base.maximum\\n  Closest candidates are:\\n    maximum(::Vector{Int64}, !Matched::Int64)\
    \ at /tmp/tmp59_7srs7.jl:25\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmp59_7srs7.jl:34\\n   [2] macro expansion\\n \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp59_7srs7.jl:44 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp59_7srs7.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmp59_7srs7.jl:45\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\\n  You may have intended to import Base.maximum\\\
    n  Closest candidates are:\\n    maximum(::Vector{Int64}, !Matched::Int64) at\
    \ /tmp/tmp59_7srs7.jl:25\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmp59_7srs7.jl:31\\n   [2] macro expansion\\n \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp59_7srs7.jl:45 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp59_7srs7.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmp59_7srs7.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  MethodError:\
    \ no method matching maximum(::Vector{Int64})\\n  You may have intended to import\
    \ Base.maximum\\n  Closest candidates are:\\n    maximum(::Vector{Int64}, !Matched::Int64)\
    \ at /tmp/tmp59_7srs7.jl:25\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmp59_7srs7.jl:34\\n   [2] "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the vector\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sort!(arr)\n    # return the last k elements\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    sorted_arr = sort(arr)\n    # return the last k elements\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
