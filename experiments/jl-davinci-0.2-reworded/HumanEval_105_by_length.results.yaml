name: HumanEval_105_by_length
language: jl
results:
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    # Return the\
    \ vector\n    return reversed_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpov8eb8un.jl:53\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpov8eb8un.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpov8eb8un.jl:53 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpov8eb8un.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpov8eb8un.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpov8eb8un.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpov8eb8un.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphvzzxrml.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphvzzxrml.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphvzzxrml.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphvzzxrml.jl:29\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphvzzxrml.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphvzzxrml.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphvzzxrml.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphvzzxrml.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphvzzxrml.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphvzzxrml.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: String[] == [\"Nine\", \"Eight\",\
    \ \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphvzzxrml.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphvzzxrml.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptwmv20ob.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmptwmv20ob.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptwmv20ob.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptwmv20ob.jl:25\ntest set:\
    \ Error During Test at /tmp/tmptwmv20ob.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmptwmv20ob.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptwmv20ob.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Create a vector of strings\n  \
    \  strings_arr = []\n    # Loop through the vector and append the corresponding\
    \ string to the vector\n    for i in reversed_arr\n        if i == 1\n       \
    \     push!(strings_arr, \"One\")\n        elseif i == 2\n            push!(strings_arr,\
    \ \"Two\")\n        elseif i == 3\n            push!(strings_arr, \"Three\")\n\
    \        elseif i == 4\n            push!(strings_arr, \"Four\")\n        elseif\
    \ i == 5\n            push!(strings_arr, \"Five\")\n        elseif i == 6\n  \
    \          push!(strings_arr, \"Six\")\n        elseif i == 7\n            push!(strings_arr,\
    \ \"Seven\")\n        elseif i == 8\n            push!(strings_arr, \"Eight\"\
    )\n        elseif i == 9\n            push!(strings_arr, \"Nine\")\n        end\n\
    \    end\n    # Return the vector of strings\n    return strings_arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    result = []\n    for i in reversed_arr\n        if i == 1\n      \
    \      push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplf_09_q0.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplf_09_q0.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplf_09_q0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmplf_09_q0.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplf_09_q0.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplf_09_q0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmplf_09_q0.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplf_09_q0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplf_09_q0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmplf_09_q0.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplf_09_q0.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplf_09_q0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr)\n    arr = reverse(arr)\n    for i in 1:length(arr)\n\
    \        if arr[i] == 1\n            arr[i] = \"One\"\n        elseif arr[i] ==\
    \ 2\n            arr[i] = \"Two\"\n        elseif arr[i] == 3\n            arr[i]\
    \ = \"Three\"\n        elseif arr[i] == 4\n            arr[i] = \"Four\"\n   \
    \     elseif arr[i] == 5\n            arr[i] = \"Five\"\n        elseif arr[i]\
    \ == 6\n            arr[i] = \"Six\"\n        elseif arr[i] == 7\n           \
    \ arr[i] = \"Seven\"\n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\
    \n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\n        else\n  \
    \          arr[i] = \"\"\n        end\n    end\n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprw3fezuh.jl:51\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmprw3fezuh.jl:37\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprw3fezuh.jl:51 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprw3fezuh.jl:50\ntest set:\
    \ Error During Test at /tmp/tmprw3fezuh.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmprw3fezuh.jl:41\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprw3fezuh.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnsq2t9ks.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsq2t9ks.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsq2t9ks.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnsq2t9ks.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsq2t9ks.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsq2t9ks.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnsq2t9ks.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsq2t9ks.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsq2t9ks.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnsq2t9ks.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsq2t9ks.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnsq2t9ks.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptddcrbb1.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmptddcrbb1.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptddcrbb1.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptddcrbb1.jl:51\ntest set:\
    \ Error During Test at /tmp/tmptddcrbb1.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmptddcrbb1.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptddcrbb1.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvl2dtx83.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpvl2dtx83.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvl2dtx83.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvl2dtx83.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpvl2dtx83.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpvl2dtx83.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvl2dtx83.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppv_1id5d.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmppv_1id5d.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppv_1id5d.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppv_1id5d.jl:51\ntest set:\
    \ Error During Test at /tmp/tmppv_1id5d.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmppv_1id5d.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppv_1id5d.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5lm9jt7z.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp5lm9jt7z.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5lm9jt7z.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5lm9jt7z.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp5lm9jt7z.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp5lm9jt7z.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5lm9jt7z.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo16kms38.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpo16kms38.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo16kms38.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo16kms38.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpo16kms38.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpo16kms38.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo16kms38.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Filter the vector to only include\
    \ numbers between 1 and 9\n    filtered_arr = filter(x -> x >= 1 && x <= 9, reversed_arr)\n\
    \    # Map the vector to the corresponding string\n    mapped_arr = map(x -> string(x),\
    \ filtered_arr)\n    # Return the mapped vector\n    return mapped_arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmgknolik.jl:35\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmgknolik.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmgknolik.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpmgknolik.jl:37\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmgknolik.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmgknolik.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpmgknolik.jl:38\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmgknolik.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmgknolik.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpmgknolik.jl:39\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmgknolik.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmgknolik.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    # Create a dictionary\n    d = Dict(\"One\" => 1, \"\
    Two\" => 2, \"Three\" => 3, \"Four\" => 4, \"Five\" => 5, \"Six\" => 6, \"Seven\"\
    \ => 7, \"Eight\" => 8, \"Nine\" => 9)\n    # Create a vector of strings\n   \
    \ string_arr = []\n    # Loop over the reversed vector\n    for i in reversed_arr\n\
    \        # Check if the value is between 1 and 9 inclusive\n        if i in values(d)\n\
    \            # Append the corresponding string to the vector\n            push!(string_arr,\
    \ d[i])\n        end\n    end\n    # Return the vector\n    return string_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptwh4j0dj.jl:44\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  KeyError: key 8 not\
    \ found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Int64)\n\
    \     @ Base ./dict.jl:481\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmptwh4j0dj.jl:33\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptwh4j0dj.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptwh4j0dj.jl:43\ntest set:\
    \ Error During Test at /tmp/tmptwh4j0dj.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  KeyError: key 1 not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Int64)\n     @ Base ./dict.jl:481\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmptwh4j0dj.jl:33\n  \
    \ [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptwh4j0dj.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptwh4j0dj.jl:43\ntest set:\
    \ Error During Test at /tmp/tmptwh4j0dj.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  KeyError: key 3\
    \ not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Int64)\n\
    \     @ Base ./dict.jl:481\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmptwh4j0dj.jl:33\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptwh4j0dj.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptwh4j0dj.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4h0lnuzt.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp4h0lnuzt.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4h0lnuzt.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4h0lnuzt.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp4h0lnuzt.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp4h0lnuzt.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4h0lnuzt.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    new_arr = []\n    for i in reversed_arr\n        if i == 1\n     \
    \       push!(new_arr, \"One\")\n        elseif i == 2\n            push!(new_arr,\
    \ \"Two\")\n        elseif i == 3\n            push!(new_arr, \"Three\")\n   \
    \     elseif i == 4\n            push!(new_arr, \"Four\")\n        elseif i ==\
    \ 5\n            push!(new_arr, \"Five\")\n        elseif i == 6\n           \
    \ push!(new_arr, \"Six\")\n        elseif i == 7\n            push!(new_arr, \"\
    Seven\")\n        elseif i == 8\n            push!(new_arr, \"Eight\")\n     \
    \   elseif i == 9\n            push!(new_arr, \"Nine\")\n        end\n    end\n\
    \    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    # Create a dictionary\n    dict = Dict(\"1\" => \"\
    One\", \"2\" => \"Two\", \"3\" => \"Three\", \"4\" => \"Four\", \"5\" => \"Five\"\
    , \"6\" => \"Six\", \"7\" => \"Seven\", \"8\" => \"Eight\", \"9\" => \"Nine\"\
    )\n    # Create a new vector\n    new_arr = []\n    # Loop through the reversed_arr\n\
    \    for i in reversed_arr\n        # Check if the number is between 1 and 9\n\
    \        if i >= 1 && i <= 9\n            # Push the corresponding name to the\
    \ new vector\n            push!(new_arr, dict[string(i)])\n        end\n    end\n\
    \    # Return the new vector\n    return new_arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Filter the vector\n    filtered_arr\
    \ = filter(x -> x >= 1 && x <= 9, reversed_arr)\n    # Map the vector\n    mapped_arr\
    \ = map(x -> string(x), filtered_arr)\n    # Return the vector\n    return mapped_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp79rykw30.jl:35\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp79rykw30.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp79rykw30.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp79rykw30.jl:37\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp79rykw30.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp79rykw30.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp79rykw30.jl:38\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp79rykw30.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp79rykw30.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp79rykw30.jl:39\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp79rykw30.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp79rykw30.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Your code here\n    return []\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxw4oes8u.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxw4oes8u.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxw4oes8u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxw4oes8u.jl:29\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxw4oes8u.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxw4oes8u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxw4oes8u.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxw4oes8u.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxw4oes8u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxw4oes8u.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: String[] == [\"Nine\", \"Eight\",\
    \ \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxw4oes8u.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxw4oes8u.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr[arr .> 0 .& arr .< 10])\n    arr = reverse(arr)\n    for\
    \ i in 1:length(arr)\n        arr[i] = string(arr[i])\n    end\n    return arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv6t2s2an.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\\n  Closest\
    \ candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\\\
    n     @ Base ./array.jl:903\\n   [2] by_length(arr::Vector{Int64})\\n     @ Main\
    \ /tmp/tmpv6t2s2an.jl:22\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpv6t2s2an.jl:31 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpv6t2s2an.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpv6t2s2an.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\\n  Closest candidates are:\\n   \
    \ convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\\\
    n     @ Base ./array.jl:903\\n   [2] by_length(arr::Vector{Int64})\\n     @ Main\
    \ /tmp/tmpv6t2s2an.jl:22\\n   [3] macro expansion\\n     @ /sha"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sort!(arr)\n    # reverse the vector\n    reverse!(arr)\n\
    \    # replace the numbers by their names\n    for i in 1:length(arr)\n      \
    \  if arr[i] == 1\n            arr[i] = \"One\"\n        elseif arr[i] == 2\n\
    \            arr[i] = \"Two\"\n        elseif arr[i] == 3\n            arr[i]\
    \ = \"Three\"\n        elseif arr[i] == 4\n            arr[i] = \"Four\"\n   \
    \     elseif arr[i] == 5\n            arr[i] = \"Five\"\n        elseif arr[i]\
    \ == 6\n            arr[i] = \"Six\"\n        elseif arr[i] == 7\n           \
    \ arr[i] = \"Seven\"\n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\
    \n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\n        else\n  \
    \          arr[i] = \"\"\n        end\n    end\n    # remove the empty strings\n\
    \    arr = filter(x -> x != \"\", arr)\n    return arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp9f_i3w1_.jl:56\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9f_i3w1_.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9f_i3w1_.jl:56 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9f_i3w1_.jl:55\ntest set:\
    \ Error During Test at /tmp/tmp9f_i3w1_.jl:58\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9f_i3w1_.jl:44\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9f_i3w1_.jl:53\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp58m5d556.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp58m5d556.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp58m5d556.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp58m5d556.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp58m5d556.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp58m5d556.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp58m5d556.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa4dbpwfz.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpa4dbpwfz.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa4dbpwfz.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa4dbpwfz.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpa4dbpwfz.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpa4dbpwfz.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa4dbpwfz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = [replace(i) for i in reversed_arr]\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg2tnaw5f.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching promote_valuetype()\n  Closest candidates are:\n    promote_valuetype(!Matched::Pair{K,\
    \ V}) where {K, V} at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:580\n\
    \    promote_valuetype(!Matched::Pair{K, V}, !Matched::Pair...) where {K, V} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/set.jl:581\n  Stacktrace:\n   \
    \ [1] replace(::Int64; count::Nothing)\n      @ Base ./set.jl:570\n    [2] replace(::Int64)\n\
    \      @ Base ./set.jl:570\n    [3] (::var\"#1#2\")(i::Int64)\n      @ Main ./none:0\n\
    \    [4] iterate\n      @ ./generator.jl:47 [inlined]\n    [5] collect\n     \
    \ @ ./array.jl:724 [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main\
    \ /tmp/tmpg2tnaw5f.jl:24\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpg2tnaw5f.jl:32 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpg2tnaw5f.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpg2tnaw5f.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching promote_valuetype()\n\
    \  Closest candidates are:\n    promote_valuetype(!Matched::Pair{K, V}) where\
    \ {K, V} at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:580\n    promote_valuetype(!Matched::Pair{K,\
    \ V}, !Matched::Pair...) where {K, V} at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:581\n\
    \  Stacktrace:\n    [1] replace(::Int64; count::Nothing)\n      @ Base ./set.jl:570\n\
    \    [2] replace(::Int64)\n      @ Base ./set.jl:570\n    [3] (::var\"#1#2\")(i::Int64)\n\
    \      @ Main ./none:0\n    [4] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [5] collect\n      @ ./array.jl:724 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpg2tnaw5f.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg2tnaw5f.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reverse_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"]\n    for i in 1:length(reverse_arr)\n      \
    \  if reverse_arr[i] < 1 || reverse_arr[i] > 9\n            reverse_arr[i] = 0\n\
    \        else\n            reverse_arr[i] = names[reverse_arr[i]]\n        end\n\
    \    end\n    # Return the vector\n    return reverse_arr\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp0puiilhl.jl:40\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp0puiilhl.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0puiilhl.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0puiilhl.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp0puiilhl.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp0puiilhl.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0puiilhl.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    # Return the\
    \ vector\n    return reversed_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp56906qfo.jl:53\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp56906qfo.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp56906qfo.jl:53 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp56906qfo.jl:52\ntest set:\
    \ Error During Test at /tmp/tmp56906qfo.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp56906qfo.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp56906qfo.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_qo01bx8.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp_qo01bx8.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_qo01bx8.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_qo01bx8.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp_qo01bx8.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp_qo01bx8.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_qo01bx8.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr)\n    arr = reverse(arr)\n    arr = filter(x -> x in 1:9,\
    \ arr)\n    arr = map(x -> string(x), arr)\n    arr = map(x -> replace(x, \"1\"\
    \ => \"One\", \"2\" => \"Two\", \"3\" => \"Three\", \"4\" => \"Four\", \"5\" =>\
    \ \"Five\", \"6\" => \"Six\", \"7\" => \"Seven\", \"8\" => \"Eight\", \"9\" =>\
    \ \"Nine\"), arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    # create a dictionary\n    dict = Dict(\"One\" => 1, \"Two\" => 2,\
    \ \"Three\" => 3, \"Four\" => 4, \"Five\" => 5, \"Six\" => 6, \"Seven\" => 7,\
    \ \"Eight\" => 8, \"Nine\" => 9)\n    # create a new vector\n    new_arr = []\n\
    \    # loop through the vector\n    for i in reversed_arr\n        # check if\
    \ the number is between 1 and 9 inclusive\n        if i >= 1 && i <= 9\n     \
    \       # loop through the dictionary\n            for (k, v) in dict\n      \
    \          # check if the value is equal to the number\n                if v ==\
    \ i\n                    # append the key to the new vector\n                \
    \    push!(new_arr, k)\n                end\n            end\n        end\n  \
    \  end\n    # return the new vector\n    return new_arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    result = []\n    for i in reversed_arr\n        if i == 1\n      \
    \      push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # TODO: Implement this function\n    return [\"One\"]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmponjlt1ot.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponjlt1ot.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponjlt1ot.jl:26\ntest set: Test\
    \ Failed at /tmp/tmponjlt1ot.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponjlt1ot.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponjlt1ot.jl:26\ntest set: Test\
    \ Failed at /tmp/tmponjlt1ot.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponjlt1ot.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponjlt1ot.jl:26\ntest set: Test\
    \ Failed at /tmp/tmponjlt1ot.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponjlt1ot.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmponjlt1ot.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    new_arr = []\n    for i in reversed_arr\n        if i == 1\n     \
    \       push!(new_arr, \"One\")\n        elseif i == 2\n            push!(new_arr,\
    \ \"Two\")\n        elseif i == 3\n            push!(new_arr, \"Three\")\n   \
    \     elseif i == 4\n            push!(new_arr, \"Four\")\n        elseif i ==\
    \ 5\n            push!(new_arr, \"Five\")\n        elseif i == 6\n           \
    \ push!(new_arr, \"Six\")\n        elseif i == 7\n            push!(new_arr, \"\
    Seven\")\n        elseif i == 8\n            push!(new_arr, \"Eight\")\n     \
    \   elseif i == 9\n            push!(new_arr, \"Nine\")\n        end\n    end\n\
    \    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3f23a3_5.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3f23a3_5.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3f23a3_5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3f23a3_5.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3f23a3_5.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3f23a3_5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3f23a3_5.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3f23a3_5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3f23a3_5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3f23a3_5.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3f23a3_5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3f23a3_5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8mazg8mm.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8mazg8mm.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8mazg8mm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8mazg8mm.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8mazg8mm.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8mazg8mm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8mazg8mm.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8mazg8mm.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8mazg8mm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8mazg8mm.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8mazg8mm.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8mazg8mm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Create a vector of strings\n  \
    \  string_arr = []\n    # Loop through the vector\n    for i in reversed_arr\n\
    \        # Check if the number is between 1 and 9\n        if i >= 1 && i <= 9\n\
    \            # If it is, push the corresponding string to the vector\n       \
    \     push!(string_arr, string(i))\n        end\n    end\n    # Return the vector\n\
    \    return string_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfly4i1y6.jl:41\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfly4i1y6.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfly4i1y6.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpfly4i1y6.jl:43\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfly4i1y6.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfly4i1y6.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpfly4i1y6.jl:44\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfly4i1y6.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfly4i1y6.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpfly4i1y6.jl:45\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfly4i1y6.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfly4i1y6.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    result = []\n    for i in reversed_arr\n        if i == 1\n      \
    \      push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    # Create a dictionary\n    d = Dict(\"One\" => 1, \"Two\" => 2, \"\
    Three\" => 3, \"Four\" => 4, \"Five\" => 5, \"Six\" => 6, \"Seven\" => 7, \"Eight\"\
    \ => 8, \"Nine\" => 9)\n    # Create a vector of strings\n    string_arr = []\n\
    \    # Loop through the vector\n    for i in reversed_arr\n        # Check if\
    \ the number is between 1 and 9\n        if i >= 1 && i <= 9\n            # Loop\
    \ through the dictionary\n            for (k, v) in d\n                # Check\
    \ if the value is equal to the number\n                if v == i\n           \
    \         # Push the key to the vector\n                    push!(string_arr,\
    \ k)\n                end\n            end\n        end\n    end\n    # Return\
    \ the vector\n    return string_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Create a vector of strings\n  \
    \  string_arr = []\n    # For each element in the reversed vector\n    for i in\
    \ reversed_arr\n        # If the element is between 1 and 9 inclusive\n      \
    \  if i >= 1 && i <= 9\n            # Push the corresponding string to the vector\n\
    \            push!(string_arr, string(i))\n        end\n    end\n    # Return\
    \ the vector\n    return string_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu0sz4x0y.jl:41\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu0sz4x0y.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu0sz4x0y.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpu0sz4x0y.jl:43\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu0sz4x0y.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu0sz4x0y.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpu0sz4x0y.jl:44\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu0sz4x0y.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu0sz4x0y.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpu0sz4x0y.jl:45\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu0sz4x0y.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu0sz4x0y.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyurdowpb.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpyurdowpb.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyurdowpb.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyurdowpb.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpyurdowpb.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpyurdowpb.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyurdowpb.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    new_arr = []\n    for i in reversed_arr\n        if i == 1\n     \
    \       push!(new_arr, \"One\")\n        elseif i == 2\n            push!(new_arr,\
    \ \"Two\")\n        elseif i == 3\n            push!(new_arr, \"Three\")\n   \
    \     elseif i == 4\n            push!(new_arr, \"Four\")\n        elseif i ==\
    \ 5\n            push!(new_arr, \"Five\")\n        elseif i == 6\n           \
    \ push!(new_arr, \"Six\")\n        elseif i == 7\n            push!(new_arr, \"\
    Seven\")\n        elseif i == 8\n            push!(new_arr, \"Eight\")\n     \
    \   elseif i == 9\n            push!(new_arr, \"Nine\")\n        end\n    end\n\
    \    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace the digits by their names\n\
    \    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n      \
    \      reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n      \
    \      reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n      \
    \      reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n    \
    \        reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n   \
    \         reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n  \
    \          reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n  \
    \          reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1yazmx4u.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1yazmx4u.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1yazmx4u.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1yazmx4u.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp1yazmx4u.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1yazmx4u.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1yazmx4u.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    # if the vector is empty, return an empty vector\n\
    \    if length(reversed_arr) == 0\n        return reversed_arr\n    end\n    #\
    \ if the vector has any strange number ignore it\n    if length(reversed_arr)\
    \ == 1 && reversed_arr[1] < 1 && reversed_arr[1] > 9\n        return reversed_arr\n\
    \    end\n    # if the vector has any strange number ignore it\n    if length(reversed_arr)\
    \ == 2 && (reversed_arr[1] < 1 && reversed_arr[1] > 9) && (reversed_arr[2] < 1\
    \ && reversed_arr[2] > 9)\n        return reversed_arr\n    end\n    # if the\
    \ vector has any strange number ignore it\n    if length(reversed_arr) == 3 &&\
    \ (reversed_arr[1] < 1 && reversed_arr[1] > 9) && (reversed_arr[2] < 1 && reversed_arr[2]\
    \ > 9) && (reversed_arr[3] < 1 && reversed_arr[3] > 9)\n        return reversed_arr\n\
    \    end\n    # if the vector has any strange number ignore it\n    if length(reversed_arr)\
    \ == 4 && (reversed_arr[1] < 1 && reversed_arr[1] > 9) && (reversed_arr[2] < 1\
    \ && reversed_arr[2] > 9) && (reversed_arr[3] < 1 && reversed_arr[3] > 9) && (reversed_arr[4]\
    \ < 1 && reversed_arr[4] > 9)\n        return reversed_arr\n    end\n    # if\
    \ the vector has any strange number ignore it\n    if length(reversed_arr) ==\
    \ 5 && (reversed_arr[1] < 1 && reversed_arr[1] > 9) && (reversed\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr3t_2lpu.jl:46\nin expression starting at\
    \ /tmp/tmpr3t_2lpu.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Filter the vector to only include\
    \ numbers between 1 and 9\n    filtered_arr = filter(x -> x >= 1 && x <= 9, reversed_arr)\n\
    \    # Map the vector to the corresponding string\n    mapped_arr = map(x -> string(x),\
    \ filtered_arr)\n    # Return the vector\n    return mapped_arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaq8vnxv2.jl:35\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaq8vnxv2.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaq8vnxv2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpaq8vnxv2.jl:37\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaq8vnxv2.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaq8vnxv2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpaq8vnxv2.jl:38\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaq8vnxv2.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaq8vnxv2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpaq8vnxv2.jl:39\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaq8vnxv2.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaq8vnxv2.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Create a new vector of strings\n\
    \    new_arr = []\n    # Iterate through the reversed vector\n    for i in reversed_arr\n\
    \        # If the number is between 1 and 9 inclusive\n        if i >= 1 && i\
    \ <= 9\n            # Add the corresponding string to the new vector\n       \
    \     push!(new_arr, string(i))\n        end\n    end\n    # Return the new vector\n\
    \    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4n5g17n4.jl:41\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4n5g17n4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4n5g17n4.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp4n5g17n4.jl:43\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4n5g17n4.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4n5g17n4.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp4n5g17n4.jl:44\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4n5g17n4.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4n5g17n4.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp4n5g17n4.jl:45\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4n5g17n4.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4n5g17n4.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Your code here\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxjvl9l5n.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxjvl9l5n.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxjvl9l5n.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxjvl9l5n.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxjvl9l5n.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxjvl9l5n.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxjvl9l5n.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxjvl9l5n.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxjvl9l5n.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxjvl9l5n.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxjvl9l5n.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxjvl9l5n.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sort!(arr)\n    # Reverse the vector\n    reverse!(arr)\n\
    \    # Replace each digit by its corresponding name\n    for i in 1:length(arr)\n\
    \        if arr[i] == 1\n            arr[i] = \"One\"\n        elseif arr[i] ==\
    \ 2\n            arr[i] = \"Two\"\n        elseif arr[i] == 3\n            arr[i]\
    \ = \"Three\"\n        elseif arr[i] == 4\n            arr[i] = \"Four\"\n   \
    \     elseif arr[i] == 5\n            arr[i] = \"Five\"\n        elseif arr[i]\
    \ == 6\n            arr[i] = \"Six\"\n        elseif arr[i] == 7\n           \
    \ arr[i] = \"Seven\"\n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\
    \n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\n        end\n   \
    \ end\n    # Return the vector\n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7s44nbsp.jl:53\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7s44nbsp.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7s44nbsp.jl:53 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7s44nbsp.jl:52\ntest set:\
    \ Error During Test at /tmp/tmp7s44nbsp.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7s44nbsp.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7s44nbsp.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjrr9j01a.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjrr9j01a.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjrr9j01a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjrr9j01a.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjrr9j01a.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjrr9j01a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjrr9j01a.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjrr9j01a.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjrr9j01a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjrr9j01a.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjrr9j01a.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjrr9j01a.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoa1twjy3.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoa1twjy3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoa1twjy3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpoa1twjy3.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoa1twjy3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoa1twjy3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpoa1twjy3.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoa1twjy3.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoa1twjy3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpoa1twjy3.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoa1twjy3.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoa1twjy3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    result = []\n    for i in reversed_arr\n        if i == 1\n      \
    \      push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpls3ypyfu.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpls3ypyfu.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpls3ypyfu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpls3ypyfu.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpls3ypyfu.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpls3ypyfu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpls3ypyfu.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpls3ypyfu.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpls3ypyfu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpls3ypyfu.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpls3ypyfu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpls3ypyfu.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # TODO: implement this function\n    return [\"One\"]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcmhfa_f1.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmhfa_f1.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmhfa_f1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpcmhfa_f1.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmhfa_f1.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmhfa_f1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpcmhfa_f1.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmhfa_f1.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmhfa_f1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpcmhfa_f1.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmhfa_f1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcmhfa_f1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Filter the vector\
    \ to only contain numbers between 1 and 9\n    filtered_arr = filter(x -> (x >=\
    \ 1) && (x <= 9), sorted_arr)\n    # Reverse the vector\n    reversed_arr = reverse(filtered_arr)\n\
    \    # Map the vector to the corresponding string\n    mapped_arr = map(x -> string(x),\
    \ reversed_arr)\n    return mapped_arr\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgn4qxgh3.jl:34\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgn4qxgh3.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgn4qxgh3.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgn4qxgh3.jl:36\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgn4qxgh3.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgn4qxgh3.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgn4qxgh3.jl:37\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgn4qxgh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgn4qxgh3.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgn4qxgh3.jl:38\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgn4qxgh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgn4qxgh3.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp200i_0bb.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp200i_0bb.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp200i_0bb.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp200i_0bb.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp200i_0bb.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp200i_0bb.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp200i_0bb.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    # create a dictionary\n    d = Dict(\"One\" => 1, \"\
    Two\" => 2, \"Three\" => 3, \"Four\" => 4, \"Five\" => 5, \"Six\" => 6, \"Seven\"\
    \ => 7, \"Eight\" => 8, \"Nine\" => 9)\n    # create a vector of strings\n   \
    \ string_arr = Vector{String}()\n    # iterate through the vector\n    for i in\
    \ reversed_arr\n        # check if the number is between 1 and 9 inclusive\n \
    \       if i in 1:9\n            # push the corresponding name to the vector\n\
    \            push!(string_arr, d[i])\n        end\n    end\n    # return the vector\n\
    \    return string_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4ya9c21h.jl:44\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  KeyError: key 8 not\
    \ found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Int64)\n\
    \     @ Base ./dict.jl:481\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp4ya9c21h.jl:33\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4ya9c21h.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4ya9c21h.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp4ya9c21h.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  KeyError: key 1 not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Int64)\n     @ Base ./dict.jl:481\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp4ya9c21h.jl:33\n  \
    \ [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4ya9c21h.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4ya9c21h.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp4ya9c21h.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  KeyError: key 3\
    \ not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Int64)\n\
    \     @ Base ./dict.jl:481\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp4ya9c21h.jl:33\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4ya9c21h.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ya9c21h.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpraj53nik.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpraj53nik.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpraj53nik.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpraj53nik.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpraj53nik.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpraj53nik.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpraj53nik.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpraj53nik.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpraj53nik.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpraj53nik.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpraj53nik.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpraj53nik.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the sorted\
    \ vector\n    reversed_arr = reverse(sorted_arr)\n    # replace each digit by\
    \ its corresponding name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i]\
    \ == 1\n            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i]\
    \ == 2\n            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i]\
    \ == 3\n            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i]\
    \ == 4\n            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i]\
    \ == 5\n            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i]\
    \ == 6\n            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i]\
    \ == 7\n            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i]\
    \ == 8\n            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i]\
    \ == 9\n            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return\
    \ reversed_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7v01eqlt.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7v01eqlt.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7v01eqlt.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7v01eqlt.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp7v01eqlt.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7v01eqlt.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7v01eqlt.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdf92m145.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdf92m145.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdf92m145.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdf92m145.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdf92m145.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdf92m145.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdf92m145.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdf92m145.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdf92m145.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdf92m145.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdf92m145.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdf92m145.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa7jpslxm.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpa7jpslxm.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa7jpslxm.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa7jpslxm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpa7jpslxm.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpa7jpslxm.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa7jpslxm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4hr1yo3f.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hr1yo3f.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hr1yo3f.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4hr1yo3f.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hr1yo3f.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hr1yo3f.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4hr1yo3f.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hr1yo3f.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hr1yo3f.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4hr1yo3f.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hr1yo3f.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4hr1yo3f.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpraa0xv1d.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpraa0xv1d.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpraa0xv1d.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpraa0xv1d.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpraa0xv1d.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpraa0xv1d.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpraa0xv1d.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i]\
    \ == 1\n            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i]\
    \ == 2\n            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i]\
    \ == 3\n            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i]\
    \ == 4\n            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i]\
    \ == 5\n            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i]\
    \ == 6\n            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i]\
    \ == 7\n            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i]\
    \ == 8\n            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i]\
    \ == 9\n            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return\
    \ reversed_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt0z3h4h5.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpt0z3h4h5.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt0z3h4h5.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt0z3h4h5.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpt0z3h4h5.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpt0z3h4h5.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt0z3h4h5.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return []\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0fb1s1xb.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fb1s1xb.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fb1s1xb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0fb1s1xb.jl:29\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fb1s1xb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fb1s1xb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0fb1s1xb.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fb1s1xb.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fb1s1xb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0fb1s1xb.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: String[] == [\"Nine\", \"Eight\",\
    \ \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fb1s1xb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0fb1s1xb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    # Create a dictionary\n    d = Dict(\"One\" => 1, \"\
    Two\" => 2, \"Three\" => 3, \"Four\" => 4, \"Five\" => 5, \"Six\" => 6, \"Seven\"\
    \ => 7, \"Eight\" => 8, \"Nine\" => 9)\n    # Create a vector of strings\n   \
    \ str_arr = []\n    # Loop through the vector\n    for i in reversed_arr\n   \
    \     # Check if the number is between 1 and 9\n        if i in keys(d)\n    \
    \        # Append the string to the vector\n            push!(str_arr, d[i])\n\
    \        end\n    end\n    # Return the vector\n    return str_arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpll2iyp71.jl:44\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpll2iyp71.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpll2iyp71.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpll2iyp71.jl:46\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpll2iyp71.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpll2iyp71.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpll2iyp71.jl:47\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpll2iyp71.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpll2iyp71.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpll2iyp71.jl:48\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: String[] == [\"Nine\", \"Eight\",\
    \ \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpll2iyp71.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpll2iyp71.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpphwwayez.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpphwwayez.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpphwwayez.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpphwwayez.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpphwwayez.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpphwwayez.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpphwwayez.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace the numbers by their names\n\
    \    result = []\n    for i in reversed_arr\n        if i == 1\n            push!(result,\
    \ \"One\")\n        elseif i == 2\n            push!(result, \"Two\")\n      \
    \  elseif i == 3\n            push!(result, \"Three\")\n        elseif i == 4\n\
    \            push!(result, \"Four\")\n        elseif i == 5\n            push!(result,\
    \ \"Five\")\n        elseif i == 6\n            push!(result, \"Six\")\n     \
    \   elseif i == 7\n            push!(result, \"Seven\")\n        elseif i == 8\n\
    \            push!(result, \"Eight\")\n        elseif i == 9\n            push!(result,\
    \ \"Nine\")\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphazn6qyz.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphazn6qyz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphazn6qyz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphazn6qyz.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphazn6qyz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphazn6qyz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphazn6qyz.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphazn6qyz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphazn6qyz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphazn6qyz.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphazn6qyz.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphazn6qyz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the array\n    sorted_arr = sort(arr)\n    # reverse the array\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace the numbers with their\
    \ names\n    result = []\n    for i in reversed_arr\n        if i == 1\n     \
    \       push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\n    return []\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnprl7xlf.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnprl7xlf.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnprl7xlf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnprl7xlf.jl:29\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnprl7xlf.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnprl7xlf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnprl7xlf.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnprl7xlf.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnprl7xlf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnprl7xlf.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: String[] == [\"Nine\", \"Eight\",\
    \ \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnprl7xlf.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnprl7xlf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaqvez85z.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpaqvez85z.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaqvez85z.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaqvez85z.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpaqvez85z.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpaqvez85z.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaqvez85z.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Create a vector of strings\n  \
    \  str_arr = []\n    # Iterate over the reversed vector\n    for i in reversed_arr\n\
    \        # If the number is between 1 and 9 inclusive, push the corresponding\
    \ string to the vector\n        if i == 1\n            push!(str_arr, \"One\"\
    )\n        elseif i == 2\n            push!(str_arr, \"Two\")\n        elseif\
    \ i == 3\n            push!(str_arr, \"Three\")\n        elseif i == 4\n     \
    \       push!(str_arr, \"Four\")\n        elseif i == 5\n            push!(str_arr,\
    \ \"Five\")\n        elseif i == 6\n            push!(str_arr, \"Six\")\n    \
    \    elseif i == 7\n            push!(str_arr, \"Seven\")\n        elseif i ==\
    \ 8\n            push!(str_arr, \"Eight\")\n        elseif i == 9\n          \
    \  push!(str_arr, \"Nine\")\n        end\n    end\n    # Return the vector of\
    \ strings\n    return str_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from\n    # \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"\n    new_arr = []\n    for i in reversed_arr\n  \
    \      if i == 1\n            push!(new_arr, \"One\")\n        elseif i == 2\n\
    \            push!(new_arr, \"Two\")\n        elseif i == 3\n            push!(new_arr,\
    \ \"Three\")\n        elseif i == 4\n            push!(new_arr, \"Four\")\n  \
    \      elseif i == 5\n            push!(new_arr, \"Five\")\n        elseif i ==\
    \ 6\n            push!(new_arr, \"Six\")\n        elseif i == 7\n            push!(new_arr,\
    \ \"Seven\")\n        elseif i == 8\n            push!(new_arr, \"Eight\")\n \
    \       elseif i == 9\n            push!(new_arr, \"Nine\")\n        end\n   \
    \ end\n    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9g_1qvnl.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9g_1qvnl.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9g_1qvnl.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9g_1qvnl.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp9g_1qvnl.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9g_1qvnl.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9g_1qvnl.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    result = []\n    for i in reversed_arr\n        if i == 1\n      \
    \      push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjkhsl1jf.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpjkhsl1jf.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjkhsl1jf.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjkhsl1jf.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpjkhsl1jf.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpjkhsl1jf.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjkhsl1jf.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    result = []\n    for i in reversed_arr\n        if i == 1\n      \
    \      push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i]\
    \ == 1\n            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i]\
    \ == 2\n            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i]\
    \ == 3\n            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i]\
    \ == 4\n            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i]\
    \ == 5\n            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i]\
    \ == 6\n            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i]\
    \ == 7\n            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i]\
    \ == 8\n            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i]\
    \ == 9\n            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return\
    \ reversed_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0tsev72i.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp0tsev72i.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0tsev72i.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0tsev72i.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp0tsev72i.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp0tsev72i.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0tsev72i.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    # if the vector is empty, return an empty vector\n\
    \    if isempty(reversed_arr)\n        return []\n    end\n    # if the vector\
    \ has any strange number ignore it\n    if any(x -> x < 1 || x > 9, reversed_arr)\n\
    \        return [\"One\"]\n    end\n    # if the vector has any strange number\
    \ ignore it\n    if any(x -> x < 1 || x > 9, reversed_arr)\n        return [\"\
    One\"]\n    end\n    # if the vector has any strange number ignore it\n    if\
    \ any(x -> x < 1 || x > 9, reversed_arr)\n        return [\"One\"]\n    end\n\
    \    # if the vector has any strange number ignore it\n    if any(x -> x < 1 ||\
    \ x > 9, reversed_arr)\n        return [\"One\"]\n    end\n    # if the vector\
    \ has any strange number ignore it\n    if any(x -> x < 1 || x > 9, reversed_arr)\n\
    \        return [\"One\"]\n    end\n    # if the vector has any strange number\
    \ ignore it\n    if any(x -> x < 1 || x > 9, reversed_arr)\n        return [\"\
    One\"]\n    end\n    # if the vector has any strange number ignore it\n    if\
    \ any(x -> x < 1 || x > 9, reversed_arr)\n        return [\"One\"]\n    end\n\
    \    # if the vector has any strange number ignore it\n    if any(x -> x < 1 ||\
    \ x > 9, reversed_arr)\n        return [\"One\"]\n    end\n    # if the vector\
    \ has any strange number ignore it\n    if any(x -> x < 1 || x > 9, reversed_arr)\n\
    \        return [\"One\"]\n    end\n    # if the vector has any strange number\
    \ ignore it\n    if any(x -> x < 1 || x > 9, reversed_arr)\n        return [\"\
    One\"]\n    end\n    # if the vector has\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpek8u04z_.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpek8u04z_.jl:1\n\
    in expression starting at /tmp/tmpek8u04z_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1fj3w23d.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1fj3w23d.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1fj3w23d.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1fj3w23d.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1fj3w23d.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1fj3w23d.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1fj3w23d.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1fj3w23d.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1fj3w23d.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1fj3w23d.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1fj3w23d.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1fj3w23d.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    result = []\n    for i in reversed_arr\n        if i == 1\n      \
    \      push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    new_arr = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(new_arr, \"One\")\n        elseif i == 2\n       \
    \     push!(new_arr, \"Two\")\n        elseif i == 3\n            push!(new_arr,\
    \ \"Three\")\n        elseif i == 4\n            push!(new_arr, \"Four\")\n  \
    \      elseif i == 5\n            push!(new_arr, \"Five\")\n        elseif i ==\
    \ 6\n            push!(new_arr, \"Six\")\n        elseif i == 7\n            push!(new_arr,\
    \ \"Seven\")\n        elseif i == 8\n            push!(new_arr, \"Eight\")\n \
    \       elseif i == 9\n            push!(new_arr, \"Nine\")\n        end\n   \
    \ end\n    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sort!(arr)\n    # Reverse the vector\n    reverse!(arr)\n\
    \    # Filter the vector\n    arr = filter(x -> x > 0 && x < 10, arr)\n    # Map\
    \ the vector\n    arr = map(x -> string(x), arr)\n    # Return the vector\n  \
    \  return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn0ge398v.jl:35\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0ge398v.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0ge398v.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpn0ge398v.jl:37\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0ge398v.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0ge398v.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpn0ge398v.jl:38\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0ge398v.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0ge398v.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpn0ge398v.jl:39\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0ge398v.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn0ge398v.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpruwnwk_q.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpruwnwk_q.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpruwnwk_q.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpruwnwk_q.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpruwnwk_q.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpruwnwk_q.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpruwnwk_q.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7osq9_f7.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7osq9_f7.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7osq9_f7.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7osq9_f7.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp7osq9_f7.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7osq9_f7.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7osq9_f7.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\n    return []\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8709z98c.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8709z98c.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8709z98c.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8709z98c.jl:29\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8709z98c.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8709z98c.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8709z98c.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8709z98c.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8709z98c.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8709z98c.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: String[] == [\"Nine\", \"Eight\",\
    \ \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8709z98c.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8709z98c.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph53nnxry.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmph53nnxry.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph53nnxry.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph53nnxry.jl:25\ntest set:\
    \ Error During Test at /tmp/tmph53nnxry.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmph53nnxry.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph53nnxry.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpt423pdwe.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt423pdwe.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt423pdwe.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpt423pdwe.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt423pdwe.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt423pdwe.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpt423pdwe.jl:29\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt423pdwe.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt423pdwe.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpt423pdwe.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/st"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt423pdwe.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace the numbers by their names\n\
    \    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n      \
    \      reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n      \
    \      reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n      \
    \      reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n    \
    \        reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n   \
    \         reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n  \
    \          reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n  \
    \          reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1okzqi8c.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1okzqi8c.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1okzqi8c.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1okzqi8c.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp1okzqi8c.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1okzqi8c.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1okzqi8c.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # filter out the numbers that are not between 1 and 9 inclusive\n    filtered_arr\
    \ = filter(x -> x >= 1 && x <= 9, arr)\n    # sort the filtered array\n    sorted_arr\
    \ = sort(filtered_arr)\n    # reverse the sorted array\n    reversed_arr = reverse(sorted_arr)\n\
    \    # replace each digit by its corresponding name from \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    return\
    \ map(x -> string(x), reversed_arr)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdqjshrsy.jl:33\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdqjshrsy.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdqjshrsy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpdqjshrsy.jl:35\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdqjshrsy.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdqjshrsy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpdqjshrsy.jl:36\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdqjshrsy.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdqjshrsy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpdqjshrsy.jl:37\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdqjshrsy.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdqjshrsy.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5qys4efp.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp5qys4efp.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5qys4efp.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5qys4efp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5qys4efp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp5qys4efp.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5qys4efp.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq5ne_bbk.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpq5ne_bbk.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq5ne_bbk.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq5ne_bbk.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpq5ne_bbk.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpq5ne_bbk.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq5ne_bbk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    # Create a dictionary\n    d = Dict(\"One\" => 1, \"Two\" => 2, \"\
    Three\" => 3, \"Four\" => 4, \"Five\" => 5, \"Six\" => 6, \"Seven\" => 7, \"Eight\"\
    \ => 8, \"Nine\" => 9)\n    # Create a vector of strings\n    str_arr = []\n \
    \   # Loop through the vector\n    for i in reversed_arr\n        # Check if the\
    \ number is between 1 and 9 inclusive\n        if i >= 1 && i <= 9\n         \
    \   # Loop through the dictionary\n            for (k, v) in d\n             \
    \   # Check if the value is equal to the number\n                if v == i\n \
    \                   # Add the key to the vector\n                    push!(str_arr,\
    \ k)\n                end\n            end\n        end\n    end\n    # Return\
    \ the vector\n    return str_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sort!(arr)\n    # Reverse the vector\n    reverse!(arr)\n\
    \    # Replace each digit by its corresponding name from \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    for\
    \ i in 1:length(arr)\n        if arr[i] == 1\n            arr[i] = \"One\"\n \
    \       elseif arr[i] == 2\n            arr[i] = \"Two\"\n        elseif arr[i]\
    \ == 3\n            arr[i] = \"Three\"\n        elseif arr[i] == 4\n         \
    \   arr[i] = \"Four\"\n        elseif arr[i] == 5\n            arr[i] = \"Five\"\
    \n        elseif arr[i] == 6\n            arr[i] = \"Six\"\n        elseif arr[i]\
    \ == 7\n            arr[i] = \"Seven\"\n        elseif arr[i] == 8\n         \
    \   arr[i] = \"Eight\"\n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\
    \n        end\n    end\n    return arr\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1nrt454z.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1nrt454z.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1nrt454z.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1nrt454z.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp1nrt454z.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1nrt454z.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1nrt454z.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace the numbers by their names\n\
    \    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n      \
    \      reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n      \
    \      reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n      \
    \      reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n    \
    \        reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n   \
    \         reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n  \
    \          reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n  \
    \          reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwakwxsbn.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpwakwxsbn.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwakwxsbn.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwakwxsbn.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpwakwxsbn.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpwakwxsbn.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwakwxsbn.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = [replace(reversed_arr[i]) for i in 1:length(reversed_arr)]\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptst5rmsz.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching promote_valuetype()\n  Closest candidates are:\n    promote_valuetype(!Matched::Pair{K,\
    \ V}) where {K, V} at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:580\n\
    \    promote_valuetype(!Matched::Pair{K, V}, !Matched::Pair...) where {K, V} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/set.jl:581\n  Stacktrace:\n   \
    \ [1] replace(::Int64; count::Nothing)\n      @ Base ./set.jl:570\n    [2] replace(::Int64)\n\
    \      @ Base ./set.jl:570\n    [3] (::var\"#1#2\"{Vector{Int64}})(i::Int64)\n\
    \      @ Main ./none:0\n    [4] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [5] collect\n      @ ./array.jl:724 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmptst5rmsz.jl:24\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmptst5rmsz.jl:32 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmptst5rmsz.jl:31\ntest set:\
    \ Error During Test at /tmp/tmptst5rmsz.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching promote_valuetype()\n\
    \  Closest candidates are:\n    promote_valuetype(!Matched::Pair{K, V}) where\
    \ {K, V} at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:580\n    promote_valuetype(!Matched::Pair{K,\
    \ V}, !Matched::Pair...) where {K, V} at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:581\n\
    \  Stacktrace:\n    [1] replace(::Int64; count::Nothing)\n      @ Base ./set.jl:570\n\
    \    [2] replace(::Int64)\n      @ Base ./set.jl:570\n    [3] (::var\"#1#2\"{Vector{Int64}})(i::Int64)\n\
    \      @ Main ./none:0\n    [4] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [5] collect\n      @ ./array.jl:724 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \ "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptst5rmsz.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace the digits by their corresponding\
    \ names\n    result = []\n    for i in reversed_arr\n        if i == 1\n     \
    \       push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace the digits with their corresponding\
    \ names\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpikhef9qt.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpikhef9qt.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpikhef9qt.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpikhef9qt.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpikhef9qt.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpikhef9qt.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpikhef9qt.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx7dpjm7v.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpx7dpjm7v.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx7dpjm7v.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx7dpjm7v.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpx7dpjm7v.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpx7dpjm7v.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx7dpjm7v.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6148mr77.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp6148mr77.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6148mr77.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6148mr77.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp6148mr77.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp6148mr77.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6148mr77.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkofkghtk.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpkofkghtk.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkofkghtk.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkofkghtk.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpkofkghtk.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpkofkghtk.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkofkghtk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3nougqvq.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3nougqvq.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3nougqvq.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3nougqvq.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp3nougqvq.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3nougqvq.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3nougqvq.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Filter the vector\n\
    \    filtered_arr = filter(x -> x > 0 && x < 10, sorted_arr)\n    # Reverse the\
    \ vector\n    reversed_arr = reverse(filtered_arr)\n    # Replace the numbers\
    \ by their names\n    mapped_arr = map(x -> string(x), reversed_arr)\n    return\
    \ mapped_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkmae_2fn.jl:34\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkmae_2fn.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkmae_2fn.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkmae_2fn.jl:36\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkmae_2fn.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkmae_2fn.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkmae_2fn.jl:37\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkmae_2fn.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkmae_2fn.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkmae_2fn.jl:38\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkmae_2fn.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkmae_2fn.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = filter(x -> x >= 1 && x <= 9, arr)\n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = map(x -> string(x), arr)\n    arr = map(x -> replace(x,\
    \ \"1\" => \"One\", \"2\" => \"Two\", \"3\" => \"Three\", \"4\" => \"Four\", \"\
    5\" => \"Five\", \"6\" => \"Six\", \"7\" => \"Seven\", \"8\" => \"Eight\", \"\
    9\" => \"Nine\"), arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr)\n    arr = reverse(arr)\n    arr = filter(x -> x > 0 &&\
    \ x < 10, arr)\n    arr = map(x -> string(x), arr)\n    arr = map(x -> replace(x,\
    \ \"1\" => \"One\", \"2\" => \"Two\", \"3\" => \"Three\", \"4\" => \"Four\", \"\
    5\" => \"Five\", \"6\" => \"Six\", \"7\" => \"Seven\", \"8\" => \"Eight\", \"\
    9\" => \"Nine\"), arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    result = []\n    for i in reversed_arr\n        if i == 1\n      \
    \      push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3q1_zpnl.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3q1_zpnl.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3q1_zpnl.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3q1_zpnl.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp3q1_zpnl.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3q1_zpnl.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3q1_zpnl.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted_arr = sort(arr)\n    reversed_arr = reverse(sorted_arr)\n    filtered_arr\
    \ = filter(x -> x > 0 && x < 10, reversed_arr)\n    map(x -> string(x), filtered_arr)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbsicw0fn.jl:29\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsicw0fn.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsicw0fn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbsicw0fn.jl:31\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsicw0fn.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsicw0fn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbsicw0fn.jl:32\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsicw0fn.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsicw0fn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbsicw0fn.jl:33\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsicw0fn.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbsicw0fn.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf_qa1z6r.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpf_qa1z6r.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf_qa1z6r.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf_qa1z6r.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpf_qa1z6r.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpf_qa1z6r.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf_qa1z6r.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu6ezpvqc.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpu6ezpvqc.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu6ezpvqc.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6ezpvqc.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpu6ezpvqc.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpu6ezpvqc.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu6ezpvqc.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i]\
    \ == 1\n            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i]\
    \ == 2\n            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i]\
    \ == 3\n            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i]\
    \ == 4\n            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i]\
    \ == 5\n            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i]\
    \ == 6\n            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i]\
    \ == 7\n            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i]\
    \ == 8\n            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i]\
    \ == 9\n            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return\
    \ reversed_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp13l4zis1.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp13l4zis1.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp13l4zis1.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp13l4zis1.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp13l4zis1.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp13l4zis1.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp13l4zis1.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i]\
    \ == 1\n            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i]\
    \ == 2\n            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i]\
    \ == 3\n            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i]\
    \ == 4\n            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i]\
    \ == 5\n            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i]\
    \ == 6\n            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i]\
    \ == 7\n            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i]\
    \ == 8\n            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i]\
    \ == 9\n            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return\
    \ reversed_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppx79kw7w.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmppx79kw7w.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppx79kw7w.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppx79kw7w.jl:51\ntest set:\
    \ Error During Test at /tmp/tmppx79kw7w.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmppx79kw7w.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppx79kw7w.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # TODO: Implement this function\n    # Hint: You can use the sort() function\
    \ to sort a vector\n    # Hint: You can use the reverse() function to reverse\
    \ a vector\n    # Hint: You can use the string() function to convert an integer\
    \ to a string\n    # Hint: You can use the push!() function to add an element\
    \ to a vector\n    # Hint: You can use the append!() function to add an element\
    \ to a vector\n    # Hint: You can use the pushfirst!() function to add an element\
    \ to a vector\n    # Hint: You can use the appendfirst!() function to add an element\
    \ to a vector\n    # Hint: You can use the pushlast!() function to add an element\
    \ to a vector\n    # Hint: You can use the appendlast!() function to add an element\
    \ to a vector\n    # Hint: You can use the pop!() function to remove an element\
    \ from a vector\n    # Hint: You can use the popfirst!() function to remove an\
    \ element from a vector\n    # Hint: You can use the poplast!() function to remove\
    \ an element from a vector\n    # Hint: You can use the deleteat!() function to\
    \ remove an element from a vector\n    # Hint: You can use the deletefirst!()\
    \ function to remove an element from a vector\n    # Hint: You can use the deletelast!()\
    \ function to remove an element from a vector\n    # Hint: You can use the insert!()\
    \ function to insert an element into a vector\n    # Hint: You can use the insertfirst!()\
    \ function to insert an element into a vector\n    # Hint: You can use the insertlast!()\
    \ function to insert an element into a vector\n    # Hint: You can use the splice!()\
    \ function to insert an element into a vector\n    # Hint: You can use the splicefirst!()\
    \ function to insert an element into a vector\n    # Hint: You can use the splicelast!()\
    \ function to insert an element into a vector\n    # Hint: You can use the replace!()\
    \ function to replace an element in a vector\n    # Hint: You can use the replacefirst!()\
    \ function to replace an element in a vector\n    # Hint: You can use the\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaes50m_d.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaes50m_d.jl:1\n\
    in expression starting at /tmp/tmpaes50m_d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_6j1cowe.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp_6j1cowe.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_6j1cowe.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_6j1cowe.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp_6j1cowe.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp_6j1cowe.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_6j1cowe.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Create a dictionary\n    dict =\
    \ Dict(1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\"\
    , 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\")\n    # Create a\
    \ new vector\n    new_arr = []\n    # Loop through the vector\n    for i in reversed_arr\n\
    \        # Check if the number is between 1 and 9\n        if i >= 1 && i <= 9\n\
    \            # Push the corresponding value to the new vector\n            push!(new_arr,\
    \ dict[i])\n        end\n    end\n    # Return the new vector\n    return new_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Filter the vector to only include numbers between 1 and 9 inclusive\n\
    \    filtered_arr = filter(x -> x >= 1 && x <= 9, arr)\n    # Sort the filtered\
    \ vector\n    sorted_arr = sort(filtered_arr)\n    # Reverse the sorted vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    return map(x -> [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x], reversed_arr)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeosjif0u.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpeosjif0u.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeosjif0u.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeosjif0u.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpeosjif0u.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpeosjif0u.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeosjif0u.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"][reverse(sort(filter(x -> x in 1:9, arr)))]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Filter out any numbers that are not between 1 and 9 inclusive\n    filtered_arr\
    \ = filter(x -> x >= 1 && x <= 9, arr)\n    # Sort the filtered array\n    sorted_arr\
    \ = sort(filtered_arr)\n    # Reverse the sorted array\n    reversed_arr = reverse(sorted_arr)\n\
    \    # Convert the reversed array to strings\n    string_arr = map(x -> string(x),\
    \ reversed_arr)\n    # Replace the numbers with their corresponding names\n  \
    \  return map(x -> replace(x, \"1\" => \"One\", \"2\" => \"Two\", \"3\" => \"\
    Three\", \"4\" => \"Four\", \"5\" => \"Five\", \"6\" => \"Six\", \"7\" => \"Seven\"\
    , \"8\" => \"Eight\", \"9\" => \"Nine\"), string_arr)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Get the numbers between 1 and 9\n    numbers = [x for x in arr if x\
    \ in 1:9]\n    # Sort the numbers\n    sort!(numbers)\n    # Reverse the numbers\n\
    \    reverse!(numbers)\n    # Replace the numbers by their names\n    names =\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n    return [names[x] for x in numbers]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Your code here\n    return []\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpekvy6glb.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpekvy6glb.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpekvy6glb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpekvy6glb.jl:29\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpekvy6glb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpekvy6glb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpekvy6glb.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpekvy6glb.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpekvy6glb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpekvy6glb.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: String[] == [\"Nine\", \"Eight\",\
    \ \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpekvy6glb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpekvy6glb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    # create a dictionary\n    d = Dict(\"One\" => 1, \"Two\" => 2, \"\
    Three\" => 3, \"Four\" => 4, \"Five\" => 5, \"Six\" => 6, \"Seven\" => 7, \"Eight\"\
    \ => 8, \"Nine\" => 9)\n    # create an empty vector\n    new_arr = []\n    #\
    \ iterate over the vector\n    for i in reversed_arr\n        # if the number\
    \ is between 1 and 9, add it to the new vector\n        if i in keys(d)\n    \
    \        push!(new_arr, d[i])\n        end\n    end\n    # return the new vector\n\
    \    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ekzal3v.jl:43\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ekzal3v.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ekzal3v.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp9ekzal3v.jl:45\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ekzal3v.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ekzal3v.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp9ekzal3v.jl:46\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ekzal3v.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ekzal3v.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp9ekzal3v.jl:47\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: String[] == [\"Nine\", \"Eight\",\
    \ \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ekzal3v.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ekzal3v.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from\n    # \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"\n    # If the vector is empty, return an empty vector\n\
    \    if length(reversed_arr) == 0\n        return []\n    end\n    # If the vector\
    \ has any strange number ignore it\n    if length(reversed_arr) == 1 && reversed_arr[1]\
    \ == -1\n        return []\n    end\n    # If the vector has any strange number\
    \ ignore it\n    if length(reversed_arr) == 1 && reversed_arr[1] == 55\n     \
    \   return []\n    end\n    # If the vector has any strange number ignore it\n\
    \    if length(reversed_arr) == 1 && reversed_arr[1] == 0\n        return []\n\
    \    end\n    # If the vector has any strange number ignore it\n    if length(reversed_arr)\
    \ == 1 && reversed_arr[1] == 10\n        return []\n    end\n    # If the vector\
    \ has any strange number ignore it\n    if length(reversed_arr) == 1 && reversed_arr[1]\
    \ == 11\n        return []\n    end\n    # If the vector has any strange number\
    \ ignore it\n    if length(reversed_arr) == 1 && reversed_arr[1] == 12\n     \
    \   return []\n    end\n    # If the vector has any strange number ignore it\n\
    \    if length(reversed_arr) == 1 && reversed_arr[1] == 13\n        return []\n\
    \    end\n    # If the vector has any strange number ignore it\n    if length(reversed_arr)\
    \ == 1 && reversed_arr[1] == 14\n        return []\n    end\n    # If the vector\
    \ has any strange number ignore it\n    if length(reversed_arr) == 1 && reversed_arr[1]\
    \ == 15\n        return []\n    end\n    # If the vector has any strange number\
    \ ignore it\n    if length(reversed_arr) == 1 && reversed_arr[1] ==\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpayr7de0d.jl:1\nin expression starting at /tmp/tmpayr7de0d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    new_arr = []\n    for i in reversed_arr\n        if i == 1\n     \
    \       push!(new_arr, \"One\")\n        elseif i == 2\n            push!(new_arr,\
    \ \"Two\")\n        elseif i == 3\n            push!(new_arr, \"Three\")\n   \
    \     elseif i == 4\n            push!(new_arr, \"Four\")\n        elseif i ==\
    \ 5\n            push!(new_arr, \"Five\")\n        elseif i == 6\n           \
    \ push!(new_arr, \"Six\")\n        elseif i == 7\n            push!(new_arr, \"\
    Seven\")\n        elseif i == 8\n            push!(new_arr, \"Eight\")\n     \
    \   elseif i == 9\n            push!(new_arr, \"Nine\")\n        end\n    end\n\
    \    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5ch8l5s0.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp5ch8l5s0.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5ch8l5s0.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5ch8l5s0.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5ch8l5s0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp5ch8l5s0.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5ch8l5s0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqwck9yz5.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpqwck9yz5.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqwck9yz5.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqwck9yz5.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpqwck9yz5.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpqwck9yz5.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqwck9yz5.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return []\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa9c6zzib.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9c6zzib.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9c6zzib.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpa9c6zzib.jl:29\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9c6zzib.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9c6zzib.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpa9c6zzib.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9c6zzib.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9c6zzib.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpa9c6zzib.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: String[] == [\"Nine\", \"Eight\",\
    \ \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9c6zzib.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa9c6zzib.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3e_6crxf.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp3e_6crxf.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3e_6crxf.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3e_6crxf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp3e_6crxf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp3e_6crxf.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3e_6crxf.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i]\
    \ == 1\n            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i]\
    \ == 2\n            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i]\
    \ == 3\n            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i]\
    \ == 4\n            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i]\
    \ == 5\n            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i]\
    \ == 6\n            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i]\
    \ == 7\n            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i]\
    \ == 8\n            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i]\
    \ == 9\n            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return\
    \ reversed_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg42ttvi3.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpg42ttvi3.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg42ttvi3.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg42ttvi3.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpg42ttvi3.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpg42ttvi3.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg42ttvi3.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpajgunx6_.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpajgunx6_.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpajgunx6_.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpajgunx6_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpajgunx6_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpajgunx6_.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpajgunx6_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    new_arr = []\n    for i in reversed_arr\n        if i == 1\n     \
    \       push!(new_arr, \"One\")\n        elseif i == 2\n            push!(new_arr,\
    \ \"Two\")\n        elseif i == 3\n            push!(new_arr, \"Three\")\n   \
    \     elseif i == 4\n            push!(new_arr, \"Four\")\n        elseif i ==\
    \ 5\n            push!(new_arr, \"Five\")\n        elseif i == 6\n           \
    \ push!(new_arr, \"Six\")\n        elseif i == 7\n            push!(new_arr, \"\
    Seven\")\n        elseif i == 8\n            push!(new_arr, \"Eight\")\n     \
    \   elseif i == 9\n            push!(new_arr, \"Nine\")\n        end\n    end\n\
    \    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpew12wrh8.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpew12wrh8.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpew12wrh8.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpew12wrh8.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpew12wrh8.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpew12wrh8.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpew12wrh8.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr)\n    arr = reverse(arr)\n    arr = [string(i) for i in\
    \ arr]\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpugype_8_.jl:29\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpugype_8_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpugype_8_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpugype_8_.jl:31\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"55\", \"1\", \"-1\"] == [\"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpugype_8_.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpugype_8_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpugype_8_.jl:32\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\", \"-1\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpugype_8_.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpugype_8_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpugype_8_.jl:33\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpugype_8_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpugype_8_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(filter(x -> x >= 1 && x <= 9, arr))\n    arr = reverse(arr)\n\
    \    return map(x -> string(x), arr)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2k20bexu.jl:28\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2k20bexu.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2k20bexu.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp2k20bexu.jl:30\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2k20bexu.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2k20bexu.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp2k20bexu.jl:31\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2k20bexu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2k20bexu.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp2k20bexu.jl:32\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2k20bexu.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2k20bexu.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\n    return []\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg_m6djy1.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_m6djy1.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_m6djy1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpg_m6djy1.jl:29\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_m6djy1.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_m6djy1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpg_m6djy1.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_m6djy1.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_m6djy1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpg_m6djy1.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: String[] == [\"Nine\", \"Eight\",\
    \ \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_m6djy1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg_m6djy1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    # reverse the vector\n    # replace each digit\
    \ by its corresponding name\n    # return the vector\n    return [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc9nop7bk.jl:30\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc9nop7bk.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc9nop7bk.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpc9nop7bk.jl:31\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc9nop7bk.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc9nop7bk.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpc9nop7bk.jl:32\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc9nop7bk.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc9nop7bk.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpc9nop7bk.jl:33\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/st"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc9nop7bk.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3nif2wfm.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nif2wfm.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nif2wfm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3nif2wfm.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nif2wfm.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nif2wfm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3nif2wfm.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nif2wfm.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nif2wfm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3nif2wfm.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nif2wfm.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3nif2wfm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    result = []\n    for i in reversed_arr\n        if i == 1\n      \
    \      push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    result = []\n    for i in reversed_arr\n        if i == 1\n      \
    \      push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    result = []\n    for i in reversed_arr\n        if i == 1\n      \
    \      push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps_crsb21.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmps_crsb21.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmps_crsb21.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps_crsb21.jl:51\ntest set:\
    \ Error During Test at /tmp/tmps_crsb21.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmps_crsb21.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps_crsb21.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk8sechm6.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpk8sechm6.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk8sechm6.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk8sechm6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpk8sechm6.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpk8sechm6.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk8sechm6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i]\
    \ == 1\n            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i]\
    \ == 2\n            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i]\
    \ == 3\n            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i]\
    \ == 4\n            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i]\
    \ == 5\n            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i]\
    \ == 6\n            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i]\
    \ == 7\n            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i]\
    \ == 8\n            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i]\
    \ == 9\n            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return\
    \ reversed_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsc0fqbfr.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpsc0fqbfr.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsc0fqbfr.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsc0fqbfr.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpsc0fqbfr.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpsc0fqbfr.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsc0fqbfr.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb23a74ug.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb23a74ug.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb23a74ug.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb23a74ug.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb23a74ug.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb23a74ug.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb23a74ug.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb23a74ug.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb23a74ug.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb23a74ug.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb23a74ug.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb23a74ug.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    replaced_arr = []\n    for i in reversed_arr\n        if i == 1\n\
    \            push!(replaced_arr, \"One\")\n        elseif i == 2\n           \
    \ push!(replaced_arr, \"Two\")\n        elseif i == 3\n            push!(replaced_arr,\
    \ \"Three\")\n        elseif i == 4\n            push!(replaced_arr, \"Four\"\
    )\n        elseif i == 5\n            push!(replaced_arr, \"Five\")\n        elseif\
    \ i == 6\n            push!(replaced_arr, \"Six\")\n        elseif i == 7\n  \
    \          push!(replaced_arr, \"Seven\")\n        elseif i == 8\n           \
    \ push!(replaced_arr, \"Eight\")\n        elseif i == 9\n            push!(replaced_arr,\
    \ \"Nine\")\n        end\n    end\n    return replaced_arr\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Filter the array to only include numbers between 1 and 9 inclusive\n\
    \    filtered_arr = filter(x -> x >= 1 && x <= 9, arr)\n    # Sort the array\n\
    \    sorted_arr = sort(filtered_arr)\n    # Reverse the array\n    reversed_arr\
    \ = reverse(sorted_arr)\n    # Replace each number with its corresponding name\n\
    \    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    return map(x -> names[x], reversed_arr)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    # return the\
    \ vector\n    return reversed_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpolm5ku8s.jl:53\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpolm5ku8s.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpolm5ku8s.jl:53 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpolm5ku8s.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpolm5ku8s.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpolm5ku8s.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpolm5ku8s.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxlxdvw0e.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpxlxdvw0e.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxlxdvw0e.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxlxdvw0e.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpxlxdvw0e.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpxlxdvw0e.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxlxdvw0e.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sort!(arr)\n    # Reverse the vector\n    reverse!(arr)\n\
    \    # Create a vector of strings\n    str_arr = []\n    # Iterate over the vector\n\
    \    for i in arr\n        # If the number is between 1 and 9 inclusive\n    \
    \    if 1 <= i <= 9\n            # Push the corresponding string to the vector\n\
    \            push!(str_arr, string(i))\n        end\n    end\n    # Return the\
    \ vector\n    return str_arr\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdvwbravc.jl:41\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvwbravc.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvwbravc.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpdvwbravc.jl:43\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvwbravc.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvwbravc.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpdvwbravc.jl:44\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvwbravc.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvwbravc.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpdvwbravc.jl:45\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvwbravc.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdvwbravc.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    # Return the\
    \ vector\n    return reversed_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpltsaeyv6.jl:53\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpltsaeyv6.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpltsaeyv6.jl:53 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpltsaeyv6.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpltsaeyv6.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpltsaeyv6.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpltsaeyv6.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3icw_vcy.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp3icw_vcy.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3icw_vcy.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3icw_vcy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp3icw_vcy.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp3icw_vcy.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3icw_vcy.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    new_arr = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(new_arr, \"One\")\n        elseif i == 2\n       \
    \     push!(new_arr, \"Two\")\n        elseif i == 3\n            push!(new_arr,\
    \ \"Three\")\n        elseif i == 4\n            push!(new_arr, \"Four\")\n  \
    \      elseif i == 5\n            push!(new_arr, \"Five\")\n        elseif i ==\
    \ 6\n            push!(new_arr, \"Six\")\n        elseif i == 7\n            push!(new_arr,\
    \ \"Seven\")\n        elseif i == 8\n            push!(new_arr, \"Eight\")\n \
    \       elseif i == 9\n            push!(new_arr, \"Nine\")\n        end\n   \
    \ end\n    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnx_l59cy.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnx_l59cy.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnx_l59cy.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnx_l59cy.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnx_l59cy.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnx_l59cy.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnx_l59cy.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnx_l59cy.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnx_l59cy.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnx_l59cy.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnx_l59cy.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnx_l59cy.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    result = []\n    for i in reversed_arr\n        if i == 1\n      \
    \      push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    # Return the\
    \ vector\n    return reversed_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl_3m_6a0.jl:53\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpl_3m_6a0.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl_3m_6a0.jl:53 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl_3m_6a0.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpl_3m_6a0.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpl_3m_6a0.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl_3m_6a0.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i]\
    \ == 1\n            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i]\
    \ == 2\n            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i]\
    \ == 3\n            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i]\
    \ == 4\n            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i]\
    \ == 5\n            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i]\
    \ == 6\n            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i]\
    \ == 7\n            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i]\
    \ == 8\n            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i]\
    \ == 9\n            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return\
    \ reversed_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp063jqfmy.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp063jqfmy.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp063jqfmy.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp063jqfmy.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp063jqfmy.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp063jqfmy.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp063jqfmy.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    result = []\n    for i in reversed_arr\n        if i == 1\n      \
    \      push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9fxevirv.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp9fxevirv.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9fxevirv.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9fxevirv.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp9fxevirv.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp9fxevirv.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9fxevirv.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4uxcnc8d.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4uxcnc8d.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4uxcnc8d.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4uxcnc8d.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4uxcnc8d.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4uxcnc8d.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4uxcnc8d.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4uxcnc8d.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4uxcnc8d.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4uxcnc8d.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4uxcnc8d.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4uxcnc8d.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    # Return the\
    \ vector\n    return reversed_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprwcqvfzy.jl:53\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmprwcqvfzy.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprwcqvfzy.jl:53 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprwcqvfzy.jl:52\ntest set:\
    \ Error During Test at /tmp/tmprwcqvfzy.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmprwcqvfzy.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprwcqvfzy.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    result = []\n    for i in reversed_arr\n        if i == 1\n      \
    \      push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from\n    # \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"\n    # if the vector is empty, return an empty vector\n\
    \    if length(reversed_arr) == 0\n        return []\n    end\n    # if the vector\
    \ has any strange number ignore it\n    if length(reversed_arr) == 1\n       \
    \ if reversed_arr[1] == 1\n            return [\"One\"]\n        else\n      \
    \      return []\n        end\n    end\n    # if the vector has any strange number\
    \ ignore it\n    if length(reversed_arr) == 2\n        if reversed_arr[1] == 1\n\
    \            return [\"One\"]\n        else\n            return []\n        end\n\
    \    end\n    # if the vector has any strange number ignore it\n    if length(reversed_arr)\
    \ == 3\n        if reversed_arr[1] == 1\n            return [\"One\"]\n      \
    \  else\n            return []\n        end\n    end\n    # if the vector has\
    \ any strange number ignore it\n    if length(reversed_arr) == 4\n        if reversed_arr[1]\
    \ == 1\n            return [\"One\"]\n        else\n            return []\n  \
    \      end\n    end\n    # if the vector has any strange number ignore it\n  \
    \  if length(reversed_arr) == 5\n        if reversed_arr[1] == 1\n           \
    \ return [\"One\"]\n        else\n            return []\n        end\n    end\n\
    \    # if the vector has any strange number ignore it\n    if length(reversed_arr)\
    \ == 6\n        if reversed_arr[1] == 1\n            return [\"One\"]\n      \
    \  else\n            return []\n        end\n    end\n    # if the vector has\
    \ any strange number ignore it\n    if length(reversed_arr) == 7\n        if reversed_arr[1]\
    \ == 1\n            return [\"One\"]\n        else\n            return []\n  \
    \      end\n    end\n    # if the vector has any strange number ignore it\n  \
    \  if length(re\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzsyocg8o.jl:87\nin expression starting at\
    \ /tmp/tmpzsyocg8o.jl:87\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return [\"One\"]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxrmy_nv7.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxrmy_nv7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxrmy_nv7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxrmy_nv7.jl:28\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxrmy_nv7.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxrmy_nv7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxrmy_nv7.jl:30\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxrmy_nv7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxrmy_nv7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxrmy_nv7.jl:31\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxrmy_nv7.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxrmy_nv7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Remove any number\
    \ that is not between 1 and 9\n    filtered_arr = filter(x -> x >= 1 && x <= 9,\
    \ sorted_arr)\n    # Reverse the vector\n    reversed_arr = reverse(filtered_arr)\n\
    \    # Replace each number by its corresponding name\n    return map(x -> [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"][x], reversed_arr)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    # Return the\
    \ vector\n    return reversed_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp7niwg91.jl:53\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpp7niwg91.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp7niwg91.jl:53 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp7niwg91.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpp7niwg91.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpp7niwg91.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7niwg91.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    # create a dictionary\n    dict = Dict(\"1\" => \"\
    One\", \"2\" => \"Two\", \"3\" => \"Three\", \"4\" => \"Four\", \"5\" => \"Five\"\
    , \"6\" => \"Six\", \"7\" => \"Seven\", \"8\" => \"Eight\", \"9\" => \"Nine\"\
    )\n    # create a new vector\n    new_arr = []\n    # loop through the reversed\
    \ vector\n    for i in reversed_arr\n        # check if the number is between\
    \ 1 and 9 inclusive\n        if i >= 1 && i <= 9\n            # push the corresponding\
    \ name to the new vector\n            push!(new_arr, dict[string(i)])\n      \
    \  end\n    end\n    # return the new vector\n    return new_arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq9lfdtsk.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq9lfdtsk.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq9lfdtsk.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq9lfdtsk.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpq9lfdtsk.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq9lfdtsk.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq9lfdtsk.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    # create a dictionary\n    d = Dict(\"One\" => 1, \"\
    Two\" => 2, \"Three\" => 3, \"Four\" => 4, \"Five\" => 5, \"Six\" => 6, \"Seven\"\
    \ => 7, \"Eight\" => 8, \"Nine\" => 9)\n    # create a new vector\n    new_arr\
    \ = []\n    # iterate through the reversed vector\n    for i in reversed_arr\n\
    \        # if the number is between 1 and 9 inclusive\n        if i >= 1 && i\
    \ <= 9\n            # append the corresponding name to the new vector\n      \
    \      push!(new_arr, d[i])\n        end\n    end\n    # return the new vector\n\
    \    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptd64778t.jl:44\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  KeyError: key 8 not\
    \ found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Int64)\n\
    \     @ Base ./dict.jl:481\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmptd64778t.jl:33\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptd64778t.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptd64778t.jl:43\ntest set:\
    \ Error During Test at /tmp/tmptd64778t.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  KeyError: key 1 not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Int64)\n     @ Base ./dict.jl:481\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmptd64778t.jl:33\n  \
    \ [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptd64778t.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptd64778t.jl:43\ntest set:\
    \ Error During Test at /tmp/tmptd64778t.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  KeyError: key 3\
    \ not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Int64)\n\
    \     @ Base ./dict.jl:481\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmptd64778t.jl:33\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptd64778t.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptd64778t.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    final_arr = []\n    for i in reversed_arr\n        if i == 1\n   \
    \         push!(final_arr, \"One\")\n        elseif i == 2\n            push!(final_arr,\
    \ \"Two\")\n        elseif i == 3\n            push!(final_arr, \"Three\")\n \
    \       elseif i == 4\n            push!(final_arr, \"Four\")\n        elseif\
    \ i == 5\n            push!(final_arr, \"Five\")\n        elseif i == 6\n    \
    \        push!(final_arr, \"Six\")\n        elseif i == 7\n            push!(final_arr,\
    \ \"Seven\")\n        elseif i == 8\n            push!(final_arr, \"Eight\")\n\
    \        elseif i == 9\n            push!(final_arr, \"Nine\")\n        end\n\
    \    end\n    return final_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    result = []\n    for i in reversed_arr\n        if i == 1\n      \
    \      push!(result, \"One\")\n        elseif i == 2\n            push!(result,\
    \ \"Two\")\n        elseif i == 3\n            push!(result, \"Three\")\n    \
    \    elseif i == 4\n            push!(result, \"Four\")\n        elseif i == 5\n\
    \            push!(result, \"Five\")\n        elseif i == 6\n            push!(result,\
    \ \"Six\")\n        elseif i == 7\n            push!(result, \"Seven\")\n    \
    \    elseif i == 8\n            push!(result, \"Eight\")\n        elseif i ==\
    \ 9\n            push!(result, \"Nine\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpla1i0usd.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpla1i0usd.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpla1i0usd.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpla1i0usd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpla1i0usd.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpla1i0usd.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpla1i0usd.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    result = []\n    for i in reversed_arr\n        if\
    \ i == 1\n            push!(result, \"One\")\n        elseif i == 2\n        \
    \    push!(result, \"Two\")\n        elseif i == 3\n            push!(result,\
    \ \"Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n   \
    \     elseif i == 5\n            push!(result, \"Five\")\n        elseif i ==\
    \ 6\n            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    # use a dictionary to map the numbers to their names\n\
    \    number_names = Dict(\"1\" => \"One\", \"2\" => \"Two\", \"3\" => \"Three\"\
    , \"4\" => \"Four\", \"5\" => \"Five\", \"6\" => \"Six\", \"7\" => \"Seven\",\
    \ \"8\" => \"Eight\", \"9\" => \"Nine\")\n    # create an empty vector to store\
    \ the names\n    names = []\n    # iterate over the reversed vector\n    for i\
    \ in reversed_arr\n        # check if the number is between 1 and 9\n        if\
    \ i >= 1 && i <= 9\n            # append the name to the names vector\n      \
    \      push!(names, number_names[string(i)])\n        end\n    end\n    # return\
    \ the names vector\n    return names\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzgurjzj8.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzgurjzj8.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzgurjzj8.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzgurjzj8.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpzgurjzj8.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzgurjzj8.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzgurjzj8.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = filter(x -> x >= 1 && x <= 9, arr)\n    arr\
    \ = map(x -> string(x), arr)\n    arr = map(x -> replace(x, \"1\" => \"One\",\
    \ \"2\" => \"Two\", \"3\" => \"Three\", \"4\" => \"Four\", \"5\" => \"Five\",\
    \ \"6\" => \"Six\", \"7\" => \"Seven\", \"8\" => \"Eight\", \"9\" => \"Nine\"\
    ), arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Filter out all numbers that are not between 1 and 9 inclusive\n    filtered_arr\
    \ = filter(x -> x in 1:9, arr)\n    # Sort the filtered array\n    sorted_arr\
    \ = sort(filtered_arr)\n    # Reverse the sorted array\n    reversed_arr = reverse(sorted_arr)\n\
    \    # Replace each digit by its corresponding name from \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    return\
    \ map(x -> string(x), reversed_arr)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp35cvj41q.jl:33\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp35cvj41q.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp35cvj41q.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp35cvj41q.jl:35\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp35cvj41q.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp35cvj41q.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp35cvj41q.jl:36\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp35cvj41q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp35cvj41q.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp35cvj41q.jl:37\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp35cvj41q.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp35cvj41q.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sorted_arr = sort(arr)\n    # reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # replace each digit by its corresponding\
    \ name\n    for i in 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n\
    \            reversed_arr[i] = \"One\"\n        elseif reversed_arr[i] == 2\n\
    \            reversed_arr[i] = \"Two\"\n        elseif reversed_arr[i] == 3\n\
    \            reversed_arr[i] = \"Three\"\n        elseif reversed_arr[i] == 4\n\
    \            reversed_arr[i] = \"Four\"\n        elseif reversed_arr[i] == 5\n\
    \            reversed_arr[i] = \"Five\"\n        elseif reversed_arr[i] == 6\n\
    \            reversed_arr[i] = \"Six\"\n        elseif reversed_arr[i] == 7\n\
    \            reversed_arr[i] = \"Seven\"\n        elseif reversed_arr[i] == 8\n\
    \            reversed_arr[i] = \"Eight\"\n        elseif reversed_arr[i] == 9\n\
    \            reversed_arr[i] = \"Nine\"\n        end\n    end\n    return reversed_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbfc9bobb.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpbfc9bobb.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbfc9bobb.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbfc9bobb.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpbfc9bobb.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpbfc9bobb.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbfc9bobb.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpksh_u3qm.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpksh_u3qm.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpksh_u3qm.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpksh_u3qm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpksh_u3qm.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpksh_u3qm.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpksh_u3qm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Reverse the vector\n\
    \    reversed_arr = reverse(sorted_arr)\n    # Filter out the numbers that are\
    \ not between 1 and 9 inclusive\n    filtered_arr = filter(x -> x >= 1 && x <=\
    \ 9, reversed_arr)\n    # Map the numbers to their corresponding names\n    mapped_arr\
    \ = map(x -> string(x), filtered_arr)\n    return mapped_arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq5nnrqv8.jl:34\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5nnrqv8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5nnrqv8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpq5nnrqv8.jl:36\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5nnrqv8.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5nnrqv8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpq5nnrqv8.jl:37\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5nnrqv8.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5nnrqv8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpq5nnrqv8.jl:38\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5nnrqv8.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq5nnrqv8.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnsrvqi0l.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpnsrvqi0l.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnsrvqi0l.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnsrvqi0l.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpnsrvqi0l.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpnsrvqi0l.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnsrvqi0l.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    sorted_arr = sort(arr)\n    # Filter the vector\
    \ to only include numbers between 1 and 9\n    filtered_arr = filter(x -> x >=\
    \ 1 && x <= 9, sorted_arr)\n    # Reverse the vector\n    reversed_arr = reverse(filtered_arr)\n\
    \    # Create a dictionary of numbers and their names\n    number_names = Dict(1\
    \ => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 =>\
    \ \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\")\n    # Map the dictionary\
    \ to the reversed vector\n    mapped_arr = map(x -> number_names[x], reversed_arr)\n\
    \    # Return the mapped vector\n    return mapped_arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    sort!(arr)\n    # reverse the vector\n    reverse!(arr)\n\
    \    # replace each digit by its corresponding name from \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    for\
    \ i in 1:length(arr)\n        if arr[i] == 1\n            arr[i] = \"One\"\n \
    \       elseif arr[i] == 2\n            arr[i] = \"Two\"\n        elseif arr[i]\
    \ == 3\n            arr[i] = \"Three\"\n        elseif arr[i] == 4\n         \
    \   arr[i] = \"Four\"\n        elseif arr[i] == 5\n            arr[i] = \"Five\"\
    \n        elseif arr[i] == 6\n            arr[i] = \"Six\"\n        elseif arr[i]\
    \ == 7\n            arr[i] = \"Seven\"\n        elseif arr[i] == 8\n         \
    \   arr[i] = \"Eight\"\n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\
    \n        end\n    end\n    # return the vector\n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptnvoc3_i.jl:53\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmptnvoc3_i.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptnvoc3_i.jl:53 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptnvoc3_i.jl:52\ntest set:\
    \ Error During Test at /tmp/tmptnvoc3_i.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmptnvoc3_i.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptnvoc3_i.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvxiifka3.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpvxiifka3.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvxiifka3.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvxiifka3.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpvxiifka3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpvxiifka3.jl:20\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvxiifka3.jl:23\n"
  exit_code: 1
  status: SyntaxError
