name: HumanEval_30_get_positive
language: jl
results:
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l[l .> 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [i for i in l if i > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [i for i in l if i > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [i for i in l if i > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [i for i in l if i > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [i for i in l if i > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [i for i in l if i > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l[l .> 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [i for i in l if i > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    new_l = []\n    for i in l\n        if i > 0\n            push!(new_l,\
    \ i)\n        end\n    end\n    return new_l\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x>0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l[l .> 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [i for i in l if i > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [i for i in l if i > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return filter(x -> x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x for x in l if x > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [i for i in l if i > 0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    \t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9,\
    \ 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
