name: HumanEval_149_sorted_list_sum
language: jl
results:
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length of each word\n    sorted_lst = sort(lst, by=length)\n\
    \    # create a new list to store the result\n    result = []\n    # loop through\
    \ the sorted list\n    for i in sorted_lst\n        # if the length of the word\
    \ is even, append it to the result list\n        if length(i) % 2 == 0\n     \
    \       push!(result, i)\n        end\n    end\n    # return the result list\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpupzjasj6.jl:40\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpupzjasj6.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpupzjasj6.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpupzjasj6.jl:43\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpupzjasj6.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpupzjasj6.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpupzjasj6.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2 == 1\n    if lst_len_odd\n\
    \        lst_len = lst_len - 1\n    end\n    lst_len_half = lst_len / 2\n    lst_len_half_odd\
    \ = lst_len_half % 2 == 1\n    if lst_len_half_odd\n        lst_len_half = lst_len_half\
    \ - 1\n    end\n    lst_len_half_half = lst_len_half / 2\n    lst_len_half_half_odd\
    \ = lst_len_half_half % 2 == 1\n    if lst_len_half_half_odd\n        lst_len_half_half\
    \ = lst_len_half_half - 1\n    end\n    lst_len_half_half_half = lst_len_half_half\
    \ / 2\n    lst_len_half_half_half_odd = lst_len_half_half_half % 2 == 1\n    if\
    \ lst_len_half_half_half_odd\n        lst_len_half_half_half = lst_len_half_half_half\
    \ - 1\n    end\n    lst_len_half_half_half_half = lst_len_half_half_half / 2\n\
    \    lst_len_half_half_half_half_odd = lst_len_half_half_half_half % 2 == 1\n\
    \    if lst_len_half_half_half_half_odd\n        lst_len_half_half_half_half =\
    \ lst_len_half_half_half_half - 1\n    end\n    lst_len_half_half_half_half_half\
    \ = lst_len_half_half_half_half / 2\n    lst_len_half_half_half_half_half_odd\
    \ = lst_len_half_half_half_half_half % 2 == 1\n    if lst_len_half_half_half_half_half_odd\n\
    \        lst_len_half_half_half_half_half = lst\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsfdfqxv1.jl:1\nin expression starting at /tmp/tmpsfdfqxv1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_sorted = sort(lst, by=length)\n    lst_sorted_unique = unique(lst_sorted)\n\
    \    lst_sorted_unique_odd = lst_sorted_unique[mod.(length.(lst_sorted_unique),\
    \ 2) .== 0]\n    return lst_sorted_unique_odd\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp1f0d0ycp.jl:31\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1f0d0ycp.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1f0d0ycp.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp1f0d0ycp.jl:34\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1f0d0ycp.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1f0d0ycp.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1f0d0ycp.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Sort the list by length of the strings\n    sorted_lst = sort(lst, by=length)\n\
    \    # Initialize an empty list\n    result = []\n    # Iterate over the sorted\
    \ list\n    for i in sorted_lst\n        # If the length of the string is even\n\
    \        if length(i) % 2 == 0\n            # Append the string to the result\
    \ list\n            push!(result, i)\n        end\n    end\n    # Return the result\
    \ list\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpts7683q7.jl:41\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpts7683q7.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpts7683q7.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpts7683q7.jl:44\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpts7683q7.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpts7683q7.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpts7683q7.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #remove all odd length strings\n    for i in 1:length(lst)\n        if\
    \ length(lst[i]) % 2 != 0\n            deleteat!(lst, i)\n        end\n    end\n\
    \    #sort by length\n    sort!(lst, by = x -> length(x))\n    return lst\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyoepfobe.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpyoepfobe.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyoepfobe.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyoepfobe.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpyoepfobe.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpyoepfobe.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyoepfobe.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyoepfobe.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpyoepfobe.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [4]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpyoepfobe.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyoepfobe.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyoepfobe.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Create a new vector\n    new_lst = []\n    # Iterate through the vector\n\
    \    for i in lst\n        # If the length of the string is even, append it to\
    \ the new vector\n        if length(i) % 2 == 0\n            push!(new_lst, i)\n\
    \        end\n    end\n    # Sort the vector by length\n    sort!(new_lst, by\
    \ = length)\n    # Return the new vector\n    return new_lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnoj_v_93.jl:40\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnoj_v_93.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnoj_v_93.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnoj_v_93.jl:43\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnoj_v_93.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnoj_v_93.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnoj_v_93.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst =\
    \ sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(l\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagflv6u1.jl:55\nin expression starting at\
    \ /tmp/tmpagflv6u1.jl:55\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2\n    if lst_len_odd\
    \ == 0\n        return lst\n    else\n        return lst[1:end-1]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk0kmx4tt.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk0kmx4tt.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk0kmx4tt.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpk0kmx4tt.jl:32\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk0kmx4tt.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk0kmx4tt.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpk0kmx4tt.jl:33\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk0kmx4tt.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk0kmx4tt.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpk0kmx4tt.jl:34\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk0kmx4tt.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk0kmx4tt.jl:30\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk0kmx4tt.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by = length)\n    for i in 1:length(lst)\n        if length(lst[i])\
    \ % 2 != 0\n            deleteat!(lst, i)\n        end\n    end\n    return lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpji900i5a.jl:31\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpji900i5a.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpji900i5a.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpji900i5a.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpji900i5a.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpji900i5a.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpji900i5a.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpji900i5a.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpji900i5a.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpji900i5a.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpji900i5a.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpji900i5a.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_n_j7kvy.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_n_j7kvy.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_n_j7kvy.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_n_j7kvy.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprvsz4ro5.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprvsz4ro5.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprvsz4ro5.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprvsz4ro5.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #sort by length\n    sorted_lst = sort(lst, by=length)\n    #sort by alphabet\n\
    \    sorted_lst = sort(sorted_lst)\n    #delete odd length\n    for i in 1:length(sorted_lst)\n\
    \        if length(sorted_lst[i]) % 2 != 0\n            deleteat!(sorted_lst,\
    \ i)\n        end\n    end\n    return sorted_lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvmkftz8q.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\\\
    n  BoundsError: attempt to access 1-element Vector{String} at index [3]\\n  Stacktrace:\\\
    n   [1] getindex\\n     @ ./array.jl:861 [inlined]\\n   [2] sorted_list_sum(lst::Vector{String})\\\
    n     @ Main /tmp/tmpvmkftz8q.jl:24\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpvmkftz8q.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpvmkftz8q.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpvmkftz8q.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\\n\
    \  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861 [inlined]\\n   [2] sorted_list_sum(lst::Vector{String})\\\
    n     @ Main /tmp/tmpvmkftz8q.jl:24\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpvmkftz8q.jl:36 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpvmkftz8q.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpvmkftz8q.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\\n  Stacktrace:\\n \
    \  [1] getindex\\n     @ ./array.jl:861 [inlined]\\n   [2] sorted_list_sum(lst::Vector{String})\\\
    n     @ Main /tmp/tmpvmkftz8q.jl:24\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpvmkftz8q.jl:37 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2\n    if lst_len_odd\
    \ == 0\n        return lst\n    else\n        return lst[1:end-1]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqpee3_8_.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqpee3_8_.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqpee3_8_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpqpee3_8_.jl:32\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqpee3_8_.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqpee3_8_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpqpee3_8_.jl:33\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqpee3_8_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqpee3_8_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpqpee3_8_.jl:34\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqpee3_8_.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqpee3_8_.jl:30\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqpee3_8_.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    even_length_words = []\n    for word in lst\n        if length(word) %\
    \ 2 == 0\n            push!(even_length_words, word)\n        end\n    end\n \
    \   return sort(even_length_words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp4hf7jnii.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hf7jnii.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hf7jnii.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4hf7jnii.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst =\
    \ sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(l\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcwpyicu4.jl:55\nin expression starting at\
    \ /tmp/tmpcwpyicu4.jl:55\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length\n    sorted_lst = sort(lst, by=length)\n   \
    \ # find the length of the longest word\n    max_len = length(sorted_lst[end])\n\
    \    # create a new list to store the result\n    result = []\n    # iterate through\
    \ the list\n    for i in 1:length(sorted_lst)\n        # check if the length of\
    \ the word is even\n        if length(sorted_lst[i]) % 2 == 0\n            # if\
    \ yes, append it to the result list\n            push!(result, sorted_lst[i])\n\
    \        end\n    end\n    # sort the result list alphabetically\n    sort!(result)\n\
    \    # return the result list\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp58rkxfco.jl:48\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp58rkxfco.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp58rkxfco.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp58rkxfco.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_lst = sort(lst, by=length)\n    # sort by\
    \ alphabetical order\n    sorted_lst = sort(sorted_lst)\n    # remove odd length\
    \ strings\n    sorted_lst = [x for x in sorted_lst if length(x) % 2 == 0]\n  \
    \  return sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpo8g11ssg.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo8g11ssg.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo8g11ssg.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo8g11ssg.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by = x -> length(x))\n    lst = sort(lst, by = x -> x)\n\
    \    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp5o823ozb.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5o823ozb.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5o823ozb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5o823ozb.jl:28\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5o823ozb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5o823ozb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5o823ozb.jl:29\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5o823ozb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5o823ozb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5o823ozb.jl:30\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5o823ozb.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5o823ozb.jl:26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5o823ozb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by = x -> length(x))\n    lst = sort(lst, by = x -> x)\n\
    \    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmptz7x0e1o.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptz7x0e1o.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptz7x0e1o.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptz7x0e1o.jl:28\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptz7x0e1o.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptz7x0e1o.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptz7x0e1o.jl:29\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptz7x0e1o.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptz7x0e1o.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptz7x0e1o.jl:30\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptz7x0e1o.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptz7x0e1o.jl:26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptz7x0e1o.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length\n    sorted_list = sort(lst, by=length)\n  \
    \  # remove odd length strings\n    for i in 1:length(sorted_list)\n        if\
    \ length(sorted_list[i]) % 2 != 0\n            deleteat!(sorted_list, i)\n   \
    \     end\n    end\n    return sorted_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp83d6u1mq.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp83d6u1mq.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp83d6u1mq.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp83d6u1mq.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp83d6u1mq.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp83d6u1mq.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp83d6u1mq.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp83d6u1mq.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp83d6u1mq.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp83d6u1mq.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp83d6u1mq.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp83d6u1mq.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    lst = sort(lst, by=x->x[1])\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqb_0b89_.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqb_0b89_.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqb_0b89_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqb_0b89_.jl:28\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqb_0b89_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqb_0b89_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqb_0b89_.jl:29\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqb_0b89_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqb_0b89_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqb_0b89_.jl:30\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqb_0b89_.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqb_0b89_.jl:26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqb_0b89_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0vexx773.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0vexx773.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0vexx773.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0vexx773.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Create a new vector to store the result\n    result = Vector{String}()\n\
    \    # Sort the vector by length of each word\n    sorted_lst = sort(lst, by=length)\n\
    \    # Iterate through the sorted vector\n    for i in 1:length(sorted_lst)\n\
    \        # If the length of the word is even, append it to the result vector\n\
    \        if length(sorted_lst[i]) % 2 == 0\n            push!(result, sorted_lst[i])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp4lzhfdls.jl:39\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4lzhfdls.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4lzhfdls.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4lzhfdls.jl:42\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4lzhfdls.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4lzhfdls.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4lzhfdls.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_new = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(lst_new, i)\n        end\n    end\n    sort(lst_new)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8kilisfn.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8kilisfn.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8kilisfn.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8kilisfn.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length of each word\n    sorted_list = sort(lst, by=length)\n\
    \    # filter the list by even length\n    even_list = filter(x -> length(x) %\
    \ 2 == 0, sorted_list)\n    # sort the list alphabetically\n    sorted_even_list\
    \ = sort(even_list)\n    return sorted_even_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmeq_iu41.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmeq_iu41.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmeq_iu41.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmeq_iu41.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_odd = []\n    lst_even = []\n    for i in lst\n        if length(i)\
    \ % 2 == 0\n            push!(lst_even, i)\n        else\n            push!(lst_odd,\
    \ i)\n        end\n    end\n    return sort(lst_even)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn5ts2txp.jl:40\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn5ts2txp.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn5ts2txp.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn5ts2txp.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2\n    if lst_len_odd\
    \ == 0\n        return lst\n    else\n        return lst[1:end-1]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7xz7_tju.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7xz7_tju.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7xz7_tju.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp7xz7_tju.jl:32\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7xz7_tju.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7xz7_tju.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp7xz7_tju.jl:33\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7xz7_tju.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7xz7_tju.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp7xz7_tju.jl:34\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7xz7_tju.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7xz7_tju.jl:30\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7xz7_tju.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_new = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(lst_new, i)\n        end\n    end\n    sort(lst_new)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpst5p10yu.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpst5p10yu.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpst5p10yu.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpst5p10yu.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length of each word\n    sorted_lst = sort(lst, by=length)\n\
    \    # create a new list to store the result\n    result = []\n    # iterate through\
    \ the list\n    for i in sorted_lst\n        # if the length of the word is even,\
    \ append it to the result list\n        if length(i) % 2 == 0\n            push!(result,\
    \ i)\n        end\n    end\n    # return the result list\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpajvxiqqc.jl:40\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpajvxiqqc.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpajvxiqqc.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpajvxiqqc.jl:43\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpajvxiqqc.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpajvxiqqc.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpajvxiqqc.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2\n    lst_len_even\
    \ = lst_len - lst_len_odd\n    lst_even = lst[1:lst_len_even]\n    lst_odd = lst[lst_len_even+1:lst_len]\n\
    \    lst_even_sorted = sort(lst_even)\n    lst_odd_sorted = sort(lst_odd)\n  \
    \  return lst_even_sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpwoj1aa9o.jl:32\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwoj1aa9o.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwoj1aa9o.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwoj1aa9o.jl:33\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwoj1aa9o.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwoj1aa9o.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwoj1aa9o.jl:34\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwoj1aa9o.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwoj1aa9o.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwoj1aa9o.jl:35\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwoj1aa9o.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwoj1aa9o.jl:31\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwoj1aa9o.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_lst = sort(lst, by=length)\n    # sort by\
    \ alphabet\n    sorted_lst = sort(sorted_lst)\n    # delete odd length\n    for\
    \ i in 1:length(sorted_lst)\n        if length(sorted_lst[i]) % 2 != 0\n     \
    \       deleteat!(sorted_lst, i)\n        end\n    end\n    return sorted_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp58db33r4.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp58db33r4.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp58db33r4.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp58db33r4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp58db33r4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp58db33r4.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp58db33r4.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp58db33r4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp58db33r4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp58db33r4.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp58db33r4.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp58db33r4.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length of each word\n    sorted_lst = sort(lst, by=length)\n\
    \    # sort the list by alphabetically\n    sorted_lst = sort(sorted_lst)\n  \
    \  # delete the strings that have odd lengths from it\n    for i in 1:length(sorted_lst)\n\
    \        if length(sorted_lst[i]) % 2 != 0\n            deleteat!(sorted_lst,\
    \ i)\n        end\n    end\n    return sorted_lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7mpblhp_.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp7mpblhp_.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7mpblhp_.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7mpblhp_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp7mpblhp_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp7mpblhp_.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7mpblhp_.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7mpblhp_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp7mpblhp_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp7mpblhp_.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7mpblhp_.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7mpblhp_.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(lst, by=length)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmprsppcgfu.jl:25\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsppcgfu.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsppcgfu.jl:24\ntest set: Test\
    \ Failed at /tmp/tmprsppcgfu.jl:26\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    AI\", \"asdf\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsppcgfu.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsppcgfu.jl:24\ntest set: Test\
    \ Failed at /tmp/tmprsppcgfu.jl:27\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsppcgfu.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsppcgfu.jl:24\ntest set: Test\
    \ Failed at /tmp/tmprsppcgfu.jl:28\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\", \"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsppcgfu.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsppcgfu.jl:24\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprsppcgfu.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = filter(x -> length(x) % 2 == 0, lst)\n    lst = sort(lst, by = length)\n\
    \    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpn4frlx49.jl:30\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn4frlx49.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn4frlx49.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpn4frlx49.jl:33\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn4frlx49.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn4frlx49.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn4frlx49.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_new = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(lst_new, i)\n        end\n    end\n    sort(lst_new)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt3in5yfs.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt3in5yfs.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt3in5yfs.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt3in5yfs.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    lst = sort(lst, by=x->x[1])\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp03dps3_a.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp03dps3_a.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp03dps3_a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp03dps3_a.jl:28\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp03dps3_a.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp03dps3_a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp03dps3_a.jl:29\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp03dps3_a.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp03dps3_a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp03dps3_a.jl:30\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp03dps3_a.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp03dps3_a.jl:26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp03dps3_a.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_sorted = sort(lst, by = length)\n    lst_sorted = sort(lst_sorted,\
    \ by = sort)\n    lst_sorted_even = []\n    for i in lst_sorted\n        if length(i)\
    \ % 2 == 0\n            push!(lst_sorted_even, i)\n        end\n    end\n    return\
    \ lst_sorted_even\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp57lqme2a.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n    [1] lt(o::Base.Order.By{typeof(sort), Base.Order.ForwardOrdering},\
    \ a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n\
    \      @ ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64,\
    \ hi::Int64, a::Base.Sort.MergeSortAlg, o::Base.Order.By{typeof(sort), Base.Order.ForwardOrdering},\
    \ t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @\
    \ ./sort.jl:591 [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n  \
    \  [6] #sort!#8\n      @ ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772\
    \ [inlined]\n    [8] sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmp57lqme2a.jl:19\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp57lqme2a.jl:33 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp57lqme2a.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp57lqme2a.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching sort(::String)\n  Closest candidates are:\n\
    \    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.S"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp57lqme2a.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length\n    sorted_list = sort(lst, by=length)\n  \
    \  # initialize a new list\n    new_list = []\n    # iterate through the sorted\
    \ list\n    for i in sorted_list\n        # if the length of the string is even\n\
    \        if length(i) % 2 == 0\n            # append the string to the new list\n\
    \            push!(new_list, i)\n        end\n    end\n    # return the new list\n\
    \    return new_list\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpw88cenjn.jl:41\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw88cenjn.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw88cenjn.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpw88cenjn.jl:44\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw88cenjn.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw88cenjn.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw88cenjn.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_sorted = sort(lst, by=length)\n    lst_sorted = sort(lst_sorted, by=length)\n\
    \    lst_sorted = sort(lst_sorted, by=length)\n    lst_sorted = sort(lst_sorted,\
    \ by=length)\n    lst_sorted = sort(lst_sorted, by=length)\n    lst_sorted = sort(lst_sorted,\
    \ by=length)\n    lst_sorted = sort(lst_sorted, by=length)\n    lst_sorted = sort(lst_sorted,\
    \ by=length)\n    lst_sorted = sort(lst_sorted, by=length)\n    lst_sorted = sort(lst_sorted,\
    \ by=length)\n    lst_sorted = sort(lst_sorted, by=length)\n    lst_sorted = sort(lst_sorted,\
    \ by=length)\n    lst_sorted = sort(lst_sorted, by=length)\n    lst_sorted = sort(lst_sorted,\
    \ by=length)\n    lst_sorted = sort(lst_sorted, by=length)\n    lst_sorted = sort(lst_sorted,\
    \ by=length)\n    lst_sorted = sort(lst_sorted, by=length)\n    lst_sorted = sort(lst_sorted,\
    \ by=length)\n    lst_sorted = sort(lst_sorted, by=length)\n    lst_sorted = sort(lst_sorted,\
    \ by=length)\n    lst_sorted = sort(lst_sorted, by=length)\n    lst_sorted = sort(lst_sorted,\
    \ by=length)\n    lst_sorted = sort(lst_sorted, by=length)\n    lst_sorted = sort(lst_sorted,\
    \ by=length)\n    lst_sorted = sort(lst_sorted, by=length)\n    lst_sorted = sort(lst_sorted\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi9e2o6cl.jl:44\nin expression starting at\
    \ /tmp/tmpi9e2o6cl.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpss5hkwjv.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpss5hkwjv.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpss5hkwjv.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpss5hkwjv.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by = length)\n    lst = sort(lst, by = sort)\n    lst\
    \ = lst[1:2:end]\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpzvl46iax.jl:28\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n    [1] lt(o::Base.Order.By{typeof(sort), Base.Order.ForwardOrdering},\
    \ a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n\
    \      @ ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64,\
    \ hi::Int64, a::Base.Sort.MergeSortAlg, o::Base.Order.By{typeof(sort), Base.Order.ForwardOrdering},\
    \ t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @\
    \ ./sort.jl:591 [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n  \
    \  [6] #sort!#8\n      @ ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772\
    \ [inlined]\n    [8] sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmpzvl46iax.jl:19\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpzvl46iax.jl:28 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpzvl46iax.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpzvl46iax.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching sort(::String)\n  Closest candidates are:\n\
    \    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.S"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzvl46iax.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_list = []\n    for i in lst\n        if length(i) % 2 == 0\n     \
    \       push!(new_list, i)\n        end\n    end\n    sort(new_list)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8pv4hd8u.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8pv4hd8u.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8pv4hd8u.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8pv4hd8u.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst\
    \ = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n\
    \    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst =\
    \ sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n\
    \    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst =\
    \ sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n\
    \    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst =\
    \ sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n\
    \    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst =\
    \ sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n\
    \    lst = sort(lst, by = length)\n    lst = sort(l\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_y9rzxro.jl:55\nin expression starting at\
    \ /tmp/tmp_y9rzxro.jl:55\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    lst = sort(lst, by=x->x[1])\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpndngm4v9.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndngm4v9.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndngm4v9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpndngm4v9.jl:28\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndngm4v9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndngm4v9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpndngm4v9.jl:29\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndngm4v9.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndngm4v9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpndngm4v9.jl:30\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpndngm4v9.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndngm4v9.jl:26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpndngm4v9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_list = sort(lst, by=length)\n    # sort by\
    \ alphabet\n    sorted_list = sort(sorted_list)\n    # remove odd length\n   \
    \ sorted_list = [x for x in sorted_list if length(x) % 2 == 0]\n    return sorted_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnn0753v2.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnn0753v2.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnn0753v2.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnn0753v2.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst =\
    \ sort(lst, by=length)\n    return lst\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbxki0nzj.jl:28\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxki0nzj.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxki0nzj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpbxki0nzj.jl:29\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    AI\", \"asdf\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxki0nzj.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxki0nzj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpbxki0nzj.jl:30\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxki0nzj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxki0nzj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpbxki0nzj.jl:31\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\", \"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxki0nzj.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxki0nzj.jl:27\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbxki0nzj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_sorted = sort(lst)\n    lst_sorted_len = sort(lst, by=length)\n  \
    \  lst_sorted_len_unique = unique(lst_sorted_len)\n    lst_sorted_len_unique_odd\
    \ = lst_sorted_len_unique[1:2:end]\n    lst_sorted_len_unique_even = lst_sorted_len_unique[2:2:end]\n\
    \    lst_sorted_len_unique_even_sorted = sort(lst_sorted_len_unique_even)\n  \
    \  lst_sorted_len_unique_even_sorted_final = vcat(lst_sorted_len_unique_even_sorted,\
    \ lst_sorted_len_unique_odd)\n    return lst_sorted_len_unique_even_sorted_final\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_0u0hzz5.jl:32\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_0u0hzz5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_0u0hzz5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_0u0hzz5.jl:33\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"school\", \"b\", \"asdf\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_0u0hzz5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_0u0hzz5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_0u0hzz5.jl:34\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"d\", \"c\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_0u0hzz5.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_0u0hzz5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_0u0hzz5.jl:35\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_0u0hzz5.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_0u0hzz5.jl:31\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_0u0hzz5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length of each word\n    sorted_list = sort(lst, by=length)\n\
    \    # delete the strings that have odd lengths\n    for i in 1:length(sorted_list)\n\
    \        if length(sorted_list[i]) % 2 != 0\n            deleteat!(sorted_list,\
    \ i)\n        end\n    end\n    return sorted_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvfcl0c18.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpvfcl0c18.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvfcl0c18.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvfcl0c18.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvfcl0c18.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpvfcl0c18.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvfcl0c18.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvfcl0c18.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvfcl0c18.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpvfcl0c18.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvfcl0c18.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvfcl0c18.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by = length)\n    lst = sort(lst, by = sort)\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpts_ntnfn.jl:27\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n    [1] lt(o::Base.Order.By{typeof(sort), Base.Order.ForwardOrdering},\
    \ a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n\
    \      @ ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64,\
    \ hi::Int64, a::Base.Sort.MergeSortAlg, o::Base.Order.By{typeof(sort), Base.Order.ForwardOrdering},\
    \ t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @\
    \ ./sort.jl:591 [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n  \
    \  [6] #sort!#8\n      @ ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772\
    \ [inlined]\n    [8] sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmpts_ntnfn.jl:19\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpts_ntnfn.jl:27 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpts_ntnfn.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpts_ntnfn.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching sort(::String)\n  Closest candidates are:\n\
    \    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.S"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpts_ntnfn.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length\n    sorted_lst = sort(lst, by=length)\n   \
    \ # get the length of the first element\n    length_of_first_element = length(sorted_lst[1])\n\
    \    # create a new list\n    new_lst = []\n    # loop through the list\n    for\
    \ i in 1:length(sorted_lst)\n        # if the length of the element is not equal\
    \ to the length of the first element\n        if length(sorted_lst[i]) != length_of_first_element\n\
    \            # break the loop\n            break\n        end\n        # append\
    \ the element to the new list\n        push!(new_lst, sorted_lst[i])\n    end\n\
    \    # return the new list\n    return new_lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp_vzga9zs.jl:42\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\"] == [\"aa\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_vzga9zs.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_vzga9zs.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp_vzga9zs.jl:43\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_vzga9zs.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_vzga9zs.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp_vzga9zs.jl:44\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_vzga9zs.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_vzga9zs.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp_vzga9zs.jl:45\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_vzga9zs.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_vzga9zs.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp_vzga9zs.jl:47\n  Exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_vzga9zs.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_new = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(lst_new, i)\n        end\n    end\n    return sort(lst_new)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4k_x1a7r.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4k_x1a7r.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4k_x1a7r.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4k_x1a7r.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length of the words\n    sorted_lst = sort(lst, by=length)\n\
    \    # create a new list to store the result\n    result = []\n    # iterate through\
    \ the list\n    for i in 1:length(sorted_lst)\n        # if the length of the\
    \ word is even, append it to the result list\n        if length(sorted_lst[i])\
    \ % 2 == 0\n            push!(result, sorted_lst[i])\n        end\n    end\n \
    \   # sort the result list alphabetically\n    sort(result)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg6zy96pw.jl:43\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6zy96pw.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6zy96pw.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg6zy96pw.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # lst = [\"aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\"]\n    # lst = [\"\
    ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aa\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"aa\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\",\
    \ \"a\", \"aa\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"\
    a\", \"aa\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"a\", \"aa\", \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"aa\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"a\", \"aa\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aa\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\", \"a\", \"aa\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n\
    \    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aa\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"\
    aaa\", \"cd\", \"a\", \"aa\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    aa\", \"a\", \"a\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgw5bkc_w.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgw5bkc_w.jl:1\n\
    in expression starting at /tmp/tmpgw5bkc_w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_sorted = sort(lst)\n    lst_sorted_len = sort(lst, by=length)\n  \
    \  lst_sorted_len_uniq = unique(lst_sorted_len)\n    lst_sorted_len_uniq_len =\
    \ length(lst_sorted_len_uniq)\n    lst_sorted_len_uniq_len_odd = lst_sorted_len_uniq_len\
    \ % 2\n    if lst_sorted_len_uniq_len_odd == 0\n        return lst_sorted_len_uniq\n\
    \    else\n        return lst_sorted_len_uniq[1:end-1]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxbsb9pb6.jl:34\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxbsb9pb6.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxbsb9pb6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxbsb9pb6.jl:35\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    AI\", \"asdf\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxbsb9pb6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxbsb9pb6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxbsb9pb6.jl:36\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxbsb9pb6.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxbsb9pb6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxbsb9pb6.jl:37\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\", \"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxbsb9pb6.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxbsb9pb6.jl:33\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxbsb9pb6.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_lst = sort(lst, by=length)\n    # remove\
    \ odd length strings\n    sorted_lst = filter(x -> length(x) % 2 == 0, sorted_lst)\n\
    \    # sort by alphabetical order\n    sorted_lst = sort(sorted_lst)\n    return\
    \ sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp1jmbtehu.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1jmbtehu.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1jmbtehu.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1jmbtehu.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst =\
    \ sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(l\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp97jlyv9c.jl:55\nin expression starting at\
    \ /tmp/tmp97jlyv9c.jl:55\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # lst = [\"aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdpruqcu.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdpruqcu.jl:1\n\
    in expression starting at /tmp/tmpbdpruqcu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Create a new vector to store the results\n    result = Vector{String}()\n\
    \    # Sort the vector by length\n    sorted_lst = sort(lst, by=length)\n    #\
    \ Iterate through the sorted vector\n    for i in 1:length(sorted_lst)\n     \
    \   # If the length of the string is even, add it to the result vector\n     \
    \   if length(sorted_lst[i]) % 2 == 0\n            push!(result, sorted_lst[i])\n\
    \        end\n    end\n    # Return the result vector\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxc99aj6c.jl:40\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxc99aj6c.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxc99aj6c.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxc99aj6c.jl:43\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxc99aj6c.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxc99aj6c.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxc99aj6c.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqendqt8z.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqendqt8z.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqendqt8z.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqendqt8z.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # remove odd length strings\n    lst = filter(x -> length(x) % 2 == 0,\
    \ lst)\n    # sort by length\n    lst = sort(lst, by = length)\n    # sort by\
    \ alphabet\n    lst = sort(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzv5_c80a.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzv5_c80a.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzv5_c80a.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzv5_c80a.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length of each word\n    sorted_list = sort(lst, by=length)\n\
    \    # sort by alphabetically\n    sorted_list = sort(sorted_list)\n    # delete\
    \ the strings that have odd lengths from it\n    sorted_list = [x for x in sorted_list\
    \ if length(x) % 2 == 0]\n    return sorted_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_hrly8g2.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_hrly8g2.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_hrly8g2.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_hrly8g2.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # lst = [\"aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\"]\n    # lst = [\"\
    ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"\
    a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\",\
    \ \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n\
    \    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"\
    a\", \"a\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz6s8aowj.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz6s8aowj.jl:1\n\
    in expression starting at /tmp/tmpz6s8aowj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the vector by length of each word\n    sorted_lst = sort(lst, by=length)\n\
    \    # initialize a new vector to store the result\n    result = Vector{String}()\n\
    \    # loop through the vector\n    for i in 1:length(sorted_lst)\n        # if\
    \ the length of the word is even, push it to the result vector\n        if length(sorted_lst[i])\
    \ % 2 == 0\n            push!(result, sorted_lst[i])\n        end\n    end\n \
    \   # return the result vector\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvrh80cg1.jl:40\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrh80cg1.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrh80cg1.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvrh80cg1.jl:43\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrh80cg1.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrh80cg1.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvrh80cg1.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_sort = sort(lst)\n    lst_sort_len = length(lst_sort)\n\
    \    lst_sort_len_half = lst_sort_len/2\n    lst_sort_len_half_int = Int(lst_sort_len_half)\n\
    \    lst_sort_len_half_int_half = lst_sort_len_half_int/2\n    lst_sort_len_half_int_half_int\
    \ = Int(lst_sort_len_half_int_half)\n    lst_sort_len_half_int_half_int_half =\
    \ lst_sort_len_half_int_half_int/2\n    lst_sort_len_half_int_half_int_half_int\
    \ = Int(lst_sort_len_half_int_half_int_half)\n    lst_sort_len_half_int_half_int_half_int_half\
    \ = lst_sort_len_half_int_half_int_half_int/2\n    lst_sort_len_half_int_half_int_half_int_half_int\
    \ = Int(lst_sort_len_half_int_half_int_half_int_half)\n    lst_sort_len_half_int_half_int_half_int_half_int_half\
    \ = lst_sort_len_half_int_half_int_half_int_half_int/2\n    lst_sort_len_half_int_half_int_half_int_half_int_half_int\
    \ = Int(lst_sort_len_half_int_half_int_half_int_half_int_half)\n    lst_sort_len_half_int_half_int_half_int_half_int_half_int_half\
    \ = lst_sort_len_half_int_half_int_half_int_half_int_half_int/2\n    lst_sort_len_half_int_half_int_half_int_half_int_half_int_half_int\
    \ = Int(lst_\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t\
    @test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpawwg30bp.jl:33\nin expression starting at\
    \ /tmp/tmpawwg30bp.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length of the string\n    sorted_lst = sort(lst, by=length)\n\
    \    # get the length of the first string\n    length_of_first_string = length(sorted_lst[1])\n\
    \    # filter the list by the length of the first string\n    filtered_lst = filter(x\
    \ -> length(x) == length_of_first_string, sorted_lst)\n    # sort the filtered\
    \ list alphabetically\n    sorted_filtered_lst = sort(filtered_lst)\n    return\
    \ sorted_filtered_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpi6_szb8h.jl:33\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\"] == [\"aa\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6_szb8h.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6_szb8h.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpi6_szb8h.jl:34\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6_szb8h.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6_szb8h.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpi6_szb8h.jl:35\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6_szb8h.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6_szb8h.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpi6_szb8h.jl:36\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6_szb8h.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6_szb8h.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpi6_szb8h.jl:38\n  Exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi6_szb8h.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # remove odd length strings\n    lst = filter(x -> length(x) % 2 == 0,\
    \ lst)\n    # sort by length\n    sorted_lst = sort(lst, by = length)\n    # sort\
    \ by alphabet\n    sorted_lst = sort(sorted_lst)\n    return sorted_lst\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5o9prj68.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5o9prj68.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5o9prj68.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5o9prj68.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_sorted = sort(lst, by=length)\n    lst_sorted = sort(lst_sorted, by=length)\n\
    \    return lst_sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpnfumaid6.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnfumaid6.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnfumaid6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnfumaid6.jl:28\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    AI\", \"asdf\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnfumaid6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnfumaid6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnfumaid6.jl:29\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnfumaid6.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnfumaid6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnfumaid6.jl:30\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\", \"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnfumaid6.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnfumaid6.jl:26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnfumaid6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2\n    if lst_len_odd\
    \ == 0\n        return lst\n    else\n        lst_len_even = lst_len - 1\n   \
    \     return lst[1:lst_len_even]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpor2qhbsq.jl:32\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpor2qhbsq.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpor2qhbsq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpor2qhbsq.jl:33\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpor2qhbsq.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpor2qhbsq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpor2qhbsq.jl:34\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpor2qhbsq.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpor2qhbsq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpor2qhbsq.jl:35\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpor2qhbsq.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpor2qhbsq.jl:31\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpor2qhbsq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_lst = sort(lst, by=length)\n    # sort by\
    \ alphabet\n    sorted_lst = sort(sorted_lst)\n    # remove odd length strings\n\
    \    for i in 1:length(sorted_lst)\n        if length(sorted_lst[i]) % 2 != 0\n\
    \            deleteat!(sorted_lst, i)\n        end\n    end\n    return sorted_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpohg00lh5.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpohg00lh5.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpohg00lh5.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpohg00lh5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpohg00lh5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpohg00lh5.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpohg00lh5.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpohg00lh5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpohg00lh5.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpohg00lh5.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpohg00lh5.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpohg00lh5.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2 == 1\n    if lst_len_odd\n\
    \        lst = lst[1:end-1]\n    end\n    lst = sort(lst)\n    return lst\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb6nig3th.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6nig3th.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6nig3th.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpb6nig3th.jl:32\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6nig3th.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6nig3th.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpb6nig3th.jl:33\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6nig3th.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6nig3th.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpb6nig3th.jl:34\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb6nig3th.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6nig3th.jl:30\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb6nig3th.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst\
    \ = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n\
    \    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst =\
    \ sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n\
    \    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst =\
    \ sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n\
    \    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst =\
    \ sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n\
    \    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst =\
    \ sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n\
    \    lst = sort(lst, by = length)\n    lst = sort(l\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcm78hg5r.jl:55\nin expression starting at\
    \ /tmp/tmpcm78hg5r.jl:55\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = 0\n    for i in 1:lst_len\n \
    \       if length(lst[i]) % 2 == 1\n            lst_len_odd += 1\n        end\n\
    \    end\n    lst_len_even = lst_len - lst_len_odd\n    lst_even = zeros(String,\
    \ lst_len_even)\n    lst_even_ind = 1\n    for i in 1:lst_len\n        if length(lst[i])\
    \ % 2 == 0\n            lst_even[lst_even_ind] = lst[i]\n            lst_even_ind\
    \ += 1\n        end\n    end\n    return sort(lst_even)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsyhfk47h.jl:41\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching zero(::Type{String})\n  Closest candidates are:\n    zero(!Matched::Union{Type{P},\
    \ P}) where P<:Dates.Period at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::T) where T<:Dates.TimeType at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/types.jl:450\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    ...\n  Stacktrace:\n   [1] zeros(#unused#::Type{String}, dims::Tuple{Int64})\n\
    \     @ Base ./array.jl:526\n   [2] zeros(#unused#::Type{String}, dims::Int64)\n\
    \     @ Base ./array.jl:521\n   [3] sorted_list_sum(lst::Vector{String})\n   \
    \  @ Main /tmp/tmpsyhfk47h.jl:26\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpsyhfk47h.jl:41 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpsyhfk47h.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpsyhfk47h.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching zero(::Type{String})\n  Closest candidates\
    \ are:\n    zero(!Matched::Union{Type{P}, P}) where P<:Dates.Period at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::T) where T<:Dates.TimeType at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/types.jl:450\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    ...\n  Stacktrace:\n   [1] zeros(#unused#::Type{String}, dims::Tuple{Int64})\n\
    \     @ Base ./array.jl:526\n   [2] zeros(#unused#::Type{String}, dims::Int64"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsyhfk47h.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #lst = [\"aa\", \"a\", \"aaa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\"]\n    #lst = [\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"a\", \"ab\"]\n    #lst = [\"ab\", \"a\", \"aaa\",\
    \ \"cd\", \"a\", \"ab\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"\
    a\", \"ab\", \"a\", \"ab\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\"\
    , \"ab\", \"a\", \"ab\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"\
    a\", \"ab\", \"a\", \"ab\", \"a\", \"ab\"]\n    #lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"ab\", \"a\", \"ab\", \"a\", \"ab\", \"a\"]\n    #lst = [\"\
    ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\", \"ab\", \"a\", \"ab\", \"\
    a\", \"ab\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\"\
    , \"ab\", \"a\", \"ab\", \"a\", \"ab\", \"a\"]\n    #lst = [\"ab\", \"a\", \"\
    aaa\", \"cd\", \"a\", \"ab\", \"a\", \"ab\", \"a\", \"ab\", \"a\", \"ab\", \"\
    a\", \"ab\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\"\
    , \"ab\", \"a\", \"ab\", \"a\", \"ab\", \"a\", \"ab\", \"a\"]\n    #lst = [\"\
    ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\", \"ab\", \"a\", \"ab\", \"\
    a\", \"ab\", \"a\", \"ab\", \"a\", \"ab\"]\n    #lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"ab\", \"a\", \"ab\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpezx65s24.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpezx65s24.jl:1\n\
    in expression starting at /tmp/tmpezx65s24.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    lst = sort(lst, by=x->x[1])\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt2ovx5vv.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2ovx5vv.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2ovx5vv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpt2ovx5vv.jl:28\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2ovx5vv.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2ovx5vv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpt2ovx5vv.jl:29\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2ovx5vv.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2ovx5vv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpt2ovx5vv.jl:30\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt2ovx5vv.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2ovx5vv.jl:26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt2ovx5vv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # remove all odd length strings\n    lst = filter(x -> length(x) % 2 ==\
    \ 0, lst)\n    # sort by length\n    lst = sort(lst, by = x -> length(x))\n  \
    \  # sort by alphabetical order\n    lst = sort(lst)\n    return lst\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph1urth8s.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph1urth8s.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph1urth8s.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph1urth8s.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # remove odd length strings\n    lst = filter(x -> length(x) % 2 == 0,\
    \ lst)\n    # sort by length\n    lst = sort(lst, by = x -> length(x))\n    #\
    \ sort by alphabet\n    lst = sort(lst)\n    return lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ic9pyar.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ic9pyar.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ic9pyar.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ic9pyar.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    lst = sort(lst, by=length)\n    # sort by alphabet\n\
    \    lst = sort(lst)\n    # delete odd length\n    lst = [x for x in lst if length(x)\
    \ % 2 == 0]\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpg68kmi85.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg68kmi85.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg68kmi85.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg68kmi85.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length, rev=true)\n\
    \    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmput7jn0s7.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aaa\", \"aa\", \"a\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmput7jn0s7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmput7jn0s7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmput7jn0s7.jl:28\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"asdf\", \"AI\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmput7jn0s7.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmput7jn0s7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmput7jn0s7.jl:29\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmput7jn0s7.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmput7jn0s7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmput7jn0s7.jl:30\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\", \"abcd\"\
    , \"d\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmput7jn0s7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmput7jn0s7.jl:26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmput7jn0s7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_lst = sort(lst, by=length)\n    # sort by\
    \ alphabetical order\n    sorted_lst = sort(sorted_lst)\n    # remove odd length\
    \ strings\n    sorted_lst = filter(s -> length(s) % 2 == 0, sorted_lst)\n    return\
    \ sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0si94f6j.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0si94f6j.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0si94f6j.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0si94f6j.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = filter(x -> length(x) % 2 == 0, lst)\n    lst = sort(lst, by = x\
    \ -> (length(x), x))\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # create a new vector to store the result\n    result = Vector{String}()\n\
    \    # sort the vector by length of each word\n    sorted_lst = sort(lst, by=length)\n\
    \    # iterate through the vector\n    for i in 1:length(sorted_lst)\n       \
    \ # if the length of the word is even, add it to the result vector\n        if\
    \ length(sorted_lst[i]) % 2 == 0\n            push!(result, sorted_lst[i])\n \
    \       end\n    end\n    # sort the vector alphabetically\n    sort!(result)\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpmj39l_na.jl:44\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmj39l_na.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmj39l_na.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmj39l_na.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Create a new vector to store the result\n    result = Vector{String}()\n\
    \    # Create a dictionary to store the length of each word\n    word_length =\
    \ Dict{String, Int}()\n    # Iterate through the list\n    for word in lst\n \
    \       # If the word is not in the dictionary, add it\n        if !haskey(word_length,\
    \ word)\n            word_length[word] = length(word)\n        end\n    end\n\
    \    # Sort the dictionary by the length of each word\n    sorted_word_length\
    \ = sort(word_length, by=x->x[2])\n    # Iterate through the dictionary\n    for\
    \ (word, length) in sorted_word_length\n        # If the length is even, add the\
    \ word to the result\n        if length % 2 == 0\n            push!(result, word)\n\
    \        end\n    end\n    # Return the result\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpccby12hx.jl:46\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching sort(::Dict{String, Int64}; by=var\"#1#2\"())\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\
    \ got unsupported keyword argument \"by\"\n    sort(!Matched::AbstractRange) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307 got unsupported keyword\
    \ argument \"by\"\n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...)\
    \ where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpccby12hx.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpccby12hx.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpccby12hx.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpccby12hx.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching sort(::Dict{String, Int64}; by=var\"#1#2\"\
    ())\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\
    \ got unsupported keyword argument \"by\"\n    sort(!Matched::AbstractRange) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307 got unsupported keyword\
    \ argument \"by\"\n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...)\
    \ where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpccby12hx.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpccby12hx.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_lst = sort(lst, by=length)\n    # sort by\
    \ alphabet\n    sorted_lst = sort(sorted_lst)\n    # remove odd length\n    for\
    \ i in 1:length(sorted_lst)\n        if length(sorted_lst[i]) % 2 != 0\n     \
    \       deleteat!(sorted_lst, i)\n        end\n    end\n    return sorted_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_4742zfo.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp_4742zfo.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_4742zfo.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_4742zfo.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_4742zfo.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp_4742zfo.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_4742zfo.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_4742zfo.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_4742zfo.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp_4742zfo.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_4742zfo.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_4742zfo.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the vector by length of each word\n    sorted_lst = sort(lst, by=length)\n\
    \    # delete the strings that have odd lengths\n    for i in 1:length(sorted_lst)\n\
    \        if length(sorted_lst[i]) % 2 != 0\n            deleteat!(sorted_lst,\
    \ i)\n        end\n    end\n    return sorted_lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmply3xr1jp.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmply3xr1jp.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmply3xr1jp.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmply3xr1jp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmply3xr1jp.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmply3xr1jp.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmply3xr1jp.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmply3xr1jp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmply3xr1jp.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmply3xr1jp.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmply3xr1jp.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmply3xr1jp.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # remove all odd length strings\n    lst = filter(x -> length(x) % 2 ==\
    \ 0, lst)\n    # sort by length\n    lst = sort(lst, by = x -> length(x))\n  \
    \  # sort by alphabet\n    lst = sort(lst)\n    return lst\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4g7obsbh.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4g7obsbh.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4g7obsbh.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4g7obsbh.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv22os7dc.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv22os7dc.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv22os7dc.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv22os7dc.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_odd = []\n    for i in lst\n        if length(i) % 2 == 1\n      \
    \      push!(lst_odd, i)\n        end\n    end\n    lst_odd\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwcqat1i4.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwcqat1i4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwcqat1i4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwcqat1i4.jl:32\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwcqat1i4.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwcqat1i4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwcqat1i4.jl:33\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwcqat1i4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwcqat1i4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwcqat1i4.jl:34\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwcqat1i4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwcqat1i4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwcqat1i4.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwcqat1i4.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplh4cs6v9.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplh4cs6v9.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplh4cs6v9.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplh4cs6v9.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # lst = [\"aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcd_yiycf.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcd_yiycf.jl:1\n\
    in expression starting at /tmp/tmpcd_yiycf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2\n    if lst_len_odd\
    \ == 0\n        return lst\n    else\n        return lst[1:lst_len-1]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp64s427is.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64s427is.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64s427is.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp64s427is.jl:32\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64s427is.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64s427is.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp64s427is.jl:33\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64s427is.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64s427is.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp64s427is.jl:34\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp64s427is.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64s427is.jl:30\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp64s427is.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # create a new vector to store the result\n    result = Vector{String}()\n\
    \    # loop through the vector\n    for i in lst\n        # if the length of the\
    \ string is even\n        if length(i) % 2 == 0\n            # add it to the result\
    \ vector\n            push!(result, i)\n        end\n    end\n    # sort the result\
    \ vector by length\n    sort!(result, by = length)\n    # return the result vector\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpqvc87qop.jl:41\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvc87qop.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvc87qop.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqvc87qop.jl:44\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvc87qop.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvc87qop.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqvc87qop.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the vector by length\n    sorted_lst = sort(lst, by=length)\n \
    \   # sort the vector by alphabetical order\n    sorted_lst = sort(sorted_lst)\n\
    \    # delete the odd length strings\n    for i in 1:length(sorted_lst)\n    \
    \    if length(sorted_lst[i]) % 2 != 0\n            deleteat!(sorted_lst, i)\n\
    \        end\n    end\n    return sorted_lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp_quz4whz.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp_quz4whz.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_quz4whz.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_quz4whz.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_quz4whz.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp_quz4whz.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_quz4whz.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_quz4whz.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_quz4whz.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp_quz4whz.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_quz4whz.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_quz4whz.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_new = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(lst_new, i)\n        end\n    end\n    sort(lst_new)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphhz73fx6.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphhz73fx6.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphhz73fx6.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphhz73fx6.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    lst = sort(lst, by=x->x[1])\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe343qnpk.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe343qnpk.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe343qnpk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpe343qnpk.jl:28\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe343qnpk.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe343qnpk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpe343qnpk.jl:29\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe343qnpk.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe343qnpk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpe343qnpk.jl:30\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe343qnpk.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe343qnpk.jl:26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe343qnpk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(lst, by = x -> (length(x), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_my_pjoz.jl:25\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_my_pjoz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_my_pjoz.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_my_pjoz.jl:26\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    AI\", \"asdf\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_my_pjoz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_my_pjoz.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_my_pjoz.jl:27\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_my_pjoz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_my_pjoz.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_my_pjoz.jl:28\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\", \"abcd\"\
    , \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_my_pjoz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_my_pjoz.jl:24\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_my_pjoz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length\n    sorted_lst = sort(lst, by=length)\n   \
    \ # create a new list\n    new_lst = []\n    # loop through the list\n    for\
    \ i in sorted_lst\n        # if the length of the string is even\n        if length(i)\
    \ % 2 == 0\n            # append the string to the new list\n            push!(new_lst,\
    \ i)\n        end\n    end\n    # return the new list\n    return new_lst\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpshd7yn7t.jl:41\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpshd7yn7t.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpshd7yn7t.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpshd7yn7t.jl:44\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpshd7yn7t.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpshd7yn7t.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpshd7yn7t.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = []\n    lst_len_even = []\n \
    \   for i in 1:lst_len\n        if length(lst[i]) % 2 == 0\n            push!(lst_len_even,\
    \ lst[i])\n        else\n            push!(lst_len_odd, lst[i])\n        end\n\
    \    end\n    return sort(lst_len_even)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpaagx5x3o.jl:41\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaagx5x3o.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaagx5x3o.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaagx5x3o.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by = x -> length(x))\n    lst = sort(lst, by = x -> x)\n\
    \    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpwutunuab.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwutunuab.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwutunuab.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwutunuab.jl:28\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwutunuab.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwutunuab.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwutunuab.jl:29\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwutunuab.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwutunuab.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwutunuab.jl:30\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwutunuab.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwutunuab.jl:26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwutunuab.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_new = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(lst_new, i)\n        end\n    end\n    return sort(lst_new)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq_jxwh2n.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_jxwh2n.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_jxwh2n.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq_jxwh2n.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2\n    if lst_len_odd\
    \ == 0\n        return lst\n    else\n        return lst[1:end-1]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprv2yijyb.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprv2yijyb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprv2yijyb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmprv2yijyb.jl:32\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprv2yijyb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprv2yijyb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmprv2yijyb.jl:33\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprv2yijyb.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprv2yijyb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmprv2yijyb.jl:34\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprv2yijyb.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprv2yijyb.jl:30\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprv2yijyb.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(filter(x -> length(x) % 2 == 0, lst))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ww7gwei.jl:31\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ww7gwei.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ww7gwei.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ww7gwei.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by = length)\n    for i in 1:length(lst)\n        if length(lst[i])\
    \ % 2 != 0\n            deleteat!(lst, i)\n        end\n    end\n    return lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnixxsn5o.jl:31\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpnixxsn5o.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnixxsn5o.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnixxsn5o.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpnixxsn5o.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpnixxsn5o.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnixxsn5o.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnixxsn5o.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpnixxsn5o.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpnixxsn5o.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnixxsn5o.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnixxsn5o.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length\n    sorted_lst = sort(lst, by=length)\n   \
    \ # find the length of the shortest string\n    shortest_length = length(sorted_lst[1])\n\
    \    # find the index of the first string that is longer than the shortest\n \
    \   index_of_first_longer_string = findfirst(sorted_lst, x -> length(x) > shortest_length)\n\
    \    # return the list of strings that are the same length as the shortest string\n\
    \    return sorted_lst[1:index_of_first_longer_string-1]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphhd9ax92.jl:32\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching findfirst(::Vector{String}, ::var\"#1#2\"{Int64})\n  Closest\
    \ candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmphhd9ax92.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphhd9ax92.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphhd9ax92.jl:31\ntest set:\
    \ Error During Test at /tmp/tmphhd9ax92.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching findfirst(::Vector{String}, ::var\"#1#2\"\
    {Int64})\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n\
    \   [1] sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmphhd9ax92.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphhd9ax92.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphhd9ax92.jl:31\ntest set:\
    \ Error During Test at /tmp/tmphhd9ax92.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\","
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphhd9ax92.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_even = zeros(Int64, lst_len)\n    for\
    \ i in 1:lst_len\n        lst_len_even[i] = length(lst[i])\n    end\n    lst_len_even_sort\
    \ = sort(lst_len_even)\n    lst_len_even_sort_unique = unique(lst_len_even_sort)\n\
    \    lst_len_even_sort_unique_len = length(lst_len_even_sort_unique)\n    lst_len_even_sort_unique_len_even\
    \ = zeros(Int64, lst_len_even_sort_unique_len)\n    for i in 1:lst_len_even_sort_unique_len\n\
    \        lst_len_even_sort_unique_len_even[i] = lst_len_even_sort_unique[i] %\
    \ 2\n    end\n    lst_len_even_sort_unique_len_even_index = findall(lst_len_even_sort_unique_len_even\
    \ .== 0)\n    lst_len_even_sort_unique_len_even_index_len = length(lst_len_even_sort_unique_len_even_index)\n\
    \    lst_len_even_sort_unique_len_even_index_len_even = zeros(Int64, lst_len_even_sort_unique_len_even_index_len)\n\
    \    for i in 1:lst_len_even_sort_unique_len_even_index_len\n        lst_len_even_sort_unique_len_even_index_len_even[i]\
    \ = lst_len_even_sort_unique_len_even_index[i]\n    end\n    lst_len_even_sort_unique_len_even_index_len_even_sort\
    \ = sort(lst_len_even_sort_unique_len_even_index_len_even)\n    lst_len_even_sort_unique_len_even_index_len_even_sort_len\
    \ = length(lst_len\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdygjzig2.jl:38\nin expression starting at\
    \ /tmp/tmpdygjzig2.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length of each word\n    sorted_lst = sort(lst, by=length)\n\
    \    # create a new list to store the result\n    result = []\n    # loop through\
    \ the list\n    for i in 1:length(sorted_lst)\n        # if the length of the\
    \ word is even\n        if length(sorted_lst[i]) % 2 == 0\n            # append\
    \ the word to the result list\n            push!(result, sorted_lst[i])\n    \
    \    end\n    end\n    # return the result list\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppjwi0r46.jl:41\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppjwi0r46.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppjwi0r46.jl:37\ntest set: Test\
    \ Failed at /tmp/tmppjwi0r46.jl:44\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppjwi0r46.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppjwi0r46.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppjwi0r46.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_length = length(lst)\n    lst_length_odd = lst_length % 2\n    if\
    \ lst_length_odd == 0\n        return lst\n    else\n        return lst[1:end-1]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t\
    @test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpmq_l0flj.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmq_l0flj.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmq_l0flj.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpmq_l0flj.jl:32\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmq_l0flj.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmq_l0flj.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpmq_l0flj.jl:33\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmq_l0flj.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmq_l0flj.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpmq_l0flj.jl:34\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmq_l0flj.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmq_l0flj.jl:30\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmq_l0flj.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sort!(lst, by=length)\n    # sort by alphabet\n\
    \    sort!(lst)\n    # delete odd length strings\n    delete!(lst, findall(x->length(x)%2!=0,\
    \ lst))\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp4t0bwt6c.jl:31\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching delete!(::Vector{String}, ::Vector{Int64})\n  Closest candidates\
    \ are:\n    delete!(!Matched::IdDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmp4t0bwt6c.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4t0bwt6c.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4t0bwt6c.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp4t0bwt6c.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching delete!(::Vector{String}, ::Vector{Int64})\n\
    \  Closest candidates are:\n    delete!(!Matched::IdDict{K}, ::Any) where K at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n    delete!(!Matched::Base.IdSet,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n    delete!(!Matched::Dict,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n    ...\n\
    \  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmp4t0bwt6c.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4t0bwt6c.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4t0bwt6c.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp4t0bwt6c.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4t0bwt6c.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = []\n    for i in 1:lst_len\n\
    \        if length(lst[i]) % 2 == 1\n            push!(lst_len_odd, lst[i])\n\
    \        end\n    end\n    return lst_len_odd\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpz6m7cwm5.jl:32\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz6m7cwm5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz6m7cwm5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpz6m7cwm5.jl:33\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz6m7cwm5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz6m7cwm5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpz6m7cwm5.jl:34\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz6m7cwm5.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz6m7cwm5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpz6m7cwm5.jl:35\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz6m7cwm5.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz6m7cwm5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpz6m7cwm5.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz6m7cwm5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # lst = [\"aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\"]\n    # lst = [\"\
    ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"ab\", \"ab\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"a\", \"ab\", \"ab\", \"ab\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"a\", \"ab\", \"ab\", \"ab\", \"ab\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"]\n    # lst = [\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    ]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"a\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"]\n   \
    \ # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    ]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"ab\", \"ab\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpux7140w1.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpux7140w1.jl:1\n\
    in expression starting at /tmp/tmpux7140w1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Create a new vector to store the result\n    result = Vector{String}()\n\
    \    # Loop through the vector\n    for i in lst\n        # If the length of the\
    \ string is even\n        if length(i) % 2 == 0\n            # Push the string\
    \ to the result vector\n            push!(result, i)\n        end\n    end\n \
    \   # Sort the result vector by length\n    sort!(result, by = length)\n    #\
    \ Return the result vector\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpd53w73oe.jl:41\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd53w73oe.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd53w73oe.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpd53w73oe.jl:44\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd53w73oe.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd53w73oe.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd53w73oe.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # remove all odd length strings\n    lst = [x for x in lst if length(x)\
    \ % 2 == 0]\n    # sort by length\n    lst = sort(lst, by=length)\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5pkh18hv.jl:32\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5pkh18hv.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5pkh18hv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5pkh18hv.jl:35\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5pkh18hv.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5pkh18hv.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5pkh18hv.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Create a new vector to store the results\n    result = Vector{String}()\n\
    \    # Sort the vector by length\n    sorted_lst = sort(lst, by=length)\n    #\
    \ Iterate over the vector\n    for i in 1:length(sorted_lst)\n        # Check\
    \ if the length of the string is even\n        if length(sorted_lst[i]) % 2 ==\
    \ 0\n            # If it is even, add it to the result vector\n            push!(result,\
    \ sorted_lst[i])\n        end\n    end\n    # Return the result vector\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t\
    @test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpqlh_jflk.jl:41\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqlh_jflk.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqlh_jflk.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqlh_jflk.jl:44\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqlh_jflk.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqlh_jflk.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqlh_jflk.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length\n    sorted_lst = sort(lst, by=length)\n   \
    \ # find the length of the shortest string\n    min_length = length(sorted_lst[1])\n\
    \    # find the index of the shortest string\n    min_index = findall(length.(sorted_lst)\
    \ .== min_length)[1]\n    # create a new list with only the shortest strings\n\
    \    new_lst = sorted_lst[1:min_index]\n    # sort the new list alphabetically\n\
    \    sorted_new_lst = sort(new_lst)\n    return sorted_new_lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv30g68s9.jl:35\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\"] == [\"aa\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv30g68s9.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv30g68s9.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpv30g68s9.jl:36\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv30g68s9.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv30g68s9.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpv30g68s9.jl:37\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv30g68s9.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv30g68s9.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpv30g68s9.jl:38\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\"] == [\"abcd\"\
    , \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv30g68s9.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv30g68s9.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpv30g68s9.jl:39\n  Expression: candidate(["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv30g68s9.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_lst = sort(lst, by=length)\n    # sort by\
    \ alphabet\n    sorted_lst = sort(sorted_lst)\n    # remove odd length\n    sorted_lst\
    \ = [x for x in sorted_lst if length(x) % 2 == 0]\n    return sorted_lst\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpasxrr_mv.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpasxrr_mv.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpasxrr_mv.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpasxrr_mv.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2 == 1\n    if lst_len_odd\
    \ == true\n        lst_len_odd_index = lst_len // 2 + 1\n        lst_len_odd_index_value\
    \ = lst[lst_len_odd_index]\n        return lst_len_odd_index_value\n    else\n\
    \        lst_len_even_index_1 = lst_len // 2\n        lst_len_even_index_2 = lst_len\
    \ // 2 + 1\n        lst_len_even_index_1_value = lst[lst_len_even_index_1]\n \
    \       lst_len_even_index_2_value = lst[lst_len_even_index_2]\n        return\
    \ lst_len_even_index_1_value, lst_len_even_index_2_value\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfwhtoz6s.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  ArgumentError:\
    \ invalid index: 5//2 of type Rational{Int64}\n  Stacktrace:\n    [1] to_index(i::Rational{Int64})\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{String}, i::Rational{Int64})\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] sorted_list_sum(lst::Vector{String})\n\
    \      @ Main /tmp/tmpfwhtoz6s.jl:22\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpfwhtoz6s.jl:37 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpfwhtoz6s.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpfwhtoz6s.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  ArgumentError: invalid index: 2//1 of type Rational{Int64}\n  Stacktrace:\n\
    \    [1] to_index(i::Rational{Int64})\n      @ Base ./indices.jl:300\n    [2]\
    \ to_index(A::Vector{String}, i::Rational{Int64})\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:325 [inlined]\n    [5] getindex\n      @ ./abstractarray.jl:1218\
    \ [inlined]\n    [6] sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmpfwhtoz6s.jl:27\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpfwhtoz6s.jl:38 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpfwhtoz6s.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpfwhtoz6s.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\""
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfwhtoz6s.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # create a new vector\n    new_lst = Vector{String}()\n    # iterate over\
    \ the vector\n    for i in lst\n        # check if the length of the string is\
    \ even\n        if length(i) % 2 == 0\n            # if yes, push the string to\
    \ the new vector\n            push!(new_lst, i)\n        end\n    end\n    # sort\
    \ the vector\n    sort!(new_lst)\n    # return the vector\n    return new_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeqkz0yi9.jl:44\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeqkz0yi9.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeqkz0yi9.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeqkz0yi9.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_sorted = sort(lst, by = x -> length(x))\n    lst_sorted = sort(lst_sorted,\
    \ by = x -> x)\n    lst_sorted = lst_sorted[1:2:end]\n    return lst_sorted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpho80elnu.jl:28\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpho80elnu.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpho80elnu.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpho80elnu.jl:29\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpho80elnu.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpho80elnu.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpho80elnu.jl:30\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"c\"] == String[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpho80elnu.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpho80elnu.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpho80elnu.jl:31\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpho80elnu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpho80elnu.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpho80elnu.jl:32\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpho80elnu.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Sort the list by length of each word\n    sorted_list = sort(lst, by=length)\n\
    \    # Create a new list to store the result\n    result = []\n    # Iterate through\
    \ the sorted list\n    for i in sorted_list\n        # Check if the length of\
    \ the word is even\n        if length(i) % 2 == 0\n            # If it is even,\
    \ append it to the result list\n            push!(result, i)\n        end\n  \
    \  end\n    # Return the result list\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9w6wtx7k.jl:41\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9w6wtx7k.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9w6wtx7k.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp9w6wtx7k.jl:44\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9w6wtx7k.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9w6wtx7k.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9w6wtx7k.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_lst = sort(lst, by=length)\n    # filter\
    \ out odd length strings\n    filtered_lst = filter(x -> length(x) % 2 == 0, sorted_lst)\n\
    \    # sort alphabetically\n    sorted_filtered_lst = sort(filtered_lst)\n   \
    \ return sorted_filtered_lst\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfq4kd24v.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfq4kd24v.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfq4kd24v.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfq4kd24v.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_lst = sort(lst, by=length)\n    # sort by\
    \ alphabetical order\n    sorted_lst = sort(sorted_lst)\n    # remove odd length\
    \ strings\n    for i in 1:length(sorted_lst)\n        if length(sorted_lst[i])\
    \ % 2 != 0\n            deleteat!(sorted_lst, i)\n        end\n    end\n    return\
    \ sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpovd3kwkv.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpovd3kwkv.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpovd3kwkv.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpovd3kwkv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpovd3kwkv.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpovd3kwkv.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpovd3kwkv.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpovd3kwkv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpovd3kwkv.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpovd3kwkv.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpovd3kwkv.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpovd3kwkv.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2\n    lst_len_even\
    \ = lst_len - lst_len_odd\n    lst_even = lst[1:lst_len_even]\n    lst_odd = lst[lst_len_even+1:lst_len]\n\
    \    lst_even_sorted = sort(lst_even)\n    lst_odd_sorted = sort(lst_odd)\n  \
    \  return lst_even_sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpdscuupf2.jl:32\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdscuupf2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdscuupf2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdscuupf2.jl:33\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdscuupf2.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdscuupf2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdscuupf2.jl:34\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdscuupf2.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdscuupf2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdscuupf2.jl:35\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdscuupf2.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdscuupf2.jl:31\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdscuupf2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst\
    \ = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n\
    \    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst =\
    \ sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n\
    \    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst =\
    \ sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n\
    \    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst =\
    \ sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n\
    \    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst =\
    \ sort(lst, by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = length)\n    lst = sort(lst, by = length)\n\
    \    lst = sort(lst, by = length)\n    lst = sort(l\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqd_0xrug.jl:55\nin expression starting at\
    \ /tmp/tmpqd_0xrug.jl:55\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_new = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(lst_new, i)\n        end\n    end\n    sort(lst_new)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqpxlp1ri.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqpxlp1ri.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqpxlp1ri.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqpxlp1ri.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length of each word\n    sorted_list = sort(lst, by=length)\n\
    \    # sort the list alphabetically\n    sorted_list = sort(sorted_list)\n   \
    \ # create a new list to store the result\n    result = []\n    # loop through\
    \ the list\n    for i in sorted_list\n        # if the length of the word is even\n\
    \        if length(i) % 2 == 0\n            # append the word to the result list\n\
    \            push!(result, i)\n        end\n    end\n    # return the result list\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpclsne8ia.jl:46\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpclsne8ia.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpclsne8ia.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpclsne8ia.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoav13asr.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoav13asr.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoav13asr.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoav13asr.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Create a new vector to hold the results\n    result = Vector{String}()\n\
    \    # Loop through the vector\n    for i in lst\n        # Check if the length\
    \ of the string is even\n        if length(i) % 2 == 0\n            # Append the\
    \ string to the result vector\n            push!(result, i)\n        end\n   \
    \ end\n    # Sort the vector by length of the string\n    sort!(result, by = x\
    \ -> length(x))\n    # Return the result vector\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8_wum37v.jl:41\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8_wum37v.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8_wum37v.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp8_wum37v.jl:44\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8_wum37v.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8_wum37v.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8_wum37v.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst =\
    \ sort(lst, by=length)\n    return lst\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp80zxa2mw.jl:28\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp80zxa2mw.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp80zxa2mw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp80zxa2mw.jl:29\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    AI\", \"asdf\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp80zxa2mw.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp80zxa2mw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp80zxa2mw.jl:30\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp80zxa2mw.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp80zxa2mw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp80zxa2mw.jl:31\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\", \"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp80zxa2mw.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp80zxa2mw.jl:27\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp80zxa2mw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_lst = sort(lst, by=length)\n    # sort by\
    \ alphabetical order\n    sorted_lst = sort(sorted_lst)\n    # remove odd length\
    \ strings\n    for i in 1:length(sorted_lst)\n        if length(sorted_lst[i])\
    \ % 2 != 0\n            deleteat!(sorted_lst, i)\n        end\n    end\n    return\
    \ sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp5pd7gr8h.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp5pd7gr8h.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5pd7gr8h.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5pd7gr8h.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5pd7gr8h.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp5pd7gr8h.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5pd7gr8h.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5pd7gr8h.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5pd7gr8h.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp5pd7gr8h.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5pd7gr8h.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5pd7gr8h.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptq_107px.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptq_107px.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptq_107px.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptq_107px.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_lst = sort(lst, by=length)\n    for i in 1:length(sorted_lst)\n\
    \        if length(sorted_lst[i]) % 2 != 0\n            deleteat!(sorted_lst,\
    \ i)\n        end\n    end\n    return sorted_lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdgwn0tgq.jl:31\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpdgwn0tgq.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdgwn0tgq.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdgwn0tgq.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpdgwn0tgq.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpdgwn0tgq.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdgwn0tgq.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdgwn0tgq.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpdgwn0tgq.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpdgwn0tgq.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdgwn0tgq.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdgwn0tgq.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    lst = sort(lst, by=x->x[1])\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3x6vg4am.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3x6vg4am.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3x6vg4am.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3x6vg4am.jl:28\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3x6vg4am.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3x6vg4am.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3x6vg4am.jl:29\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3x6vg4am.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3x6vg4am.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3x6vg4am.jl:30\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3x6vg4am.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3x6vg4am.jl:26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3x6vg4am.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = filter(x -> length(x) % 2 == 0, lst)\n    sort(lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpujta2aab.jl:32\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpujta2aab.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpujta2aab.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpujta2aab.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst =\
    \ sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(l\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ls6sre7.jl:55\nin expression starting at\
    \ /tmp/tmp_ls6sre7.jl:55\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiqzgiukg.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiqzgiukg.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiqzgiukg.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiqzgiukg.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length\n    sorted_lst = sort(lst, by=length)\n   \
    \ # filter out the odd length strings\n    filtered_lst = filter(x -> length(x)\
    \ % 2 == 0, sorted_lst)\n    return filtered_lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9s89lthl.jl:32\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9s89lthl.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9s89lthl.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp9s89lthl.jl:35\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9s89lthl.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9s89lthl.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9s89lthl.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_lst = sort(lst, by=length)\n    # remove\
    \ odd length strings\n    sorted_lst = [x for x in sorted_lst if length(x) % 2\
    \ == 0]\n    # sort alphabetically\n    sorted_lst = sort(sorted_lst)\n    return\
    \ sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpn3e_ki7x.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn3e_ki7x.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn3e_ki7x.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn3e_ki7x.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2\n    lst_len_even\
    \ = lst_len - lst_len_odd\n    lst_odd = lst[1:lst_len_odd]\n    lst_even = lst[lst_len_odd+1:lst_len]\n\
    \    lst_even_sorted = sort(lst_even)\n    lst_sorted = [lst_odd; lst_even_sorted]\n\
    \    return lst_sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp7s5xi9_9.jl:32\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7s5xi9_9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7s5xi9_9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7s5xi9_9.jl:33\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7s5xi9_9.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7s5xi9_9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7s5xi9_9.jl:34\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7s5xi9_9.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7s5xi9_9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7s5xi9_9.jl:35\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7s5xi9_9.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7s5xi9_9.jl:31\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7s5xi9_9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by = length)\n    lst = sort(lst, by = sort)\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj61l_r4_.jl:27\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n    [1] lt(o::Base.Order.By{typeof(sort), Base.Order.ForwardOrdering},\
    \ a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n\
    \      @ ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64,\
    \ hi::Int64, a::Base.Sort.MergeSortAlg, o::Base.Order.By{typeof(sort), Base.Order.ForwardOrdering},\
    \ t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @\
    \ ./sort.jl:591 [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n  \
    \  [6] #sort!#8\n      @ ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772\
    \ [inlined]\n    [8] sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmpj61l_r4_.jl:19\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpj61l_r4_.jl:27 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpj61l_r4_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpj61l_r4_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching sort(::String)\n  Closest candidates are:\n\
    \    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.S"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj61l_r4_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #sorted_list_sum(lst::Vector{String})::Vector{String} =\n    #sorted_list_sum(lst::Vector{String})::Vector{String}\n\
    \    #sorted_list_sum(lst::Vector{String})::Vector{String}\n    #sorted_list_sum(lst::Vector{String})::Vector{String}\n\
    \    #sorted_list_sum(lst::Vector{String})::Vector{String}\n    #sorted_list_sum(lst::Vector{String})::Vector{String}\n\
    \    #sorted_list_sum(lst::Vector{String})::Vector{String}\n    #sorted_list_sum(lst::Vector{String})::Vector{String}\n\
    \    #sorted_list_sum(lst::Vector{String})::Vector{String}\n    #sorted_list_sum(lst::Vector{String})::Vector{String}\n\
    \    #sorted_list_sum(lst::Vector{String})::Vector{String}\n    #sorted_list_sum(lst::Vector{String})::Vector{String}\n\
    \    #sorted_list_sum(lst::Vector{String})::Vector{String}\n    #sorted_list_sum(lst::Vector{String})::Vector{String}\n\
    \    #sorted_list_sum(lst::Vector{String})::Vector{String}\n    #sorted_list_sum(lst::Vector{String})::Vector{String}\n\
    \    #sorted_list_sum(lst::Vector{String})::Vector{String}\n    #sorted_list_sum(lst::Vector{String})::Vector{String}\n\
    \    #sorted_list_sum(lst::Vector{String})::Vector{String}\n    #sorted_list_sum(lst::Vector{String})::Vector{String}\n\
    \    #sorted_list_sum(lst::Vector{String})::Vector{String}\n    #sorted_list_sum(lst::Vector{String})::Vector{String}\n\
    \    #sorted\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t\
    @test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2pc4tb1n.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2pc4tb1n.jl:1\n\
    in expression starting at /tmp/tmp2pc4tb1n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1lsq_iog.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lsq_iog.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lsq_iog.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1lsq_iog.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcy77jogd.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcy77jogd.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcy77jogd.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcy77jogd.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = filter(x -> length(x) % 2 == 0, lst)\n    sort(lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbps_mt_g.jl:32\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbps_mt_g.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbps_mt_g.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbps_mt_g.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #lst = [\"aa\", \"a\", \"aaa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdr6i4y9c.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdr6i4y9c.jl:1\n\
    in expression starting at /tmp/tmpdr6i4y9c.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Create a new vector to store the results\n    result = Vector{String}()\n\
    \    # Create a new vector to store the lengths of the strings\n    lengths =\
    \ Vector{Int}()\n    # Loop through the vector of strings\n    for i in 1:length(lst)\n\
    \        # If the length of the string is even\n        if length(lst[i]) % 2\
    \ == 0\n            # Append the string to the result vector\n            push!(result,\
    \ lst[i])\n            # Append the length of the string to the lengths vector\n\
    \            push!(lengths, length(lst[i]))\n        end\n    end\n    # Sort\
    \ the lengths vector\n    sort!(lengths)\n    # Create a new vector to store the\
    \ sorted strings\n    sorted_result = Vector{String}()\n    # Loop through the\
    \ sorted lengths vector\n    for i in 1:length(lengths)\n        # Loop through\
    \ the result vector\n        for j in 1:length(result)\n            # If the length\
    \ of the string is equal to the length in the lengths vector\n            if length(result[j])\
    \ == lengths[i]\n                # Append the string to the sorted vector\n  \
    \              push!(sorted_result, result[j])\n            end\n        end\n\
    \    end\n    # Return the sorted vector\n    return sorted_result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpat8wk2ky.jl:58\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\", \"dcba\", \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpat8wk2ky.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpat8wk2ky.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpat8wk2ky.jl:59\n  Expression: candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]\n   Evaluated: [\"AI\", \"ai\", \"au\", \"\
    AI\", \"ai\", \"au\", \"AI\", \"ai\", \"au\"] == [\"AI\", \"ai\", \"au\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpat8wk2ky.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpat8wk2ky.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpat8wk2ky.jl:61\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"dd\", \"cc\", \"aaaa\", \"bbbb\", \"aaaa\", \"bbbb\"] == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpat8wk2ky.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpat8wk2ky.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpat8wk2ky.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst)\n    lst = sort(lst, by=length)\n    lst = lst[1:2:end]\n\
    \    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp6alxrnoq.jl:28\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6alxrnoq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6alxrnoq.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6alxrnoq.jl:29\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    asdf\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6alxrnoq.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6alxrnoq.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6alxrnoq.jl:30\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"c\"] == String[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6alxrnoq.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6alxrnoq.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6alxrnoq.jl:31\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\"] ==\
    \ [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6alxrnoq.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6alxrnoq.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6alxrnoq.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6alxrnoq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_lst = sort(lst, by=length)\n    # remove\
    \ odd length strings\n    sorted_lst = [x for x in sorted_lst if length(x) % 2\
    \ == 0]\n    # sort by alphabet\n    sorted_lst = sort(sorted_lst)\n    return\
    \ sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpj8vr754z.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj8vr754z.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj8vr754z.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj8vr754z.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    lst = sort(lst, by=x->x[1])\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppmr7j2na.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppmr7j2na.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppmr7j2na.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppmr7j2na.jl:28\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppmr7j2na.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppmr7j2na.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppmr7j2na.jl:29\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppmr7j2na.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppmr7j2na.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppmr7j2na.jl:30\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppmr7j2na.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppmr7j2na.jl:26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppmr7j2na.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2\n    if lst_len_odd\
    \ == 0\n        return lst\n    else\n        return lst[1:lst_len - 1]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzd59_2y5.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzd59_2y5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzd59_2y5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpzd59_2y5.jl:32\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzd59_2y5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzd59_2y5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpzd59_2y5.jl:33\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzd59_2y5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzd59_2y5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpzd59_2y5.jl:34\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzd59_2y5.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzd59_2y5.jl:30\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzd59_2y5.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcfliqre9.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcfliqre9.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcfliqre9.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcfliqre9.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_new = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(lst_new, i)\n        end\n    end\n    sort(lst_new)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgot4htc9.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgot4htc9.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgot4htc9.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgot4htc9.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # lst = [\"aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\"]\n    # lst = [\"\
    ab\", \"a\", \"aaa\", \"cd\", \"b\", \"c\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"b\", \"c\", \"d\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"\
    b\", \"c\", \"d\", \"e\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n    # lst = [\"ab\", \"a\", \"aaa\",\
    \ \"cd\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n    # lst = [\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]\n\
    \    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"c\", \"\
    d\", \"e\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsw6hy07d.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsw6hy07d.jl:1\n\
    in expression starting at /tmp/tmpsw6hy07d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #sorted_list = sort(lst, by = length)\n    #sorted_list = sort(lst, by\
    \ = x -> length(x))\n    sorted_list = sort(lst, by = length, rev = true)\n  \
    \  return sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0ohexx1x.jl:28\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aaa\", \"aa\", \"a\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ohexx1x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ohexx1x.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0ohexx1x.jl:29\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"asdf\", \"AI\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ohexx1x.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ohexx1x.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0ohexx1x.jl:30\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ohexx1x.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ohexx1x.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0ohexx1x.jl:31\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\", \"abcd\"\
    , \"d\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ohexx1x.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ohexx1x.jl:27\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ohexx1x.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    lst = sort(lst, by=x->x[1])\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdnxo_u6o.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdnxo_u6o.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdnxo_u6o.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdnxo_u6o.jl:28\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdnxo_u6o.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdnxo_u6o.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdnxo_u6o.jl:29\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdnxo_u6o.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdnxo_u6o.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdnxo_u6o.jl:30\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdnxo_u6o.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdnxo_u6o.jl:26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdnxo_u6o.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2\n    if lst_len_odd\
    \ == 0\n        return lst\n    else\n        return lst[1:end-1]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptspiv_hg.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptspiv_hg.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptspiv_hg.jl:30\ntest set: Test\
    \ Failed at /tmp/tmptspiv_hg.jl:32\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptspiv_hg.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptspiv_hg.jl:30\ntest set: Test\
    \ Failed at /tmp/tmptspiv_hg.jl:33\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptspiv_hg.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptspiv_hg.jl:30\ntest set: Test\
    \ Failed at /tmp/tmptspiv_hg.jl:34\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptspiv_hg.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptspiv_hg.jl:30\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptspiv_hg.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length of the strings\n    sorted_lst = sort(lst, by=length)\n\
    \    # initialize the output list\n    output_lst = []\n    # loop through the\
    \ list\n    for i in 1:length(sorted_lst)\n        # if the length of the string\
    \ is even\n        if length(sorted_lst[i]) % 2 == 0\n            # add it to\
    \ the output list\n            push!(output_lst, sorted_lst[i])\n        end\n\
    \    end\n    # return the output list\n    return output_lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb6g2jnpb.jl:41\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6g2jnpb.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6g2jnpb.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpb6g2jnpb.jl:44\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6g2jnpb.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6g2jnpb.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb6g2jnpb.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_lst = sort(lst, by=length)\n    # sort by\
    \ alphabetical order\n    sorted_lst = sort(sorted_lst)\n    # remove odd length\
    \ elements\n    for i in 1:length(sorted_lst)\n        if length(sorted_lst[i])\
    \ % 2 != 0\n            deleteat!(sorted_lst, i)\n        end\n    end\n    return\
    \ sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpbi34endi.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpbi34endi.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbi34endi.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbi34endi.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpbi34endi.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpbi34endi.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbi34endi.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbi34endi.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpbi34endi.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpbi34endi.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbi34endi.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbi34endi.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2\n    lst_len_even\
    \ = lst_len - lst_len_odd\n    lst_even = lst[1:lst_len_even]\n    lst_odd = lst[lst_len_even+1:lst_len]\n\
    \    lst_even_sorted = sort(lst_even)\n    lst_odd_sorted = sort(lst_odd)\n  \
    \  lst_sorted = vcat(lst_even_sorted, lst_odd_sorted)\n    return lst_sorted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmc_a1qah.jl:33\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmc_a1qah.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmc_a1qah.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmc_a1qah.jl:34\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmc_a1qah.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmc_a1qah.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmc_a1qah.jl:35\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmc_a1qah.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmc_a1qah.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmc_a1qah.jl:36\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmc_a1qah.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmc_a1qah.jl:32\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmc_a1qah.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    new_lst = []\n    for i in 1:lst_len\n    \
    \    if length(lst[i]) % 2 == 0\n            push!(new_lst, lst[i])\n        end\n\
    \    end\n    sort(new_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmporvxxoh9.jl:38\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmporvxxoh9.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmporvxxoh9.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmporvxxoh9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length\n    sorted_list = sort(lst, by=length)\n  \
    \  # get the length of the shortest string\n    shortest_length = length(sorted_list[1])\n\
    \    # get the index of the first string with length greater than the shortest\n\
    \    first_index = findfirst(x -> length(x) > shortest_length, sorted_list)\n\
    \    # return the list of strings with the shortest length\n    return sorted_list[1:first_index-1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpexh_9gos.jl:32\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"a\"] == [\"aa\"]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpexh_9gos.jl:32 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpexh_9gos.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmpexh_9gos.jl:33\\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\\n   Evaluated: [\"b\"]\
    \ == [\"AI\", \"asdf\", \"school\"]\\nStacktrace:\\n [1] macro expansion\\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\\\
    n [2] macro expansion\\n   @ /tmp/tmpexh_9gos.jl:33 [inlined]\\n [3] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpexh_9gos.jl:31\\ntest set: Error\
    \ During Test at /tmp/tmpexh_9gos.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\n  MethodError:\
    \ no method matching -(::Nothing, ::Int64)\\n  Closest candidates are:\\n    -(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:86\\n\
    \    -(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:227\\\
    n    -(!Matched::LinearAlgebra.UniformScaling, ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(lst::Vector{String})\\n    \
    \ @ Main /tmp/tmpexh_9gos.jl:25\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpexh_9gos.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by = length)\n    lst = sort(lst, by = x -> x[1])\n  \
    \  lst = sort(lst, by = x -> x[2])\n    lst = sort(lst, by = x -> x[3])\n    lst\
    \ = sort(lst, by = x -> x[4])\n    lst = sort(lst, by = x -> x[5])\n    lst =\
    \ sort(lst, by = x -> x[6])\n    lst = sort(lst, by = x -> x[7])\n    lst = sort(lst,\
    \ by = x -> x[8])\n    lst = sort(lst, by = x -> x[9])\n    lst = sort(lst, by\
    \ = x -> x[10])\n    lst = sort(lst, by = x -> x[11])\n    lst = sort(lst, by\
    \ = x -> x[12])\n    lst = sort(lst, by = x -> x[13])\n    lst = sort(lst, by\
    \ = x -> x[14])\n    lst = sort(lst, by = x -> x[15])\n    lst = sort(lst, by\
    \ = x -> x[16])\n    lst = sort(lst, by = x -> x[17])\n    lst = sort(lst, by\
    \ = x -> x[18])\n    lst = sort(lst, by = x -> x[19])\n    lst = sort(lst, by\
    \ = x -> x[20])\n    lst = sort(lst, by = x -> x[21])\n    lst = sort(lst, by\
    \ = x -> x[22])\n    lst = sort(lst, by = x -> x[23])\n    lst = sort(lst, by\
    \ = x -> x[24])\n    lst = sort(lst, by = x -> x[25])\n    lst = sort(lst, by\
    \ = x -> x[26])\n    lst = sort(lst, by = x -> x[27])\n    lst = sort(lst, by\
    \ =\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1w1na8fz.jl:49\nin expression starting at\
    \ /tmp/tmp1w1na8fz.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #sort the list by length\n    sorted_list = sort(lst, by=length)\n   \
    \ #sort the list by alphabetical order\n    sorted_list = sort(sorted_list)\n\
    \    #create a new list to store the new list\n    new_list = []\n    #iterate\
    \ through the list\n    for i in sorted_list\n        #if the length of the word\
    \ is even\n        if length(i) % 2 == 0\n            #append the word to the\
    \ new list\n            push!(new_list, i)\n        end\n    end\n    #return\
    \ the new list\n    return new_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp1kpcak9u.jl:46\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kpcak9u.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kpcak9u.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1kpcak9u.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_lst = sort(lst, by=length)\n    # remove\
    \ odd length strings\n    sorted_lst = [x for x in sorted_lst if length(x) % 2\
    \ == 0]\n    # sort alphabetically\n    sorted_lst = sort(sorted_lst)\n    return\
    \ sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpwcwlqt1m.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwcwlqt1m.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwcwlqt1m.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwcwlqt1m.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_new = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(lst_new, i)\n        end\n    end\n    lst_new = sort(lst_new)\n\
    \    return lst_new\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpwao2op9k.jl:38\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwao2op9k.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwao2op9k.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwao2op9k.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by = length)\n    lst = sort(lst, by = sort)\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl1_kz09z.jl:27\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n    [1] lt(o::Base.Order.By{typeof(sort), Base.Order.ForwardOrdering},\
    \ a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n\
    \      @ ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64,\
    \ hi::Int64, a::Base.Sort.MergeSortAlg, o::Base.Order.By{typeof(sort), Base.Order.ForwardOrdering},\
    \ t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @\
    \ ./sort.jl:591 [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n  \
    \  [6] #sort!#8\n      @ ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772\
    \ [inlined]\n    [8] sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmpl1_kz09z.jl:19\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpl1_kz09z.jl:27 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpl1_kz09z.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpl1_kz09z.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching sort(::String)\n  Closest candidates are:\n\
    \    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.S"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl1_kz09z.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmjjed4u2.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjjed4u2.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjjed4u2.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmjjed4u2.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the vector by length\n    sorted_lst = sort(lst, by=length)\n \
    \   # sort the vector by alphabetical order\n    sorted_lst = sort(sorted_lst)\n\
    \    # delete the odd length strings\n    for i in 1:length(sorted_lst)\n    \
    \    if length(sorted_lst[i]) % 2 != 0\n            deleteat!(sorted_lst, i)\n\
    \        end\n    end\n    return sorted_lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpdtz8hc5g.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpdtz8hc5g.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdtz8hc5g.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdtz8hc5g.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpdtz8hc5g.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpdtz8hc5g.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdtz8hc5g.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdtz8hc5g.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpdtz8hc5g.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpdtz8hc5g.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdtz8hc5g.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdtz8hc5g.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_sorted = sort(lst, by = length)\n    lst_sorted = sort(lst_sorted,\
    \ by = sort)\n    lst_sorted = lst_sorted[1:2:end]\n    return lst_sorted\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9gj3_z6y.jl:28\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n    [1] lt(o::Base.Order.By{typeof(sort), Base.Order.ForwardOrdering},\
    \ a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n\
    \      @ ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64,\
    \ hi::Int64, a::Base.Sort.MergeSortAlg, o::Base.Order.By{typeof(sort), Base.Order.ForwardOrdering},\
    \ t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @\
    \ ./sort.jl:591 [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n  \
    \  [6] #sort!#8\n      @ ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772\
    \ [inlined]\n    [8] sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmp9gj3_z6y.jl:19\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp9gj3_z6y.jl:28 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp9gj3_z6y.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp9gj3_z6y.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching sort(::String)\n  Closest candidates are:\n\
    \    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.S"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9gj3_z6y.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2\n    if lst_len_odd\
    \ == 0\n        return lst\n    else\n        return lst[1:lst_len-1]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4xxf9i57.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xxf9i57.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xxf9i57.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp4xxf9i57.jl:32\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xxf9i57.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xxf9i57.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp4xxf9i57.jl:33\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xxf9i57.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xxf9i57.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp4xxf9i57.jl:34\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4xxf9i57.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xxf9i57.jl:30\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4xxf9i57.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_new = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(lst_new, i)\n        end\n    end\n    sort(lst_new)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9p5fv1yx.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9p5fv1yx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9p5fv1yx.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9p5fv1yx.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl26ibmio.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl26ibmio.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl26ibmio.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpl26ibmio.jl:28\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    AI\", \"asdf\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl26ibmio.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl26ibmio.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpl26ibmio.jl:29\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl26ibmio.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl26ibmio.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpl26ibmio.jl:30\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\", \"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl26ibmio.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl26ibmio.jl:26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl26ibmio.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2\n    if lst_len_odd\
    \ == 0\n        return lst\n    else\n        return lst[1:end-1]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfyj_etqx.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfyj_etqx.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfyj_etqx.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfyj_etqx.jl:32\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfyj_etqx.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfyj_etqx.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfyj_etqx.jl:33\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfyj_etqx.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfyj_etqx.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfyj_etqx.jl:34\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfyj_etqx.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfyj_etqx.jl:30\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfyj_etqx.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2\n    if lst_len_odd\
    \ == 0\n        return lst\n    else\n        return lst[1:end-1]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp12mcx849.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp12mcx849.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp12mcx849.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp12mcx849.jl:32\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"school\"\
    , \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp12mcx849.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp12mcx849.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp12mcx849.jl:33\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp12mcx849.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp12mcx849.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp12mcx849.jl:34\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp12mcx849.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp12mcx849.jl:30\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp12mcx849.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_list = []\n    for i in lst\n        if length(i) % 2 == 0\n     \
    \       push!(new_list, i)\n        end\n    end\n    sort(new_list)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpec2nrfit.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpec2nrfit.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpec2nrfit.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpec2nrfit.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Create a new vector of strings\n    new_lst = []\n    # Iterate through\
    \ the vector\n    for i in lst\n        # If the length of the string is even\n\
    \        if length(i) % 2 == 0\n            # Add it to the new vector\n     \
    \       push!(new_lst, i)\n        end\n    end\n    # Sort the new vector\n \
    \   sort!(new_lst)\n    # Return the new vector\n    return new_lst\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqvykgwxn.jl:44\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvykgwxn.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvykgwxn.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqvykgwxn.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_lst = sort(lst, by=length)\n    # sort by\
    \ alphabet\n    sorted_lst = sort(sorted_lst)\n    # delete odd length strings\n\
    \    for i in 1:length(sorted_lst)\n        if length(sorted_lst[i]) % 2 != 0\n\
    \            deleteat!(sorted_lst, i)\n        end\n    end\n    return sorted_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvizgl65j.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpvizgl65j.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvizgl65j.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvizgl65j.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpvizgl65j.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpvizgl65j.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvizgl65j.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvizgl65j.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpvizgl65j.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpvizgl65j.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvizgl65j.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvizgl65j.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length of each word\n    sorted_lst = sort(lst, by=length)\n\
    \    # create a new list to store the result\n    result = []\n    # iterate through\
    \ the sorted list\n    for i in sorted_lst\n        # if the length of the word\
    \ is even, append it to the result list\n        if length(i) % 2 == 0\n     \
    \       push!(result, i)\n        end\n    end\n    # return the result list\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpge0k_tel.jl:40\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpge0k_tel.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpge0k_tel.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpge0k_tel.jl:43\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpge0k_tel.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpge0k_tel.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpge0k_tel.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length of each word\n    sorted_list = sort(lst, by=length)\n\
    \    # filter the list by length of each word\n    filtered_list = filter(x ->\
    \ length(x) % 2 == 0, sorted_list)\n    # sort the list alphabetically\n    sorted_list\
    \ = sort(filtered_list)\n    return sorted_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpgya12kxn.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgya12kxn.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgya12kxn.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgya12kxn.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_len = length(lst)\n    lst_len_odd = lst_len % 2\n    if lst_len_odd\
    \ == 0\n        lst_len_half = lst_len / 2\n        lst_half = lst[1:lst_len_half]\n\
    \        lst_half_sorted = sort(lst_half)\n        return lst_half_sorted\n  \
    \  else\n        lst_len_half = (lst_len - 1) / 2\n        lst_half = lst[1:lst_len_half]\n\
    \        lst_half_sorted = sort(lst_half)\n        return lst_half_sorted\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t\
    @test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpsb0ufr36.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  ArgumentError:\
    \ invalid index: 1.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{String}, i::Float64)\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] macro expansion\n      @ ./multidimensional.jl:867\
    \ [inlined]\n    [7] macro expansion\n      @ ./cartesian.jl:64 [inlined]\n  \
    \  [8] _unsafe_getindex!\n      @ ./multidimensional.jl:862 [inlined]\n    [9]\
    \ _unsafe_getindex\n      @ ./multidimensional.jl:853 [inlined]\n   [10] _getindex\n\
    \      @ ./multidimensional.jl:839 [inlined]\n   [11] getindex\n      @ ./abstractarray.jl:1218\
    \ [inlined]\n   [12] sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmpsb0ufr36.jl:27\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [14] macro expansion\n      @ /tmp/tmpsb0ufr36.jl:37 [inlined]\n\
    \   [15] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [16] top-level scope\n      @ /tmp/tmpsb0ufr36.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpsb0ufr36.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  ArgumentError: invalid index: 1.0 of type Float64\n  Stacktrace:\n    [1]\
    \ to_index(i::Float64)\n      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{String},\
    \ i::Float64)\n      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333\
    \ [inlined]\n    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n\
    \      @ ./abstractarray.jl:1218 [inlined]\n    [6] macro expansion\n      @ ./multidimensional.jl:867\
    \ [inlined]\n    [7] macro expansion\n      @ ./cartesian.jl:64 [inlined]\n  \
    \  [8] _unsafe_getindex!\n      @ ./multidimensional.jl:862 [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsb0ufr36.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # remove the odd length strings\n    lst = filter(x -> length(x) % 2 ==\
    \ 0, lst)\n    # sort the list by length\n    sort!(lst, by = x -> length(x))\n\
    \    # sort the list by alphabetical order\n    sort!(lst)\n    return lst\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuxgj60s3.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuxgj60s3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuxgj60s3.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuxgj60s3.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    sorted_lst = sort(lst, by=length)\n    # sort by\
    \ alphabetical order\n    sorted_lst = sort(sorted_lst)\n    # remove odd length\
    \ strings\n    sorted_lst = [x for x in sorted_lst if length(x) % 2 == 0]\n  \
    \  return sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpnibhunhw.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnibhunhw.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnibhunhw.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnibhunhw.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_sorted = sort(lst)\n    lst_sorted_len = length(lst_sorted)\n    lst_sorted_len_half\
    \ = div(lst_sorted_len, 2)\n    lst_sorted_len_half_ceil = ceil(lst_sorted_len_half)\n\
    \    lst_sorted_len_half_floor = floor(lst_sorted_len_half)\n    lst_sorted_len_half_ceil_rem\
    \ = rem(lst_sorted_len_half_ceil, 2)\n    lst_sorted_len_half_floor_rem = rem(lst_sorted_len_half_floor,\
    \ 2)\n    if lst_sorted_len_half_ceil_rem == 0\n        lst_sorted_len_half_ceil_rem\
    \ = 1\n    elseif lst_sorted_len_half_floor_rem == 0\n        lst_sorted_len_half_floor_rem\
    \ = 1\n    end\n    lst_sorted_len_half_ceil_rem_half = div(lst_sorted_len_half_ceil_rem,\
    \ 2)\n    lst_sorted_len_half_floor_rem_half = div(lst_sorted_len_half_floor_rem,\
    \ 2)\n    lst_sorted_len_half_ceil_rem_half_floor = floor(lst_sorted_len_half_ceil_rem_half)\n\
    \    lst_sorted_len_half_floor_rem_half_floor = floor(lst_sorted_len_half_floor_rem_half)\n\
    \    lst_sorted_len_half_ceil_rem_half_floor_rem = rem(lst_sorted_len_half_ceil_rem_half_floor,\
    \ 2)\n    lst_sorted_len_half_floor_rem_half_floor_rem = rem(lst_sorted_len_half_floor_rem_half_floor,\
    \ 2)\n    if lst_sorted_len_half_ceil_rem_half\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2kqgk4w.jl:1\nin expression starting at /tmp/tmpp2kqgk4w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_new = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(lst_new, i)\n        end\n    end\n    sort(lst_new)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiz4ugf7j.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiz4ugf7j.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiz4ugf7j.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiz4ugf7j.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpurymxu8f.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurymxu8f.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurymxu8f.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpurymxu8f.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # your code here\n    #lst = [\"aa\", \"a\", \"aaa\"]\n    #lst = [\"\
    ab\", \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"\
    a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\"]\n    #lst = [\"\
    ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"\
    aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\",\
    \ \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    #lst = [\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n \
    \   #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"\
    a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\
    \ \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    #lst = [\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\",\
    \ \"a\", \"a\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t\
    @test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0j7qopti.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0j7qopti.jl:1\n\
    in expression starting at /tmp/tmp0j7qopti.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length\n    sorted_lst = sort(lst, by=length)\n   \
    \ # create a new list to store the even length strings\n    even_lst = []\n  \
    \  # loop through the sorted list\n    for i in sorted_lst\n        # if the length\
    \ of the string is even, append it to the even list\n        if length(i) % 2\
    \ == 0\n            push!(even_lst, i)\n        end\n    end\n    # return the\
    \ even list\n    return even_lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpt70jhbzf.jl:40\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt70jhbzf.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt70jhbzf.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpt70jhbzf.jl:43\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt70jhbzf.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt70jhbzf.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt70jhbzf.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # create a new vector to store the result\n    result = Vector{String}()\n\
    \    # sort the vector by length\n    sorted_lst = sort(lst, by=length)\n    #\
    \ iterate through the vector\n    for i in 1:length(sorted_lst)\n        # if\
    \ the length of the string is even, push it to the result vector\n        if length(sorted_lst[i])\
    \ % 2 == 0\n            push!(result, sorted_lst[i])\n        end\n    end\n \
    \   # return the result vector\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjoaf9sok.jl:40\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjoaf9sok.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjoaf9sok.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjoaf9sok.jl:43\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjoaf9sok.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjoaf9sok.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjoaf9sok.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5_sq8ilx.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_sq8ilx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_sq8ilx.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5_sq8ilx.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort by length\n    lst = sort(lst, by=length)\n    # sort by alphabet\n\
    \    lst = sort(lst)\n    # remove odd length strings\n    lst = [x for x in lst\
    \ if length(x) % 2 == 0]\n    return lst\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpykzf196y.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpykzf196y.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpykzf196y.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpykzf196y.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(filter(x -> length(x) % 2 == 0, lst))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdmkdrown.jl:31\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmkdrown.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmkdrown.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdmkdrown.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # sort the list by length of each word\n    sorted_list = sort(lst, by=length)\n\
    \    # create a new list to store the result\n    result = []\n    # iterate through\
    \ the sorted list\n    for i in sorted_list\n        # if the length of the word\
    \ is even\n        if length(i) % 2 == 0\n            # append the word to the\
    \ result list\n            push!(result, i)\n        end\n    end\n    # return\
    \ the result list\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpajk246_y.jl:41\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpajk246_y.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpajk246_y.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpajk246_y.jl:44\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpajk246_y.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpajk246_y.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpajk246_y.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc13gvlxr.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc13gvlxr.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc13gvlxr.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc13gvlxr.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_new = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(lst_new, i)\n        end\n    end\n    sort(lst_new)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnydf_btz.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnydf_btz.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnydf_btz.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnydf_btz.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_sorted = sort(lst, by=length)\n    lst_sorted_odd = []\n    for i\
    \ in lst_sorted\n        if length(i) % 2 == 0\n            push!(lst_sorted_odd,\
    \ i)\n        end\n    end\n    return lst_sorted_odd\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpncg7uksf.jl:35\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpncg7uksf.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpncg7uksf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpncg7uksf.jl:38\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpncg7uksf.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpncg7uksf.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpncg7uksf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = filter(x -> length(x) % 2 == 0, lst)\n    sort(lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0djsynl5.jl:32\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0djsynl5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0djsynl5.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0djsynl5.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0iyt8ffh.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0iyt8ffh.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0iyt8ffh.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0iyt8ffh.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # remove all odd length strings\n    lst = filter(x -> length(x) % 2 ==\
    \ 0, lst)\n    # sort by length\n    lst = sort(lst, by = length)\n    # sort\
    \ by alphabetical order\n    lst = sort(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm8j8mq4k.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm8j8mq4k.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8j8mq4k.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm8j8mq4k.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdir6mbf8.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdir6mbf8.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdir6mbf8.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdir6mbf8.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #lst = [\"aa\", \"a\", \"aaa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\"]\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst\
    \ = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n\
    \    lst = sort(lst, by=length)\n    lst = sort(lst, by=length)\n    l\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_o241rdf.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_o241rdf.jl:1\n\
    in expression starting at /tmp/tmp_o241rdf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    if length(lst) ==\
    \ 1\n        return lst\n    end\n    if length(lst) == 2\n        if length(lst[1])\
    \ == length(lst[2])\n            if lst[1] < lst[2]\n                return lst\n\
    \            else\n                return reverse(lst)\n            end\n    \
    \    end\n        if length(lst[1]) < length(lst[2])\n            return lst\n\
    \        else\n            return reverse(lst)\n        end\n    end\n    return\
    \ sorted_list_sum(sort(lst[1:2])) * sorted_list_sum(lst[3:end])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpelo6hech.jl:45\\n  Test threw\
    \ exception\\n  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\\\
    n  MethodError: no method matching *(::Vector{String}, ::Vector{String})\\n  Closest\
    \ candidates are:\\n    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    *(::StridedVecOrMat, !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\\\
    n    *(::StridedVecOrMat, !Matched::LinearAlgebra.LQPackedQ) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:290\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(lst::Vector{String})\\n    \
    \ @ Main /tmp/tmpelo6hech.jl:38\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpelo6hech.jl:45 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpelo6hech.jl:44\\ntest set:\
    \ Error During Test at /tmp/tmpelo6hech.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\\n  MethodError: no method matching *(::Vector{String}, ::Vector{String})\\\
    n  Closest candidates are:\\n    *(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\n    *(::StridedVecOrMat,\
    \ !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\\\
    n    *(::StridedVecOrMat, !Matched::LinearAlgebra.LQPackedQ) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:290\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(lst::Vector{String})\\n    \
    \ @ Main /tmp/tmpelo6hech.jl:38\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlin"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #lst = [\"aa\", \"a\", \"aaa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplwtydvcs.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplwtydvcs.jl:1\n\
    in expression starting at /tmp/tmplwtydvcs.jl:1\n"
  exit_code: 1
  status: SyntaxError
