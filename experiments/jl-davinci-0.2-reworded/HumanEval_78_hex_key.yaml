name: HumanEval_78_hex_key
language: jl
prompt: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n    digits that are\
  \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
  \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
  \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5,\
  \ 7, 11, 13, 17,...\n    So you have to determine a number of the following digits:\
  \ 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume\
  \ the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are\
  \ always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"\
  1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\"\
  )\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction hex_key(num::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
  AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
  ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
  ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
completions: ["    if num == \"\"\n        return 0\n    end\n    if num[end] == '0'\n\
    \        return hex_key(num[1:end-1])\n    end\n    if num[end] == '1'\n     \
    \   return hex_key(num[1:end-1])\n    end\n    if num[end] == '2'\n        return\
    \ 1 + hex_key(num[1:end-1])\n    end\n    if num[end] == '3'\n        return 1\
    \ + hex_key(num[1:end-1])\n    end\n    if num[end] == '4'\n        return hex_key(num[1:end-1])\n\
    \    end\n    if num[end] == '5'\n        return 1 + hex_key(num[1:end-1])\n \
    \   end\n    if num[end] == '6'\n        return hex_key(num[1:end-1])\n    end\n\
    \    if num[end] == '7'\n        return 1 + hex_key(num[1:end-1])\n    end\n \
    \   if num[end] == '8'\n        return hex_key(num[1:end-1])\n    end\n    if\
    \ num[end] == '9'\n        return hex_key(num[1:end-1])\n    end\n    if num[end]\
    \ == 'A'\n        return hex_key(num[1:end-1])\n    end\n    if num[end] == 'B'\n\
    \        return 1 + hex_key(num[1:end-1])\n    end\n    if num[end] == 'C'\n \
    \       return hex_key(num[1:end-1])\n    end\n    if num[end] == 'D'\n      \
    \  return 1 + hex_key(num[1:end-1])\n    end\n    if num[end] == 'E'\n       \
    \ return hex_key(num[1:end-1])\n    end\n    if num[end] == 'F'\n        return\
    \ hex_key(num[1:end-1])\n    end\nend", "    # your code here\nend\n\"\"\"\n \
    \   >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"1077E\")\n    2\n    >>> hex_key(\"\
    ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\")\n    6\n    >>> hex_key(\"\
    2020\")\n    2\n\"\"\"", "    # your code here\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    prime_numbers = [2, 3, 5, 7, 11, 13]\n    hex_numbers = [\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_prime_numbers = [\"2\", \"3\", \"5\"\
    , \"7\", \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in hex_prime_numbers\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    #\
    \ your code here\nend", "    # convert hexadecimal number to decimal number\n\
    \    dec_num = parse(Int64, num, base=16)\n    # count the number of hexadecimal\
    \ digits that are primes\n    count = 0\n    for i in num\n        if i in [\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    if num == \"\"\n        return 0\n    end\n\
    \    if num[1] in ['2','3','5','7','B','D']\n        return 1 + hex_key(num[2:end])\n\
    \    else\n        return hex_key(num[2:end])\n    end\nend", "    if num == \"\
    \"\n        return 0\n    end\n    primes = [2, 3, 5, 7, 11, 13]\n    hex_primes\
    \ = 0\n    for i in num\n        if i in \"2357BD\"\n            hex_primes +=\
    \ 1\n        end\n    end\n    return hex_primes\nend", "    primes = [2, 3, 5,\
    \ 7, 11, 13]\n    return length(filter(x -> x in primes, parse.(Int64, num, base=16)))\n\
    end", "    if num == \"\"\n        return 0\n    end\n    primes = [2, 3, 5, 7,\
    \ 11, 13]\n    hex_primes = 0\n    for i in num\n        if i in [\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"]\n            hex_primes += 1\n        end\n    end\n\
    \    return hex_primes\nend", "    if num == \"\"\n        return 0\n    end\n\
    \    if num[1] in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n        return 1 + hex_key(num[2:end])\n\
    \    else\n        return hex_key(num[2:end])\n    end\nend", "    # your code\
    \ here\nend", "    hex_digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num\n        if i in hex_digits[10:end]\n\
    \            i = parse(Int64, i, base=16)\n        else\n            i = parse(Int64,\
    \ i)\n        end\n        if i in primes\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    # convert hexadecimal to decimal\n    dec\
    \ = parse(Int64, num, base=16)\n    # convert decimal to binary\n    bin = dec2bin(dec)\n\
    \    # convert binary to decimal\n    dec = parse(Int64, bin, base=2)\n    # count\
    \ prime numbers\n    count = 0\n    for i in 2:dec\n        if isprime(i)\n  \
    \          count += 1\n        end\n    end\n    return count\nend", "    # your\
    \ code here\n    return 0\nend", "    # your code here\nend", "    hex_primes\
    \ = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num\n        if i in [\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    if num == \"\"\n        return 0\n    end\n\
    \    hex_prime = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num\n     \
    \   if i in \"2357BD\"\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in\
    \ num\n        if i in \"2357BD\"\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    # your code here\nend", "    # your code here\n\
    end", "    # convert string to array of chars\n    num_arr = collect(num)\n  \
    \  # convert chars to integers\n    num_arr = map(x -> parse(Int64, x), num_arr)\n\
    \    # filter out all non-prime numbers\n    num_arr = filter(x -> x in [2, 3,\
    \ 5, 7, 11, 13], num_arr)\n    # return the length of the array\n    return length(num_arr)\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # Your code\
    \ here\n    return 0\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n\
    \    for i in num\n        if i in \"2357BD\"\n            count += 1\n      \
    \  end\n    end\n    return count\nend", "    primes = [2, 3, 5, 7, 11, 13]\n\
    \    count = 0\n    for i in num\n        if i in \"2357BDEF\"\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    # your code here\n\
    end", "    # your code here\nend", "    if num == \"\"\n        return 0\n   \
    \ end\n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"\
    ,\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes = [2,3,5,7,11,13]\n  \
    \  count = 0\n    for i in num\n        if i in hex_digits[10:16]\n          \
    \  count += 1\n        end\n    end\n    return count\nend", "    # your code\
    \ here\nend", "    if num == \"\"\n        return 0\n    end\n    primes = [2,\
    \ 3, 5, 7, 11, 13]\n    hex_primes = 0\n    for i in 1:length(num)\n        if\
    \ num[i] in ['2', '3', '5', '7', 'B', 'D']\n            hex_primes += 1\n    \
    \    end\n    end\n    return hex_primes\nend", "    # your code here\nend", " \
    \   if num == \"\"\n        return 0\n    end\n    count = 0\n    for i in num\n\
    \        if i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    count = 0\n    for i in num\n        if i in \"2357BDF\"\n        \
    \    count += 1\n        end\n    end\n    return count\nend", "    # Convert\
    \ the string to an array of characters\n    num_array = collect(num)\n    # Convert\
    \ the array of characters to an array of integers\n    num_array = parse.(Int64,\
    \ num_array)\n    # Create an array of prime numbers\n    prime_array = [2, 3,\
    \ 5, 7, 11, 13]\n    # Create an array of prime numbers in hexadecimal\n    prime_hex_array\
    \ = [2, 3, 5, 7, 11, 13]\n    # Create an empty array to store the number of primes\n\
    \    prime_count = []\n    # Loop through the array of integers\n    for i in\
    \ num_array\n        # Loop through the array of prime numbers\n        for j\
    \ in prime_array\n            # If the integer is equal to a prime number\n  \
    \          if i == j\n                # Append the integer to the prime_count\
    \ array\n                push!(prime_count, i)\n            end\n        end\n\
    \    end\n    # Return the length of the prime_count array\n    return length(prime_count)\n\
    end", "    # your code here\nend", "    # your code here\nend\n\"\"\"\n    >>>\
    \ hex_key(\"AB\")\n    1\n    >>> hex_key(\"1077E\")\n    2\n    >>> hex_key(\"\
    ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\")\n    6\n    >>> hex_key(\"\
    2020\")\n    2\n\"\"\"", "    # your code here\nend", "    if num == \"\"\n  \
    \      return 0\n    end\n    hex_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11,\
    \ 13, 17, 19, 23, 29]\n    count = 0\n    for i in 1:length(num)\n        if num[i]\
    \ in ['A', 'B', 'C', 'D', 'E', 'F']\n            if hex_digits[parse(Int64, num[i])]\
    \ in [2, 3, 5, 7, 11, 13]\n                count += 1\n            end\n     \
    \   elseif num[i] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    \
    \        if hex_digits[parse(Int64, num[i])] in [2, 3, 5, 7, 11, 13]\n       \
    \         count += 1\n            end\n        end\n    end\n    return count\n\
    end", "    if num == \"\"\n        return 0\n    end\n    count = 0\n    for i\
    \ in num\n        if i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # your code goes here\n    return 0\n\
    end", "    # your code here\nend", "    if num == \"\"\n        return 0\n   \
    \ end\n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"\
    ,\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes = [2,3,5,7,11,13]\n  \
    \  count = 0\n    for i in 1:length(num)\n        if num[i] in primes\n      \
    \      count += 1\n        end\n    end\n    return count\nend", "    # your code\
    \ here\n    return 0\nend", "    # your code here\nend", "    primes = [2, 3,\
    \ 5, 7, 11, 13]\n    return length(filter(x -> x in primes, map(x -> parse(Int64,\
    \ x), collect(num))))\nend", "    # your code here\nend", "    # your code goes\
    \ here\n    return 0\nend", "    # your code here\nend", "    if num == \"\"\n\
    \        return 0\n    end\n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\",\"\
    5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    prime_hex_digits\
    \ = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count = 0\n    for i in 1:length(num)\n\
    \        if num[i] in prime_hex_digits\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    # convert hexadecimal string to decimal\
    \ number\n    dec = parse(Int64, num, base=16)\n    # convert decimal number to\
    \ binary string\n    bin = string(dec, base=2)\n    # count number of 1's in binary\
    \ string\n    count = count(x -> x == '1', bin)\n    # return count\n    return\
    \ count\nend", "    # your code here\nend", "    # your code here\nend", "   \
    \ count = 0\n    for i in num\n        if i in \"2357BD\"\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    return length(filter(x\
    \ -> x in [2,3,5,7,11,13], parse.(Int64, num, base=16)))\nend", "    if num ==\
    \ \"\"\n        return 0\n    end\n    if num[1] in ['2','3','5','7','B','D']\n\
    \        return 1 + hex_key(num[2:end])\n    else\n        return hex_key(num[2:end])\n\
    \    end\nend", "    # your code here\nend", "    # your code here\nend", "  \
    \  if num == \"\"\n        return 0\n    end\n    hex_digits = [\"0\",\"1\",\"\
    2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"\
    F\"]\n    primes = [2,3,5,7,11,13]\n    count = 0\n    for i in num\n        if\
    \ i in hex_digits[primes]\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    # convert hexadecimal number to decimal\n    dec = parse(Int64,\
    \ num, base=16)\n    # count number of primes\n    count = 0\n    for i in digits(dec)\n\
    \        if i in [2, 3, 5, 7, 11, 13]\n            count += 1\n        end\n \
    \   end\n    return count\nend", "    num = uppercase(num)\n    primes = [2, 3,\
    \ 5, 7, 11, 13]\n    count = 0\n    for i in num\n        if i in \"2357BDF\"\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    num\
    \ = uppercase(num)\n    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for\
    \ i in num\n        if i in \"2357BDF\"\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    count\
    \ = 0\n    for i in num\n        if i in \"2357BDEF\"\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    # convert string to array\
    \ of characters\n    num_array = collect(num)\n    # convert array of characters\
    \ to array of integers\n    num_array = map(x -> parse(Int64, x), num_array)\n\
    \    # convert array of integers to array of booleans\n    num_array = map(x ->\
    \ isprime(x), num_array)\n    # count the number of true values\n    return count(num_array)\n\
    end", "    # your code here\nend", "    # Your code here\nend", "    primes =\
    \ [2, 3, 5, 7, 11, 13]\n    hex_primes = 0\n    for i in num\n        if i in\
    \ \"2357BD\"\n            hex_primes += 1\n        end\n    end\n    return hex_primes\n\
    end", "    count = 0\n    for i in num\n        if i in [\"2\",\"3\",\"5\",\"\
    7\",\"B\",\"D\"]\n            count += 1\n        end\n    end\n    return count\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # convert\
    \ hexadecimal to decimal\n    dec = parse(Int64, num, base=16)\n    # count primes\n\
    \    count = 0\n    for i in 2:dec\n        if isprime(i)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    if num == \"\"\n     \
    \   return 0\n    end\n    num = uppercase(num)\n    count = 0\n    for i in num\n\
    \        if i == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D'\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    if\
    \ num == \"\"\n        return 0\n    end\n    if num[end] in \"2357BDF\"\n   \
    \     return 1 + hex_key(num[1:end-1])\n    else\n        return hex_key(num[1:end-1])\n\
    \    end\nend", "    prime_hex = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n\
    \    count = 0\n    for i in num\n        if i in prime_hex\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    hex_primes = [2, 3,\
    \ 5, 7, 11, 13]\n    return sum(num .== string.(hex_primes))\nend", "    # your\
    \ code goes here\nend", "    # your code here\nend", "    # your code here\n \
    \   return 0\nend", "    # your code here\nend\n ", "    if num == \"\"\n    \
    \    return 0\n    end\n    return length(filter(x -> isprime(parse(Int64, x,\
    \ base=16)), collect(num)))\nend", "    # Convert the hexadecimal number to decimal\
    \ number\n    dec_num = parse(Int64, num, base=16)\n    # Convert the decimal\
    \ number to binary number\n    bin_num = dec_num\n    # Count the number of primes\
    \ in the binary number\n    count = 0\n    while bin_num > 0\n        if bin_num\
    \ % 2 == 1\n            count += 1\n        end\n        bin_num = bin_num >>\
    \ 1\n    end\n    return count\nend", "    # your code here\nend", "    n = 0\n\
    \    for i in num\n        if i in \"2357BD\"\n            n += 1\n        end\n\
    \    end\n    return n\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    return length(filter(x\
    \ -> x in primes, map(x -> parse(Int64, x), collect(num))))\nend", "    # your\
    \ code here\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for\
    \ i in num\n        if i in \"2357BDEF\"\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    n = 0\n    for i in num\n        if i in\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            n += 1\n        end\n   \
    \ end\n    return n\nend", "    count = 0\n    for i in num\n        if i in [\"\
    2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n \
    \   for i in num\n        if i in \"2357BD\"\n            count += 1\n       \
    \ end\n    end\n    return count\nend", "    # your code here\n    return 0\n\
    end", "    # your code here\nend", "    # your code here\nend", "    num = uppercase(num)\n\
    \    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num\n        if\
    \ i in \"2357BDEF\"\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    # your code here\nend", "    # your code here\nend", "   \
    \ num = uppercase(num)\n    count = 0\n    for i in num\n        if i in [\"2\"\
    ,\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    # your code here\nend", "    # your code here\n\
    \    return 0\nend", "    # your code here\nend", "    # your code here\nend",
  "    # convert hexadecimal to decimal\n    dec = parse(Int64, num, base=16)\n  \
    \  # convert decimal to binary\n    bin = dec2bin(dec)\n    # convert binary to\
    \ decimal\n    dec = parse(Int64, bin, base=2)\n    # count prime digits\n   \
    \ count = 0\n    for i in 2:dec\n        if isprime(i)\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    # your code here\nend", " \
    \   # your code here\nend", "    # your code here\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # your code here\nend", "    #\
    \ your code here\nend", "    hex_key = 0\n    for i in num\n        if i in [\"\
    2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n        end\n  \
    \  end\n    return hex_key\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    primes = [2, 3, 5, 7, 11, 13]\n\
    \    return length(filter(x -> x in primes, [parse(Int64, x) for x in num]))\n\
    end", "    # your code goes here\n    return 0\nend", "    hex_digits = [\"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\"]\n    primes = [2, 3, 5, 7, 11, 13]\n    count =\
    \ 0\n    for i in num\n        if i in hex_digits[10:16]\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    # your code here\nend",
  "    # Your code here\n    return 0\nend", "    # convert hex to decimal\n    dec_num\
    \ = parse(Int64, num, base=16)\n    # convert decimal to binary\n    bin_num =\
    \ binary(dec_num)\n    # convert binary to string\n    str_bin_num = string(bin_num)\n\
    \    # count the number of 1's\n    count = count(x -> x == '1', str_bin_num)\n\
    \    return count\nend", "    # your code here\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # your code here\nend", "    if\
    \ num == \"\"\n        return 0\n    end\n    primes = [2, 3, 5, 7, 11, 13]\n\
    \    num = uppercase(num)\n    count = 0\n    for i in 1:length(num)\n       \
    \ if num[i] in primes\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    # your code here\nend", "    if num == \"\"\n        return\
    \ 0\n    end\n    if num in [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n     \
    \   return 1\n    end\n    return hex_key(num[1:end]) + hex_key(num[2:end])\n\
    end", "    if num == \"\"\n        return 0\n    end\n    num_arr = [parse(Int64,\
    \ i) for i in num]\n    return sum([isprime(i) for i in num_arr])\nend", "   \
    \ count = 0\n    for i in num\n        if i in [\"2\",\"3\",\"5\",\"7\",\"B\"\
    ,\"D\"]\n            count += 1\n        end\n    end\n    return count\nend",
  "    if num == \"\"\n        return 0\n    end\n    if num == \"2\" || num == \"\
    3\" || num == \"5\" || num == \"7\" || num == \"B\" || num == \"D\"\n        return\
    \ 1\n    end\n    if num[1] == '0'\n        return hex_key(num[2:end])\n    end\n\
    \    return hex_key(num[1:end]) + hex_key(num[2:end])\nend", "    # Your code\
    \ here\nend", "    # your code here\nend", "    n = 0\n    for i in num\n    \
    \    if i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            n += 1\n     \
    \   end\n    end\n    return n\nend", "    # your code here\nend", "    # your\
    \ code here\nend", "    # your code here\n    return 0\nend", "    # your code\
    \ here\n    return 0\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n\
    \    for i in num\n        if i in \"2357BD\"\n            count += 1\n      \
    \  end\n    end\n    return count\nend", "    primes = [\"2\", \"3\", \"5\", \"\
    7\", \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in primes\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    #\
    \ convert string to array of characters\n    num_array = collect(num)\n    # convert\
    \ array of characters to array of integers\n    num_array = [parse(Int64, i) for\
    \ i in num_array]\n    # convert array of integers to array of hexadecimal numbers\n\
    \    num_array = [hex(i) for i in num_array]\n    # convert array of hexadecimal\
    \ numbers to array of integers\n    num_array = [parse(Int64, i) for i in num_array]\n\
    \    # count the number of primes in the array\n    num_primes = count(i -> isprime(i),\
    \ num_array)\n    return num_primes\nend", "    # your code here\nend", "    #\
    \ convert hex to dec\n    dec = parse(Int64, num, base=16)\n    # convert dec\
    \ to binary\n    bin = dec2bin(dec)\n    # convert binary to dec\n    dec = parse(Int64,\
    \ bin, base=2)\n    # count primes\n    count = 0\n    for i in 2:dec\n      \
    \  if isprime(i)\n            count += 1\n        end\n    end\n    return count\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    if num == \"\"\n        return\
    \ 0\n    end\n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes = [2,3,5,7,11,13]\n\
    \    count = 0\n    for i in 1:length(num)\n        if num[i] in primes\n    \
    \        count += 1\n        end\n    end\n    return count\nend", "    # your\
    \ code here\nend", "    # your code here\nend", "    # your code here\nend", " \
    \   # convert hexadecimal number to decimal\n    dec_num = parse(Int64, num, base=16)\n\
    \    # convert decimal number to binary\n    bin_num = dec2bin(dec_num)\n    #\
    \ count number of primes\n    count = 0\n    for i in bin_num\n        if i ==\
    \ '1'\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   # your code here\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n\
    \    for i in num\n        if i in \"2357BD\"\n            count += 1\n      \
    \  end\n    end\n    return count\nend", "    if num == \"\"\n        return 0\n\
    \    end\n    num = uppercase(num)\n    primes = [\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"]\n    count = 0\n    for i in 1:length(num)\n        if num[i]\
    \ in primes\n            count += 1\n        end\n    end\n    return count\n\
    end", "    return length(filter(x -> x in [2,3,5,7,11,13], parse.(Int64, num,\
    \ base=16)))\nend", "    # your code here\nend", "    # your code here\nend",
  "    if num == \"\"\n        return 0\n    end\n    primes = [2, 3, 5, 7, 11, 13]\n\
    \    count = 0\n    for i in num\n        if i in primes\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    # your code here\nend",
  "    # your code goes here\nend", "    if num == \"\"\n        return 0\n    end\n\
    \    if num[end] in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n        return 1 +\
    \ hex_key(num[1:end-1])\n    else\n        return hex_key(num[1:end-1])\n    end\n\
    end", "    # your code here\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    count\
    \ = 0\n    for i in num\n        if i in \"2357BD\"\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    if num == \"\"\n        return\
    \ 0\n    end\n    if num[end] in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n     \
    \   return 1 + hex_key(num[1:end-1])\n    else\n        return hex_key(num[1:end-1])\n\
    \    end\nend", "    # your code here\nend", "    return length(filter(x -> x\
    \ in [2,3,5,7,11,13], parse.(Int64, num)))\nend", "    # your code here\nend",
  "    if num == \"\"\n        return 0\n    end\n    num = uppercase(num)\n    num\
    \ = replace(num, \"A\" => \"10\")\n    num = replace(num, \"B\" => \"11\")\n \
    \   num = replace(num, \"C\" => \"12\")\n    num = replace(num, \"D\" => \"13\"\
    )\n    num = replace(num, \"E\" => \"14\")\n    num = replace(num, \"F\" => \"\
    15\")\n    num = parse(Int64, num)\n    primes = [2, 3, 5, 7, 11, 13]\n    count\
    \ = 0\n    while num > 0\n        if num % 10 in primes\n            count +=\
    \ 1\n        end\n        num = div(num, 10)\n    end\n    return count\nend",
  "    # your code here\nend", "    # Your code here\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in\
    \ num\n        if i in \"2357BD\"\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    # your code here\nend", "    primes = [2, 3, 5,\
    \ 7, 11, 13]\n    count = 0\n    for i in num\n        if i in \"2357BDF\"\n \
    \           count += 1\n        end\n    end\n    return count\nend", "    # your\
    \ code here\nend", "    if num == \"\"\n        return 0\n    end\n    hex_digits\
    \ = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"\
    C\",\"D\",\"E\",\"F\"]\n    primes = [2,3,5,7,11,13]\n    count = 0\n    for i\
    \ in num\n        if i in hex_digits[primes]\n            count += 1\n       \
    \ end\n    end\n    return count\nend", "    # your code here\nend", "    # your\
    \ code here\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    return sum(map(x ->\
    \ in(x, primes), num))\nend", "    if num == \"\"\n        return 0\n    end\n\
    \    if num[1] in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n        return 1 + hex_key(num[2:end])\n\
    \    else\n        return hex_key(num[2:end])\n    end\nend", "    # your code\
    \ here\nend", "    # your code here\nend\n ", "    primes = [2, 3, 5, 7, 11, 13]\n\
    \    hex_primes = 0\n    for i in num\n        if i in \"2357BD\"\n          \
    \  hex_primes += 1\n        end\n    end\n    return hex_primes\nend", "    #\
    \ Your code here\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    return length(filter(x\
    \ -> x in primes, map(x -> parse(Int64, x), collect(num))))\nend", "    if num\
    \ == \"\"\n        return 0\n    end\n    hex_digits = [\"0\",\"1\",\"2\",\"3\"\
    ,\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n  \
    \  primes = [2,3,5,7,11,13]\n    count = 0\n    for i in num\n        if i in\
    \ hex_digits[primes]\n            count += 1\n        end\n    end\n    return\
    \ count\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
