name: HumanEval_2_truncate_number
language: jl
results:
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number % 1\nend\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - floor(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - floor(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - floor(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - floor(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - floor(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - floor(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - floor(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - floor(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - floor(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - floor(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - floor(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    return number - trunc(number)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
