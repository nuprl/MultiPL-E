name: HumanEval_59_largest_prime_factor
language: jl
prompt: "\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
  \    2\n    \"\"\"\nfunction largest_prime_factor(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = largest_prime_factor;\n\t@test(candidate(15)\
  \ == 5)\n\t@test(candidate(27) == 3)\n\t@test(candidate(63) == 7)\n\t@test(candidate(330)\
  \ == 11)\n\t@test(candidate(13195) == 29)\nend\n"
completions: ["    # your code here\nend", "    i = 2\n    while i <= n\n        if\
    \ n % i == 0\n            n /= i\n        else\n            i += 1\n        end\n\
    \    end\n    return i\nend", "    # your code here\nend", "    # YOUR CODE HERE\n\
    end", "    i = 2\n    while i <= n\n        if n % i == 0\n            n /= i\n\
    \        else\n            i += 1\n        end\n    end\n    return i\nend", " \
    \   for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in primes(n)\n        if\
    \ n % i == 0\n            return i\n        end\n    end\nend", "    for i in\
    \ 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n \
    \       end\n    end\n    return n\nend", "    # YOUR CODE HERE\nend", "    i\
    \ = 2\n    while i <= n\n        if n % i == 0\n            n /= i\n        else\n\
    \            i += 1\n        end\n    end\n    return i\nend", "    # YOUR CODE\
    \ HERE\nend", "    if n == 1\n        return 1\n    end\n    for i = 2:n\n   \
    \     if n % i == 0\n            return max(i, largest_prime_factor(n/i))\n  \
    \      end\n    end\nend", "    # YOUR CODE HERE\nend", "    # TODO: implement\
    \ this function\n    return 0\nend", "    if n == 2\n        return 2\n    end\n\
    \    if n % 2 == 0\n        return largest_prime_factor(n/2)\n    end\n    for\
    \ i in 3:2:floor(Int64, sqrt(n))\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    if n == 1\n        return 1\n\
    \    end\n    if isprime(n)\n        return n\n    end\n    for i in 2:n-1\n \
    \       if n % i == 0\n            return largest_prime_factor(n/i)\n        end\n\
    \    end\nend", "    if n == 2\n        return 2\n    end\n    for i in 2:n-1\n\
    \        if n % i == 0\n            return largest_prime_factor(n/i)\n       \
    \ end\n    end\nend", "    # YOUR CODE HERE\nend", "    for i in 2:n\n       \
    \ if n % i == 0\n            return largest_prime_factor(n/i)\n        end\n \
    \   end\n    return n\nend", "    for i in 2:n\n        if n % i == 0\n      \
    \      return largest_prime_factor(n/i)\n        end\n    end\n    return n\n\
    end", "    if n == 1\n        return 1\n    end\n    if isprime(n)\n        return\
    \ n\n    end\n    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\nend", "    for i in primes(n)\n        if n % i == 0\n\
    \            return i\n        end\n    end\nend", "    for i in primes(n)\n \
    \       if n % i == 0\n            return i\n        end\n    end\nend", "   \
    \ for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n / i)\n        end\n    end\n\
    \    return n\nend", "    for i in 2:n\n        if n % i == 0\n            return\
    \ largest_prime_factor(n/i)\n        end\n    end\n    return n\nend", "    #\
    \ YOUR CODE HERE\nend", "    for i in 2:n\n        if n % i == 0\n           \
    \ return largest_prime_factor(n/i)\n        end\n    end\n    return n\nend",
  "    i = 2\n    while i <= n\n        if n % i == 0\n            n /= i\n      \
    \  else\n            i += 1\n        end\n    end\n    return i\nend", "    factor\
    \ = 2\n    while n > 1\n        while n % factor == 0\n            n /= factor\n\
    \        end\n        factor += 1\n    end\n    return factor - 1\nend", "   \
    \ for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n\
    \ \xF7 i)\n        end\n    end\n    return n\nend", "    # TODO: implement this\
    \ function\n    return 0\nend", "    # YOUR CODE HERE\nend", "    # YOUR CODE\
    \ HERE\nend", "    # YOUR CODE HERE\nend", "    factors = []\n    for i in 2:n\n\
    \        if n % i == 0\n            factors = [i]\n            n = n / i\n   \
    \     end\n    end\n    return factors[end]\nend", "    for i in primes(n)\n \
    \       if n % i == 0\n            return i\n        end\n    end\nend", "   \
    \ # Initialize the largest prime factor to be 1\n    largest_prime_factor = 1\n\
    \    # Initialize the divisor to be 2\n    divisor = 2\n    # Loop until n is\
    \ 1\n    while n > 1\n        # If n is divisible by divisor\n        if n % divisor\
    \ == 0\n            # Update the largest prime factor\n            largest_prime_factor\
    \ = divisor\n            # Divide n by divisor\n            n = n / divisor\n\
    \        else\n            # Increment the divisor\n            divisor = divisor\
    \ + 1\n        end\n    end\n    # Return the largest prime factor\n    return\
    \ largest_prime_factor\nend", "    # TODO: Implement this function\n    return\
    \ 0\nend", "    prime_factors = []\n    for i in 2:n\n        if n % i == 0\n\
    \            push!(prime_factors, i)\n            n = n / i\n        end\n   \
    \ end\n    return prime_factors[end]\nend", "    # TODO: Implement me!\n    return\
    \ 0\nend", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in 2:n\n        while n\
    \ % i == 0\n            n = n / i\n        end\n    end\n    return n\nend", " \
    \   for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    if isprime(n)\n        return n\n    end\n    for i in 2:n\n\
    \        if n % i == 0\n            return largest_prime_factor(n/i)\n       \
    \ end\n    end\nend", "    # YOUR CODE HERE\nend", "    # YOUR CODE HERE\nend",
  "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    factor = 2\n    while n > 1\n\
    \        while n % factor == 0\n            n /= factor\n        end\n       \
    \ factor += 1\n    end\n    return factor - 1\nend", "    for i in 2:n\n     \
    \   if n % i == 0\n            return largest_prime_factor(n/i)\n        end\n\
    \    end\n    return n\nend", "    # find the largest prime factor of n\n    #\
    \ assume n > 1 and is not a prime\n    # return the largest prime factor\n   \
    \ # your code here\n    return 0\nend", "    # TODO: implement this function\n\
    \    return 0\nend", "    # n is not a prime\n    # n > 1\n    # n is even\n \
    \   if n % 2 == 0\n        return largest_prime_factor(n/2)\n    end\n    # n\
    \ is odd\n    # n is not a prime\n    # n > 1\n    # n is not divisible by 2\n\
    \    # n is not divisible by 3\n    # n is not divisible by 5\n    # n is not\
    \ divisible by 7\n    # n is not divisible by 11\n    # n is not divisible by\
    \ 13\n    # n is not divisible by 17\n    # n is not divisible by 19\n    # n\
    \ is not divisible by 23\n    # n is not divisible by 29\n    # n is not divisible\
    \ by 31\n    # n is not divisible by 37\n    # n is not divisible by 41\n    #\
    \ n is not divisible by 43\n    # n is not divisible by 47\n    # n is not divisible\
    \ by 53\n    # n is not divisible by 59\n    # n is not divisible by 61\n    #\
    \ n is not divisible by 67\n    # n is not divisible by 71\n    # n is not divisible\
    \ by 73\n    # n is not divisible by 79\n    # n is not divisible by 83\n    #\
    \ n is not divisible by 89\n    # n is not divisible by 97\n    # n is not divisible\
    \ by 101\n    # n is not divisible by 103\n    # n is not divisible by 107\n \
    \   # n is not divisible by 109\n    # n is not divisible by 113\n    # n is not\
    \ divisible by 127\n    # n is not divisible by 131\n    # n is not divisible\
    \ by 137\n    # n is not divisible by 139\n    # n is not divisible by 149\n \
    \   # n is not divisible by 151\n    # n is not divisible by 157\n    # n is not\
    \ divisible by 163\n    # n is not divisible by 167\n    # n is not divisible\
    \ by 173\n    # n is not divisible by 179\n    # n is not divisible by 181\n \
    \   # n is not divisible by 191\n    # n is not divisible by 193\n    # n is not\
    \ divisible", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    # Find the smallest prime factor\
    \ of n\n    p = smallest_prime_factor(n)\n    # If p is the only prime factor\
    \ of n, return p\n    if p == n\n        return p\n    end\n    # Otherwise, return\
    \ the largest prime factor of n/p\n    return largest_prime_factor(n/p)\nend",
  "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n\
    \ / i)\n        end\n    end\n    return n\nend", "    if n <= 1\n        return\
    \ 0\n    end\n    if isprime(n)\n        return n\n    end\n    i = 2\n    while\
    \ i <= n\n        if n % i == 0\n            return largest_prime_factor(n / i)\n\
    \        end\n        i += 1\n    end\nend", "    # your code here\nend", "  \
    \  # YOUR CODE HERE\nend", "    # YOUR CODE HERE\nend", "    for i in 2:n\n  \
    \      if n % i == 0\n            return largest_prime_factor(n/i)\n        end\n\
    \    end\n    return n\nend", "    for i in 2:n\n        if n % i == 0\n     \
    \       return largest_prime_factor(n / i)\n        end\n    end\n    return n\n\
    end", "    # YOUR CODE HERE\nend", "    # your code here\nend", "    # YOUR CODE\
    \ HERE\nend", "    if n == 1\n        return 1\n    end\n    for i in 2:n\n  \
    \      if n % i == 0\n            return largest_prime_factor(n/i)\n        end\n\
    \    end\nend", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    # your code here\nend", "    for\
    \ i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    # your code here\nend", "    #\
    \ TODO: Implement this function.\n    return 0\nend", "    for i in 2:n\n    \
    \    if n % i == 0\n            return largest_prime_factor(n/i)\n        end\n\
    \    end\n    return n\nend", "    for i in 2:n \n        if n % i == 0 \n   \
    \         return largest_prime_factor(n/i)\n        end\n    end\n    return n\n\
    end", "    p = 2\n    while p <= n\n        if n % p == 0\n            n = n /\
    \ p\n        else\n            p += 1\n        end\n    end\n    return p\nend",
  "    # TODO: write your code here\n    return 0\nend", "    # TODO: Implement this\
    \ function\n    return 0\nend", "    for i in 2:n\n        if n % i == 0\n   \
    \         return largest_prime_factor(n/i)\n        end\n    end\n    return n\n\
    end", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    # YOUR CODE HERE\nend", "    #\
    \ TODO: implement this function\n    return 0\nend", "    factors = factor(n)\n\
    \    return factors[end]\nend", "    for i in 2:n\n        if n % i == 0\n   \
    \         return largest_prime_factor(n/i)\n        end\n    end\n    return n\n\
    end", "    # YOUR CODE HERE\n    return 0\nend", "    for i in 2:n\n        if\
    \ n % i == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n\
    \    return n\nend", "    # TODO: implement this function\n    return 0\nend",
  "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in 2:n-1\n        if n %\
    \ i == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n\
    \    return n\nend", "    for i in 2:n\n        if n % i == 0\n            return\
    \ largest_prime_factor(n / i)\n        end\n    end\n    return n\nend", "   \
    \ for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    if n % 2 == 0\n        return largest_prime_factor(n/2)\n\
    \    end\n    for i in 3:2:floor(Int64, sqrt(n))\n        if n % i == 0\n    \
    \        return largest_prime_factor(n/i)\n        end\n    end\n    return n\n\
    end", "    for i in primes(n)\n        if n % i == 0\n            return i\n \
    \       end\n    end\nend", "    # Your code here\n    return 0\nend", "    #\
    \ YOUR CODE HERE\nend", "    if n == 1\n        return 1\n    end\n    i = 2\n\
    \    while i <= n\n        if n % i == 0\n            n = n / i\n            i\
    \ = 2\n        else\n            i += 1\n        end\n    end\n    return i\n\
    end", "    if n == 2\n        return 2\n    end\n    for i in 2:n\n        if\
    \ n % i == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n\
    end", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    # TODO: implement this function\n\
    \    return 0\nend", "    # find the smallest prime factor\n    p = smallest_prime_factor(n)\n\
    \    # if the smallest prime factor is n, then n is prime\n    if p == n\n   \
    \     return n\n    else\n        # otherwise, find the largest prime factor of\
    \ n/p\n        return largest_prime_factor(n/p)\n    end\nend", "    for i in\
    \ 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n \
    \       end\n    end\n    return n\nend", "    # TODO: implement this function\n\
    \    return 0\nend", "    # TODO: implement this function\n    return 0\nend",
  "    # TODO: write your code here\nend", "    for i in 2:n\n        if n % i ==\
    \ 0\n            return largest_prime_factor(n/i)\n        end\n    end\n    return\
    \ n\nend", "    # your code here\nend", "    for i in primes(n)\n        if n\
    \ % i == 0\n            return i\n        end\n    end\nend", "    for i in 2:n\n\
    \        if n % i == 0\n            return largest_prime_factor(n/i)\n       \
    \ end\n    end\n    return n\nend", "    for i in primes(n)\n        if n % i\
    \ == 0\n            return i\n        end\n    end\nend", "    # YOUR CODE HERE\n\
    \    return 0\nend", "    # YOUR CODE HERE\nend", "    # YOUR CODE HERE\nend",
  "    # YOUR CODE HERE\nend", "    if n <= 1\n        return 0\n    end\n    if isprime(n)\n\
    \        return n\n    end\n    for i in 2:n\n        if n % i == 0\n        \
    \    return largest_prime_factor(n/i)\n        end\n    end\nend", "    i = 2\n\
    \    while i <= n\n        if n % i == 0\n            n /= i\n        else\n \
    \           i += 1\n        end\n    end\n    return i\nend", "    for i in 2:n\
    \ \n        if n % i == 0 \n            return largest_prime_factor(n/i)\n   \
    \     end\n    end\n    return n\nend", "    # your code here\nend", "    for\
    \ i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in primes(n)\n        if\
    \ n % i == 0\n            return i\n        end\n    end\nend", "    # TODO: implement\
    \ this function\n    return 0\nend", "    # your code here\nend", "    # TODO:\
    \ implement this function\n    return 0\nend", "    i = 2\n    while i <= n\n\
    \        if n % i == 0\n            n /= i\n        else\n            i += 1\n\
    \        end\n    end\n    return i\nend", "    # Initialize a list of prime numbers\n\
    \    primes = [2]\n    # Initialize a list of factors\n    factors = []\n    #\
    \ Initialize a counter\n    i = 3\n    # Loop until the number is 1\n    while\
    \ n > 1\n        # If the number is divisible by the counter, add the counter\
    \ to the list of factors\n        if n % i == 0\n            push!(factors, i)\n\
    \            # Divide the number by the counter\n            n = n / i\n     \
    \   # If the number is not divisible by the counter, increment the counter\n \
    \       else\n            i += 1\n        end\n    end\n    # Return the last\
    \ element in the list of factors\n    return factors[end]\nend", "    factor =\
    \ 2\n    while n % factor != 0\n        factor += 1\n    end\n    if n == factor\n\
    \        return n\n    else\n        return largest_prime_factor(n/factor)\n \
    \   end\nend", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    i = 2\n    while i <= n\n    \
    \    if n % i == 0\n            n /= i\n        else\n            i += 1\n   \
    \     end\n    end\n    return i\nend", "    # Initialize the largest prime factor\
    \ to 1\n    largest_prime_factor = 1\n    # Initialize the smallest prime factor\
    \ to 2\n    smallest_prime_factor = 2\n    # While the smallest prime factor is\
    \ less than or equal to the square root of n\n    while smallest_prime_factor\
    \ <= sqrt(n)\n        # If n is divisible by the smallest prime factor\n     \
    \   if n % smallest_prime_factor == 0\n            # Set the largest prime factor\
    \ to the smallest prime factor\n            largest_prime_factor = smallest_prime_factor\n\
    \            # Divide n by the smallest prime factor\n            n /= smallest_prime_factor\n\
    \        else\n            # Increment the smallest prime factor by 1\n      \
    \      smallest_prime_factor += 1\n        end\n    end\n    # Return the largest\
    \ prime factor\n    return largest_prime_factor\nend", "    for i in 2:n\n   \
    \     if n % i == 0\n            return largest_prime_factor(n/i)\n        end\n\
    \    end\n    return n\nend", "    for i in 2:n\n        if n % i == 0\n     \
    \       return largest_prime_factor(n / i)\n        end\n    end\n    return n\n\
    end", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    # Initialize the largest prime\
    \ factor to 1\n    largest_prime_factor = 1\n    # Initialize the factor to 2\n\
    \    factor = 2\n    # While n is greater than 1\n    while n > 1\n        # If\
    \ factor divides n\n        if n % factor == 0\n            # Update the largest\
    \ prime factor\n            largest_prime_factor = factor\n            # Divide\
    \ n by factor\n            n = n / factor\n        else\n            # Increment\
    \ factor by 1\n            factor = factor + 1\n        end\n    end\n    # Return\
    \ the largest prime factor\n    return largest_prime_factor\nend", "    # YOUR\
    \ CODE HERE\nend", "    # TODO: Implement this function\n    return 0\nend", " \
    \   for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    # YOUR CODE HERE\nend", "    if n == 2\n        return 2\n\
    \    end\n    for i in 2:n-1\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\nend", "    if n == 1\n        return 1\n    end\n    for\
    \ i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n /\
    \ i)\n        end\n    end\nend", "    # Initialize the largest prime factor to\
    \ 1\n    largest_prime_factor = 1\n    # Initialize the smallest prime number\
    \ to 2\n    prime = 2\n    # While n is greater than 1\n    while n > 1\n    \
    \    # If n is divisible by prime\n        if n % prime == 0\n            # Update\
    \ the largest prime factor\n            largest_prime_factor = prime\n       \
    \     # Divide n by prime\n            n = n / prime\n        else\n         \
    \   # Increment prime by 1\n            prime = prime + 1\n        end\n    end\n\
    \    # Return the largest prime factor\n    return largest_prime_factor\nend",
  "    # your code here\nend", "    # Initialize the largest prime factor to 1\n \
    \   largest_prime_factor = 1\n    # Initialize the smallest factor to 2\n    factor\
    \ = 2\n    # Loop until the factor is greater than n\n    while factor <= n\n\
    \        # If the factor divides n, then update the largest prime factor\n   \
    \     if n % factor == 0\n            largest_prime_factor = factor\n        \
    \    # Divide n by the factor\n            n = n / factor\n        else\n    \
    \        # Increment the factor by 1\n            factor = factor + 1\n      \
    \  end\n    end\n    return largest_prime_factor\nend", "    # your code here\n\
    end", "    for i in 2:n \n        if n % i == 0 \n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n \
    \   return n\nend", "    # TODO: Write your code here\n    return 0\nend", " \
    \   for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n\
    \ / i)\n        end\n    end\n    return n\nend", "    for i in primes(n)\n  \
    \      if n % i == 0\n            return i\n        end\n    end\nend", "    for\
    \ i in primes(n)\n        if n % i == 0\n            return i\n        end\n \
    \   end\nend", "    i = 2\n    while i <= n\n        if n % i == 0\n         \
    \   n /= i\n        else\n            i += 1\n        end\n    end\n    return\
    \ i\nend", "    for i in 2:n \n        if n % i == 0 \n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n / i)\n        end\n    end\n\
    \    return n\nend", "    for i in 2:n\n        if n % i == 0\n            return\
    \ largest_prime_factor(n/i)\n        end\n    end\n    return n\nend", "    i\
    \ = 2\n    while i <= n\n        if n % i == 0\n            n /= i\n        else\n\
    \            i += 1\n        end\n    end\n    return i\nend", "    # YOUR CODE\
    \ HERE\nend", "    # TODO: implement this function\n    return 0\nend", "    #\
    \ your code here\n    return 0\nend", "    factors = []\n    for i in 2:n\n  \
    \      if n % i == 0\n            factors = [i]\n            while n % i == 0\n\
    \                n = n / i\n            end\n        end\n    end\n    return\
    \ factors[end]\nend", "    if n == 1\n        return 1\n    end\n    if isprime(n)\n\
    \        return n\n    end\n    for i in 2:n\n        if n % i == 0\n        \
    \    return largest_prime_factor(n/i)\n        end\n    end\nend", "    for i\
    \ in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n / i)\n        end\n    end\n\
    \    return n\nend", "    for i in 2:n\n        if n % i == 0\n            return\
    \ largest_prime_factor(n/i)\n        end\n    end\n    return n\nend", "    i\
    \ = 2\n    while i <= n\n        if n % i == 0\n            n /= i\n        else\n\
    \            i += 1\n        end\n    end\n    return i\nend", "    if n == 2\n\
    \        return 2\n    end\n    for i in 2:n\n        if n % i == 0\n        \
    \    return largest_prime_factor(n / i)\n        end\n    end\nend", "    if n\
    \ == 2\n        return 2\n    end\n    for i in 2:n-1\n        if n % i == 0\n\
    \            return largest_prime_factor(n/i)\n        end\n    end\nend", " \
    \   for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    if n == 1\n        return 1\n    end\n    for i in 2:n\n\
    \        if n % i == 0\n            return max(largest_prime_factor(i), largest_prime_factor(n/i))\n\
    \        end\n    end\nend", "    # your code here\nend", "    # YOUR CODE HERE\n\
    end", "    if n == 2\n        return 2\n    end\n    for i in 2:n\n        if\
    \ n % i == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n\
    end", "    if n == 2\n        return 2\n    end\n    for i in 2:n\n        if\
    \ n % i == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n\
    end", "    i = 2\n    while i <= n\n        if n % i == 0\n            n /= i\n\
    \        else\n            i += 1\n        end\n    end\n    return i\nend", " \
    \   if n == 2\n        return 2\n    end\n    for i in 2:n-1\n        if n % i\
    \ == 0\n            return largest_prime_factor(n/i)\n        end\n    end\nend",
  "    if n <= 1\n        return 0\n    end\n    if isprime(n)\n        return n\n\
    \    end\n    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\nend", "    i = 2\n    while i <= n\n        if n % i ==\
    \ 0\n            n /= i\n        else\n            i += 1\n        end\n    end\n\
    \    return i\nend", "    # TODO: write your code here\nend", "    p = 2\n   \
    \ while p <= n\n        if n % p == 0\n            n = n / p\n        else\n \
    \           p += 1\n        end\n    end\n    return p\nend", "    # Find the\
    \ largest prime factor of n\n    # Start with the smallest prime factor\n    #\
    \ Keep dividing by the smallest prime factor until it is no longer a factor\n\
    \    # Then find the next smallest prime factor and repeat\n    # Continue until\
    \ the largest prime factor is found\n    # Return the largest prime factor\n \
    \   return 0\nend", "    for i in primes(n)\n        if n % i == 0\n         \
    \   return i\n        end\n    end\nend", "    for i = 2:n\n        if n % i ==\
    \ 0\n            return largest_prime_factor(n/i)\n        end\n    end\n    return\
    \ n\nend", "    # YOUR CODE HERE\nend", "    for i in 2:n\n        if n % i ==\
    \ 0\n            n = n / i\n        end\n    end\n    return n\nend", "    for\
    \ i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n \
    \   return n\nend", "    # your code here\nend", "    # Initialize the largest\
    \ prime factor to 1\n    largest_prime_factor = 1\n    # Get the smallest prime\
    \ factor of n\n    smallest_prime_factor = smallest_prime_factor(n)\n    # If\
    \ the smallest prime factor is n, then n is a prime\n    if smallest_prime_factor\
    \ == n\n        # Return n\n        return n\n    else\n        # Set the largest\
    \ prime factor to the smallest prime factor\n        largest_prime_factor = smallest_prime_factor\n\
    \        # Set n to n/smallest_prime_factor\n        n = n/smallest_prime_factor\n\
    \        # While n is not a prime\n        while smallest_prime_factor(n) != n\n\
    \            # Set the largest prime factor to the smallest prime factor of n\n\
    \            largest_prime_factor = smallest_prime_factor(n)\n            # Set\
    \ n to n/smallest_prime_factor\n            n = n/smallest_prime_factor\n    \
    \    end\n        # Return the largest prime factor\n        return largest_prime_factor\n\
    \    end\nend", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    p = 2\n    while p <= n\n    \
    \    if n % p == 0\n            n = n / p\n        else\n            p += 1\n\
    \        end\n    end\n    return p\nend", "    factor = 2\n    while n > 1\n\
    \        while n % factor == 0\n            n /= factor\n        end\n       \
    \ factor += 1\n    end\n    return factor - 1\nend", "    # your code here\nend",
  "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n\
    \ / i)\n        end\n    end\n    return n\nend", "    for i in primes(n)\n  \
    \      if n % i == 0\n            return i\n        end\n    end\nend", "    #\
    \ TODO: implement this function\n    return 0\nend", "    # Find the largest prime\
    \ factor of n.\n    # Assume n > 1 and is not a prime.\n    # Return the largest\
    \ prime factor of n.\n    #\n    # We use the following algorithm:\n    #\n  \
    \  # 1. Find the smallest prime factor of n.\n    # 2. Divide n by this factor.\n\
    \    # 3. Repeat until n is prime.\n    #\n    # We use the following facts:\n\
    \    #\n    # 1. The smallest prime factor of n is at most sqrt(n).\n    # 2.\
    \ If n is not prime, then it has a prime factor.\n    # 3. If n is not prime,\
    \ then it has a prime factor at most sqrt(n).\n    # 4. The smallest prime factor\
    \ of n is at most sqrt(n).\n    # 5. The smallest prime factor of n is at most\
    \ sqrt(n).\n    # 6. If n is not prime, then it has a prime factor at most sqrt(n).\n\
    \    # 7. The smallest prime factor of n is at most sqrt(n).\n    # 8. The smallest\
    \ prime factor of n is at most sqrt(n).\n    # 9. The smallest prime factor of\
    \ n is at most sqrt(n).\n    # 10. The smallest prime factor of n is at most sqrt(n).\n\
    \    # 11. The smallest prime factor of n is at most sqrt(n).\n    # 12. The smallest\
    \ prime factor of n is at most sqrt(n).\n    # 13. The smallest prime factor of\
    \ n is at most sqrt(n).\n    # 14. The smallest prime factor of n is at most sqrt(n).\n\
    \    # 15. The smallest prime factor of n is at most sqrt(n).\n    # 16. The smallest\
    \ prime factor of n is at most sqrt(n).\n    # 17. The smallest prime factor of\
    \ n is at most sqrt(n).\n    # 18. The smallest prime factor of n is at most sqrt(n).\n\
    \    # 19. The smallest prime factor of n is at most sqrt(n).\n    # 20. The smallest\
    \ prime factor of n is at most sqrt(n).\n    # 21. The smallest prime factor of\
    \ n is at most sqrt(n).\n    #", "    for i in 2:n\n        if n % i == 0\n  \
    \          return largest_prime_factor(n/i)\n        end\n    end\n    return\
    \ n\nend", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n \
    \   return n\nend", "    if n <= 1\n        return 0\n    end\n    if isprime(n)\n\
    \        return n\n    end\n    for i in 2:n\n        if n % i == 0\n        \
    \    return largest_prime_factor(n/i)\n        end\n    end\nend", "    for i\
    \ in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n \
    \   return n\nend", "    # Your code here\nend", "    for i in 2:n\n        if\
    \ n % i == 0\n            return largest_prime_factor(n / i)\n        end\n  \
    \  end\n    return n\nend", "    # YOUR CODE HERE\n    return 0\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
