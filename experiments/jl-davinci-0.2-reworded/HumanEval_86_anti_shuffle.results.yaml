name: HumanEval_86_anti_shuffle
language: jl
results:
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr6f9xp3k.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpr6f9xp3k.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpr6f9xp3k.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpr6f9xp3k.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsqfuko7_.jl:28\\n  Test threw\
    \ exception\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # Split the string into words\n\
    \    words = split(s, \" \")\n    # Sort each word\n    sorted_words = [sort(word)\
    \ for word in words]\n    # Join the words back together\n    return join(sorted_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxdbi1o4k.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpxdbi1o4k.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpxdbi1o4k.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpxdbi1o4k.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpxdbi1o4k.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpxdbi1o4k.jl:20\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return join(words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0j5zdkc3.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp0j5zdkc3.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0j5zdkc3.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0j5zdkc3.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp0j5zdkc3.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp0j5zdkc3.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0j5zdkc3.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0j5zdkc3.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = append!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp20rgigs4.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp20rgigs4.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp20rgigs4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp20rgigs4.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp20rgigs4.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp20rgigs4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp20rgigs4.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp20rgigs4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp20rgigs4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp20rgigs4.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp20rgigs4.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp20rgigs4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp20rgigs4.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp20rgigs4.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1kos_vyd.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmp1kos_vyd.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp1kos_vyd.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp1kos_vyd.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split the string into words\n\
    \    words = split(s, \" \")\n    # sort each word\n    sorted_words = [sort(word)\
    \ for word in words]\n    # join the words back together\n    return join(sorted_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjau_jbzi.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpjau_jbzi.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpjau_jbzi.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpjau_jbzi.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpjau_jbzi.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpjau_jbzi.jl:20\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return join(words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpaajkl_mw.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpaajkl_mw.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpaajkl_mw.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpaajkl_mw.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpaajkl_mw.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpaajkl_mw.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpaajkl_mw.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpaajkl_mw.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # Split the string into words\n\
    \    words = split(s)\n    # Sort each word\n    for i in 1:length(words)\n  \
    \      words[i] = sort(words[i])\n    end\n    # Join the words back into a string\n\
    \    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp20ftb0vo.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp20ftb0vo.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp20ftb0vo.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp20ftb0vo.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp20ftb0vo.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp20ftb0vo.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp20ftb0vo.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp20ftb0vo.jl:30\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp1as74xn.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpp1as74xn.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpp1as74xn.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpp1as74xn.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfa0t01qp.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpfa0t01qp.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpfa0t01qp.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpfa0t01qp.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    new_s = \"\"\n    for word in\
    \ split(s)\n        new_s *= join(sort(collect(word)))\n        new_s *= \" \"\
    \n    end\n    return new_s\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\"\
    ) == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpccg357tp.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"Hi \" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccg357tp.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccg357tp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpccg357tp.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"ehllo \" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccg357tp.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccg357tp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpccg357tp.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"bemnru \" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccg357tp.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccg357tp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpccg357tp.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"abcd \" == \"abcd\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpccg357tp.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccg357tp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpccg357tp.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello !!!Wdlor \" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpccg357tp.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = append!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplc6cw2o5.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplc6cw2o5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplc6cw2o5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplc6cw2o5.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplc6cw2o5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplc6cw2o5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplc6cw2o5.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplc6cw2o5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplc6cw2o5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplc6cw2o5.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplc6cw2o5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplc6cw2o5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplc6cw2o5.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplc6cw2o5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return\
    \ join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqqsga3f4.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpqqsga3f4.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqqsga3f4.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqqsga3f4.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpqqsga3f4.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpqqsga3f4.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqqsga3f4.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqqsga3f4.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1f9a81qm.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmp1f9a81qm.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp1f9a81qm.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp1f9a81qm.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphajkt3g2.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmphajkt3g2.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmphajkt3g2.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmphajkt3g2.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    res = \"\"\n    for word in split(s)\n\
    \        res *= join(sort(collect(word)))\n        res *= \" \"\n    end\n   \
    \ return res\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgxdtr46u.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"Hi \" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgxdtr46u.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgxdtr46u.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpgxdtr46u.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"ehllo \" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgxdtr46u.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgxdtr46u.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpgxdtr46u.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"bemnru \" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgxdtr46u.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgxdtr46u.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpgxdtr46u.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"abcd \" == \"abcd\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgxdtr46u.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgxdtr46u.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpgxdtr46u.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello !!!Wdlor \" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgxdtr46u.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpivnoqj4g.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpivnoqj4g.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpivnoqj4g.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpivnoqj4g.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = append!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp88hkz2__.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp88hkz2__.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp88hkz2__.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp88hkz2__.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp88hkz2__.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp88hkz2__.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp88hkz2__.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp88hkz2__.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp88hkz2__.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp88hkz2__.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp88hkz2__.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp88hkz2__.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp88hkz2__.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp88hkz2__.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return\
    \ join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdzjt0iqj.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpdzjt0iqj.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpdzjt0iqj.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdzjt0iqj.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpdzjt0iqj.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpdzjt0iqj.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpdzjt0iqj.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdzjt0iqj.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = append!(new_words,\
    \ sort(word))\n    end\n    return join(new_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\"\
    )\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") ==\
    \ \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjnicatb9.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpjnicatb9.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjnicatb9.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjnicatb9.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpjnicatb9.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpjnicatb9.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjnicatb9.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjnicatb9.jl:28\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # Split the string into words\n\
    \    words = split(s, \" \")\n    # Sort the characters in each word\n    for\
    \ i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n    # Join\
    \ the words back together\n    return join(words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\"\
    )\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") ==\
    \ \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe5o8ghg6.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpe5o8ghg6.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe5o8ghg6.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe5o8ghg6.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpe5o8ghg6.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpe5o8ghg6.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe5o8ghg6.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe5o8ghg6.jl:30\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy_gf917b.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpy_gf917b.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpy_gf917b.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpy_gf917b.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # Split the string into words\n\
    \    words = split(s, \" \")\n    # Sort each word\n    for i in 1:length(words)\n\
    \        words[i] = sort(words[i])\n    end\n    # Join the words back together\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_9m1q8ka.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp_9m1q8ka.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_9m1q8ka.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_9m1q8ka.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp_9m1q8ka.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp_9m1q8ka.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_9m1q8ka.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_9m1q8ka.jl:30\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi6zp0v0s.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpi6zp0v0s.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpi6zp0v0s.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpi6zp0v0s.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpi6zp0v0s.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s = split(s, \" \")\n    for\
    \ i in 1:length(s)\n        s[i] = join(sort(collect(s[i])), \"\")\n    end\n\
    \    return join(s, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split the string into words\n\
    \    words = split(s, \" \")\n    # sort the characters in each word\n    sorted_words\
    \ = [sort(word) for word in words]\n    # join the words back together\n    return\
    \ join(sorted_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\"\
    ) == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnws1xegl.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpnws1xegl.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpnws1xegl.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpnws1xegl.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpnws1xegl.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpnws1xegl.jl:20\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmploo1dfw2.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmploo1dfw2.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmploo1dfw2.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmploo1dfw2.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmu24heoe.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpmu24heoe.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpmu24heoe.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpmu24heoe.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplaipr29n.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmplaipr29n.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmplaipr29n.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmplaipr29n.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split string into words\n \
    \   words = split(s, \" \")\n    # sort each word\n    sorted_words = [sort(word)\
    \ for word in words]\n    # join words back together\n    return join(sorted_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6u5m3e_7.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp6u5m3e_7.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp6u5m3e_7.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp6u5m3e_7.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp6u5m3e_7.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp6u5m3e_7.jl:20\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq_r9mbps.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpq_r9mbps.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpq_r9mbps.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpq_r9mbps.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return join(words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpiimqu0l2.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpiimqu0l2.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpiimqu0l2.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpiimqu0l2.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpiimqu0l2.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpiimqu0l2.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpiimqu0l2.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpiimqu0l2.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # Split the string into words\n\
    \    words = split(s, \" \")\n    # Sort each word\n    for i in 1:length(words)\n\
    \        words[i] = sort(words[i])\n    end\n    # Join the words back together\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcbpamoy1.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpcbpamoy1.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcbpamoy1.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcbpamoy1.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpcbpamoy1.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpcbpamoy1.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcbpamoy1.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcbpamoy1.jl:30\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    return join(sort(split(s)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7cseacc8.jl:25\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7cseacc8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7cseacc8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7cseacc8.jl:26\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7cseacc8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7cseacc8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7cseacc8.jl:28\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"HelloWorld!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7cseacc8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7cseacc8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7cseacc8.jl:30\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi.HowMisterMyRobot.areisnameyou?\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7cseacc8.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7cseacc8.jl:23\nTest Summary:\
    \ | P"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7cseacc8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj90vcyoy.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpj90vcyoy.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpj90vcyoy.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpj90vcyoy.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s = split(s, \" \")\n    for\
    \ i in 1:length(s)\n        s[i] = sort(s[i])\n    end\n    return join(s, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprdlxiq91.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmprdlxiq91.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprdlxiq91.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprdlxiq91.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmprdlxiq91.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmprdlxiq91.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprdlxiq91.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprdlxiq91.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_arr = split(s)\n    for i in\
    \ 1:length(s_arr)\n        s_arr[i] = sort(s_arr[i])\n    end\n    return join(s_arr)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp16f21_w3.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp16f21_w3.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp16f21_w3.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp16f21_w3.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp16f21_w3.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp16f21_w3.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp16f21_w3.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp16f21_w3.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return join(words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp70gvxyn5.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp70gvxyn5.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp70gvxyn5.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp70gvxyn5.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp70gvxyn5.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp70gvxyn5.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp70gvxyn5.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp70gvxyn5.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_split = split(s, \" \")\n \
    \   s_split_sorted = []\n    for word in s_split\n        push!(s_split_sorted,\
    \ sort(collect(word)))\n    end\n    return join(s_split_sorted, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdl18hs8v.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"['H', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdl18hs8v.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdl18hs8v.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdl18hs8v.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"['e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdl18hs8v.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdl18hs8v.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdl18hs8v.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"['b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdl18hs8v.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdl18hs8v.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdl18hs8v.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"['a', 'b', 'c', 'd']\" == \"abcd\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdl18hs8v.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdl18hs8v.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdl18hs8v.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"['H', 'e', "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdl18hs8v.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split the string into words\n\
    \    words = split(s, \" \")\n    # sort the characters in each word\n    words\
    \ = [sort(word) for word in words]\n    # join the words back together\n    return\
    \ join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbv2iydtr.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpbv2iydtr.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpbv2iydtr.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpbv2iydtr.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpbv2iydtr.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpbv2iydtr.jl:20\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = append!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6x9bs225.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6x9bs225.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6x9bs225.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6x9bs225.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6x9bs225.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6x9bs225.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6x9bs225.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6x9bs225.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6x9bs225.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6x9bs225.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6x9bs225.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6x9bs225.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6x9bs225.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6x9bs225.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, r\"\\s+\")\n\
    \    return join(map(sort, words), \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpd9ci1trk.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:744 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:653 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2867\
    \ [inlined]\\n   [5] anti_shuffle(s::String)\\n     @ Main /tmp/tmpd9ci1trk.jl:18\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpd9ci1trk.jl:25 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpd9ci1trk.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpd9ci1trk.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:744 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:653 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2867\
    \ [inlined"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp49zatehh.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmp49zatehh.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp49zatehh.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp49zatehh.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxrg9009i.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpxrg9009i.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpxrg9009i.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpxrg9009i.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjz6vs5os.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpjz6vs5os.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpjz6vs5os.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpjz6vs5os.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return\
    \ join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpz6304lvn.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpz6304lvn.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpz6304lvn.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpz6304lvn.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpz6304lvn.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpz6304lvn.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpz6304lvn.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpz6304lvn.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split the string into words\n\
    \    words = split(s)\n    # sort each word\n    for i in 1:length(words)\n  \
    \      words[i] = sort(words[i])\n    end\n    # join the words back together\n\
    \    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpad1cwjhx.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpad1cwjhx.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpad1cwjhx.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpad1cwjhx.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpad1cwjhx.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpad1cwjhx.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpad1cwjhx.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpad1cwjhx.jl:30\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw_04ayk4.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpw_04ayk4.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpw_04ayk4.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpw_04ayk4.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    return join(sort(split(s, \"\
    \ \")), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2bip2zlf.jl:25\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2bip2zlf.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2bip2zlf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2bip2zlf.jl:26\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2bip2zlf.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2bip2zlf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2bip2zlf.jl:28\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2bip2zlf.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2bip2zlf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2bip2zlf.jl:30\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. How Mister My Robot. are is name you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2bip2zlf.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2bip2zlf.jl:23\nTest Sum"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2bip2zlf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp508u2rro.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmp508u2rro.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp508u2rro.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp508u2rro.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split the string into words\n\
    \    words = split(s)\n    # sort the characters in each word\n    sorted_words\
    \ = [sort(word) for word in words]\n    # join the words back together\n    return\
    \ join(sorted_words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp78lxft0o.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp78lxft0o.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp78lxft0o.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp78lxft0o.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp78lxft0o.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp78lxft0o.jl:20\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # Split the string into words\n\
    \    words = split(s)\n    # Sort the characters in each word\n    sorted_words\
    \ = [sort(word) for word in words]\n    # Join the words back together\n    return\
    \ join(sorted_words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_rz2vo27.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp_rz2vo27.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp_rz2vo27.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp_rz2vo27.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp_rz2vo27.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp_rz2vo27.jl:20\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1y64aoxo.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmp1y64aoxo.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp1y64aoxo.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp1y64aoxo.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy9ig95l9.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpy9ig95l9.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpy9ig95l9.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpy9ig95l9.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnmrnsiu7.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpnmrnsiu7.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpnmrnsiu7.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpnmrnsiu7.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split string into words\n \
    \   words = split(s)\n    # sort each word\n    for i in 1:length(words)\n   \
    \     words[i] = sort(words[i])\n    end\n    # join words back into string\n\
    \    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprwe0gmk4.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmprwe0gmk4.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprwe0gmk4.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprwe0gmk4.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmprwe0gmk4.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmprwe0gmk4.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprwe0gmk4.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprwe0gmk4.jl:30\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppcns1c4d.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmppcns1c4d.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmppcns1c4d.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmppcns1c4d.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split string into words\n \
    \   words = split(s, \" \")\n    # sort each word\n    for i in 1:length(words)\n\
    \        words[i] = sort(words[i])\n    end\n    # join words back into a string\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2ptjgmgu.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp2ptjgmgu.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2ptjgmgu.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2ptjgmgu.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp2ptjgmgu.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp2ptjgmgu.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2ptjgmgu.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2ptjgmgu.jl:30\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = append!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmlaqf3s5.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmlaqf3s5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlaqf3s5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmlaqf3s5.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmlaqf3s5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlaqf3s5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmlaqf3s5.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmlaqf3s5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlaqf3s5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmlaqf3s5.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmlaqf3s5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlaqf3s5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmlaqf3s5.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmlaqf3s5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = push!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1tkh2q7s.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"['H', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1tkh2q7s.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1tkh2q7s.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp1tkh2q7s.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"['e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1tkh2q7s.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1tkh2q7s.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp1tkh2q7s.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"['b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1tkh2q7s.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1tkh2q7s.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp1tkh2q7s.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"['a', 'b', 'c', 'd']\" == \"abcd\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1tkh2q7s.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1tkh2q7s.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp1tkh2q7s.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"['H', 'e', "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1tkh2q7s.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split the string into words\n\
    \    words = split(s)\n    # sort each word\n    for i in 1:length(words)\n  \
    \      words[i] = sort(words[i])\n    end\n    # join the words back into a string\n\
    \    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp14e3irsy.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp14e3irsy.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp14e3irsy.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp14e3irsy.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp14e3irsy.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp14e3irsy.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp14e3irsy.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp14e3irsy.jl:30\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split the string into words\n\
    \    words = split(s, \" \")\n    # sort each word\n    sorted_words = [sort(word)\
    \ for word in words]\n    # join the sorted words into a string\n    return join(sorted_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt9ky70yl.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpt9ky70yl.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpt9ky70yl.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpt9ky70yl.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpt9ky70yl.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpt9ky70yl.jl:20\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwqhb9orh.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpwqhb9orh.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpwqhb9orh.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpwqhb9orh.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_list = split(s)\n    for i\
    \ in 1:length(s_list)\n        s_list[i] = sort(s_list[i])\n    end\n    return\
    \ join(s_list)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx4dn0px2.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpx4dn0px2.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpx4dn0px2.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpx4dn0px2.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpx4dn0px2.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpx4dn0px2.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpx4dn0px2.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpx4dn0px2.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split string into words\n \
    \   words = split(s, \" \")\n    # sort each word\n    for i in 1:length(words)\n\
    \        words[i] = sort(words[i])\n    end\n    # join words back into a string\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxv96h2te.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpxv96h2te.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpxv96h2te.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxv96h2te.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpxv96h2te.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpxv96h2te.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpxv96h2te.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxv96h2te.jl:30\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_split = split(s)\n    for i\
    \ in 1:length(s_split)\n        s_split[i] = sort(s_split[i])\n    end\n    return\
    \ join(s_split)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw2kk5huj.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpw2kk5huj.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpw2kk5huj.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpw2kk5huj.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpw2kk5huj.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpw2kk5huj.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpw2kk5huj.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpw2kk5huj.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbkwx2w3r.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpbkwx2w3r.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpbkwx2w3r.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpbkwx2w3r.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqrtpcjz0.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpqrtpcjz0.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpqrtpcjz0.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpqrtpcjz0.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = append!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpclnskobo.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpclnskobo.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpclnskobo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpclnskobo.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpclnskobo.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpclnskobo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpclnskobo.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpclnskobo.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpclnskobo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpclnskobo.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpclnskobo.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpclnskobo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpclnskobo.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpclnskobo.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, r\"\\s+\")\n\
    \    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n  \
    \  end\n    join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpweigholx.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpweigholx.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpweigholx.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpweigholx.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkukd69o1.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpkukd69o1.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpkukd69o1.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpkukd69o1.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp99sotbg2.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmp99sotbg2.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp99sotbg2.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp99sotbg2.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    return join(sort(split(s)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph_dl4fcx.jl:25\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_dl4fcx.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_dl4fcx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph_dl4fcx.jl:26\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_dl4fcx.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_dl4fcx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph_dl4fcx.jl:28\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"HelloWorld!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_dl4fcx.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_dl4fcx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph_dl4fcx.jl:30\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi.HowMisterMyRobot.areisnameyou?\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_dl4fcx.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_dl4fcx.jl:23\nTest Summary:\
    \ | P"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph_dl4fcx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # Split string into words\n \
    \   words = split(s, \" \")\n    # Sort each word\n    for i in 1:length(words)\n\
    \        words[i] = sort(words[i])\n    end\n    # Join words back together\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwx0zre3l.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpwx0zre3l.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwx0zre3l.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwx0zre3l.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpwx0zre3l.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpwx0zre3l.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwx0zre3l.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwx0zre3l.jl:30\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split the string into words\n\
    \    words = split(s, \" \")\n    # sort each word\n    for i in 1:length(words)\n\
    \        words[i] = sort(words[i])\n    end\n    # join the words back into a\
    \ string\n    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq2u0reya.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpq2u0reya.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpq2u0reya.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpq2u0reya.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpq2u0reya.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpq2u0reya.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpq2u0reya.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpq2u0reya.jl:30\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return\
    \ join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpc7wdl1pu.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpc7wdl1pu.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpc7wdl1pu.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpc7wdl1pu.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpc7wdl1pu.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpc7wdl1pu.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpc7wdl1pu.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpc7wdl1pu.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return join(words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk24qvx1z.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpk24qvx1z.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpk24qvx1z.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpk24qvx1z.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpk24qvx1z.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpk24qvx1z.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpk24qvx1z.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpk24qvx1z.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5atabgip.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmp5atabgip.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp5atabgip.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp5atabgip.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split string into words\n \
    \   words = split(s, \" \")\n    # sort each word\n    words = [sort(word) for\
    \ word in words]\n    # join words back together\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbcoq7tji.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpbcoq7tji.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpbcoq7tji.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpbcoq7tji.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpbcoq7tji.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpbcoq7tji.jl:20\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwqjrcq1u.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpwqjrcq1u.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpwqjrcq1u.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpwqjrcq1u.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = append!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppkd98ya8.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppkd98ya8.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppkd98ya8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppkd98ya8.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppkd98ya8.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppkd98ya8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppkd98ya8.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppkd98ya8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppkd98ya8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppkd98ya8.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppkd98ya8.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppkd98ya8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppkd98ya8.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppkd98ya8.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpoli5zptq.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = append!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppjm73_av.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppjm73_av.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppjm73_av.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppjm73_av.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppjm73_av.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppjm73_av.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppjm73_av.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppjm73_av.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppjm73_av.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppjm73_av.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppjm73_av.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppjm73_av.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppjm73_av.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppjm73_av.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5d8bz7k6.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmp5d8bz7k6.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp5d8bz7k6.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp5d8bz7k6.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_split = split(s, \" \")\n \
    \   s_split_sorted = [sort(x) for x in s_split]\n    return join(s_split_sorted,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvcyg0a87.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(x::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpvcyg0a87.jl:18\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpvcyg0a87.jl:26 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpvcyg0a87.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpvcyg0a87.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(x::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpvcyg0a87.jl:18\\n   [5] macro expansio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # Split the string into words\n\
    \    words = split(s)\n    # Create a new string\n    new_string = \"\"\n    #\
    \ Loop through each word\n    for word in words\n        # Sort the characters\
    \ in the word\n        sorted_word = sort(collect(word))\n        # Add the sorted\
    \ word to the new string\n        new_string = new_string * join(sorted_word)\n\
    \        # Add a space to the new string\n        new_string = new_string * \"\
    \ \"\n    end\n    # Remove the last space\n    new_string = new_string[1:end-1]\n\
    \    # Return the new string\n    return new_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpla_irawd.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpla_irawd.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpla_irawd.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpla_irawd.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_split = split(s, \" \")\n \
    \   s_split_sorted = [sort(x) for x in s_split]\n    return join(s_split_sorted,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpclbruj4y.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(x::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpclbruj4y.jl:18\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpclbruj4y.jl:26 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpclbruj4y.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpclbruj4y.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(x::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpclbruj4y.jl:18\\n   [5] macro expansio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    return join(sort(split(s)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9drezj7r.jl:25\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9drezj7r.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9drezj7r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9drezj7r.jl:26\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9drezj7r.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9drezj7r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9drezj7r.jl:28\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"HelloWorld!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9drezj7r.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9drezj7r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9drezj7r.jl:30\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi.HowMisterMyRobot.areisnameyou?\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9drezj7r.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9drezj7r.jl:23\nTest Summary:\
    \ | P"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9drezj7r.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_split = split(s, \" \")\n \
    \   for i in 1:length(s_split)\n        s_split[i] = sort(s_split[i])\n    end\n\
    \    return join(s_split, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprt7max86.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmprt7max86.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprt7max86.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprt7max86.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmprt7max86.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmprt7max86.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprt7max86.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprt7max86.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_split = split(s)\n    for i\
    \ in 1:length(s_split)\n        s_split[i] = sort(s_split[i])\n    end\n    return\
    \ join(s_split)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp12p8_bdt.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp12p8_bdt.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp12p8_bdt.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp12p8_bdt.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp12p8_bdt.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp12p8_bdt.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp12p8_bdt.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp12p8_bdt.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = push!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6uaf5i4e.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"['H', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6uaf5i4e.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6uaf5i4e.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6uaf5i4e.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"['e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6uaf5i4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6uaf5i4e.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6uaf5i4e.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"['b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6uaf5i4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6uaf5i4e.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6uaf5i4e.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"['a', 'b', 'c', 'd']\" == \"abcd\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6uaf5i4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6uaf5i4e.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6uaf5i4e.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"['H', 'e', "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6uaf5i4e.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    return join(sort(split(s, \"\
    \ \")), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmputwhx5xi.jl:25\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputwhx5xi.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputwhx5xi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmputwhx5xi.jl:26\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputwhx5xi.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputwhx5xi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmputwhx5xi.jl:28\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputwhx5xi.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputwhx5xi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmputwhx5xi.jl:30\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. How Mister My Robot. are is name you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputwhx5xi.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputwhx5xi.jl:23\nTest Sum"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmputwhx5xi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s = split(s)\n    for i in 1:length(s)\n\
    \        s[i] = sort(s[i])\n    end\n    return join(s)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwtc86xdc.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpwtc86xdc.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwtc86xdc.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwtc86xdc.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpwtc86xdc.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpwtc86xdc.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwtc86xdc.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwtc86xdc.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = push!(new_words,\
    \ sort(word))\n    end\n    return join(new_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\"\
    )\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") ==\
    \ \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp62t7zep2.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp62t7zep2.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp62t7zep2.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp62t7zep2.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp62t7zep2.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp62t7zep2.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp62t7zep2.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp62t7zep2.jl:28\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = append!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuitnrmz2.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuitnrmz2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuitnrmz2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuitnrmz2.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuitnrmz2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuitnrmz2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuitnrmz2.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuitnrmz2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuitnrmz2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuitnrmz2.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuitnrmz2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuitnrmz2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuitnrmz2.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuitnrmz2.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5io6mypf.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmp5io6mypf.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp5io6mypf.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp5io6mypf.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp5io6mypf.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_split = split(s, \" \")\n \
    \   s_split_sorted = [sort(x) for x in s_split]\n    return join(s_split_sorted,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4qng7h9a.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(x::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp4qng7h9a.jl:18\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp4qng7h9a.jl:26 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp4qng7h9a.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp4qng7h9a.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(x::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp4qng7h9a.jl:18\\n   [5] macro expansio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    return join(sort(split(s)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn0bjqn46.jl:25\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0bjqn46.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0bjqn46.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpn0bjqn46.jl:26\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0bjqn46.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0bjqn46.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpn0bjqn46.jl:28\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"HelloWorld!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0bjqn46.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0bjqn46.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpn0bjqn46.jl:30\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi.HowMisterMyRobot.areisnameyou?\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0bjqn46.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0bjqn46.jl:23\nTest Summary:\
    \ | P"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn0bjqn46.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = append!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3c37e9ff.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3c37e9ff.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3c37e9ff.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3c37e9ff.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3c37e9ff.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3c37e9ff.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3c37e9ff.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3c37e9ff.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3c37e9ff.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3c37e9ff.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3c37e9ff.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3c37e9ff.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3c37e9ff.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3c37e9ff.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_split = split(s, \" \")\n \
    \   s_split_sorted = []\n    for i in s_split\n        push!(s_split_sorted, sort(i))\n\
    \    end\n    return join(s_split_sorted, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5a9zlwb4.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp5a9zlwb4.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5a9zlwb4.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5a9zlwb4.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp5a9zlwb4.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp5a9zlwb4.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5a9zlwb4.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5a9zlwb4.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split the string into words\n\
    \    words = split(s, \" \")\n    # sort each word\n    sorted_words = [sort(word)\
    \ for word in words]\n    # join the words back into a string\n    return join(sorted_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp349t3ogr.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp349t3ogr.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp349t3ogr.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp349t3ogr.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp349t3ogr.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp349t3ogr.jl:20\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # Split the string into words\n\
    \    words = split(s, \" \")\n    # Sort each word\n    sorted_words = [sort(word)\
    \ for word in words]\n    # Join the words back together\n    return join(sorted_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp64ze03ve.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp64ze03ve.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp64ze03ve.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp64ze03ve.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp64ze03ve.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp64ze03ve.jl:20\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # Split the string into words\n\
    \    words = split(s)\n    # Sort each word\n    sorted_words = [sort(word) for\
    \ word in words]\n    # Join the words\n    return join(sorted_words)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_drj0jbk.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp_drj0jbk.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp_drj0jbk.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp_drj0jbk.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp_drj0jbk.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp_drj0jbk.jl:20\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return join(words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyzr_8bjh.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpyzr_8bjh.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyzr_8bjh.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyzr_8bjh.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpyzr_8bjh.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpyzr_8bjh.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyzr_8bjh.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyzr_8bjh.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxqjxf15t.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpxqjxf15t.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpxqjxf15t.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpxqjxf15t.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmps19yr2mg.jl:28\\n  Test threw\
    \ exception\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # Split the string into words\n\
    \    words = split(s, \" \")\n    # Sort the characters in each word\n    sorted_words\
    \ = [sort(word) for word in words]\n    # Join the words back together\n    return\
    \ join(sorted_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\"\
    ) == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4jl96pi4.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp4jl96pi4.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp4jl96pi4.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp4jl96pi4.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp4jl96pi4.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp4jl96pi4.jl:20\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split the string into words\n\
    \    words = split(s)\n    # sort each word\n    for i in 1:length(words)\n  \
    \      words[i] = sort(words[i])\n    end\n    # join the words back into a string\n\
    \    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2o1b1qsy.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp2o1b1qsy.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2o1b1qsy.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2o1b1qsy.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp2o1b1qsy.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp2o1b1qsy.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2o1b1qsy.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2o1b1qsy.jl:30\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return join(words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy21lax4l.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpy21lax4l.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy21lax4l.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy21lax4l.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpy21lax4l.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpy21lax4l.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy21lax4l.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy21lax4l.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = push!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdmnb4l36.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"['H', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmnb4l36.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmnb4l36.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdmnb4l36.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"['e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmnb4l36.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmnb4l36.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdmnb4l36.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"['b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmnb4l36.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmnb4l36.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdmnb4l36.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"['a', 'b', 'c', 'd']\" == \"abcd\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmnb4l36.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmnb4l36.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdmnb4l36.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"['H', 'e', "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdmnb4l36.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp47qyg6et.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmp47qyg6et.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp47qyg6et.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp47qyg6et.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    return join(map(sort, split(s,\
    \ \" \")), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp468_zvcb.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:744 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:653 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2867\
    \ [inlined]\\n   [5] anti_shuffle(s::String)\\n     @ Main /tmp/tmp468_zvcb.jl:17\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp468_zvcb.jl:24 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp468_zvcb.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp468_zvcb.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:744 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:653 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2867\
    \ [inlined"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # Split the string into words\n\
    \    words = split(s, \" \")\n    # Create a new array of strings\n    new_words\
    \ = []\n    # For each word in the words array\n    for word in words\n      \
    \  # Sort the characters in the word\n        sorted_word = sort(word)\n     \
    \   # Join the sorted characters\n        sorted_word = join(sorted_word)\n  \
    \      # Append the sorted word to the new_words array\n        push!(new_words,\
    \ sorted_word)\n    end\n    # Join the new_words array\n    new_words = join(new_words,\
    \ \" \")\n    # Return the new_words array\n    return new_words\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw1o8e2qm.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpw1o8e2qm.jl:24\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpw1o8e2qm.jl:40 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpw1o8e2qm.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpw1o8e2qm.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpw1o8e2qm.jl:24\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpw1o8e2qm.jl:41 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpw1o8e2qm.jl:39\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s = split(s)\n    for i in 1:length(s)\n\
    \        s[i] = sort(s[i])\n    end\n    return join(s)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0gud5icj.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp0gud5icj.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0gud5icj.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0gud5icj.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp0gud5icj.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp0gud5icj.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0gud5icj.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0gud5icj.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = push!(new_words,\
    \ sort(word))\n    end\n    return join(new_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\"\
    )\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") ==\
    \ \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfdstzfw_.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpfdstzfw_.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpfdstzfw_.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfdstzfw_.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpfdstzfw_.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpfdstzfw_.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpfdstzfw_.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfdstzfw_.jl:28\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split string into words\n \
    \   words = split(s, \" \")\n    # sort each word\n    words = [sort(word) for\
    \ word in words]\n    # join words back together\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppa8c_44e.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmppa8c_44e.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmppa8c_44e.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmppa8c_44e.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmppa8c_44e.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmppa8c_44e.jl:20\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return\
    \ join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzgui0v7h.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpzgui0v7h.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpzgui0v7h.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzgui0v7h.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpzgui0v7h.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpzgui0v7h.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpzgui0v7h.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzgui0v7h.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_split = split(s, \" \")\n \
    \   s_split_sorted = []\n    for i in s_split\n        push!(s_split_sorted, sort(i))\n\
    \    end\n    return join(s_split_sorted, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyl_kl40a.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpyl_kl40a.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyl_kl40a.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyl_kl40a.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpyl_kl40a.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpyl_kl40a.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyl_kl40a.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyl_kl40a.jl:28\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    new_words\
    \ = []\n    for word in words\n        new_words = append!(new_words, sort(collect(word)))\n\
    \    end\n    return join(new_words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb03exugg.jl:33\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb03exugg.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb03exugg.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpb03exugg.jl:35\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb03exugg.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb03exugg.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb03exugg.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr9s1f3uq.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpr9s1f3uq.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpr9s1f3uq.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpr9s1f3uq.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    new_words\
    \ = []\n    for word in words\n        new_words = append!(new_words, sort(collect(word)))\n\
    \    end\n    return join(new_words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpovvaoto_.jl:33\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovvaoto_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovvaoto_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpovvaoto_.jl:35\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovvaoto_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovvaoto_.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpovvaoto_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return\
    \ join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpopsd03y6.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpopsd03y6.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpopsd03y6.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpopsd03y6.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpopsd03y6.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpopsd03y6.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpopsd03y6.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpopsd03y6.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split the string into words\n\
    \    words = split(s, \" \")\n    # sort each word\n    sorted_words = map(sort,\
    \ words)\n    # join the words back together\n    return join(sorted_words, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprq77npis.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:744 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:653 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2867\
    \ [inlined]\\n   [5] anti_shuffle(s::String)\\n     @ Main /tmp/tmprq77npis.jl:20\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmprq77npis.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmprq77npis.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmprq77npis.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:744 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:653 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2867\
    \ [inlined"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpygu7mf18.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpygu7mf18.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpygu7mf18.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpygu7mf18.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn2xurfmj.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpn2xurfmj.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpn2xurfmj.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpn2xurfmj.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = append!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5saiq625.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5saiq625.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5saiq625.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5saiq625.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5saiq625.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5saiq625.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5saiq625.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5saiq625.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5saiq625.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5saiq625.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5saiq625.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5saiq625.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5saiq625.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5saiq625.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_split = split(s)\n    s_split_sorted\
    \ = []\n    for i in s_split\n        push!(s_split_sorted, sort(i))\n    end\n\
    \    return join(s_split_sorted)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpl13fto57.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpl13fto57.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpl13fto57.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpl13fto57.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpl13fto57.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpl13fto57.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpl13fto57.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpl13fto57.jl:28\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp19yu3lln.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmp19yu3lln.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp19yu3lln.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp19yu3lln.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    new_words\
    \ = []\n    for word in words\n        push!(new_words, sort(collect(word)))\n\
    \    end\n    return join(new_words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk0l4abaa.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"['H', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk0l4abaa.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk0l4abaa.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpk0l4abaa.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"['e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk0l4abaa.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk0l4abaa.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpk0l4abaa.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"['b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk0l4abaa.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk0l4abaa.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpk0l4abaa.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"['a', 'b', 'c', 'd']\" == \"abcd\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk0l4abaa.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk0l4abaa.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpk0l4abaa.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"['H', 'e', "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk0l4abaa.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdns0_uqa.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpdns0_uqa.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpdns0_uqa.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpdns0_uqa.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_list = split(s, \" \")\n  \
    \  for i in 1:length(s_list)\n        s_list[i] = sort(s_list[i])\n    end\n \
    \   return join(s_list, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6sx2pju5.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp6sx2pju5.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp6sx2pju5.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6sx2pju5.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp6sx2pju5.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp6sx2pju5.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp6sx2pju5.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6sx2pju5.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return join(words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7eo3dk3w.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp7eo3dk3w.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp7eo3dk3w.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7eo3dk3w.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp7eo3dk3w.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp7eo3dk3w.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp7eo3dk3w.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7eo3dk3w.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # Split the string into words\n\
    \    words = split(s, \" \")\n    # For each word, sort the characters\n    for\
    \ i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    # Join the words back into a string\n    return join(words, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpiiymau8x.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpiiymau8x.jl:21\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpiiymau8x.jl:31 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpiiymau8x.jl:30\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9go0hm7m.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmp9go0hm7m.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp9go0hm7m.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp9go0hm7m.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split the string into words\n\
    \    words = split(s, \" \")\n    # sort the characters of each word\n    sorted_words\
    \ = [sort(w) for w in words]\n    # join the words back together\n    return join(sorted_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkgkd1nvx.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(w::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpkgkd1nvx.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpkgkd1nvx.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpkgkd1nvx.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpkgkd1nvx.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(w::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpkgkd1nvx.jl:20\\n   [5] macro expansio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = append!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4of91k25.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4of91k25.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4of91k25.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4of91k25.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4of91k25.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4of91k25.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4of91k25.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4of91k25.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4of91k25.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4of91k25.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4of91k25.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4of91k25.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4of91k25.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4of91k25.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_list = split(s)\n    for i\
    \ in 1:length(s_list)\n        s_list[i] = sort(s_list[i])\n    end\n    return\
    \ join(s_list)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuo5_msqt.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpuo5_msqt.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpuo5_msqt.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuo5_msqt.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpuo5_msqt.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpuo5_msqt.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpuo5_msqt.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuo5_msqt.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = append!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplrwcfrsf.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrwcfrsf.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrwcfrsf.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplrwcfrsf.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrwcfrsf.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrwcfrsf.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplrwcfrsf.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrwcfrsf.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrwcfrsf.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplrwcfrsf.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrwcfrsf.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrwcfrsf.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplrwcfrsf.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplrwcfrsf.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = append!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_p5u4huv.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_p5u4huv.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_p5u4huv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_p5u4huv.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_p5u4huv.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_p5u4huv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_p5u4huv.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_p5u4huv.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_p5u4huv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_p5u4huv.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_p5u4huv.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_p5u4huv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_p5u4huv.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_p5u4huv.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return join(words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptychasgz.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmptychasgz.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmptychasgz.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptychasgz.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmptychasgz.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmptychasgz.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmptychasgz.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptychasgz.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # Split the string into words\n\
    \    words = split(s, \" \")\n    # For each word, sort the characters\n    for\
    \ i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    # Join the words back into a string\n    return join(words, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2pdyq95i.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return join(words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwjvl65gt.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpwjvl65gt.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwjvl65gt.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwjvl65gt.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpwjvl65gt.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpwjvl65gt.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwjvl65gt.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwjvl65gt.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpa529sank.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    return join(sort(split(s)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw8toisk3.jl:25\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw8toisk3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw8toisk3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw8toisk3.jl:26\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw8toisk3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw8toisk3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw8toisk3.jl:28\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"HelloWorld!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw8toisk3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw8toisk3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw8toisk3.jl:30\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi.HowMisterMyRobot.areisnameyou?\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw8toisk3.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw8toisk3.jl:23\nTest Summary:\
    \ | P"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw8toisk3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s = split(s)\n    for i in 1:length(s)\n\
    \        s[i] = sort(s[i])\n    end\n    return join(s)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpao0gtw2t.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpao0gtw2t.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpao0gtw2t.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpao0gtw2t.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpao0gtw2t.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpao0gtw2t.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpao0gtw2t.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpao0gtw2t.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ new_words = []\n    for word in words\n        new_words = append!(new_words,\
    \ sort(collect(word)))\n    end\n    return join(new_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpulr5qxo7.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpulr5qxo7.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpulr5qxo7.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpulr5qxo7.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpulr5qxo7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpulr5qxo7.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpulr5qxo7.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpulr5qxo7.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpulr5qxo7.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpulr5qxo7.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpulr5qxo7.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpulr5qxo7.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpulr5qxo7.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpulr5qxo7.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_list = split(s)\n    for i\
    \ in 1:length(s_list)\n        s_list[i] = sort(s_list[i])\n    end\n    return\
    \ join(s_list)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpc2j2aqh0.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpc2j2aqh0.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpc2j2aqh0.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpc2j2aqh0.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpc2j2aqh0.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpc2j2aqh0.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpc2j2aqh0.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpc2j2aqh0.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnaxwuk7_.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpnaxwuk7_.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpnaxwuk7_.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpnaxwuk7_.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1127qozh.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmp1127qozh.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp1127qozh.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp1127qozh.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuf4fu0pi.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpuf4fu0pi.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpuf4fu0pi.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpuf4fu0pi.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, r\"\\s+\")\n\
    \    new_words = [sort(word) for word in words]\n    return join(new_words, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp71aaq7bq.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp71aaq7bq.jl:18\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp71aaq7bq.jl:26 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp71aaq7bq.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp71aaq7bq.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp71aaq7bq.jl:18\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    return join(sort(split(s)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3xm9om5z.jl:25\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xm9om5z.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xm9om5z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3xm9om5z.jl:26\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xm9om5z.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xm9om5z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3xm9om5z.jl:28\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"HelloWorld!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xm9om5z.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xm9om5z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3xm9om5z.jl:30\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi.HowMisterMyRobot.areisnameyou?\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xm9om5z.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xm9om5z.jl:23\nTest Summary:\
    \ | P"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3xm9om5z.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpably4egq.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s = split(s, \" \")\n    for\
    \ i in 1:length(s)\n        s[i] = sort(s[i])\n    end\n    return join(s, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8glz_jv0.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp8glz_jv0.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp8glz_jv0.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp8glz_jv0.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp8glz_jv0.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp8glz_jv0.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp8glz_jv0.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp8glz_jv0.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    return join(sort(split(s, \"\
    \ \")), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0h0bxfr7.jl:25\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0h0bxfr7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0h0bxfr7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0h0bxfr7.jl:26\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0h0bxfr7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0h0bxfr7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0h0bxfr7.jl:28\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0h0bxfr7.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0h0bxfr7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0h0bxfr7.jl:30\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. How Mister My Robot. are is name you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0h0bxfr7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0h0bxfr7.jl:23\nTest Sum"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0h0bxfr7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_new = \"\"\n    for word in\
    \ split(s)\n        s_new *= join(sort(collect(word)))\n        s_new *= \" \"\
    \n    end\n    return s_new\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\"\
    ) == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr0wyip1q.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"Hi \" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0wyip1q.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0wyip1q.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpr0wyip1q.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"ehllo \" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0wyip1q.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0wyip1q.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpr0wyip1q.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"bemnru \" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0wyip1q.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0wyip1q.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpr0wyip1q.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"abcd \" == \"abcd\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr0wyip1q.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0wyip1q.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpr0wyip1q.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello !!!Wdlor \" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr0wyip1q.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split the string into words\n\
    \    words = split(s, \" \")\n    # sort each word\n    sorted_words = [sort(word)\
    \ for word in words]\n    # join the words back together\n    return join(sorted_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpndqh864s.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpndqh864s.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpndqh864s.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpndqh864s.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpndqh864s.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpndqh864s.jl:20\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzx20zwlk.jl:28\\n  Test threw\
    \ exception\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprpakllck.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split string into words\n \
    \   words = split(s, \" \")\n    # sort each word\n    for i in 1:length(words)\n\
    \        words[i] = sort(words[i])\n    end\n    # join words back together\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptjt3ndfi.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmptjt3ndfi.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmptjt3ndfi.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptjt3ndfi.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmptjt3ndfi.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmptjt3ndfi.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmptjt3ndfi.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptjt3ndfi.jl:30\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpd9r5jyxx.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpd9r5jyxx.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpd9r5jyxx.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpd9r5jyxx.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    new_s = \"\"\n    for word in\
    \ split(s)\n        new_s *= join(sort(collect(word)))\n        new_s *= \" \"\
    \n    end\n    return new_s\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\"\
    ) == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvrh4osyu.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"Hi \" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrh4osyu.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrh4osyu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpvrh4osyu.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"ehllo \" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrh4osyu.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrh4osyu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpvrh4osyu.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"bemnru \" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrh4osyu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrh4osyu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpvrh4osyu.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"abcd \" == \"abcd\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvrh4osyu.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrh4osyu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpvrh4osyu.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello !!!Wdlor \" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvrh4osyu.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmps9dpzs7k.jl:28\\n  Test threw\
    \ exception\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return\
    \ join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdsvxqnys.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpdsvxqnys.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpdsvxqnys.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdsvxqnys.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpdsvxqnys.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpdsvxqnys.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpdsvxqnys.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdsvxqnys.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_1biro04.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_split = split(s)\n    for i\
    \ in 1:length(s_split)\n        s_split[i] = sort(s_split[i])\n    end\n    return\
    \ join(s_split)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpplzbkcib.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpplzbkcib.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpplzbkcib.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpplzbkcib.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpplzbkcib.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpplzbkcib.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpplzbkcib.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpplzbkcib.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmporpcnkf0.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmporpcnkf0.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmporpcnkf0.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmporpcnkf0.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # Split the string into words\n\
    \    words = split(s, \" \")\n    # Create a new array to store the ordered words\n\
    \    ordered_words = []\n    # Iterate over the words\n    for word in words\n\
    \        # Sort the characters in the word\n        ordered_word = sort(collect(word))\n\
    \        # Join the characters back into a string\n        ordered_word = join(ordered_word)\n\
    \        # Append the ordered word to the ordered_words array\n        push!(ordered_words,\
    \ ordered_word)\n    end\n    # Join the ordered words back into a string\n  \
    \  ordered_string = join(ordered_words, \" \")\n    # Return the ordered string\n\
    \    return ordered_string\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    new_string = \"\"\n    for word\
    \ in split(s)\n        new_string = new_string * join(sort(collect(word))) * \"\
    \ \"\n    end\n    return new_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2_5bgtze.jl:28\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"Hi \" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_5bgtze.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_5bgtze.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp2_5bgtze.jl:29\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"ehllo \" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_5bgtze.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_5bgtze.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp2_5bgtze.jl:30\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"bemnru \" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_5bgtze.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_5bgtze.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp2_5bgtze.jl:31\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"abcd \" == \"abcd\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2_5bgtze.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_5bgtze.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp2_5bgtze.jl:32\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello !!!Wdlor \" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_5bgtze.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_array = split(s, \" \")\n \
    \   for i in 1:length(s_array)\n        s_array[i] = sort(s_array[i])\n    end\n\
    \    return join(s_array, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy3weg5oj.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpy3weg5oj.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy3weg5oj.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy3weg5oj.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpy3weg5oj.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpy3weg5oj.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy3weg5oj.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy3weg5oj.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_list = split(s, \" \")\n  \
    \  s_list_new = []\n    for i in s_list\n        push!(s_list_new, sort(i))\n\
    \    end\n    return join(s_list_new, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnadsk8e7.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpnadsk8e7.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnadsk8e7.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnadsk8e7.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpnadsk8e7.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpnadsk8e7.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnadsk8e7.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnadsk8e7.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # split string into words\n \
    \   words = split(s, \" \")\n    # sort characters in each word\n    for i in\
    \ 1:length(words)\n        words[i] = sort(words[i])\n    end\n    # join words\
    \ back into a string\n    return join(words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph7jnucfz.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmph7jnucfz.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmph7jnucfz.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmph7jnucfz.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmph7jnucfz.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmph7jnucfz.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmph7jnucfz.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmph7jnucfz.jl:30\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ result = \"\"\n    for word in words\n        result *= sort(word) * \" \"\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\"\
    ) == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnyvigi4q.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpnyvigi4q.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnyvigi4q.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnyvigi4q.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpnyvigi4q.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpnyvigi4q.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnyvigi4q.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnyvigi4q.jl:28\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8nezwr8g.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmp8nezwr8g.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp8nezwr8g.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp8nezwr8g.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_split = split(s)\n    s_split_sorted\
    \ = [sort(x) for x in s_split]\n    s_sorted = join(s_split_sorted, \" \")\n \
    \   return s_sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnl9iywoz.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(x::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpnl9iywoz.jl:18\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpnl9iywoz.jl:27 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpnl9iywoz.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpnl9iywoz.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(x::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpnl9iywoz.jl:18\\n   [5] macro expansio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3cvlq3cw.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmp3cvlq3cw.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp3cvlq3cw.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp3cvlq3cw.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return\
    \ join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt6a9h16a.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpt6a9h16a.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt6a9h16a.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt6a9h16a.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpt6a9h16a.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpt6a9h16a.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt6a9h16a.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt6a9h16a.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_split = split(s, \" \")\n \
    \   s_split_sorted = [sort(x) for x in s_split]\n    return join(s_split_sorted,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3wulgzap.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(x::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp3wulgzap.jl:18\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp3wulgzap.jl:26 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp3wulgzap.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp3wulgzap.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(x::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp3wulgzap.jl:18\\n   [5] macro expansio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpiosb6ga6.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpiosb6ga6.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpiosb6ga6.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpiosb6ga6.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpiosb6ga6.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return\
    \ join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1zbi5pe3.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp1zbi5pe3.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1zbi5pe3.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1zbi5pe3.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp1zbi5pe3.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp1zbi5pe3.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1zbi5pe3.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1zbi5pe3.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_split = split(s, \" \")\n \
    \   s_split_sorted = [sort(x) for x in s_split]\n    s_joined = join(s_split_sorted,\
    \ \" \")\n    return s_joined\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzxxt1eei.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(x::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpzxxt1eei.jl:18\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpzxxt1eei.jl:27 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpzxxt1eei.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpzxxt1eei.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(x::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpzxxt1eei.jl:18\\n   [5] macro expansio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s = split(s)\n    for i in 1:length(s)\n\
    \        s[i] = sort(s[i])\n    end\n    return join(s)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpibcbqmvu.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpibcbqmvu.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpibcbqmvu.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpibcbqmvu.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpibcbqmvu.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpibcbqmvu.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpibcbqmvu.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpibcbqmvu.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return\
    \ join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm2f7o072.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpm2f7o072.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpm2f7o072.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpm2f7o072.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpm2f7o072.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpm2f7o072.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpm2f7o072.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpm2f7o072.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, ' ')\n    for\
    \ i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\"\
    ) == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcgzf4jpb.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpcgzf4jpb.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpcgzf4jpb.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpcgzf4jpb.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpcgzf4jpb.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzmlfzssl.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpzmlfzssl.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpzmlfzssl.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpzmlfzssl.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpzmlfzssl.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    # Split the string into words\n\
    \    words = split(s)\n    # Sort the characters in each word\n    sorted_words\
    \ = [sort(word) for word in words]\n    # Join the sorted words together\n   \
    \ return join(sorted_words)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\"\
    ) == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcc6g3l26.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpcc6g3l26.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpcc6g3l26.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpcc6g3l26.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpcc6g3l26.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpcc6g3l26.jl:20\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    s_list = split(s, \" \")\n  \
    \  for i in 1:length(s_list)\n        s_list[i] = sort(s_list[i])\n    end\n \
    \   return join(s_list, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnk49wynu.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpnk49wynu.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnk49wynu.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnk49wynu.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpnk49wynu.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpnk49wynu.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnk49wynu.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnk49wynu.jl:27\\ntest"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(words[i])\n    end\n    join(words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyc00ym4k.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hi\") == \"Hi\"\n  MethodError: no method matching\
    \ sort(::SubString{String})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpyc00ym4k.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyc00ym4k.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyc00ym4k.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpyc00ym4k.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\n  MethodError: no method matching sort(::SubString{String})\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpyc00ym4k.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyc00ym4k.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyc00ym4k.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpyc00ym4"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyc00ym4k.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return join(words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiiz730hy.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hi\") == \"Hi\"\n  MethodError: no method matching\
    \ sort(::SubString{String})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpiiz730hy.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiiz730hy.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiiz730hy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpiiz730hy.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\n  MethodError: no method matching sort(::SubString{String})\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpiiz730hy.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiiz730hy.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiiz730hy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpiiz730h"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiiz730hy.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s)\n    for i in\
    \ 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return join(words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpof3sxwap.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hi\") == \"Hi\"\n  MethodError: no method matching\
    \ sort(::SubString{String})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpof3sxwap.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpof3sxwap.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpof3sxwap.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpof3sxwap.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\n  MethodError: no method matching sort(::SubString{String})\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpof3sxwap.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpof3sxwap.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpof3sxwap.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpof3sxwa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpof3sxwap.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    words = split(s, \" \")\n   \
    \ for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n    return\
    \ join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp15pbuo9o.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hi\") == \"Hi\"\n  MethodError: no method matching\
    \ sort(::SubString{String})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmp15pbuo9o.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp15pbuo9o.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp15pbuo9o.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp15pbuo9o.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\n  MethodError: no method matching sort(::SubString{String})\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmp15pbuo9o.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp15pbuo9o.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp15pbuo9o.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp15pbuo9"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp15pbuo9o.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    >>>\
    \ anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\
    \n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \"\"\"\
    \nfunction anti_shuffle(s::String)::String \n    return join(sort(split(s)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7rte92of.jl:25\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rte92of.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rte92of.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7rte92of.jl:26\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rte92of.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rte92of.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7rte92of.jl:28\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"HelloWorld!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rte92of.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rte92of.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7rte92of.jl:30\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi.HowMisterMyRobot.areisnameyou?\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rte92of.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rte92of.jl:23\nTest Summary:\
    \ | P"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7rte92of.jl:21\n"
  exit_code: 1
  status: SyntaxError
