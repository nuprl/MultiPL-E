language: jl
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpugj8lsql.jl:1\nin expression starting at /tmp/tmpugj8lsql.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = Vector{Int64}(length(lst))\n\
    \    res[1] = lst[1]\n    res[end] = lst[end]\n    for i in 2:length(lst)\xF7\
    2\n        res[2i-1] = lst[end-i+1]\n        res[2i] = lst[i]\n    end\n    if\
    \ length(lst) % 2 == 1\n        res[end-1] = lst[length(lst)\xF72+1]\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpnmmmh0vm.jl:36\n  Test threw
    exception\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError:
    no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()
    where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,
    N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n    Array{T,
    N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n    ...\n  Stacktrace:\n   [1]
    strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpnmmmh0vm.jl:19\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnmmmh0vm.jl:36 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnmmmh0vm.jl:35\ntest set: Error
    During Test at /tmp/tmpnmmmh0vm.jl:37\n  Test threw exception\n  Expression: candidate([5,
    6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  MethodError: no method matching Vector{Int64}(::Int64)\n  Closest
    candidates are:\n    Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,
    N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n    Array{T,
    N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n    ...\n  Stacktrace:\n   [1]
    strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpnmmmh0vm.jl:19\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnmmmh0vm.jl:37 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnmmmh0vm.jl:35\ntest set: Error
    During'
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpupca5dow.jl:1\nin expression starting at /tmp/tmpupca5dow.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxoi1fspg.jl:1\nin expression starting at /tmp/tmpxoi1fspg.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2lcm_kij.jl:1\nin expression starting at /tmp/tmp2lcm_kij.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo1x931xm.jl:1\nin expression starting at /tmp/tmpo1x931xm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qn60oxu.jl:1\nin expression starting at /tmp/tmp1qn60oxu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    result = [lst[1]]\n\
    \    for i in 2:length(lst)\n        if i % 2 == 0\n            push!(result,\
    \ lst[i])\n        else\n            unshift!(result, lst[i])\n        end\n \
    \   end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp63f5zuaq.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp63f5zuaq.jl:34\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmp63f5zuaq.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp63f5zuaq.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp63f5zuaq.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp63f5zuaq.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmp63f5zuaq.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp63f5zuaq.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp63f5zuaq.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp63f5zuaq.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmp63f5zuaq.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp63f5zuaq.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp63f5zuaq.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp63f5zuaq.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_lis"
- exit_code: -1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    if length(lst) %\
    \ 2 == 0\n        return [lst[i] for i in 1:2:length(lst)] + [lst[i] for i in\
    \ 2:2:length(lst)]\n    else\n        return [lst[i] for i in 1:2:length(lst)]\
    \ + [lst[i] for i in 2:2:length(lst)-1] + [lst[end]]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp_45w1mr0.jl:30\n  Expression: candidate([1,
    2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [3, 7] == [1, 4, 2, 3]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp_45w1mr0.jl:30 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp_45w1mr0.jl:29\ntest set: Error
    During Test at /tmp/tmp_45w1mr0.jl:31\n  Test threw exception\n  Expression: candidate([5,
    6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  DimensionMismatch("dimensions must match: a
    has dims (Base.OneTo(3),), b has dims (Base.OneTo(2),), mismatch at 1")\n  Stacktrace:\n   [1]
    promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2] promote_shape\n     @
    ./indices.jl:169 [inlined]\n   [3] +(::Vector{Int64}, ::Vector{Int64}, ::Vector{Int64})\n     @
    Base ./arraymath.jl:45\n   [4] strange_sort_list(lst::Vector{Int64})\n     @ Main
    /tmp/tmp_45w1mr0.jl:22\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_45w1mr0.jl:31 [inlined]\n   [7]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_45w1mr0.jl:29\ntest set: Error
    During Test at /tmp/tmp_45w1mr0.jl:32\n  Test threw exception\n  Expression: candidate([1,
    2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  DimensionMismatch("dimensions must match: a
    has dims (Base.OneTo(3),), b has dims (Base.OneTo(2),), mismatch at 1")\n  Stacktrace:\n   [1]
    promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2] promote_shape\n     @
    ./indices.jl:169 [inlined]\n   [3] +(::Vector{Int64}, ::Vector{Int64}, ::Vector{Int64})\n     @
    Base ./arraymath.jl:45\n   [4] strange_sort_list(lst::Vector{Int64})\n     @ Main
    /tmp/tmp_45w1mr0.jl:22\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.'
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd60sgl2u.jl:52\nin expression starting at\
    \ /tmp/tmpd60sgl2u.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_rev\
    \ = reverse(lst_sorted)\n    lst_sorted_rev_2 = lst_sorted_rev[2:end]\n    lst_sorted_rev_2_rev\
    \ = reverse(lst_sorted_rev_2)\n    lst_sorted_rev_2_rev_2 = lst_sorted_rev_2_rev[2:end]\n\
    \    lst_sorted_rev_2_rev_2_rev = reverse(lst_sorted_rev_2_rev_2)\n    lst_sorted_rev_2_rev_2_rev_2\
    \ = lst_sorted_rev_2_rev_2_rev[2:end]\n    lst_sorted_rev_2_rev_2_rev_2_rev =\
    \ reverse(lst_sorted_rev_2_rev_2_rev_2)\n    lst_sorted_rev_2_rev_2_rev_2_rev_2\
    \ = lst_sorted_rev_2_rev_2_rev_2_rev[2:end]\n    lst_sorted_rev_2_rev_2_rev_2_rev_2_rev\
    \ = reverse(lst_sorted_rev_2_rev_2_rev_2_rev_2)\n    lst_sorted_rev_2_rev_2_rev_2_rev_2_rev_2\
    \ = lst_sorted_rev_2_rev_2_rev_2_rev_2_rev[2:end]\n    lst_sorted_rev_2_rev_2_rev_2_rev_2_rev_2_rev\
    \ = reverse(lst_sorted_rev_2_rev_2_rev_2_rev_2_rev_2)\n    lst_sorted_rev_2_rev_2_rev_2_rev_2_rev_2_rev_2\
    \ = lst_sorted_rev_2_rev_2_rev_2_rev_2\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxexn0zw3.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxexn0zw3.jl:1\n\
    in expression starting at /tmp/tmpxexn0zw3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    result = Vector{Int64}(undef,\
    \ length(lst))\n    i = 1\n    j = length(lst)\n    while i <= length(lst)\n \
    \       result[i] = lst[i]\n        i += 1\n        if i <= length(lst)\n    \
    \        result[i] = lst[j]\n            j -= 1\n            i += 1\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvx5trvxq.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpvx5trvxq.jl:38\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 3, 3] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvx5trvxq.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvx5trvxq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvx5trvxq.jl:39\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 7, 8, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvx5trvxq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvx5trvxq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvx5trvxq.jl:40\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 3, 4, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvx5trvxq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvx5trvxq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvx5trvxq.jl:41\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 6, 8, 8, 7] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvx5trvxq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvx5trvxq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvx5trvxq.jl:44\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    sorted = sort(lst)\n    result = []\n    for i in 1:2:length(sorted)\n\
    \        push!(result, sorted[i])\n    end\n    for i in 2:2:length(sorted)\n\
    \        push!(result, sorted[i])\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4rqjw7tr.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp4rqjw7tr.jl:39\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 2, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rqjw7tr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rqjw7tr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4rqjw7tr.jl:40\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 6, 8] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rqjw7tr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rqjw7tr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4rqjw7tr.jl:41\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 2, 4] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rqjw7tr.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rqjw7tr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4rqjw7tr.jl:42\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 5, 7, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rqjw7tr.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rqjw7tr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4rqjw7tr.jl:45\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhctjsip.jl:52\nin expression starting at\
    \ /tmp/tmphhctjsip.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    result = Vector{Int64}(undef,\
    \ length(lst))\n    if length(lst) % 2 == 0\n        for i in 1:2:length(lst)\n\
    \            result[i] = lst[i]\n            result[i+1] = lst[length(lst)-i+1]\n\
    \        end\n    else\n        for i in 1:2:length(lst)-1\n            result[i]\
    \ = lst[i]\n            result[i+1] = lst[length(lst)-i+1]\n        end\n    \
    \    result[length(lst)] = lst[length(lst)]\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqagecv3h.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpqagecv3h.jl:39\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 3, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqagecv3h.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqagecv3h.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqagecv3h.jl:40\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 7, 7, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqagecv3h.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqagecv3h.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqagecv3h.jl:41\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 3, 3, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqagecv3h.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqagecv3h.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqagecv3h.jl:42\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 6, 7, 8, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqagecv3h.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqagecv3h.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqagecv3h.jl:45\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    sorted = []\n    while length(lst) >\
    \ 0\n        push!(sorted, minimum(lst))\n        deleteat!(lst, find(lst .==\
    \ minimum(lst)))\n        if length(lst) > 0\n            push!(sorted, maximum(lst))\n\
    \            deleteat!(lst, find(lst .== maximum(lst)))\n        end\n    end\n\
    \    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpkw43g2yt.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpkw43g2yt.jl:34\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: find\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmpkw43g2yt.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkw43g2yt.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkw43g2yt.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpkw43g2yt.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: find not defined\n\
    \  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpkw43g2yt.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkw43g2yt.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkw43g2yt.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpkw43g2yt.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: find not defined\n\
    \  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpkw43g2yt.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkw43g2yt.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkw43g2yt.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpkw43g2yt.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: find not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{In"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    lst = sort(lst)\n    new_lst = []\n    for i in 1:2:length(lst)\n\
    \        push!(new_lst, lst[i])\n    end\n    for i in 2:2:length(lst)\n     \
    \   push!(new_lst, lst[i])\n    end\n    return new_lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8rq2fe65.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp8rq2fe65.jl:39\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 2, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8rq2fe65.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8rq2fe65.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8rq2fe65.jl:40\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 6, 8] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8rq2fe65.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8rq2fe65.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8rq2fe65.jl:41\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 2, 4] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8rq2fe65.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8rq2fe65.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8rq2fe65.jl:42\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 5, 7, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8rq2fe65.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8rq2fe65.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8rq2fe65.jl:45\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = sort(lst, rev=true)\n    lst_strange = []\n    for i in 1:2:length(lst)\n\
    \        push!(lst_strange, lst_sorted[i])\n        if i+1 <= length(lst)\n  \
    \          push!(lst_strange, lst_sorted_reversed[i+1])\n        end\n    end\n\
    \    return lst_strange\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpoaq626m_.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpoaq626m_.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoaq626m_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoaq626m_.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpoaq626m_.jl:35\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoaq626m_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoaq626m_.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpoaq626m_.jl:36\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoaq626m_.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoaq626m_.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpoaq626m_.jl:37\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoaq626m_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoaq626m_.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpoaq626m_.jl:40\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhctjsip.jl:52\nin expression starting at\
    \ /tmp/tmphhctjsip.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    result = Vector{Int64}()\n\
    \    push!(result, lst[1])\n    for i in 2:length(lst)\n        if i % 2 == 0\n\
    \            push!(result, lst[i])\n        else\n            unshift!(result,\
    \ lst[i])\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp8_m8pl0s.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp8_m8pl0s.jl:35\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmp8_m8pl0s.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8_m8pl0s.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8_m8pl0s.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8_m8pl0s.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmp8_m8pl0s.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8_m8pl0s.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8_m8pl0s.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8_m8pl0s.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmp8_m8pl0s.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8_m8pl0s.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8_m8pl0s.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8_m8pl0s.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_lis"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    result = []\n  \
    \  for i in 1:2:length(lst)\n        push!(result, lst[i])\n    end\n    for i\
    \ in length(lst):-2:1\n        push!(result, lst[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiir0i3sy.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpiir0i3sy.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 4, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiir0i3sy.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiir0i3sy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiir0i3sy.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 9, 7, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiir0i3sy.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiir0i3sy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiir0i3sy.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 5, 3, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiir0i3sy.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiir0i3sy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiir0i3sy.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 9, 7, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiir0i3sy.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiir0i3sy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiir0i3sy.jl:39\n  Expressi"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    lst_1 = lst[1:2:end]\n\
    \    lst_2 = lst[2:2:end]\n    lst_2 = reverse(lst_2)\n    return [lst_1; lst_2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5gizpeoe.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp5gizpeoe.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 4, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gizpeoe.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gizpeoe.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5gizpeoe.jl:30\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 8, 6] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gizpeoe.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gizpeoe.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5gizpeoe.jl:31\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 4, 2] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gizpeoe.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gizpeoe.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5gizpeoe.jl:32\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 9, 7, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gizpeoe.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gizpeoe.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5gizpeoe.jl:35\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa5kiy2zx.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpa5kiy2zx.jl:54\n  Expression: candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 1, 6, 9, 7, 8] == [1,\
    \ 9, 5, 8, 6, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa5kiy2zx.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa5kiy2zx.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpa5kiy2zx.jl:58\n  Expression: candidate([0, 2, 2, 2, 5, 5,\
    \ -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n   Evaluated: [0, -5, 2, -5, 2, 5, 2,\
    \ 5] == [-5, 5, -5, 5, 0, 2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa5kiy2zx.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa5kiy2zx.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 0
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = Vector{Int64}(undef,\
    \ length(lst))\n    i = 1\n    j = length(lst)\n    for k in 1:length(lst)\n \
    \       if k % 2 == 1\n            res[k] = lst[i]\n            i += 1\n     \
    \   else\n            res[k] = lst[j]\n            j -= 1\n        end\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    # sort the list\n    sorted_lst = sort(lst)\n\
    \    # create a new list\n    new_lst = []\n    # loop through the list\n    for\
    \ i in 1:2:length(sorted_lst)\n        # append the minimum value\n        push!(new_lst,\
    \ sorted_lst[i])\n        # append the maximum value\n        push!(new_lst, sorted_lst[end-i+1])\n\
    \    end\n    # return the new list\n    return new_lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpawxb6vvi.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpawxb6vvi.jl:37\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 3, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpawxb6vvi.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpawxb6vvi.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpawxb6vvi.jl:38\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 7, 7, 9, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpawxb6vvi.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpawxb6vvi.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpawxb6vvi.jl:39\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 3, 3, 5, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpawxb6vvi.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpawxb6vvi.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpawxb6vvi.jl:40\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 6, 7, 8, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpawxb6vvi.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpawxb6vvi.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpawxb6vvi.jl:43\n  Expressi"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return []\n    end\n    min_val = minimum(lst)\n    max_val = maximum(lst)\n\
    \    if min_val == max_val\n        return lst\n    end\n    min_idx = findfirst(lst,\
    \ min_val)\n    max_idx = findfirst(lst, max_val)\n    lst[min_idx] = max_val\n\
    \    lst[max_idx] = min_val\n    return [lst[1]] * strange_sort_list(lst[2:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpkeaxpktd.jl:34\n  Test threw
    exception\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError:
    no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpkeaxpktd.jl:23\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkeaxpktd.jl:34 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkeaxpktd.jl:33\ntest set: Error
    During Test at /tmp/tmpkeaxpktd.jl:35\n  Test threw exception\n  Expression: candidate([5,
    6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  MethodError: no method matching findfirst(::Vector{Int64},
    ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpkeaxpktd.jl:23\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkeaxpktd.jl:35 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkeaxpktd.jl:33\ntest set: Error
    During Test at /tmp/tmpkeaxpktd.jl:36\n  Test threw exception\n  Expression: candidate([1,
    2, 3, 4, '
- exit_code: 0
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    lst = sort(lst)\n    result = [lst[1]]\n\
    \    lst = lst[2:end]\n    while length(lst) > 0\n        result = [result; lst[end]]\n\
    \        lst = lst[1:end-1]\n        if length(lst) > 0\n            result =\
    \ [result; lst[1]]\n            lst = lst[2:end]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        if lst[1] > lst[2]\n            return\
    \ [lst[2], lst[1]]\n        else\n            return lst\n        end\n    end\n\
    \    if length(lst) == 3\n        if lst[1] > lst[2]\n            if lst[2] >\
    \ lst[3]\n                return [lst[3], lst[1], lst[2]]\n            else\n\
    \                return [lst[1], lst[3], lst[2]]\n            end\n        else\n\
    \            if lst[1] > lst[3]\n                return [lst[3], lst[2], lst[1]]\n\
    \            else\n                return [lst[2], lst[1], lst[3]]\n         \
    \   end\n        end\n    end\n    if length(lst) == 4\n        if lst[1] > lst[2]\n\
    \            if lst[2] > lst[3]\n                if lst[3] > lst[4]\n        \
    \            return [lst[4], lst[1], lst[3], lst[2]]\n                else\n \
    \                   return [lst[1], lst[4], lst[3], lst[2]]\n                end\n\
    \            else\n                if lst[2] > lst[4]\n                    return\
    \ [lst[1], lst[4], lst[2], lst[3]]\n                else\n                   \
    \ return [lst[1], lst[2], lst[4], lst[3]]\n                end\n            end\n\
    \        else\n            if lst[1] > lst[3]\n                if lst[3] > lst[4]\n\
    \                    return [lst[2], lst[4], lst[1], lst[3]]\n               \
    \ else\n                    return [lst[2], lst[1], lst[4], lst[3]]\n        \
    \        end\n            else\n                if lst[1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp537rq8it.jl:1\nin expression starting at /tmp/tmp537rq8it.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    lst = [lst[1], lst[end]]\n\
    \    lst = [lst; lst[1:end-1]]\n    return lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8lbji1q8.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp8lbji1q8.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8lbji1q8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8lbji1q8.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8lbji1q8.jl:29\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8lbji1q8.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8lbji1q8.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8lbji1q8.jl:30\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8lbji1q8.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8lbji1q8.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8lbji1q8.jl:31\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 1] == [1, 9, 5, 8, 6, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8lbji1q8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8lbji1q8.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8lbji1q8.jl:32\n  Expression: candidate([5, 5, 5, 5]) =="
- exit_code: -1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = Vector{Int64}(length(lst))\n\
    \    res[1] = lst[1]\n    res[end] = lst[end]\n    for i in 2:length(lst)\xF7\
    2\n        res[2i-1] = lst[end-i+1]\n        res[2i] = lst[i]\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp89bqhr1w.jl:33\n  Test threw
    exception\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError:
    no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()
    where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,
    N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n    Array{T,
    N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n    ...\n  Stacktrace:\n   [1]
    strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmp89bqhr1w.jl:19\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp89bqhr1w.jl:33 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp89bqhr1w.jl:32\ntest set: Error
    During Test at /tmp/tmp89bqhr1w.jl:34\n  Test threw exception\n  Expression: candidate([5,
    6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  MethodError: no method matching Vector{Int64}(::Int64)\n  Closest
    candidates are:\n    Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,
    N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n    Array{T,
    N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n    ...\n  Stacktrace:\n   [1]
    strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmp89bqhr1w.jl:19\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp89bqhr1w.jl:34 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp89bqhr1w.jl:32\ntest set: Error
    During'
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhctjsip.jl:52\nin expression starting at\
    \ /tmp/tmphhctjsip.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = sort(lst, rev=true)\n    lst_strange = Vector{Int64}(undef, length(lst))\n\
    \    for i in 1:2:length(lst)\n        lst_strange[i] = lst_sorted[Int64(ceil(i/2))]\n\
    \        lst_strange[i+1] = lst_sorted_reversed[Int64(ceil(i/2))]\n    end\n \
    \   return lst_strange\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmplheezzk6.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmplheezzk6.jl:33\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] strange_sort_list(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmplheezzk6.jl:23\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplheezzk6.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplheezzk6.jl:31\ntest set:\
    \ Error During Test at /tmp/tmplheezzk6.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmplheezzk6.jl:23\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplheezzk6.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplheezzk6.jl:31\ntest set:\
    \ Error During Test at /tmp/tmplheezzk6.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([111111]) == [111111]\n  BoundsError: attempt to access 1-element\
    \ Vector{Int64} at index [2]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmplheezzk6.jl:23\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplheezzk6.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    min_val = minimum(lst)\n    lst = deleteat!(lst,\
    \ findall(lst .== min_val))\n    max_val = maximum(lst)\n    lst = deleteat!(lst,\
    \ findall(lst .== max_val))\n    return [min_val, max_val] .* ones(2) .+ strange_sort_list(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpsuz15wor.jl:29\n  Test threw
    exception\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  DimensionMismatch("arrays
    could not be broadcast to a common size; got a dimension with lengths 2 and 0")\n  Stacktrace:\n    [1]
    _bcs1\n      @ ./broadcast.jl:516 [inlined]\n    [2] _bcs\n      @ ./broadcast.jl:510
    [inlined]\n    [3] broadcast_shape\n      @ ./broadcast.jl:504 [inlined]\n    [4]
    combine_axes\n      @ ./broadcast.jl:499 [inlined]\n    [5] instantiate\n      @
    ./broadcast.jl:281 [inlined]\n    [6] materialize\n      @ ./broadcast.jl:860
    [inlined]\n    [7] strange_sort_list(lst::Vector{Int64}) (repeats 2 times)\n      @
    Main /tmp/tmpsuz15wor.jl:22\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n    [9] macro expansion\n      @ /tmp/tmpsuz15wor.jl:29 [inlined]\n   [10]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsuz15wor.jl:28\ntest set:
    Error During Test at /tmp/tmpsuz15wor.jl:30\n  Test threw exception\n  Expression:
    candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  ArgumentError: reducing over
    an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n      @
    Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n      @
    Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity), op::Function,
    T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),
    typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5] reduce_empty_iter\n      @
    ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function, op::Function,
    itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n    [7]
    _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n      @
    ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322
    [inlined]\n  '
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = [lst[1]]\n\
    \    for i in 2:length(lst)\n        if i % 2 == 0\n            push!(res, lst[i])\n\
    \        else\n            unshift!(res, lst[i])\n        end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpfbl9pl88.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpfbl9pl88.jl:34\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmpfbl9pl88.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbl9pl88.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfbl9pl88.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfbl9pl88.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpfbl9pl88.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbl9pl88.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfbl9pl88.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfbl9pl88.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpfbl9pl88.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbl9pl88.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfbl9pl88.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfbl9pl88.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_lis"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    lst_min = lst[1]\n\
    \    lst_max = lst[end]\n    lst_mid = lst[2:end-1]\n    lst_mid = reverse(lst_mid)\n\
    \    return [lst_min; lst_mid; lst_max]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_5cxmn41.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp_5cxmn41.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 2, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_5cxmn41.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_5cxmn41.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_5cxmn41.jl:31\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_5cxmn41.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_5cxmn41.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_5cxmn41.jl:32\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_5cxmn41.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_5cxmn41.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_5cxmn41.jl:33\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 7, 6, 5, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_5cxmn41.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_5cxmn41.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_5cxmn41.jl:36\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    new_lst = [lst[1]]\n\
    \    for i in 2:length(lst)\n        if i % 2 == 0\n            push!(new_lst,\
    \ lst[i])\n        else\n            unshift!(new_lst, lst[i])\n        end\n\
    \    end\n    return new_lst\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpblboi8a4.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpblboi8a4.jl:34\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmpblboi8a4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpblboi8a4.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpblboi8a4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpblboi8a4.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpblboi8a4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpblboi8a4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpblboi8a4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpblboi8a4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpblboi8a4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpblboi8a4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpblboi8a4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpblboi8a4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_lis"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = Vector{Int64}(undef,\
    \ length(lst))\n    res[1] = lst[1]\n    res[2] = lst[end]\n    for i in 3:2:length(lst)\n\
    \        res[i] = lst[i/2]\n    end\n    for i in 4:2:length(lst)\n        res[i]\
    \ = lst[length(lst) - i/2 + 2]\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmplrhkfm5g.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmplrhkfm5g.jl:35\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  ArgumentError: invalid\
    \ index: 1.5 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n  \
    \    @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] strange_sort_list(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmplrhkfm5g.jl:23\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmplrhkfm5g.jl:35 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmplrhkfm5g.jl:34\ntest set:\
    \ Error During Test at /tmp/tmplrhkfm5g.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  ArgumentError: invalid index:\
    \ 1.5 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] strange_sort_list(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmplrhkfm5g.jl:23\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmplrhkfm5g.jl:36 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmplrhkfm5g.jl:34\ntest set:\
    \ Error During Test at /tmp/tmplrhkfm5g.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  ArgumentError: invalid index:\
    \ 1.5 of "
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    if length(lst) %\
    \ 2 == 0\n        return [lst[1:2:end]; lst[2:2:end]]\n    else\n        return\
    \ [lst[1:2:end]; lst[2:2:end]; lst[end]]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz7d8ey7e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpz7d8ey7e.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 2, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz7d8ey7e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7d8ey7e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpz7d8ey7e.jl:31\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 6, 8, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz7d8ey7e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7d8ey7e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpz7d8ey7e.jl:32\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 2, 4, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz7d8ey7e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7d8ey7e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpz7d8ey7e.jl:33\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 5, 7, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz7d8ey7e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7d8ey7e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpz7d8ey7e.jl:36\n  Expressi"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    s = sort(lst)\n    n = length(s)\n  \
    \  v = zeros(Int64, n)\n    for i in 1:2:n\n        v[i] = s[i]\n    end\n   \
    \ for i in 2:2:n\n        v[i] = s[n - i + 1]\n    end\n    return v\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9potujoh.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp9potujoh.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9potujoh.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9potujoh.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp9potujoh.jl:35\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9potujoh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9potujoh.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp9potujoh.jl:36\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9potujoh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9potujoh.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp9potujoh.jl:37\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9potujoh.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9potujoh.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp9potujoh.jl:40\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        if lst[1] > lst[2]\n            return\
    \ [lst[2], lst[1]]\n        else\n            return lst\n        end\n    end\n\
    \    if length(lst) == 3\n        if lst[1] > lst[2]\n            if lst[2] >\
    \ lst[3]\n                return [lst[3], lst[1], lst[2]]\n            else\n\
    \                return [lst[1], lst[3], lst[2]]\n            end\n        else\n\
    \            if lst[1] > lst[3]\n                return [lst[3], lst[2], lst[1]]\n\
    \            else\n                return [lst[2], lst[1], lst[3]]\n         \
    \   end\n        end\n    end\n    if length(lst) == 4\n        if lst[1] > lst[2]\n\
    \            if lst[2] > lst[3]\n                if lst[3] > lst[4]\n        \
    \            return [lst[4], lst[1], lst[3], lst[2]]\n                else\n \
    \                   return [lst[1], lst[4], lst[3], lst[2]]\n                end\n\
    \            else\n                if lst[2] > lst[4]\n                    return\
    \ [lst[4], lst[1], lst[2], lst[3]]\n                else\n                   \
    \ return [lst[1], lst[4], lst[2], lst[3]]\n                end\n            end\n\
    \        else\n            if lst[1] > lst[3]\n                if lst[3] > lst[4]\n\
    \                    return [lst[4], lst[2], lst[1], lst[3]]\n               \
    \ else\n                    return [lst[2], lst[4], lst[1], lst[3]]\n        \
    \        end\n            else\n                if lst[1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2m7msj_h.jl:1\nin expression starting at /tmp/tmp2m7msj_h.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    lst_sorted_reversed_length = length(lst_sorted_reversed)\n\
    \    lst_sorted_length = length(lst_sorted)\n    lst_sorted_reversed_length_half\
    \ = div(lst_sorted_reversed_length, 2)\n    lst_sorted_length_half = div(lst_sorted_length,\
    \ 2)\n    lst_sorted_reversed_length_half_plus_one = lst_sorted_reversed_length_half\
    \ + 1\n    lst_sorted_length_half_plus_one = lst_sorted_length_half + 1\n    lst_sorted_reversed_length_half_minus_one\
    \ = lst_sorted_reversed_length_half - 1\n    lst_sorted_length_half_minus_one\
    \ = lst_sorted_length_half - 1\n    lst_sorted_reversed_length_half_plus_two =\
    \ lst_sorted_reversed_length_half + 2\n    lst_sorted_length_half_plus_two = lst_sorted_length_half\
    \ + 2\n    lst_sorted_reversed_length_half_minus_two = lst_sorted_reversed_length_half\
    \ - 2\n    lst_sorted_length_half_minus_two = lst_sorted_length_half - 2\n   \
    \ if lst_sorted_reversed_length % 2 == 0\n        lst_sorted_reversed_odd = lst_sorted_reversed[lst_sorted_reversed_length_half_plus_one:lst_sorted_reversed_length]\n\
    \        lst_sorted_reversed_even = lst_sorted_reversed[1:lst_sorted_reversed_length_half]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbyahy03.jl:1\nin expression starting at /tmp/tmpnbyahy03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    min_val = minimum(lst)\n    max_val =\
    \ maximum(lst)\n    if min_val == max_val\n        return lst\n    end\n    min_index\
    \ = findfirst(lst, min_val)\n    max_index = findfirst(lst, max_val)\n    lst[min_index]\
    \ = max_val\n    lst[max_index] = min_val\n    return [lst[1]] * strange_sort_list(lst[2:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpwjiu547p.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpwjiu547p.jl:34\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError: no method\
    \ matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n  \
    \  findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpwjiu547p.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwjiu547p.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwjiu547p.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpwjiu547p.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  MethodError: no method matching\
    \ findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n\
    \   [1] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpwjiu547p.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwjiu547p.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwjiu547p.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpwjiu547p.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  MethodError: no m"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    new_lst = Vector{Int64}(length(lst))\n\
    \    new_lst[1] = lst[1]\n    new_lst[end] = lst[end]\n    for i in 2:2:length(lst)-1\n\
    \        new_lst[i] = lst[end-i+1]\n        new_lst[i+1] = lst[i]\n    end\n \
    \   return new_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpvi7yzjn9.jl:33\n  Test threw
    exception\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError:
    no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()
    where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,
    N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n    Array{T,
    N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n    ...\n  Stacktrace:\n   [1]
    strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpvi7yzjn9.jl:19\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvi7yzjn9.jl:33 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvi7yzjn9.jl:32\ntest set: Error
    During Test at /tmp/tmpvi7yzjn9.jl:34\n  Test threw exception\n  Expression: candidate([5,
    6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  MethodError: no method matching Vector{Int64}(::Int64)\n  Closest
    candidates are:\n    Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,
    N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n    Array{T,
    N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n    ...\n  Stacktrace:\n   [1]
    strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpvi7yzjn9.jl:19\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvi7yzjn9.jl:34 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvi7yzjn9.jl:32\ntest set: Error
    During'
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = Vector{Int64}(undef,\
    \ length(lst))\n    for i in 1:2:length(lst)\n        res[i] = lst[i]\n    end\n\
    \    for i in 2:2:length(lst)\n        res[i] = lst[end - i + 1]\n    end\n  \
    \  return res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg0qqzzr0.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpg0qqzzr0.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg0qqzzr0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg0qqzzr0.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpg0qqzzr0.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg0qqzzr0.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg0qqzzr0.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpg0qqzzr0.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg0qqzzr0.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg0qqzzr0.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpg0qqzzr0.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg0qqzzr0.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg0qqzzr0.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpg0qqzzr0.jl:39\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    n = length(lst)\n\
    \    res = zeros(Int64, n)\n    res[1] = lst[1]\n    res[2] = lst[end]\n    i\
    \ = 3\n    j = 2\n    while i <= n\n        res[i] = lst[j]\n        i += 1\n\
    \        j += 1\n        if i <= n\n            res[i] = lst[end - j + 1]\n  \
    \          i += 1\n        end\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp8p99i660.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp8p99i660.jl:41\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 2, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8p99i660.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8p99i660.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp8p99i660.jl:42\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 6, 7, 7] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8p99i660.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8p99i660.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp8p99i660.jl:43\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 2, 3, 3] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8p99i660.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8p99i660.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp8p99i660.jl:44\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 5, 7, 6, 6] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8p99i660.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8p99i660.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp8p99i660.jl:47\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    new_lst = [lst[1]]\n\
    \    for i in 2:length(lst)\n        if i % 2 == 0\n            push!(new_lst,\
    \ lst[i])\n        else\n            unshift!(new_lst, lst[i])\n        end\n\
    \    end\n    return new_lst\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpblboi8a4.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpblboi8a4.jl:34\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmpblboi8a4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpblboi8a4.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpblboi8a4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpblboi8a4.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpblboi8a4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpblboi8a4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpblboi8a4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpblboi8a4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpblboi8a4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpblboi8a4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpblboi8a4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpblboi8a4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_lis"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return []\n    end\n    if length(lst) == 1\n        return lst\n   \
    \ end\n    sorted_lst = sort(lst)\n    odd_lst = sorted_lst[1:2:end]\n    even_lst\
    \ = sorted_lst[2:2:end]\n    return [odd_lst; even_lst]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnwgaj477.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpnwgaj477.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 2, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnwgaj477.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnwgaj477.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpnwgaj477.jl:32\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 6, 8] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnwgaj477.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnwgaj477.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpnwgaj477.jl:33\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 2, 4] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnwgaj477.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnwgaj477.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpnwgaj477.jl:34\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 5, 7, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnwgaj477.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnwgaj477.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpnwgaj477.jl:37\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    lst_sorted_reversed_sorted = sort(lst_sorted_reversed)\n\
    \    lst_sorted_reversed_sorted_reversed = reverse(lst_sorted_reversed_sorted)\n\
    \    return vcat(lst_sorted, lst_sorted_reversed_sorted_reversed)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2ov2g95w.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp2ov2g95w.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 2, 3, 4, 4, 3, 2, 1] == [1, 4,\
    \ 2, 3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ov2g95w.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ov2g95w.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2ov2g95w.jl:30\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 6, 7, 8, 9, 9, 8, 7, 6, 5] == [5, 9, 6, 8,\
    \ 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ov2g95w.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ov2g95w.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2ov2g95w.jl:31\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 2, 3, 4, 5, 5, 4, 3, 2, 1] == [1, 5, 2, 4,\
    \ 3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ov2g95w.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ov2g95w.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2ov2g95w.jl:32\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 1] ==\
    \ [1, 9, 5, 8, 6, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ov2g95w.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ov2g95w.jl:28\ntest"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhctjsip.jl:52\nin expression starting at\
    \ /tmp/tmphhctjsip.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    lst2 = lst[2:end]\n\
    \    lst2 = reverse(lst2)\n    return [lst[1], lst2...]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3ke8hrek.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp3ke8hrek.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 3, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ke8hrek.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ke8hrek.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3ke8hrek.jl:29\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 8, 7, 6] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ke8hrek.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ke8hrek.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3ke8hrek.jl:30\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 4, 3, 2] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ke8hrek.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ke8hrek.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3ke8hrek.jl:31\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 8, 7, 6, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ke8hrek.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ke8hrek.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3ke8hrek.jl:34\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    lst_1 = lst[1:2:end]\n\
    \    lst_2 = lst[2:2:end]\n    lst_2 = reverse(lst_2)\n    return vcat(lst_1,\
    \ lst_2)\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxr1eli6.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpkxr1eli6.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 4, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxr1eli6.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxr1eli6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpkxr1eli6.jl:30\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 8, 6] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxr1eli6.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxr1eli6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpkxr1eli6.jl:31\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 4, 2] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxr1eli6.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxr1eli6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpkxr1eli6.jl:32\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 9, 7, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxr1eli6.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxr1eli6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpkxr1eli6.jl:35\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = Vector{Int64}(undef,\
    \ length(lst))\n    i = 1\n    j = length(lst)\n    while i <= length(lst)\n \
    \       res[i] = lst[i]\n        i += 1\n        if i <= length(lst)\n       \
    \     res[i] = lst[j]\n            j -= 1\n            i += 1\n        end\n \
    \   end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8ye35yxq.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp8ye35yxq.jl:38\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 3, 3] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ye35yxq.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ye35yxq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp8ye35yxq.jl:39\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 7, 8, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ye35yxq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ye35yxq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp8ye35yxq.jl:40\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 3, 4, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ye35yxq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ye35yxq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp8ye35yxq.jl:41\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 6, 8, 8, 7] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ye35yxq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ye35yxq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp8ye35yxq.jl:44\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    sorted = sort(lst)\n    res = Vector{Int64}()\n\
    \    push!(res, sorted[1])\n    push!(res, sorted[end])\n    for i in 2:length(sorted)-1\n\
    \        if i % 2 == 0\n            push!(res, sorted[i])\n        else\n    \
    \        unshift!(res, sorted[i])\n        end\n    end\n    return res\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp8gfuv5tr.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmp8gfuv5tr.jl:36\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmp8gfuv5tr.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8gfuv5tr.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8gfuv5tr.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8gfuv5tr.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmp8gfuv5tr.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8gfuv5tr.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8gfuv5tr.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8gfuv5tr.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmp8gfuv5tr.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8gfuv5tr.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8gfuv5tr.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8gfuv5tr.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_lis"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    lst_sorted_reversed_sorted = sort(lst_sorted_reversed)\n\
    \    lst_sorted_reversed_sorted_reversed = reverse(lst_sorted_reversed_sorted)\n\
    \    return lst_sorted_reversed_sorted_reversed\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprhvgy2ci.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmprhvgy2ci.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprhvgy2ci.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprhvgy2ci.jl:28\ntest set: Test\
    \ Failed at /tmp/tmprhvgy2ci.jl:30\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprhvgy2ci.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprhvgy2ci.jl:28\ntest set: Test\
    \ Failed at /tmp/tmprhvgy2ci.jl:31\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprhvgy2ci.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprhvgy2ci.jl:28\ntest set: Test\
    \ Failed at /tmp/tmprhvgy2ci.jl:32\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprhvgy2ci.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprhvgy2ci.jl:28\ntest set: Test\
    \ Failed at /tmp/tmprhvgy2ci.jl:35\n  Expression: ca"
- exit_code: -1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    return [lst[1]] * push!(lst, lst[1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp7w05jm87.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError:
    no method matching *(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmp7w05jm87.jl:18\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7w05jm87.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7w05jm87.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reverse\
    \ = reverse(lst_sorted)\n    lst_sorted_reverse_2 = lst_sorted_reverse[2:end]\n\
    \    lst_sorted_2 = lst_sorted[2:end]\n    lst_sorted_2_reverse = reverse(lst_sorted_2)\n\
    \    lst_sorted_2_reverse_2 = lst_sorted_2_reverse[2:end]\n    lst_sorted_2_reverse_3\
    \ = lst_sorted_2_reverse[1:end-1]\n    lst_sorted_3 = lst_sorted[1:end-1]\n  \
    \  lst_sorted_3_reverse = reverse(lst_sorted_3)\n    lst_sorted_3_reverse_2 =\
    \ lst_sorted_3_reverse[2:end]\n    lst_sorted_3_reverse_3 = lst_sorted_3_reverse[1:end-1]\n\
    \    lst_sorted_4 = lst_sorted[1:end-2]\n    lst_sorted_4_reverse = reverse(lst_sorted_4)\n\
    \    lst_sorted_4_reverse_2 = lst_sorted_4_reverse[2:end]\n    lst_sorted_4_reverse_3\
    \ = lst_sorted_4_reverse[1:end-1]\n    lst_sorted_5 = lst_sorted[1:end-3]\n  \
    \  lst_sorted_5_reverse = reverse(lst_sorted_5)\n    lst_sorted_5_reverse_2 =\
    \ lst_sorted_5_reverse[2:end]\n    lst_sorted_5_reverse_3 = lst_sorted_5_reverse[1:end-1]\n\
    \    lst_sorted_6 = lst_sorted[1:end-4]\n    lst_sorted_6_reverse\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpglzwqlby.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpglzwqlby.jl:1\n\
    in expression starting at /tmp/tmpglzwqlby.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = [lst[1]]\n\
    \    for i in 2:length(lst)\n        if i % 2 == 0\n            push!(res, lst[i])\n\
    \        else\n            unshift!(res, lst[i])\n        end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpfbl9pl88.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpfbl9pl88.jl:34\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmpfbl9pl88.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbl9pl88.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfbl9pl88.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfbl9pl88.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpfbl9pl88.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbl9pl88.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfbl9pl88.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfbl9pl88.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpfbl9pl88.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbl9pl88.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfbl9pl88.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfbl9pl88.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_lis"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhctjsip.jl:52\nin expression starting at\
    \ /tmp/tmphhctjsip.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    sorted = sort(lst)\n    result = []\n    for i in 1:2:length(sorted)\n\
    \        push!(result, sorted[i])\n    end\n    for i in 2:2:length(sorted)\n\
    \        push!(result, sorted[i])\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4rqjw7tr.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp4rqjw7tr.jl:39\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 2, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rqjw7tr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rqjw7tr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4rqjw7tr.jl:40\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 6, 8] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rqjw7tr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rqjw7tr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4rqjw7tr.jl:41\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 2, 4] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rqjw7tr.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rqjw7tr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4rqjw7tr.jl:42\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 5, 7, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rqjw7tr.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rqjw7tr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4rqjw7tr.jl:45\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    lst_sorted_reversed_2 = copy(lst_sorted_reversed)\n\
    \    lst_sorted_reversed_2 = vcat(lst_sorted_reversed_2, lst_sorted_reversed_2)\n\
    \    lst_sorted_reversed_2 = lst_sorted_reversed_2[2:end]\n    lst_sorted_reversed_2\
    \ = lst_sorted_reversed_2[1:end-1]\n    lst_sorted_reversed_2 = reshape(lst_sorted_reversed_2,\
    \ (length(lst), 2))\n    lst_sorted_reversed_2 = lst_sorted_reversed_2[:, 2]\n\
    \    return lst_sorted_reversed_2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpv82v1cxm.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpv82v1cxm.jl:33\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  DimensionMismatch(\"\
    new dimensions (4, 2) must be consistent with array size 6\")\n  Stacktrace:\n\
    \   [1] (::Base.var\"#throw_dmrsa#272\")(dims::Tuple{Int64, Int64}, len::Int64)\n\
    \     @ Base ./reshapedarray.jl:41\n   [2] reshape\n     @ ./reshapedarray.jl:45\
    \ [inlined]\n   [3] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpv82v1cxm.jl:24\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpv82v1cxm.jl:33 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpv82v1cxm.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpv82v1cxm.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  DimensionMismatch(\"new dimensions\
    \ (5, 2) must be consistent with array size 8\")\n  Stacktrace:\n   [1] (::Base.var\"\
    #throw_dmrsa#272\")(dims::Tuple{Int64, Int64}, len::Int64)\n     @ Base ./reshapedarray.jl:41\n\
    \   [2] reshape\n     @ ./reshapedarray.jl:45 [inlined]\n   [3] strange_sort_list(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpv82v1cxm.jl:24\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpv82v1cxm.jl:34 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpv82v1cxm.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpv82v1cxm.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  DimensionMismatch(\"new dimensions\
    \ (5, 2) must be consistent with array size 8\")\n  Stacktrace:\n   [1] (::Base.var\"\
    #throw_dmrsa#272\")(dims::Tuple{Int64, Int64}, len::Int64)\n     @ Base ./reshapedarray.jl:41\n\
    \   [2] reshape\n     @ ./reshapedarray.jl:45 [inlined]\n   [3] strange"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    lst_copy = copy(lst)\n    sorted_lst =\
    \ []\n    while length(lst_copy) > 0\n        push!(sorted_lst, minimum(lst_copy))\n\
    \        deleteat!(lst_copy, find(lst_copy .== minimum(lst_copy)))\n        if\
    \ length(lst_copy) > 0\n            push!(sorted_lst, maximum(lst_copy))\n   \
    \         deleteat!(lst_copy, find(lst_copy .== maximum(lst_copy)))\n        end\n\
    \    end\n    return sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpq0zvtjoo.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpq0zvtjoo.jl:35\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: find\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmpq0zvtjoo.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0zvtjoo.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0zvtjoo.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpq0zvtjoo.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: find not defined\n\
    \  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpq0zvtjoo.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0zvtjoo.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0zvtjoo.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpq0zvtjoo.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: find not defined\n\
    \  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpq0zvtjoo.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0zvtjoo.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0zvtjoo.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpq0zvtjoo.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: find not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{In"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return lst\n    end\n    lst = sort(lst)\n    result = zeros(Int64, length(lst))\n\
    \    for i in 1:2:length(lst)\n        result[i] = lst[i]\n    end\n    for i\
    \ in 2:2:length(lst)\n        result[i] = lst[end-i+1]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp32r8vs_b.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp32r8vs_b.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp32r8vs_b.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32r8vs_b.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp32r8vs_b.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp32r8vs_b.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32r8vs_b.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp32r8vs_b.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp32r8vs_b.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32r8vs_b.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp32r8vs_b.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp32r8vs_b.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32r8vs_b.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp32r8vs_b.jl:39\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    lst_sorted_reversed_2 = copy(lst_sorted_reversed)\n\
    \    lst_sorted_reversed_2[1:2:end] = lst_sorted[1:2:end]\n    lst_sorted_reversed_2[2:2:end]\
    \ = lst_sorted[2:2:end]\n    return lst_sorted_reversed_2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7aborsjw.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp7aborsjw.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 2, 3, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7aborsjw.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7aborsjw.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp7aborsjw.jl:31\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 6, 7, 8, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7aborsjw.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7aborsjw.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp7aborsjw.jl:32\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7aborsjw.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7aborsjw.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp7aborsjw.jl:33\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 5, 6, 7, 8, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7aborsjw.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7aborsjw.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp7aborsjw.jl:36\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    result = Vector{Int64}(undef,\
    \ length(lst))\n    i = 1\n    j = length(lst)\n    while i <= length(lst)\n \
    \       result[i] = lst[i]\n        i += 1\n        if i <= length(lst)\n    \
    \        result[i] = lst[j]\n            j -= 1\n            i += 1\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvx5trvxq.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpvx5trvxq.jl:38\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 3, 3] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvx5trvxq.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvx5trvxq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvx5trvxq.jl:39\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 7, 8, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvx5trvxq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvx5trvxq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvx5trvxq.jl:40\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 3, 4, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvx5trvxq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvx5trvxq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvx5trvxq.jl:41\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 6, 8, 8, 7] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvx5trvxq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvx5trvxq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvx5trvxq.jl:44\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6hljw8w0.jl:51

    '
  stdout: "test set: Test Failed at /tmp/tmp6hljw8w0.jl:57\n  Expression: candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 1, 6, 9, 7, 8] == [1,\
    \ 9, 5, 8, 6, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6hljw8w0.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6hljw8w0.jl:53\ntest set: Test\
    \ Failed at /tmp/tmp6hljw8w0.jl:61\n  Expression: candidate([0, 2, 2, 2, 5, 5,\
    \ -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n   Evaluated: [0, -5, 2, -5, 2, 5, 2,\
    \ 5] == [-5, 5, -5, 5, 0, 2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6hljw8w0.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6hljw8w0.jl:53\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    new_lst = [lst[1]]\n\
    \    for i in 2:length(lst)\n        if i % 2 == 0\n            push!(new_lst,\
    \ lst[i])\n        else\n            unshift!(new_lst, lst[i])\n        end\n\
    \    end\n    return new_lst\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpblboi8a4.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpblboi8a4.jl:34\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmpblboi8a4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpblboi8a4.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpblboi8a4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpblboi8a4.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpblboi8a4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpblboi8a4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpblboi8a4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpblboi8a4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpblboi8a4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpblboi8a4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpblboi8a4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpblboi8a4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_lis"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return lst\n    end\n    lst = sort(lst)\n    n = length(lst)\n    res\
    \ = zeros(Int64, n)\n    res[1] = lst[1]\n    res[2] = lst[end]\n    for i in\
    \ 3:n\n        if i % 2 == 0\n            res[i] = lst[i/2]\n        else\n  \
    \          res[i] = lst[n - (i - 1)/2]\n        end\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp7w2s0qgj.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp7w2s0qgj.jl:37\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  ArgumentError: invalid\
    \ index: 3.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n  \
    \    @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] strange_sort_list(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmp7w2s0qgj.jl:27\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp7w2s0qgj.jl:37 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp7w2s0qgj.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp7w2s0qgj.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  ArgumentError: invalid index:\
    \ 4.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] strange_sort_list(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmp7w2s0qgj.jl:27\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp7w2s0qgj.jl:38 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp7w2s0qgj.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp7w2s0qgj.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  ArgumentError: invalid index:\
    \ 4.0 of "
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = Vector{Int64}(undef,\
    \ length(lst))\n    res[1] = lst[1]\n    res[end] = lst[end]\n    for i in 2:2:length(lst)-1\n\
    \        res[i] = lst[end-i+1]\n        res[i+1] = lst[i]\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr8it1t3m.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpr8it1t3m.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 2, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr8it1t3m.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr8it1t3m.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr8it1t3m.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 6, 6, 8] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr8it1t3m.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr8it1t3m.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr8it1t3m.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 2, 2, 4] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr8it1t3m.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr8it1t3m.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr8it1t3m.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 5, 6, 7, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr8it1t3m.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr8it1t3m.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr8it1t3m.jl:39\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    new_lst = []\n \
    \   while length(lst) > 0\n        push!(new_lst, lst[1])\n        lst = lst[2:end]\n\
    \        if length(lst) > 0\n            push!(new_lst, lst[end])\n          \
    \  lst = lst[1:end-1]\n        end\n    end\n    return new_lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = [lst[1]]\n\
    \    for i in 2:length(lst)\n        if i % 2 == 0\n            push!(res, lst[i])\n\
    \        else\n            unshift!(res, lst[i])\n        end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpfbl9pl88.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpfbl9pl88.jl:34\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmpfbl9pl88.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbl9pl88.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfbl9pl88.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfbl9pl88.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpfbl9pl88.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbl9pl88.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfbl9pl88.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfbl9pl88.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpfbl9pl88.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbl9pl88.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfbl9pl88.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfbl9pl88.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_lis"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    # your\
    \ code here\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmpmmos3gpd.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpmmos3gpd.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpmmos3gpd.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmmos3gpd.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmmos3gpd.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpmmos3gpd.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpmmos3gpd.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n "
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhctjsip.jl:52\nin expression starting at\
    \ /tmp/tmphhctjsip.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    result = [lst[1]]\n\
    \    for i in 2:length(lst)\n        if i % 2 == 0\n            push!(result,\
    \ lst[i])\n        else\n            unshift!(result, lst[i])\n        end\n \
    \   end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp63f5zuaq.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp63f5zuaq.jl:34\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmp63f5zuaq.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp63f5zuaq.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp63f5zuaq.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp63f5zuaq.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmp63f5zuaq.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp63f5zuaq.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp63f5zuaq.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp63f5zuaq.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmp63f5zuaq.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp63f5zuaq.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp63f5zuaq.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp63f5zuaq.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_lis"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = [lst[1]]\n\
    \    for i in 2:length(lst)\n        if i % 2 == 0\n            push!(res, lst[i])\n\
    \        else\n            unshift!(res, lst[i])\n        end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpfbl9pl88.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpfbl9pl88.jl:34\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmpfbl9pl88.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbl9pl88.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfbl9pl88.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfbl9pl88.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpfbl9pl88.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbl9pl88.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfbl9pl88.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfbl9pl88.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpfbl9pl88.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbl9pl88.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfbl9pl88.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfbl9pl88.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_lis"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    sorted = Vector{Int64}(length(lst))\n    sorted[1] = minimum(lst)\n\
    \    sorted[2] = maximum(lst)\n    lst = lst[lst .!= sorted[1]]\n    lst = lst[lst\
    \ .!= sorted[2]]\n    for i in 3:length(sorted)\n        if i % 2 == 0\n     \
    \       sorted[i] = minimum(lst)\n        else\n            sorted[i] = maximum(lst)\n\
    \        end\n        lst = lst[lst .!= sorted[i]]\n    end\n    return sorted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmppqtxxdv6.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmppqtxxdv6.jl:44\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError: no method\
    \ matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmppqtxxdv6.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppqtxxdv6.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppqtxxdv6.jl:43\ntest set:\
    \ Error During Test at /tmp/tmppqtxxdv6.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  MethodError: no method matching\
    \ Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}() where T at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T, N}(!Matched::Core.Compiler.BitArray{N})\
    \ where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmppqtxxdv6.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppqtxxdv6.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppqtxxdv6.jl:43\ntest set:\
    \ Error During Test at /tmp/tmppqtxxdv6.jl:46\n  Test thr"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    lst_sorted\
    \ = sort(lst)\n    lst_sorted_reversed = reverse(lst_sorted)\n    lst_strange\
    \ = []\n    for i in 1:2:length(lst_sorted)\n        push!(lst_strange, lst_sorted[i])\n\
    \        if i < length(lst_sorted)\n            push!(lst_strange, lst_sorted_reversed[i])\n\
    \        end\n    end\n    return lst_strange\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbk6d97ds.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpbk6d97ds.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 3, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbk6d97ds.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbk6d97ds.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpbk6d97ds.jl:32\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 7, 7, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbk6d97ds.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbk6d97ds.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpbk6d97ds.jl:33\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 3, 3, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbk6d97ds.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbk6d97ds.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpbk6d97ds.jl:34\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 6, 7, 8, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbk6d97ds.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbk6d97ds.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpbk6d97ds.jl:37\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return lst\n    end\n    sorted_lst = sort(lst)\n    n = length(sorted_lst)\n\
    \    result = zeros(Int64, n)\n    for i in 1:2:n\n        result[i] = sorted_lst[i]\n\
    \    end\n    for i in 2:2:n\n        result[i] = sorted_lst[n - i + 1]\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnr8ygmku.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpnr8ygmku.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnr8ygmku.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnr8ygmku.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpnr8ygmku.jl:35\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnr8ygmku.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnr8ygmku.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpnr8ygmku.jl:36\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnr8ygmku.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnr8ygmku.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpnr8ygmku.jl:37\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnr8ygmku.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnr8ygmku.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpnr8ygmku.jl:40\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    min_val = minimum(lst)\n    max_val = maximum(lst)\n    if min_val\
    \ == max_val\n        return lst\n    end\n    min_index = findall(lst .== min_val)[1]\n\
    \    max_index = findall(lst .== max_val)[1]\n    lst[min_index] = max_val\n \
    \   lst[max_index] = min_val\n    return lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2lr2zg_u.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp2lr2zg_u.jl:37\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 2, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2lr2zg_u.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2lr2zg_u.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2lr2zg_u.jl:38\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 6, 7, 8, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2lr2zg_u.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2lr2zg_u.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2lr2zg_u.jl:39\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 2, 3, 4, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2lr2zg_u.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2lr2zg_u.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2lr2zg_u.jl:40\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 6, 7, 8, 1, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2lr2zg_u.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2lr2zg_u.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2lr2zg_u.jl:43\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaoexor3.jl:1\nin expression starting at /tmp/tmpxaoexor3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return []\n    end\n    if length(lst) == 1\n        return lst\n   \
    \ end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n   \
    \ if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n    if\
    \ length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n    end\n\
    \    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4], lst[3]]\n\
    \    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2], lst[5],\
    \ lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1], lst[7],\
    \ lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst) == 8\n\
    \        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4], lst[5]]\n\
    \    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2], lst[8],\
    \ lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst) == 10\n\
    \        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4], lst[7],\
    \ lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8], l\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ublzku2.jl:50\nin expression starting at\
    \ /tmp/tmp0ublzku2.jl:50\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhctjsip.jl:52\nin expression starting at\
    \ /tmp/tmphhctjsip.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    n = length(lst)\n\
    \    res = zeros(Int64, n)\n    res[1] = lst[1]\n    res[n] = lst[n]\n    for\
    \ i in 2:n-1\n        res[i] = lst[n-i+1]\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwsv_gyu1.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpwsv_gyu1.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 2, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwsv_gyu1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwsv_gyu1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwsv_gyu1.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwsv_gyu1.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwsv_gyu1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwsv_gyu1.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwsv_gyu1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwsv_gyu1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwsv_gyu1.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 7, 6, 5, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwsv_gyu1.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwsv_gyu1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwsv_gyu1.jl:39\n  Expression: ca"
- exit_code: -1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = Vector{Int64}(length(lst))\n\
    \    res[1] = lst[1]\n    res[end] = lst[end]\n    for i in 2:length(lst)\xF7\
    2\n        res[2i-1] = lst[end-i+1]\n        res[2i] = lst[i]\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp89bqhr1w.jl:33\n  Test threw
    exception\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError:
    no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()
    where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,
    N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n    Array{T,
    N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n    ...\n  Stacktrace:\n   [1]
    strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmp89bqhr1w.jl:19\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp89bqhr1w.jl:33 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp89bqhr1w.jl:32\ntest set: Error
    During Test at /tmp/tmp89bqhr1w.jl:34\n  Test threw exception\n  Expression: candidate([5,
    6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  MethodError: no method matching Vector{Int64}(::Int64)\n  Closest
    candidates are:\n    Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,
    N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n    Array{T,
    N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n    ...\n  Stacktrace:\n   [1]
    strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmp89bqhr1w.jl:19\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp89bqhr1w.jl:34 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp89bqhr1w.jl:32\ntest set: Error
    During'
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    # your\
    \ code here\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmpmmos3gpd.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpmmos3gpd.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpmmos3gpd.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmmos3gpd.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmmos3gpd.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpmmos3gpd.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpmmos3gpd.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n "
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    lst = sort(lst)\n    new_lst = []\n    while length(lst) > 0\n \
    \       push!(new_lst, lst[1])\n        push!(new_lst, lst[end])\n        lst\
    \ = lst[2:end-1]\n    end\n    return new_lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2eh8bpd2.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp2eh8bpd2.jl:36\n  Expression: candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 6, 8, 7, 7] == [5, 9,\
    \ 6, 8, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eh8bpd2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eh8bpd2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp2eh8bpd2.jl:37\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 2, 4, 3, 3] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eh8bpd2.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eh8bpd2.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    return [minimum(lst)] * strange_sort_list(lst[lst\
    \ .!= minimum(lst)]) * [maximum(lst)] * strange_sort_list(lst[lst .!= maximum(lst)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpg1bedjjh.jl:25\n  Test threw
    exception\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError:
    no method matching *(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    *(a::Vector{Int64}, b::Vector{Int64}, c::Vector{Int64}, xs::Vector{Int64})\n     @
    Base ./operators.jl:655\n   [2] strange_sort_list(lst::Vector{Int64}) (repeats
    4 times)\n     @ Main /tmp/tmpg1bedjjh.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg1bedjjh.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg1bedjjh.jl:24\n'''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhctjsip.jl:52\nin expression starting at\
    \ /tmp/tmphhctjsip.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return lst\n    end\n    if length(lst) == 1\n        return lst\n  \
    \  end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n  \
    \  if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n   \
    \ if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n    end\n\
    \    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4], lst[3]]\n\
    \    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2], lst[5],\
    \ lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1], lst[7],\
    \ lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst) == 8\n\
    \        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4], lst[5]]\n\
    \    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2], lst[8],\
    \ lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst) == 10\n\
    \        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4], lst[7],\
    \ lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt2lwdsg0.jl:52\nin expression starting at\
    \ /tmp/tmpt2lwdsg0.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = [lst[1]]\n\
    \    for i in 2:length(lst)\n        if i % 2 == 0\n            push!(res, lst[i])\n\
    \        else\n            unshift!(res, lst[i])\n        end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpfbl9pl88.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpfbl9pl88.jl:34\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmpfbl9pl88.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbl9pl88.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfbl9pl88.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfbl9pl88.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpfbl9pl88.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbl9pl88.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfbl9pl88.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfbl9pl88.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpfbl9pl88.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbl9pl88.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfbl9pl88.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfbl9pl88.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: unshift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_lis"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    new_lst = zeros(Int64,\
    \ length(lst))\n    new_lst[1] = lst[1]\n    new_lst[2] = lst[end]\n    for i\
    \ in 3:length(lst)\n        new_lst[i] = lst[i-1]\n    end\n    return new_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmputa1lmys.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmputa1lmys.jl:33\n  Expression: candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 6, 7, 8] == [5, 9, 6,\
    \ 8, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputa1lmys.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputa1lmys.jl:31\ntest set: Test\
    \ Failed at /tmp/tmputa1lmys.jl:34\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 2, 3, 4] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputa1lmys.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputa1lmys.jl:31\ntest set: Test\
    \ Failed at /tmp/tmputa1lmys.jl:35\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 5, 6, 7, 8] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputa1lmys.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputa1lmys.jl:31\ntest set: Test\
    \ Failed at /tmp/tmputa1lmys.jl:38\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n   Evaluated: [1, 8, 2, 3, 4, 5, 6, 7] ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputa1lmys.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputa1lmys.jl:31\ntest set: Test\
    \ F"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    for i in 1:2:length(lst)\n\
    \        lst[i], lst[i+1] = lst[i+1], lst[i]\n    end\n    return lst\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpo9bmzn1f.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpo9bmzn1f.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [2, 1, 4, 3] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo9bmzn1f.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo9bmzn1f.jl:28\ntest set: Error\
    \ During Test at /tmp/tmpo9bmzn1f.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] strange_sort_list(lst::Vector{Int64})\n   \
    \  @ Main /tmp/tmpo9bmzn1f.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo9bmzn1f.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo9bmzn1f.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpo9bmzn1f.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] strange_sort_list(lst::Vector{Int64})\n   \
    \  @ Main /tmp/tmpo9bmzn1f.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo9bmzn1f.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo9bmzn1f.jl:28\ntest set:\
    \ Test Failed at /tmp/tmpo9bmzn1f.jl:32\n  Expression: candidate([5, 6, 7, 8,\
    \ 9, 1]) == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 1, 7, 6, 9, 8] == [1, 9, 5,\
    \ 8, 6, 7]\nStacktrace:"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    new_lst = []\n \
    \   for i in 1:2:length(lst)\n        push!(new_lst, lst[i])\n    end\n    for\
    \ i in length(lst):-2:1\n        push!(new_lst, lst[i])\n    end\n    return new_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcl5yyvnw.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpcl5yyvnw.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 4, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcl5yyvnw.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcl5yyvnw.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpcl5yyvnw.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 9, 7, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcl5yyvnw.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcl5yyvnw.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpcl5yyvnw.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 5, 3, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcl5yyvnw.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcl5yyvnw.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpcl5yyvnw.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 9, 7, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcl5yyvnw.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcl5yyvnw.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpcl5yyvnw.jl:39\n  Expressi"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhctjsip.jl:52\nin expression starting at\
    \ /tmp/tmphhctjsip.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    lst_sorted = sort(lst)\n    lst_sorted = [lst_sorted[1]]\n    lst_sorted\
    \ = [lst_sorted; lst_sorted[end]]\n    for i in 2:length(lst)-1\n        if i\
    \ % 2 == 0\n            lst_sorted = [lst_sorted; lst_sorted[end]]\n        else\n\
    \            lst_sorted = [lst_sorted; lst_sorted[1]]\n        end\n    end\n\
    \    return lst_sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp80dt4j7r.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp80dt4j7r.jl:41\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 1, 1, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp80dt4j7r.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp80dt4j7r.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp80dt4j7r.jl:42\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 5, 5, 5, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp80dt4j7r.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp80dt4j7r.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp80dt4j7r.jl:43\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 1, 1, 1, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp80dt4j7r.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp80dt4j7r.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp80dt4j7r.jl:44\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 1, 1, 1, 1, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp80dt4j7r.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp80dt4j7r.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp80dt4j7r.jl:47\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    lst = sort(lst)\n    res = [lst[1]]\n\
    \    lst = lst[2:end]\n    while length(lst) > 0\n        res = [res; lst[end]]\n\
    \        lst = lst[1:end-1]\n        if length(lst) > 0\n            res = [res;\
    \ lst[1]]\n            lst = lst[2:end]\n        end\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    min_val = minimum(lst)\n    lst = deleteat!(lst,\
    \ findall(lst .== min_val))\n    max_val = maximum(lst)\n    lst = deleteat!(lst,\
    \ findall(lst .== max_val))\n    return [min_val, max_val, strange_sort_list(lst)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpgivhi4ls.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpgivhi4ls.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{Int64}, x::Vector{Int64},\
    \ i1::Int64)\n      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{Int64},\
    \ doffs::Int64, src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n\
    \    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Int64}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] strange_sort_list(lst::Vector{Int64}) (repeats 2 times)\n      @ Main\
    \ /tmp/tmpgivhi4ls.jl:22\n   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpgivhi4ls.jl:29 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpgivhi4ls.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpgivhi4ls.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  ArgumentError: reducing over\
    \ an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    lst_1 = lst[1:2:end]\n\
    \    lst_2 = lst[2:2:end]\n    lst_2 = reverse(lst_2)\n    return [lst_1; lst_2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5gizpeoe.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp5gizpeoe.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 4, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gizpeoe.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gizpeoe.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5gizpeoe.jl:30\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 8, 6] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gizpeoe.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gizpeoe.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5gizpeoe.jl:31\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 4, 2] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gizpeoe.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gizpeoe.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5gizpeoe.jl:32\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 9, 7, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gizpeoe.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gizpeoe.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5gizpeoe.jl:35\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_4z86c9.jl:52\nin expression starting at\
    \ /tmp/tmpr_4z86c9.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipztis21.jl:1\nin expression starting at /tmp/tmpipztis21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    result = Vector{Int64}()\n    for i in 1:2:length(lst)\n\
    \        push!(result, lst_sorted[i])\n        if i + 1 <= length(lst)\n     \
    \       push!(result, lst_sorted_reversed[i])\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphgpmjkqj.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmphgpmjkqj.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 3, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgpmjkqj.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgpmjkqj.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphgpmjkqj.jl:35\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 7, 7, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgpmjkqj.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgpmjkqj.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphgpmjkqj.jl:36\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 3, 3, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgpmjkqj.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgpmjkqj.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphgpmjkqj.jl:37\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 6, 7, 8, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgpmjkqj.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgpmjkqj.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphgpmjkqj.jl:40\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    lst = sort(lst)\n    res = zeros(Int64,\
    \ length(lst))\n    res[1] = lst[1]\n    res[end] = lst[end]\n    for i in 2:length(lst)\xF7\
    2\n        res[i] = lst[end-i+1]\n        res[end-i+1] = lst[i]\n    end\n   \
    \ return res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu9rsb8dr.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpu9rsb8dr.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 2, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9rsb8dr.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9rsb8dr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpu9rsb8dr.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 0, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9rsb8dr.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9rsb8dr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpu9rsb8dr.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 0, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9rsb8dr.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9rsb8dr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpu9rsb8dr.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 7, 6, 5, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9rsb8dr.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9rsb8dr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpu9rsb8dr.jl:39\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    lst_sorted = sort(lst)\n    lst_sorted_rev = sort(lst, rev=true)\n    lst_strange\
    \ = []\n    for i in 1:length(lst)\n        if i % 2 == 1\n            push!(lst_strange,\
    \ lst_sorted[i])\n        else\n            push!(lst_strange, lst_sorted_rev[i])\n\
    \        end\n    end\n    return lst_strange\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc9hy3gcw.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpc9hy3gcw.jl:41\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc9hy3gcw.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc9hy3gcw.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpc9hy3gcw.jl:42\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc9hy3gcw.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc9hy3gcw.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpc9hy3gcw.jl:43\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc9hy3gcw.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc9hy3gcw.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpc9hy3gcw.jl:44\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc9hy3gcw.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc9hy3gcw.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpc9hy3gcw.jl:47\n  Expression: ca"
- exit_code: 0
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    result = [lst[1]]\n\
    \    lst = lst[2:end]\n    while length(lst) > 0\n        result = [result; lst[end]]\n\
    \        lst = lst[1:end-1]\n        if length(lst) > 0\n            result =\
    \ [result; lst[1]]\n            lst = lst[2:end]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given vector of integers, return vector in strange order.\n\
    \    Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    lst_sorted_reversed_sorted = sort(lst_sorted_reversed)\n\
    \    lst_sorted_reversed_sorted_reversed = reverse(lst_sorted_reversed_sorted)\n\
    \    lst_sorted_reversed_sorted_reversed_sorted = sort(lst_sorted_reversed_sorted_reversed)\n\
    \    lst_sorted_reversed_sorted_reversed_sorted_reversed = reverse(lst_sorted_reversed_sorted_reversed_sorted)\n\
    \    lst_sorted_reversed_sorted_reversed_sorted_reversed_sorted = sort(lst_sorted_reversed_sorted_reversed_sorted_reversed)\n\
    \    lst_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed = reverse(lst_sorted_reversed_sorted_reversed_sorted_reversed_sorted)\n\
    \    lst_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(lst_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed)\n\
    \    lst_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = reverse(lst_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted)\n\
    \    lst_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(lst_sorted\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpay4bhuq4.jl:29\nin expression starting at\
    \ /tmp/tmpay4bhuq4.jl:29\n"
  stdout: ''
