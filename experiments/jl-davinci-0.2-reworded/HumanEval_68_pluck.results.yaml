language: jl
name: HumanEval_68_pluck
results:
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    min_even = minimum(filter(x\
    \ -> x % 2 == 0, arr))\n    return [min_even, findfirst(arr, min_even)]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp68b5xatt.jl:46\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp68b5xatt.jl:39\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp68b5xatt.jl:46 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp68b5xatt.jl:45\ntest set: Error During Test at
    /tmp/tmp68b5xatt.jl:47\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp68b5xatt.jl:39\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp68b5xatt.jl:47 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp68b5xatt.jl:45\ntest set: Error During Test at
    /tmp/tmp68b5xatt.jl:49\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpyjg7ahhk.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpyjg7ahhk.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpyjg7ahhk.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpyjg7ahhk.jl:50\ntest set: Error During Test at
    /tmp/tmpyjg7ahhk.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpyjg7ahhk.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpyjg7ahhk.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpyjg7ahhk.jl:50\ntest set: Error During Test at
    /tmp/tmpyjg7ahhk.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    min_even = minimum(filter(x\
    \ -> x % 2 == 0, arr))\n    return [min_even, findfirst(arr, min_even)]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpn3fehqzl.jl:46\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpn3fehqzl.jl:39\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpn3fehqzl.jl:46 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpn3fehqzl.jl:45\ntest set: Error During Test at
    /tmp/tmpn3fehqzl.jl:47\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpn3fehqzl.jl:39\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpn3fehqzl.jl:47 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpn3fehqzl.jl:45\ntest set: Error During Test at
    /tmp/tmpn3fehqzl.jl:49\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = [x for x\
    \ in arr if x % 2 == 0]\n    if isempty(even_nodes)\n        return []\n    end\n\
    \    min_even = minimum(even_nodes)\n    min_even_idx = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpzgdlccvy.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpzgdlccvy.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpzgdlccvy.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpzgdlccvy.jl:50\ntest set: Error During Test at
    /tmp/tmpzgdlccvy.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpzgdlccvy.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpzgdlccvy.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpzgdlccvy.jl:50\ntest set: Error During Test at
    /tmp/tmpzgdlccvy.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpeti7aw7u.jl:42\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: Cannot
    `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpeti7aw7u.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpeti7aw7u.jl:41\ntest set: Error During Test at
    /tmp/tmpeti7aw7u.jl:43\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: Cannot `convert` an object of type Nothing to an
    object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = [x for x in\
    \ arr if x % 2 == 0]\n    if isempty(even_arr)\n        return []\n    end\n \
    \   min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpksziikfh.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpksziikfh.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpksziikfh.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpksziikfh.jl:50\ntest set: Error During Test at
    /tmp/tmpksziikfh.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpksziikfh.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpksziikfh.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpksziikfh.jl:50\ntest set: Error During Test at
    /tmp/tmpksziikfh.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp4kw2b1g.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpp4kw2b1g.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpp4kw2b1g.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpp4kw2b1g.jl:50\ntest set: Error During Test at
    /tmp/tmpp4kw2b1g.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpp4kw2b1g.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpp4kw2b1g.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpp4kw2b1g.jl:50\ntest set: Error During Test at
    /tmp/tmpp4kw2b1g.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = [x for x in\
    \ arr if x % 2 == 0]\n    if isempty(even_arr)\n        return []\n    end\n \
    \   min_even = minimum(even_arr)\n    min_even_idx = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpm9p57qr0.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpm9p57qr0.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpm9p57qr0.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpm9p57qr0.jl:50\ntest set: Error During Test at
    /tmp/tmpm9p57qr0.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpm9p57qr0.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpm9p57qr0.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpm9p57qr0.jl:50\ntest set: Error During Test at
    /tmp/tmpm9p57qr0.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    evens = filter(x\
    \ -> x % 2 == 0, arr)\n    if length(evens) == 0\n        return []\n    end\n\
    \    min_even = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpx9srxoqs.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpx9srxoqs.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpx9srxoqs.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpx9srxoqs.jl:50\ntest set: Error During Test at
    /tmp/tmpx9srxoqs.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpx9srxoqs.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpx9srxoqs.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpx9srxoqs.jl:50\ntest set: Error During Test at
    /tmp/tmpx9srxoqs.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code goes here\n    if length(arr) == 0\n        return []\n  \
    \  end\n    evens = [x for x in arr if x % 2 == 0]\n    if length(evens) == 0\n\
    \        return []\n    end\n    evens_sorted = sort(evens)\n    evens_sorted_first\
    \ = evens_sorted[1]\n    evens_sorted_first_index = findfirst(arr, evens_sorted_first)\n\
    \    return [evens_sorted_first, evens_sorted_first_index]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp4u4bocjm.jl:53\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp4u4bocjm.jl:45\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp4u4bocjm.jl:53 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp4u4bocjm.jl:52\ntest set: Error During Test at
    /tmp/tmp4u4bocjm.jl:54\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp4u4bocjm.jl:45\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp4u4bocjm.jl:54 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp4u4bocjm.jl:52\ntest set: Error During Test at
    /tmp/tmp4u4bocjm.jl:56\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp2wncc_0_.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp2wncc_0_.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp2wncc_0_.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp2wncc_0_.jl:50\ntest set: Error During Test at
    /tmp/tmp2wncc_0_.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp2wncc_0_.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp2wncc_0_.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp2wncc_0_.jl:50\ntest set: Error During Test at
    /tmp/tmp2wncc_0_.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = []\n  \
    \  for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(even_values,\
    \ [arr[i], i])\n        end\n    end\n    if isempty(even_values)\n        return\
    \ []\n    end\n    return minimum(even_values)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt4xpl334.jl:51

    '
  stdout: "test set: Test Failed at /tmp/tmpt4xpl334.jl:54\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt4xpl334.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt4xpl334.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpt4xpl334.jl:55\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt4xpl334.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt4xpl334.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpt4xpl334.jl:57\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt4xpl334.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt4xpl334.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpt4xpl334.jl:58\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt4xpl334.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt4xpl334.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpt4xpl334.jl:59\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\n    return [0, 0]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpieo0gzes.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpieo0gzes.jl:43\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [0, 0] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpieo0gzes.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpieo0gzes.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpieo0gzes.jl:44\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [0, 0] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpieo0gzes.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpieo0gzes.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpieo0gzes.jl:45\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([])\n   Evaluated: [0, 0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpieo0gzes.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpieo0gzes.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpieo0gzes.jl:46\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 0] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpieo0gzes.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpieo0gzes.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpieo0gzes.jl:47\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 0] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \ "
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = [i for i in\
    \ arr if i % 2 == 0]\n    if isempty(even_arr)\n        return []\n    end\n \
    \   min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpq028z_2n.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpq028z_2n.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpq028z_2n.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpq028z_2n.jl:50\ntest set: Error During Test at
    /tmp/tmpq028z_2n.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpq028z_2n.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpq028z_2n.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpq028z_2n.jl:50\ntest set: Error During Test at
    /tmp/tmpq028z_2n.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = [node for\
    \ node in arr if node % 2 == 0]\n    if isempty(even_nodes)\n        return []\n\
    \    end\n    smallest_even_value = minimum(even_nodes)\n    smallest_even_index\
    \ = findfirst(arr, smallest_even_value)\n    return [smallest_even_value, smallest_even_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp1f7irdyc.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp1f7irdyc.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp1f7irdyc.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp1f7irdyc.jl:50\ntest set: Error During Test at
    /tmp/tmp1f7irdyc.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp1f7irdyc.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp1f7irdyc.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp1f7irdyc.jl:50\ntest set: Error During Test at
    /tmp/tmp1f7irdyc.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = [x for x in\
    \ arr if x % 2 == 0]\n    if isempty(even_arr)\n        return []\n    end\n \
    \   min_even = minimum(even_arr)\n    min_even_index = findall(arr .== min_even)[1]\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwojswxme.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpwojswxme.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwojswxme.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwojswxme.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpwojswxme.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwojswxme.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwojswxme.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpwojswxme.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwojswxme.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwojswxme.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpwojswxme.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwojswxme.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwojswxme.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpwojswxme.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = []\n    for i\
    \ in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(evens, [arr[i],\
    \ i])\n        end\n    end\n    if isempty(evens)\n        return []\n    end\n\
    \    return sort!(evens)[1]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfae2z0in.jl:51

    '
  stdout: "test set: Test Failed at /tmp/tmpfae2z0in.jl:54\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfae2z0in.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfae2z0in.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpfae2z0in.jl:55\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfae2z0in.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfae2z0in.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpfae2z0in.jl:57\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfae2z0in.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfae2z0in.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpfae2z0in.jl:58\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfae2z0in.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfae2z0in.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpfae2z0in.jl:59\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\n    return [0, 0]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaps2txaf.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpaps2txaf.jl:43\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [0, 0] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaps2txaf.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaps2txaf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaps2txaf.jl:44\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [0, 0] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaps2txaf.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaps2txaf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaps2txaf.jl:45\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([])\n   Evaluated: [0, 0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaps2txaf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaps2txaf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaps2txaf.jl:46\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 0] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaps2txaf.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaps2txaf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaps2txaf.jl:47\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 0] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \ "
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = filter(x ->\
    \ x % 2 == 0, arr)\n    if isempty(even_arr)\n        return []\n    end\n   \
    \ min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp8hp3zaru.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \"\"\"\n    Given a vector representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc76yzgju.jl:1\nin expression starting at /tmp/tmpc76yzgju.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    even_arr = [x for\
    \ x in arr if x % 2 == 0]\n    if length(even_arr) == 0\n        return []\n \
    \   end\n    min_even = minimum(even_arr)\n    min_even_index = findfirst(arr,\
    \ min_even)\n    return [min_even, min_even_index]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpqxrfr209.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpqxrfr209.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpqxrfr209.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpqxrfr209.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = arr[arr .%\
    \ 2 .== 0]\n    if isempty(even_arr)\n        return []\n    end\n    min_val\
    \ = minimum(even_arr)\n    min_idx = findfirst(arr .== min_val)\n    return [min_val,\
    \ min_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Test Failed at /tmp/tmpnlvfewiz.jl:51\n  Expression: candidate([4,
    2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpnlvfewiz.jl:51 [inlined]\n [3] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpnlvfewiz.jl:50\ntest set: Test Failed at /tmp/tmpnlvfewiz.jl:52\n  Expression:
    candidate([1, 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpnlvfewiz.jl:52 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpnlvfewiz.jl:50\ntest set: Test Failed
    at /tmp/tmpnlvfewiz.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2]) == [0,
    1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpnlvfewiz.jl:54 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpnlvfewiz.jl:50\ntest set: Test Failed
    at /tmp/tmpnlvfewiz.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3]) == [0,
    3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpnlvfewiz.jl:55 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpnlvfewiz.jl:50\ntest set: Test Failed
    at /tmp/tmpnlvfewiz.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) == [4, 1]\n   Evaluated:
    [4, 2] == [4,'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_idx = findall(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_idx)\n        return []\n    end\n\
    \    min_even = minimum(arr[even_idx])\n    min_even_idx = findfirst(arr .== min_even)\n\
    \    return [min_even, min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.\nin expression starting at /tmp/tmptoufbwk1.jl:48\n'''
  stdout: 'b''test set: Test Failed at /tmp/tmptoufbwk1.jl:51\n  Expression: candidate([4,
    2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmptoufbwk1.jl:51 [inlined]\n [3] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmptoufbwk1.jl:50\ntest set: Test Failed at /tmp/tmptoufbwk1.jl:52\n  Expression:
    candidate([1, 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmptoufbwk1.jl:52 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmptoufbwk1.jl:50\ntest set: Test Failed
    at /tmp/tmptoufbwk1.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2]) == [0,
    1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmptoufbwk1.jl:54 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmptoufbwk1.jl:50\ntest set: Test Failed
    at /tmp/tmptoufbwk1.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3]) == [0,
    3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmptoufbwk1.jl:55 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmptoufbwk1.jl:50\ntest set: Test Failed
    at /tmp/tmptoufbwk1.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) == [4, 1]\n   Evaluated:
    [4, 2] == [4,'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    min_even = minimum(filter(x\
    \ -> x % 2 == 0, arr))\n    return [min_even, findfirst(arr, min_even)]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpn3fehqzl.jl:46\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpn3fehqzl.jl:39\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpn3fehqzl.jl:46 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpn3fehqzl.jl:45\ntest set: Error During Test at
    /tmp/tmpn3fehqzl.jl:47\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpn3fehqzl.jl:39\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpn3fehqzl.jl:47 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpn3fehqzl.jl:45\ntest set: Error During Test at
    /tmp/tmpn3fehqzl.jl:49\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findall(arr .== min_even)[1]\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjhraij5k.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpjhraij5k.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjhraij5k.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjhraij5k.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpjhraij5k.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjhraij5k.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjhraij5k.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpjhraij5k.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjhraij5k.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjhraij5k.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpjhraij5k.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjhraij5k.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjhraij5k.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpjhraij5k.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    even_nums = []\n\
    \    for i in arr\n        if i % 2 == 0\n            push!(even_nums, i)\n  \
    \      end\n    end\n    if length(even_nums) == 0\n        return []\n    end\n\
    \    min_even = minimum(even_nums)\n    for i in 1:length(arr)\n        if arr[i]\
    \ == min_even\n            return [min_even, i]\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsca0h0dl.jl:56

    '
  stdout: "test set: Test Failed at /tmp/tmpsca0h0dl.jl:59\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsca0h0dl.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsca0h0dl.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpsca0h0dl.jl:60\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsca0h0dl.jl:60 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsca0h0dl.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpsca0h0dl.jl:62\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsca0h0dl.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsca0h0dl.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpsca0h0dl.jl:63\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsca0h0dl.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsca0h0dl.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpsca0h0dl.jl:64\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = []\n  \
    \  for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(even_values,\
    \ [arr[i], i])\n        end\n    end\n    if isempty(even_values)\n        return\
    \ []\n    end\n    even_values = sort(even_values, by = x -> x[1])\n    return\
    \ even_values[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpybnkh55n.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmpybnkh55n.jl:55\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybnkh55n.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybnkh55n.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpybnkh55n.jl:56\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpybnkh55n.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybnkh55n.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpybnkh55n.jl:58\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybnkh55n.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybnkh55n.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpybnkh55n.jl:59\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybnkh55n.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybnkh55n.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpybnkh55n.jl:60\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code goes here\n    if isempty(arr)\n        return []\n    end\n\
    \    even_values = []\n    for i in 1:length(arr)\n        if arr[i] % 2 == 0\n\
    \            push!(even_values, arr[i])\n        end\n    end\n    if isempty(even_values)\n\
    \        return []\n    end\n    min_value = minimum(even_values)\n    for i in\
    \ 1:length(arr)\n        if arr[i] == min_value\n            return [min_value,\
    \ i]\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpasu6xmbq.jl:57

    '
  stdout: "test set: Test Failed at /tmp/tmpasu6xmbq.jl:60\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpasu6xmbq.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpasu6xmbq.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpasu6xmbq.jl:61\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpasu6xmbq.jl:61 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpasu6xmbq.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpasu6xmbq.jl:63\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpasu6xmbq.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpasu6xmbq.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpasu6xmbq.jl:64\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpasu6xmbq.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpasu6xmbq.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpasu6xmbq.jl:65\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    evens = []\n    for\
    \ i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(evens, [arr[i],\
    \ i])\n        end\n    end\n    if length(evens) == 0\n        return []\n  \
    \  end\n    evens = sort(evens, by = x -> x[1])\n    return evens[1]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp59zf0qxc.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmp59zf0qxc.jl:55\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp59zf0qxc.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp59zf0qxc.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp59zf0qxc.jl:56\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp59zf0qxc.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp59zf0qxc.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp59zf0qxc.jl:58\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp59zf0qxc.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp59zf0qxc.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp59zf0qxc.jl:59\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp59zf0qxc.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp59zf0qxc.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp59zf0qxc.jl:60\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    even_arr = filter(x\
    \ -> x % 2 == 0, arr)\n    if length(even_arr) == 0\n        return []\n    end\n\
    \    min_even = minimum(even_arr)\n    min_even_index = findall(arr .== min_even)[1]\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpleow_yyy.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpleow_yyy.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpleow_yyy.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpleow_yyy.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpleow_yyy.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpleow_yyy.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpleow_yyy.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpleow_yyy.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpleow_yyy.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpleow_yyy.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpleow_yyy.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpleow_yyy.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpleow_yyy.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpleow_yyy.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpeti7aw7u.jl:42\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: Cannot
    `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpeti7aw7u.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpeti7aw7u.jl:41\ntest set: Error During Test at
    /tmp/tmpeti7aw7u.jl:43\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: Cannot `convert` an object of type Nothing to an
    object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if isempty(evens)\n        return []\n    end\n    evens_sorted\
    \ = sort(evens)\n    even_min = evens_sorted[1]\n    even_min_index = findall(arr\
    \ .== even_min)[1]\n    return [even_min, even_min_index]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3rbd3iz2.jl:49

    '
  stdout: "test set: Test Failed at /tmp/tmp3rbd3iz2.jl:52\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rbd3iz2.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rbd3iz2.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp3rbd3iz2.jl:53\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3rbd3iz2.jl:53 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rbd3iz2.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp3rbd3iz2.jl:55\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rbd3iz2.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rbd3iz2.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp3rbd3iz2.jl:56\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rbd3iz2.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rbd3iz2.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp3rbd3iz2.jl:57\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nums = []\n    even_nums_idx\
    \ = []\n    for (i, num) in enumerate(arr)\n        if num % 2 == 0\n        \
    \    push!(even_nums, num)\n            push!(even_nums_idx, i)\n        end\n\
    \    end\n    if isempty(even_nums)\n        return []\n    end\n    min_even_num\
    \ = minimum(even_nums)\n    min_even_num_idx = findall(even_nums .== min_even_num)[1]\n\
    \    return [min_even_num, even_nums_idx[min_even_num_idx]]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp96vojndr.jl:55

    '
  stdout: "test set: Test Failed at /tmp/tmp96vojndr.jl:58\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp96vojndr.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp96vojndr.jl:57\ntest set: Test\
    \ Failed at /tmp/tmp96vojndr.jl:59\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp96vojndr.jl:59 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp96vojndr.jl:57\ntest set: Test\
    \ Failed at /tmp/tmp96vojndr.jl:61\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp96vojndr.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp96vojndr.jl:57\ntest set: Test\
    \ Failed at /tmp/tmp96vojndr.jl:62\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp96vojndr.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp96vojndr.jl:57\ntest set: Test\
    \ Failed at /tmp/tmp96vojndr.jl:63\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\n    return [0, 0]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaps2txaf.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpaps2txaf.jl:43\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [0, 0] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaps2txaf.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaps2txaf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaps2txaf.jl:44\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [0, 0] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaps2txaf.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaps2txaf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaps2txaf.jl:45\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([])\n   Evaluated: [0, 0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaps2txaf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaps2txaf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaps2txaf.jl:46\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 0] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaps2txaf.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaps2txaf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaps2txaf.jl:47\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 0] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \ "
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp1ty_tsza.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp1ty_tsza.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp1ty_tsza.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp1ty_tsza.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # check if the array is empty\n    if isempty(arr)\n        return []\n\
    \    end\n    \n    # find the smallest even number\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if isempty(evens)\n        return []\n    end\n    smallest_even\
    \ = minimum(evens)\n    \n    # find the index of the smallest even number\n \
    \   smallest_even_index = findfirst(arr, smallest_even)\n    \n    return [smallest_even,\
    \ smallest_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpj3u7h61v.jl:57\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpj3u7h61v.jl:48\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpj3u7h61v.jl:57 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpj3u7h61v.jl:56\n'''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = []\n    for i\
    \ in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(evens, [arr[i],\
    \ i])\n        end\n    end\n    if isempty(evens)\n        return []\n    end\n\
    \    evens = sort(evens, by = x -> x[1])\n    return evens[1]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv7ao86eo.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmpv7ao86eo.jl:55\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv7ao86eo.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7ao86eo.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpv7ao86eo.jl:56\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv7ao86eo.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7ao86eo.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpv7ao86eo.jl:58\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv7ao86eo.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7ao86eo.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpv7ao86eo.jl:59\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv7ao86eo.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7ao86eo.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpv7ao86eo.jl:60\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = []\n  \
    \  for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(even_values,\
    \ [arr[i], i])\n        end\n    end\n    if isempty(even_values)\n        return\
    \ []\n    end\n    sort!(even_values, by = x -> x[1])\n    return even_values[1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnfbht1c1.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmpnfbht1c1.jl:55\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnfbht1c1.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnfbht1c1.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpnfbht1c1.jl:56\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnfbht1c1.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnfbht1c1.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpnfbht1c1.jl:58\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnfbht1c1.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnfbht1c1.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpnfbht1c1.jl:59\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnfbht1c1.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnfbht1c1.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpnfbht1c1.jl:60\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    even_arr = filter(x\
    \ -> x % 2 == 0, arr)\n    if length(even_arr) == 0\n        return []\n    end\n\
    \    even_arr = sort(even_arr)\n    even_arr[1]\n    return [even_arr[1], findfirst(arr,\
    \ even_arr[1])]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp3dlpzelb.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp3dlpzelb.jl:44\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp3dlpzelb.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp3dlpzelb.jl:50\n'''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code goes here\n    return []\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7uchqsbx.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp7uchqsbx.jl:43\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: Int64[] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uchqsbx.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uchqsbx.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7uchqsbx.jl:44\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: Int64[] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7uchqsbx.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uchqsbx.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7uchqsbx.jl:46\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: Int64[] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uchqsbx.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uchqsbx.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7uchqsbx.jl:47\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: Int64[] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uchqsbx.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uchqsbx.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7uchqsbx.jl:48\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: Int64[] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shar"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    evens = [i for i in arr if i % 2 == 0]\n    if isempty(evens)\n      \
    \  return []\n    else\n        return [minimum(evens), findfirst(arr, minimum(evens))]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp7b0m_clg.jl:47\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp7b0m_clg.jl:39\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp7b0m_clg.jl:47 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp7b0m_clg.jl:46\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = filter(x ->\
    \ x % 2 == 0, arr)\n    if isempty(even_arr)\n        return []\n    end\n   \
    \ min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp8hp3zaru.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # if the array is empty, return an empty array\n    if isempty(arr)\n\
    \        return []\n    end\n    \n    # find the smallest even value\n    smallest_even\
    \ = minimum(filter(x -> x % 2 == 0, arr))\n    \n    # find the index of the smallest\
    \ even value\n    index = findfirst(arr, smallest_even)\n    \n    # return the\
    \ smallest even value and its index\n    return [smallest_even, index]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp59c2btrw.jl:54\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp59c2btrw.jl:44\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp59c2btrw.jl:54 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp59c2btrw.jl:53\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_nodes)\n        return []\n    end\n\
    \    even_nodes = sort(even_nodes)\n    even_nodes[1]\n    return [even_nodes[1],\
    \ findfirst(arr, even_nodes[1])]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpj6f_8lat.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpj6f_8lat.jl:44\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpj6f_8lat.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpj6f_8lat.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_idx = findfirst(arr, min_even)\n    return [min_even,\
    \ min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp2bjff0p.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpp2bjff0p.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpp2bjff0p.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpp2bjff0p.jl:50\ntest set: Error During Test at
    /tmp/tmpp2bjff0p.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpp2bjff0p.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpp2bjff0p.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpp2bjff0p.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_idx = findfirst(arr, min_even)\n    return [min_even,\
    \ min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp2bjff0p.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpp2bjff0p.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpp2bjff0p.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpp2bjff0p.jl:50\ntest set: Error During Test at
    /tmp/tmpp2bjff0p.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpp2bjff0p.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpp2bjff0p.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpp2bjff0p.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = arr[arr .%\
    \ 2 .== 0]\n    if isempty(even_arr)\n        return []\n    end\n    min_even\
    \ = minimum(even_arr)\n    return [min_even, findfirst(arr, min_even)[1]]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = []\n  \
    \  for (i, value) in enumerate(arr)\n        if value % 2 == 0\n            push!(even_values,\
    \ [value, i])\n        end\n    end\n    if isempty(even_values)\n        return\
    \ []\n    end\n    even_values = sort(even_values, by = x -> x[1])\n    return\
    \ even_values[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6fq9xqz3.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmp6fq9xqz3.jl:55\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6fq9xqz3.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6fq9xqz3.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp6fq9xqz3.jl:56\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6fq9xqz3.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6fq9xqz3.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp6fq9xqz3.jl:58\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6fq9xqz3.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6fq9xqz3.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp6fq9xqz3.jl:59\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6fq9xqz3.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6fq9xqz3.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp6fq9xqz3.jl:60\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\n    return [0, 0]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaps2txaf.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpaps2txaf.jl:43\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [0, 0] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaps2txaf.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaps2txaf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaps2txaf.jl:44\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [0, 0] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaps2txaf.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaps2txaf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaps2txaf.jl:45\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([])\n   Evaluated: [0, 0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaps2txaf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaps2txaf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaps2txaf.jl:46\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 0] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaps2txaf.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaps2txaf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaps2txaf.jl:47\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 0] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \ "
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # if the vector is empty, return an empty vector\n    if isempty(arr)\n\
    \        return []\n    end\n    # find the first even value\n    even_value =\
    \ findfirst(arr .% 2 .== 0)\n    # if there are no even values, return an empty\
    \ vector\n    if isnothing(even_value)\n        return []\n    end\n    # find\
    \ the smallest even value\n    smallest_even_value = minimum(arr[arr .% 2 .==\
    \ 0])\n    # find the index of the smallest even value\n    smallest_even_value_index\
    \ = findfirst(arr .== smallest_even_value)\n    # return the smallest even value\
    \ and its index\n    return [smallest_even_value, smallest_even_value_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.\nin expression starting at /tmp/tmpokylzt4u.jl:54\n'''
  stdout: 'b''test set: Test Failed at /tmp/tmpokylzt4u.jl:57\n  Expression: candidate([4,
    2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpokylzt4u.jl:57 [inlined]\n [3] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpokylzt4u.jl:56\ntest set: Test Failed at /tmp/tmpokylzt4u.jl:58\n  Expression:
    candidate([1, 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpokylzt4u.jl:58 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpokylzt4u.jl:56\ntest set: Test Failed
    at /tmp/tmpokylzt4u.jl:60\n  Expression: candidate([5, 0, 3, 0, 4, 2]) == [0,
    1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpokylzt4u.jl:60 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpokylzt4u.jl:56\ntest set: Test Failed
    at /tmp/tmpokylzt4u.jl:61\n  Expression: candidate([1, 2, 3, 0, 5, 3]) == [0,
    3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpokylzt4u.jl:61 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpokylzt4u.jl:56\ntest set: Test Failed
    at /tmp/tmpokylzt4u.jl:62\n  Expression: candidate([5, 4, 8, 4, 8]) == [4, 1]\n   Evaluated:
    [4, 2] == [4,'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findall(arr .== min_even)[1]\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp89wdiwh6.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmp89wdiwh6.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp89wdiwh6.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp89wdiwh6.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp89wdiwh6.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp89wdiwh6.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp89wdiwh6.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp89wdiwh6.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp89wdiwh6.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp89wdiwh6.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp89wdiwh6.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp89wdiwh6.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp89wdiwh6.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp89wdiwh6.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    smallest_even\
    \ = minimum(evens)\n    smallest_even_index = findfirst(arr, smallest_even)\n\
    \    return [smallest_even, smallest_even_index]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp7wzbrdk8.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp7wzbrdk8.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp7wzbrdk8.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp7wzbrdk8.jl:50\ntest set: Error During Test at
    /tmp/tmp7wzbrdk8.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp7wzbrdk8.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp7wzbrdk8.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp7wzbrdk8.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpeti7aw7u.jl:42\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: Cannot
    `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpeti7aw7u.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpeti7aw7u.jl:41\ntest set: Error During Test at
    /tmp/tmpeti7aw7u.jl:43\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: Cannot `convert` an object of type Nothing to an
    object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = filter(x ->\
    \ x % 2 == 0, arr)\n    if isempty(even_arr)\n        return []\n    end\n   \
    \ min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp8hp3zaru.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = []\n  \
    \  for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(even_values,\
    \ arr[i])\n        end\n    end\n    if isempty(even_values)\n        return []\n\
    \    end\n    min_value = minimum(even_values)\n    for i in 1:length(arr)\n \
    \       if arr[i] == min_value\n            return [min_value, i]\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg92t3ala.jl:56

    '
  stdout: "test set: Test Failed at /tmp/tmpg92t3ala.jl:59\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg92t3ala.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg92t3ala.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpg92t3ala.jl:60\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpg92t3ala.jl:60 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg92t3ala.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpg92t3ala.jl:62\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg92t3ala.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg92t3ala.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpg92t3ala.jl:63\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg92t3ala.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg92t3ala.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpg92t3ala.jl:64\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\n    return [0, 0]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaps2txaf.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpaps2txaf.jl:43\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [0, 0] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaps2txaf.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaps2txaf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaps2txaf.jl:44\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [0, 0] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaps2txaf.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaps2txaf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaps2txaf.jl:45\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([])\n   Evaluated: [0, 0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaps2txaf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaps2txaf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaps2txaf.jl:46\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 0] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaps2txaf.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaps2txaf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaps2txaf.jl:47\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 0] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \ "
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    smallest_even\
    \ = minimum(evens)\n    smallest_even_index = findfirst(arr, smallest_even)\n\
    \    return [smallest_even, smallest_even_index]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp7wzbrdk8.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp7wzbrdk8.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp7wzbrdk8.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp7wzbrdk8.jl:50\ntest set: Error During Test at
    /tmp/tmp7wzbrdk8.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp7wzbrdk8.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp7wzbrdk8.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp7wzbrdk8.jl:50\n'''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    even_nodes = []\n\
    \    for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(even_nodes,\
    \ [arr[i], i])\n        end\n    end\n    if length(even_nodes) == 0\n       \
    \ return []\n    end\n    even_nodes = sort(even_nodes, by = x -> x[1])\n    return\
    \ even_nodes[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmyjeucgc.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmpmyjeucgc.jl:55\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmyjeucgc.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmyjeucgc.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpmyjeucgc.jl:56\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmyjeucgc.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmyjeucgc.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpmyjeucgc.jl:58\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmyjeucgc.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmyjeucgc.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpmyjeucgc.jl:59\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmyjeucgc.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmyjeucgc.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpmyjeucgc.jl:60\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = filter(x ->\
    \ x % 2 == 0, arr)\n    if isempty(even_arr)\n        return []\n    end\n   \
    \ min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp8hp3zaru.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = filter(x ->\
    \ x % 2 == 0, arr)\n    if isempty(even_arr)\n        return []\n    end\n   \
    \ min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp8hp3zaru.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = [x for x in\
    \ arr if x % 2 == 0]\n    if isempty(even_arr)\n        return []\n    end\n \
    \   min_even = minimum(even_arr)\n    min_even_idx = findfirst(arr .== min_even)\n\
    \    return [min_even, min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptf5slypm.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmptf5slypm.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptf5slypm.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptf5slypm.jl:50\ntest set: Test\
    \ Failed at /tmp/tmptf5slypm.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptf5slypm.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptf5slypm.jl:50\ntest set: Test\
    \ Failed at /tmp/tmptf5slypm.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptf5slypm.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptf5slypm.jl:50\ntest set: Test\
    \ Failed at /tmp/tmptf5slypm.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptf5slypm.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptf5slypm.jl:50\ntest set: Test\
    \ Failed at /tmp/tmptf5slypm.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = [i for i in\
    \ arr if i % 2 == 0]\n    if isempty(even_arr)\n        return []\n    end\n \
    \   min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpq028z_2n.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpq028z_2n.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpq028z_2n.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpq028z_2n.jl:50\ntest set: Error During Test at
    /tmp/tmpq028z_2n.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpq028z_2n.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpq028z_2n.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpq028z_2n.jl:50\ntest set: Error During Test at
    /tmp/tmpq028z_2n.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = arr[arr .%\
    \ 2 .== 0]\n    if isempty(even_arr)\n        return []\n    end\n    min_even\
    \ = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_values)\n        return []\n    end\n\
    \    smallest_even_value = minimum(even_values)\n    smallest_even_value_index\
    \ = findfirst(arr, smallest_even_value)\n    return [smallest_even_value, smallest_even_value_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp1nwmdw2h.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp1nwmdw2h.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp1nwmdw2h.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp1nwmdw2h.jl:50\ntest set: Error During Test at
    /tmp/tmp1nwmdw2h.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp1nwmdw2h.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp1nwmdw2h.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp1nwmdw2h.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_values)\n        return []\n    end\n\
    \    min_even_value = minimum(even_values)\n    min_even_value_index = findfirst(arr,\
    \ min_even_value)\n    return [min_even_value, min_even_value_index]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp_q64zuwx.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp_q64zuwx.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp_q64zuwx.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp_q64zuwx.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_idx = findfirst(arr, min_even)\n    return [min_even,\
    \ min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp2bjff0p.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpp2bjff0p.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpp2bjff0p.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpp2bjff0p.jl:50\ntest set: Error During Test at
    /tmp/tmpp2bjff0p.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpp2bjff0p.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpp2bjff0p.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpp2bjff0p.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpeti7aw7u.jl:42\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: Cannot
    `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpeti7aw7u.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpeti7aw7u.jl:41\ntest set: Error During Test at
    /tmp/tmpeti7aw7u.jl:43\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: Cannot `convert` an object of type Nothing to an
    object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = [arr[i] for\
    \ i in 1:length(arr) if iseven(arr[i])]\n    if isempty(even_arr)\n        return\
    \ []\n    end\n    min_even = minimum(even_arr)\n    min_even_idx = findfirst(arr,\
    \ min_even)\n    return [min_even, min_even_idx]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpjdt264tx.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpjdt264tx.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpjdt264tx.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpjdt264tx.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    smallest\
    \ = minimum(evens)\n    return [smallest, findfirst(arr, smallest)]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpwulp8kbh.jl:50\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpwulp8kbh.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpwulp8kbh.jl:50 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpwulp8kbh.jl:49\n'''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = [value\
    \ for value in arr if value % 2 == 0]\n    if isempty(even_values)\n        return\
    \ []\n    end\n    smallest_even_value = minimum(even_values)\n    smallest_even_value_index\
    \ = findfirst(arr .== smallest_even_value)\n    return [smallest_even_value, smallest_even_value_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj4ofaigv.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpj4ofaigv.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4ofaigv.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4ofaigv.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpj4ofaigv.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj4ofaigv.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4ofaigv.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpj4ofaigv.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4ofaigv.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4ofaigv.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpj4ofaigv.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4ofaigv.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4ofaigv.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpj4ofaigv.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = []\n   \
    \ for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(even_nodes,\
    \ [arr[i], i])\n        end\n    end\n    if isempty(even_nodes)\n        return\
    \ []\n    end\n    return sort(even_nodes)[1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv3pplfe6.jl:51

    '
  stdout: "test set: Test Failed at /tmp/tmpv3pplfe6.jl:54\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv3pplfe6.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv3pplfe6.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpv3pplfe6.jl:55\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv3pplfe6.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv3pplfe6.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpv3pplfe6.jl:57\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv3pplfe6.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv3pplfe6.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpv3pplfe6.jl:58\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv3pplfe6.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv3pplfe6.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpv3pplfe6.jl:59\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_nodes)\n        return []\n    end\n\
    \    min_even_node = minimum(even_nodes)\n    return [min_even_node, findfirst(arr,\
    \ min_even_node)]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpq7ngn_32.jl:50\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpq7ngn_32.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpq7ngn_32.jl:50 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpq7ngn_32.jl:49\ntest set: Error During Test at
    /tmp/tmpq7ngn_32.jl:51\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpq7ngn_32.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpq7ngn_32.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpq7ngn_32.jl:49\n'''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\n    if length(arr) == 0\n        return []\n    end\n\
    \    if length(arr) == 1\n        if arr[1] % 2 == 0\n            return [arr[1],\
    \ 1]\n        else\n            return []\n        end\n    end\n    evens = []\n\
    \    for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(evens,\
    \ arr[i])\n        end\n    end\n    if length(evens) == 0\n        return []\n\
    \    end\n    min_even = minimum(evens)\n    for i in 1:length(arr)\n        if\
    \ arr[i] == min_even\n            return [min_even, i]\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5djh28ki.jl:64

    '
  stdout: "test set: Test Failed at /tmp/tmp5djh28ki.jl:67\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5djh28ki.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5djh28ki.jl:66\ntest set: Test\
    \ Failed at /tmp/tmp5djh28ki.jl:68\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5djh28ki.jl:68 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5djh28ki.jl:66\ntest set: Test\
    \ Failed at /tmp/tmp5djh28ki.jl:70\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5djh28ki.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5djh28ki.jl:66\ntest set: Test\
    \ Failed at /tmp/tmp5djh28ki.jl:71\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5djh28ki.jl:71 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5djh28ki.jl:66\ntest set: Test\
    \ Failed at /tmp/tmp5djh28ki.jl:72\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = []\n   \
    \ for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(even_nodes,\
    \ [arr[i], i])\n        end\n    end\n    if isempty(even_nodes)\n        return\
    \ []\n    end\n    return sort(even_nodes)[1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv3pplfe6.jl:51

    '
  stdout: "test set: Test Failed at /tmp/tmpv3pplfe6.jl:54\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv3pplfe6.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv3pplfe6.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpv3pplfe6.jl:55\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv3pplfe6.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv3pplfe6.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpv3pplfe6.jl:57\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv3pplfe6.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv3pplfe6.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpv3pplfe6.jl:58\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv3pplfe6.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv3pplfe6.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpv3pplfe6.jl:59\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    return [min_even, findfirst(arr, min_even)]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp2aponisn.jl:50\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp2aponisn.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp2aponisn.jl:50 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp2aponisn.jl:49\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    return [min_even, findfirst(arr, min_even)]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp2aponisn.jl:50\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp2aponisn.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp2aponisn.jl:50 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp2aponisn.jl:49\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = arr[arr .%\
    \ 2 .== 0]\n    if isempty(even_arr)\n        return []\n    end\n    min_even\
    \ = minimum(even_arr)\n    min_even_index = findall(arr .== min_even)[1]\n   \
    \ return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf8bj8iea.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpf8bj8iea.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf8bj8iea.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf8bj8iea.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpf8bj8iea.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf8bj8iea.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf8bj8iea.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpf8bj8iea.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf8bj8iea.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf8bj8iea.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpf8bj8iea.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf8bj8iea.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf8bj8iea.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpf8bj8iea.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpeti7aw7u.jl:42\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: Cannot
    `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpeti7aw7u.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpeti7aw7u.jl:41\ntest set: Error During Test at
    /tmp/tmpeti7aw7u.jl:43\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: Cannot `convert` an object of type Nothing to an
    object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_index = findfirst(arr, min_even)\n    return [min_even,\
    \ min_index]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpx2cbpal6.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpx2cbpal6.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpx2cbpal6.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpx2cbpal6.jl:50\ntest set: Error During Test at
    /tmp/tmpx2cbpal6.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpx2cbpal6.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpx2cbpal6.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpx2cbpal6.jl:50\n'''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = arr[arr .%\
    \ 2 .== 0]\n    if isempty(even_arr)\n        return []\n    end\n    min_even\
    \ = minimum(even_arr)\n    min_even_idx = findall(arr .== min_even)[1]\n    return\
    \ [min_even, min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw7zo3jmf.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpw7zo3jmf.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7zo3jmf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7zo3jmf.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpw7zo3jmf.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw7zo3jmf.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7zo3jmf.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpw7zo3jmf.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7zo3jmf.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7zo3jmf.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpw7zo3jmf.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7zo3jmf.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7zo3jmf.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpw7zo3jmf.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    return [min_even, findfirst(arr, min_even)]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpub6oeelj.jl:50\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpub6oeelj.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpub6oeelj.jl:50 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpub6oeelj.jl:49\ntest set: Error During Test at
    /tmp/tmpub6oeelj.jl:51\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpub6oeelj.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpub6oeelj.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpub6oeelj.jl:49\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # if the array is empty, return an empty array\n    if isempty(arr)\n\
    \        return []\n    end\n    \n    # find the smallest even value\n    smallest_even\
    \ = minimum(filter(x -> x % 2 == 0, arr))\n    \n    # find the index of the smallest\
    \ even value\n    index = findfirst(arr, smallest_even)\n    \n    # return the\
    \ smallest even value and its index\n    return [smallest_even, index]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp59c2btrw.jl:54\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp59c2btrw.jl:44\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp59c2btrw.jl:54 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp59c2btrw.jl:53\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = filter(x ->\
    \ x % 2 == 0, arr)\n    if isempty(even_arr)\n        return []\n    end\n   \
    \ min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp8hp3zaru.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_nodes)\n        return []\n    end\n\
    \    min_even_node = minimum(even_nodes)\n    min_even_node_index = findfirst(arr,\
    \ min_even_node)\n    return [min_even_node, min_even_node_index]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpsui907_t.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpsui907_t.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpsui907_t.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpsui907_t.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = filter(x ->\
    \ x % 2 == 0, arr)\n    if isempty(even_arr)\n        return []\n    end\n   \
    \ min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp8hp3zaru.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = []\n    for i\
    \ in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(evens, [arr[i],\
    \ i])\n        end\n    end\n    if isempty(evens)\n        return []\n    end\n\
    \    evens = sort(evens, by = x -> x[1])\n    return evens[1]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv7ao86eo.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmpv7ao86eo.jl:55\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv7ao86eo.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7ao86eo.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpv7ao86eo.jl:56\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv7ao86eo.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7ao86eo.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpv7ao86eo.jl:58\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv7ao86eo.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7ao86eo.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpv7ao86eo.jl:59\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv7ao86eo.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7ao86eo.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpv7ao86eo.jl:60\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = findall(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_nodes)\n        return []\n    end\n\
    \    min_even_node = minimum(even_nodes)\n    min_even_node_index = findfirst(arr\
    \ .== min_even_node)\n    return [min_even_node, min_even_node_index]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # check if the vector is empty\n    if isempty(arr)\n        return []\n\
    \    end\n    # get the even numbers\n    even_numbers = arr[arr .% 2 .== 0]\n\
    \    # check if there are no even numbers\n    if isempty(even_numbers)\n    \
    \    return []\n    end\n    # get the smallest even number\n    smallest_even_number\
    \ = minimum(even_numbers)\n    # get the index of the smallest even number\n \
    \   smallest_even_number_index = findfirst(arr, smallest_even_number)\n    # return\
    \ the smallest even number and its index\n    return [smallest_even_number, smallest_even_number_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at '''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    evens = filter(x\
    \ -> x % 2 == 0, arr)\n    if length(evens) == 0\n        return []\n    end\n\
    \    min_even = minimum(evens)\n    min_even_idx = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmppubmy424.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmppubmy424.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmppubmy424.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmppubmy424.jl:50\ntest set: Error During Test at
    /tmp/tmppubmy424.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmppubmy424.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmppubmy424.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmppubmy424.jl:50\n'''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = [i for i\
    \ in arr if i % 2 == 0]\n    if isempty(even_nodes)\n        return []\n    end\n\
    \    min_even = minimum(even_nodes)\n    min_even_index = findall(arr .== min_even)[1]\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb3s8qwlj.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpb3s8qwlj.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3s8qwlj.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3s8qwlj.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpb3s8qwlj.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb3s8qwlj.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3s8qwlj.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpb3s8qwlj.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3s8qwlj.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3s8qwlj.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpb3s8qwlj.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3s8qwlj.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3s8qwlj.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpb3s8qwlj.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = filter(x ->\
    \ x % 2 == 0, arr)\n    if isempty(even_arr)\n        return []\n    end\n   \
    \ min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp8hp3zaru.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    even_nums = filter(x\
    \ -> x % 2 == 0, arr)\n    if length(even_nums) == 0\n        return []\n    end\n\
    \    min_even = minimum(even_nums)\n    return [min_even, findfirst(arr, min_even)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpzl2odj6l.jl:50\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpzl2odj6l.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpzl2odj6l.jl:50 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpzl2odj6l.jl:49\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = [x for x in\
    \ arr if x % 2 == 0]\n    if isempty(even_arr)\n        return []\n    end\n \
    \   min_even = minimum(even_arr)\n    min_even_index = findall(arr .== min_even)[1]\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwojswxme.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpwojswxme.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwojswxme.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwojswxme.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpwojswxme.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwojswxme.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwojswxme.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpwojswxme.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwojswxme.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwojswxme.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpwojswxme.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwojswxme.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwojswxme.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpwojswxme.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    even_arr = [x for\
    \ x in arr if x % 2 == 0]\n    if length(even_arr) == 0\n        return []\n \
    \   end\n    min_even = minimum(even_arr)\n    min_even_index = findall(arr .==\
    \ min_even)[1]\n    return [min_even, min_even_index]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0zvbqy3h.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmp0zvbqy3h.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0zvbqy3h.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0zvbqy3h.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp0zvbqy3h.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0zvbqy3h.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0zvbqy3h.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp0zvbqy3h.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0zvbqy3h.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0zvbqy3h.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp0zvbqy3h.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0zvbqy3h.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0zvbqy3h.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp0zvbqy3h.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    return [min_even, findfirst(arr, min_even)]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpub6oeelj.jl:50\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpub6oeelj.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpub6oeelj.jl:50 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpub6oeelj.jl:49\ntest set: Error During Test at
    /tmp/tmpub6oeelj.jl:51\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpub6oeelj.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpub6oeelj.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpub6oeelj.jl:49\n'''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    evens = []\n    for\
    \ (i, v) in enumerate(arr)\n        if v % 2 == 0\n            push!(evens, [v,\
    \ i])\n        end\n    end\n    if length(evens) == 0\n        return []\n  \
    \  end\n    return sort!(evens)[1]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7uqsr4mv.jl:51

    '
  stdout: "test set: Test Failed at /tmp/tmp7uqsr4mv.jl:54\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uqsr4mv.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uqsr4mv.jl:53\ntest set: Test\
    \ Failed at /tmp/tmp7uqsr4mv.jl:55\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7uqsr4mv.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uqsr4mv.jl:53\ntest set: Test\
    \ Failed at /tmp/tmp7uqsr4mv.jl:57\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uqsr4mv.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uqsr4mv.jl:53\ntest set: Test\
    \ Failed at /tmp/tmp7uqsr4mv.jl:58\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uqsr4mv.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uqsr4mv.jl:53\ntest set: Test\
    \ Failed at /tmp/tmp7uqsr4mv.jl:59\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    min_even = minimum(filter(x\
    \ -> x % 2 == 0, arr))\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpkhlbjoxn.jl:47\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpkhlbjoxn.jl:39\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpkhlbjoxn.jl:47 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpkhlbjoxn.jl:46\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    evens = filter(x\
    \ -> x % 2 == 0, arr)\n    if length(evens) == 0\n        return []\n    end\n\
    \    min_even = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpx9srxoqs.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpx9srxoqs.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpx9srxoqs.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpx9srxoqs.jl:50\ntest set: Error During Test at
    /tmp/tmpx9srxoqs.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpx9srxoqs.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpx9srxoqs.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpx9srxoqs.jl:50\ntest set: Error During Test at
    /tmp/tmpx9srxoqs.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code goes here\n    return [0, 0]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbqayplf_.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpbqayplf_.jl:43\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [0, 0] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbqayplf_.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbqayplf_.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpbqayplf_.jl:44\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [0, 0] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbqayplf_.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbqayplf_.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpbqayplf_.jl:45\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([])\n   Evaluated: [0, 0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbqayplf_.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbqayplf_.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpbqayplf_.jl:46\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 0] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbqayplf_.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbqayplf_.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpbqayplf_.jl:47\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 0] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \ "
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\n    return []\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdyxfc5sx.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpdyxfc5sx.jl:43\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: Int64[] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdyxfc5sx.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyxfc5sx.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpdyxfc5sx.jl:44\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: Int64[] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdyxfc5sx.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyxfc5sx.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpdyxfc5sx.jl:46\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: Int64[] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdyxfc5sx.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyxfc5sx.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpdyxfc5sx.jl:47\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: Int64[] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdyxfc5sx.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyxfc5sx.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpdyxfc5sx.jl:48\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: Int64[] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shar"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = []\n  \
    \  for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(even_values,\
    \ [arr[i], i])\n        end\n    end\n    if isempty(even_values)\n        return\
    \ []\n    end\n    even_values = sort(even_values, by = x -> x[1])\n    return\
    \ even_values[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpybnkh55n.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmpybnkh55n.jl:55\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybnkh55n.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybnkh55n.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpybnkh55n.jl:56\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpybnkh55n.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybnkh55n.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpybnkh55n.jl:58\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybnkh55n.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybnkh55n.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpybnkh55n.jl:59\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybnkh55n.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybnkh55n.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpybnkh55n.jl:60\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    evens = []\n    for\
    \ i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(evens, arr[i])\n\
    \        end\n    end\n    if length(evens) == 0\n        return []\n    end\n\
    \    min_even = minimum(evens)\n    for i in 1:length(arr)\n        if arr[i]\
    \ == min_even\n            return [min_even, i]\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppuig_hre.jl:56

    '
  stdout: "test set: Test Failed at /tmp/tmppuig_hre.jl:59\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppuig_hre.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppuig_hre.jl:58\ntest set: Test\
    \ Failed at /tmp/tmppuig_hre.jl:60\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppuig_hre.jl:60 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppuig_hre.jl:58\ntest set: Test\
    \ Failed at /tmp/tmppuig_hre.jl:62\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppuig_hre.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppuig_hre.jl:58\ntest set: Test\
    \ Failed at /tmp/tmppuig_hre.jl:63\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppuig_hre.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppuig_hre.jl:58\ntest set: Test\
    \ Failed at /tmp/tmppuig_hre.jl:64\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    min_even = minimum(filter(x\
    \ -> x % 2 == 0, arr))\n    return [min_even, findfirst(arr, min_even)]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpn3fehqzl.jl:46\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpn3fehqzl.jl:39\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpn3fehqzl.jl:46 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpn3fehqzl.jl:45\ntest set: Error During Test at
    /tmp/tmpn3fehqzl.jl:47\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpn3fehqzl.jl:39\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpn3fehqzl.jl:47 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpn3fehqzl.jl:45\ntest set: Error During Test at
    /tmp/tmpn3fehqzl.jl:49\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = []\n    for\
    \ i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(even_arr,\
    \ [arr[i], i])\n        end\n    end\n    if isempty(even_arr)\n        return\
    \ []\n    end\n    even_arr = sort(even_arr, by = x -> x[1])\n    return even_arr[1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7nw40lpt.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmp7nw40lpt.jl:55\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7nw40lpt.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7nw40lpt.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp7nw40lpt.jl:56\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7nw40lpt.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7nw40lpt.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp7nw40lpt.jl:58\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7nw40lpt.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7nw40lpt.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp7nw40lpt.jl:59\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7nw40lpt.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7nw40lpt.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp7nw40lpt.jl:60\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    even_arr = arr[arr\
    \ .% 2 .== 0]\n    if length(even_arr) == 0\n        return []\n    end\n    min_even\
    \ = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_nodes)\n        return []\n    end\n\
    \    min_even_value = minimum(even_nodes)\n    min_even_index = findfirst(arr\
    \ .== min_even_value)\n    return [min_even_value, min_even_index]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuy9qeg0v.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpuy9qeg0v.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuy9qeg0v.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuy9qeg0v.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpuy9qeg0v.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuy9qeg0v.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuy9qeg0v.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpuy9qeg0v.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuy9qeg0v.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuy9qeg0v.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpuy9qeg0v.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuy9qeg0v.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuy9qeg0v.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpuy9qeg0v.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpeti7aw7u.jl:42\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: Cannot
    `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpeti7aw7u.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpeti7aw7u.jl:41\ntest set: Error During Test at
    /tmp/tmpeti7aw7u.jl:43\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: Cannot `convert` an object of type Nothing to an
    object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    evens = filter(x -> x % 2 == 0, arr)\n    if length(evens) == 0\n    \
    \    return []\n    end\n    min_even = minimum(evens)\n    min_even_idx = findfirst(arr,\
    \ min_even)\n    return [min_even, min_even_idx]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpyhzx1wjn.jl:48\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpyhzx1wjn.jl:40\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpyhzx1wjn.jl:48 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpyhzx1wjn.jl:47\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    min_even = minimum(filter(x\
    \ -> x % 2 == 0, arr))\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpfjgo1viw.jl:47\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpfjgo1viw.jl:39\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpfjgo1viw.jl:47 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpfjgo1viw.jl:46\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = filter(x ->\
    \ x % 2 == 0, arr)\n    if isempty(even_arr)\n        return []\n    end\n   \
    \ min_even = minimum(even_arr)\n    min_even_idx = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpku13gz1e.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpku13gz1e.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpku13gz1e.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpku13gz1e.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_nodes)\n        return []\n    end\n\
    \    min_even_value = minimum(even_nodes)\n    min_even_value_index = findfirst(arr,\
    \ min_even_value)\n    return [min_even_value, min_even_value_index]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvkca61a7.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpvkca61a7.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpvkca61a7.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpvkca61a7.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # If the array is empty, return an empty array\n    if isempty(arr)\n\
    \        return []\n    end\n    \n    # Find the smallest even value\n    smallest_even\
    \ = minimum(filter(x -> x % 2 == 0, arr))\n    \n    # Find the index of the smallest\
    \ even value\n    smallest_even_index = findfirst(arr, smallest_even)\n    \n\
    \    # Return the smallest even value and its index\n    return [smallest_even,\
    \ smallest_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpjv9alpni.jl:54\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpjv9alpni.jl:44\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpjv9alpni.jl:54 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpjv9alpni.jl:53\ntest set: Error During Test at
    /tmp/tmpjv9alpni.jl:55\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpjv9alpni.jl:44\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpjv9alpni.jl:55 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpjv9alpni.jl:53\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmptiehjup4.jl:42\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: Cannot
    `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmptiehjup4.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmptiehjup4.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmptiehjup4.jl:41\n'''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = []\n   \
    \ for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(even_nodes,\
    \ [arr[i], i])\n        end\n    end\n    if isempty(even_nodes)\n        return\
    \ []\n    end\n    return sort!(even_nodes)[1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy_ko24s6.jl:51

    '
  stdout: "test set: Test Failed at /tmp/tmpy_ko24s6.jl:54\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy_ko24s6.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy_ko24s6.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpy_ko24s6.jl:55\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy_ko24s6.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy_ko24s6.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpy_ko24s6.jl:57\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy_ko24s6.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy_ko24s6.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpy_ko24s6.jl:58\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy_ko24s6.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy_ko24s6.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpy_ko24s6.jl:59\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    evens = []\n    for\
    \ i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(evens, [arr[i],\
    \ i])\n        end\n    end\n    if length(evens) == 0\n        return []\n  \
    \  end\n    evens = sort(evens, by = x -> x[1])\n    return evens[1]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp59zf0qxc.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmp59zf0qxc.jl:55\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp59zf0qxc.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp59zf0qxc.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp59zf0qxc.jl:56\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp59zf0qxc.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp59zf0qxc.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp59zf0qxc.jl:58\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp59zf0qxc.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp59zf0qxc.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp59zf0qxc.jl:59\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp59zf0qxc.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp59zf0qxc.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp59zf0qxc.jl:60\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    even_arr = arr[arr\
    \ .% 2 .== 0]\n    if length(even_arr) == 0\n        return []\n    end\n    min_even\
    \ = minimum(even_arr)\n    min_even_index = findall(arr .== min_even)[1]\n   \
    \ return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbn4gu68c.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpbn4gu68c.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbn4gu68c.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbn4gu68c.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpbn4gu68c.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbn4gu68c.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbn4gu68c.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpbn4gu68c.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbn4gu68c.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbn4gu68c.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpbn4gu68c.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbn4gu68c.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbn4gu68c.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpbn4gu68c.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    even_nodes = [arr[i]\
    \ for i in 1:length(arr) if iseven(arr[i])]\n    if length(even_nodes) == 0\n\
    \        return []\n    end\n    min_even = minimum(even_nodes)\n    min_even_index\
    \ = findfirst(arr, min_even)\n    return [min_even, min_even_index]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp33gzf5ex.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp33gzf5ex.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp33gzf5ex.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp33gzf5ex.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # Check if the array is empty\n    if isempty(arr)\n        return []\n\
    \    end\n    \n    # Get the even numbers\n    evens = filter(x -> x % 2 == 0,\
    \ arr)\n    \n    # Check if there are even numbers\n    if isempty(evens)\n \
    \       return []\n    end\n    \n    # Get the smallest even number\n    smallest_even\
    \ = minimum(evens)\n    \n    # Get the index of the smallest even number\n  \
    \  smallest_even_index = findfirst(arr, smallest_even)\n    \n    # Return the\
    \ smallest even number and its index\n    return [smallest_even, smallest_even_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpr0ngvspv.jl:62\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpr0ngvspv.jl:52\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpr0ngvspv.jl:62 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpr0ngvspv.jl:61\ntest set: Error During Test at
    /tmp/tmpr0ngvspv.jl:63\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpr0ngvspv.jl:52\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpr0ngvspv.jl:63 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpr0ngvspv.jl:61\n'''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = arr[arr .%\
    \ 2 .== 0]\n    if isempty(even_arr)\n        return []\n    end\n    min_even\
    \ = minimum(even_arr)\n    min_even_index = findall(arr .== min_even)[1]\n   \
    \ return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf8bj8iea.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpf8bj8iea.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf8bj8iea.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf8bj8iea.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpf8bj8iea.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf8bj8iea.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf8bj8iea.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpf8bj8iea.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf8bj8iea.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf8bj8iea.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpf8bj8iea.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf8bj8iea.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf8bj8iea.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpf8bj8iea.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = []\n   \
    \ for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(even_nodes,\
    \ [arr[i], i])\n        end\n    end\n    if isempty(even_nodes)\n        return\
    \ []\n    end\n    even_nodes = sort(even_nodes, by = x -> x[1])\n    return even_nodes[1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdsoc0427.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmpdsoc0427.jl:55\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdsoc0427.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdsoc0427.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpdsoc0427.jl:56\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdsoc0427.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdsoc0427.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpdsoc0427.jl:58\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdsoc0427.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdsoc0427.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpdsoc0427.jl:59\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdsoc0427.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdsoc0427.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpdsoc0427.jl:60\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_values)\n        return []\n    end\n\
    \    min_even_value = minimum(even_values)\n    min_even_value_index = findfirst(arr,\
    \ min_even_value)\n    return [min_even_value, min_even_value_index]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp_q64zuwx.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp_q64zuwx.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp_q64zuwx.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp_q64zuwx.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code goes here\n    if length(arr) == 0\n        return []\n  \
    \  end\n    min_even = minimum(filter(x -> x % 2 == 0, arr))\n    min_even_index\
    \ = findall(arr .== min_even)[1]\n    return [min_even, min_even_index]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp8ltzokmq.jl:48\n  Expression: candidate([4,
    2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmp8ltzokmq.jl:48 [inlined]\n [3] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmp8ltzokmq.jl:47\ntest set: Test Failed at /tmp/tmp8ltzokmq.jl:49\n  Expression:
    candidate([1, 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ltzokmq.jl:49 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ltzokmq.jl:47\ntest set: Test Failed
    at /tmp/tmp8ltzokmq.jl:51\n  Expression: candidate([5, 0, 3, 0, 4, 2]) == [0,
    1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ltzokmq.jl:51 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ltzokmq.jl:47\ntest set: Test Failed
    at /tmp/tmp8ltzokmq.jl:52\n  Expression: candidate([1, 2, 3, 0, 5, 3]) == [0,
    3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ltzokmq.jl:52 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ltzokmq.jl:47\ntest set: Test Failed
    at /tmp/tmp8ltzokmq.jl:53\n  Expression: candidate([5, 4, 8, 4, 8]) == [4, 1]\n   Evaluated:
    [4, 2] == [4,'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = filter(x ->\
    \ x % 2 == 0, arr)\n    if isempty(even_arr)\n        return []\n    end\n   \
    \ min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp8hp3zaru.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = filter(x ->\
    \ x % 2 == 0, arr)\n    if isempty(even_arr)\n        return []\n    end\n   \
    \ min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp8hp3zaru.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = [arr[i]\
    \ for i in 1:length(arr) if iseven(arr[i])]\n    if isempty(even_values)\n   \
    \     return []\n    end\n    min_even_value = minimum(even_values)\n    min_even_value_index\
    \ = findfirst(arr, min_even_value)\n    return [min_even_value, min_even_value_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpowz67_32.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpowz67_32.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpowz67_32.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpowz67_32.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    min_even = minimum(filter(x\
    \ -> x % 2 == 0, arr))\n    return [min_even, findfirst(arr, min_even)]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpn3fehqzl.jl:46\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpn3fehqzl.jl:39\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpn3fehqzl.jl:46 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpn3fehqzl.jl:45\ntest set: Error During Test at
    /tmp/tmpn3fehqzl.jl:47\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpn3fehqzl.jl:39\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpn3fehqzl.jl:47 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpn3fehqzl.jl:45\ntest set: Error During Test at
    /tmp/tmpn3fehqzl.jl:49\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_values)\n        return []\n    end\n\
    \    min_even_value = minimum(even_values)\n    min_even_value_index = findfirst(arr,\
    \ min_even_value)\n    return [min_even_value, min_even_value_index]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp_q64zuwx.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp_q64zuwx.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp_q64zuwx.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp_q64zuwx.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_nodes)\n        return []\n    end\n\
    \    min_even_node = minimum(even_nodes)\n    min_even_node_index = findfirst(arr,\
    \ min_even_node)\n    return [min_even_node, min_even_node_index]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpsui907_t.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpsui907_t.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpsui907_t.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpsui907_t.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # check if the array is empty\n    if isempty(arr)\n        return []\n\
    \    end\n    \n    # find the smallest even value\n    min_even = minimum(filter(x\
    \ -> x % 2 == 0, arr))\n    \n    # find the index of the smallest even value\n\
    \    min_even_idx = findfirst(arr, min_even)\n    \n    # return the result\n\
    \    return [min_even, min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp93oems2k.jl:54\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp93oems2k.jl:44\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp93oems2k.jl:54 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp93oems2k.jl:53\ntest set: Error During Test at
    /tmp/tmp93oems2k.jl:55\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp93oems2k.jl:44\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp93oems2k.jl:55 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp93oems2k.jl:53\ntest set: Error During Test at
    /tmp/tmp93oems2k.jl:57\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_nodes)\n        return []\n    end\n\
    \    min_even_node = minimum(even_nodes)\n    return [min_even_node, findfirst(arr,\
    \ min_even_node)]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpq7ngn_32.jl:50\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpq7ngn_32.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpq7ngn_32.jl:50 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpq7ngn_32.jl:49\ntest set: Error During Test at
    /tmp/tmpq7ngn_32.jl:51\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpq7ngn_32.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpq7ngn_32.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpq7ngn_32.jl:49\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_values)\n        return []\n    end\n\
    \    min_even_value = minimum(even_values)\n    min_even_value_index = findfirst(arr,\
    \ min_even_value)\n    return [min_even_value, min_even_value_index]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp_q64zuwx.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp_q64zuwx.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp_q64zuwx.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp_q64zuwx.jl:50\n'''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = [x for x in\
    \ arr if x % 2 == 0]\n    if isempty(even_arr)\n        return []\n    end\n \
    \   min_even = minimum(even_arr)\n    min_even_index = findall(arr .== min_even)[1]\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwojswxme.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpwojswxme.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwojswxme.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwojswxme.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpwojswxme.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwojswxme.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwojswxme.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpwojswxme.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwojswxme.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwojswxme.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpwojswxme.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwojswxme.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwojswxme.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpwojswxme.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = []\n  \
    \  for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(even_values,\
    \ [arr[i], i])\n        end\n    end\n    if isempty(even_values)\n        return\
    \ []\n    end\n    return sort!(even_values)[1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcsiiwjh1.jl:51

    '
  stdout: "test set: Test Failed at /tmp/tmpcsiiwjh1.jl:54\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcsiiwjh1.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcsiiwjh1.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpcsiiwjh1.jl:55\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcsiiwjh1.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcsiiwjh1.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpcsiiwjh1.jl:57\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcsiiwjh1.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcsiiwjh1.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpcsiiwjh1.jl:58\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcsiiwjh1.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcsiiwjh1.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpcsiiwjh1.jl:59\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    smallest\
    \ = minimum(evens)\n    smallest_index = findfirst(arr, smallest)\n    return\
    \ [smallest, smallest_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpb4p6xvb5.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpb4p6xvb5.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpb4p6xvb5.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpb4p6xvb5.jl:50\ntest set: Error During Test at
    /tmp/tmpb4p6xvb5.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpb4p6xvb5.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpb4p6xvb5.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpb4p6xvb5.jl:50\ntest set: Error During Test at
    /tmp/tmpb4p6xvb5.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    evens = filter(x\
    \ -> x % 2 == 0, arr)\n    if length(evens) == 0\n        return []\n    end\n\
    \    min_even = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpx9srxoqs.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpx9srxoqs.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpx9srxoqs.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpx9srxoqs.jl:50\ntest set: Error During Test at
    /tmp/tmpx9srxoqs.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpx9srxoqs.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpx9srxoqs.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpx9srxoqs.jl:50\ntest set: Error During Test at
    /tmp/tmpx9srxoqs.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = arr[arr .%\
    \ 2 .== 0]\n    if isempty(even_arr)\n        return []\n    end\n    min_even\
    \ = minimum(even_arr)\n    min_even_index = findall(arr .== min_even)[1]\n   \
    \ return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf8bj8iea.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpf8bj8iea.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf8bj8iea.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf8bj8iea.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpf8bj8iea.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf8bj8iea.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf8bj8iea.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpf8bj8iea.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf8bj8iea.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf8bj8iea.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpf8bj8iea.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf8bj8iea.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf8bj8iea.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpf8bj8iea.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = [x for x in\
    \ arr if x % 2 == 0]\n    if isempty(even_arr)\n        return []\n    end\n \
    \   min_even = minimum(even_arr)\n    min_even_idx = findall(arr .== min_even)[1]\n\
    \    return [min_even, min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2lgknlpj.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmp2lgknlpj.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2lgknlpj.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2lgknlpj.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp2lgknlpj.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2lgknlpj.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2lgknlpj.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp2lgknlpj.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2lgknlpj.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2lgknlpj.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp2lgknlpj.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2lgknlpj.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2lgknlpj.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp2lgknlpj.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_idx = findfirst(arr, min_even)\n    return [min_even,\
    \ min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp2bjff0p.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpp2bjff0p.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpp2bjff0p.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpp2bjff0p.jl:50\ntest set: Error During Test at
    /tmp/tmpp2bjff0p.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpp2bjff0p.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpp2bjff0p.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpp2bjff0p.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = []\n  \
    \  for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(even_values,\
    \ [arr[i], i])\n        end\n    end\n    if isempty(even_values)\n        return\
    \ []\n    end\n    even_values = sort(even_values, by = x -> x[1])\n    return\
    \ even_values[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpybnkh55n.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmpybnkh55n.jl:55\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybnkh55n.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybnkh55n.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpybnkh55n.jl:56\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpybnkh55n.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybnkh55n.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpybnkh55n.jl:58\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybnkh55n.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybnkh55n.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpybnkh55n.jl:59\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybnkh55n.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybnkh55n.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpybnkh55n.jl:60\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_idx = findfirst(arr, min_even)\n    return [min_even,\
    \ min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp2bjff0p.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpp2bjff0p.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpp2bjff0p.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpp2bjff0p.jl:50\ntest set: Error During Test at
    /tmp/tmpp2bjff0p.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpp2bjff0p.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpp2bjff0p.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpp2bjff0p.jl:50\n'''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code goes here\n    return []\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7uchqsbx.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp7uchqsbx.jl:43\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: Int64[] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uchqsbx.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uchqsbx.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7uchqsbx.jl:44\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: Int64[] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7uchqsbx.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uchqsbx.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7uchqsbx.jl:46\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: Int64[] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uchqsbx.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uchqsbx.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7uchqsbx.jl:47\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: Int64[] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uchqsbx.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uchqsbx.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7uchqsbx.jl:48\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: Int64[] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shar"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # if the array is empty, return empty array\n    if length(arr) == 0\n\
    \        return []\n    end\n    \n    # find the smallest even value\n    smallest_even\
    \ = minimum(filter(x -> x % 2 == 0, arr))\n    \n    # find the index of the smallest\
    \ even value\n    smallest_even_index = findfirst(arr, smallest_even)\n    \n\
    \    # return the smallest even value and its index\n    return [smallest_even,\
    \ smallest_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp722xfq80.jl:54\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp722xfq80.jl:44\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp722xfq80.jl:54 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp722xfq80.jl:53\ntest set: Error During Test at
    /tmp/tmp722xfq80.jl:55\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp722xfq80.jl:44\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp722xfq80.jl:55 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp722xfq80.jl:53\ntest set: Error During Test at
    /tmp/tmp722xfq80.jl:57\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = [i for i in\
    \ arr if i % 2 == 0]\n    if isempty(even_arr)\n        return []\n    end\n \
    \   min_even = minimum(even_arr)\n    min_even_idx = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp2wg52wd9.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp2wg52wd9.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp2wg52wd9.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp2wg52wd9.jl:50\ntest set: Error During Test at
    /tmp/tmp2wg52wd9.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp2wg52wd9.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp2wg52wd9.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp2wg52wd9.jl:50\ntest set: Error During Test at
    /tmp/tmp2wg52wd9.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpeti7aw7u.jl:42\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: Cannot
    `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpeti7aw7u.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpeti7aw7u.jl:41\ntest set: Error During Test at
    /tmp/tmpeti7aw7u.jl:43\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: Cannot `convert` an object of type Nothing to an
    object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_nodes)\n        return []\n    end\n\
    \    min_even_node = minimum(even_nodes)\n    min_even_node_index = findfirst(arr\
    \ .== min_even_node)\n    return [min_even_node, min_even_node_index]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcvizhy7g.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpcvizhy7g.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcvizhy7g.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcvizhy7g.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpcvizhy7g.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcvizhy7g.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcvizhy7g.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpcvizhy7g.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcvizhy7g.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcvizhy7g.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpcvizhy7g.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcvizhy7g.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcvizhy7g.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpcvizhy7g.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = arr[arr .%\
    \ 2 .== 0]\n    if isempty(even_arr)\n        return []\n    end\n    min_even\
    \ = minimum(even_arr)\n    min_even_idx = findall(arr .== min_even)[1]\n    return\
    \ [min_even, min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw7zo3jmf.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpw7zo3jmf.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7zo3jmf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7zo3jmf.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpw7zo3jmf.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw7zo3jmf.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7zo3jmf.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpw7zo3jmf.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7zo3jmf.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7zo3jmf.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpw7zo3jmf.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7zo3jmf.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7zo3jmf.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpw7zo3jmf.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code goes here\n    return []\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7uchqsbx.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp7uchqsbx.jl:43\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: Int64[] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uchqsbx.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uchqsbx.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7uchqsbx.jl:44\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: Int64[] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7uchqsbx.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uchqsbx.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7uchqsbx.jl:46\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: Int64[] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uchqsbx.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uchqsbx.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7uchqsbx.jl:47\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: Int64[] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uchqsbx.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uchqsbx.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7uchqsbx.jl:48\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: Int64[] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shar"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_nodes)\n        return []\n    end\n\
    \    min_even_value = minimum(even_nodes)\n    min_even_index = findfirst(arr,\
    \ min_even_value)\n    return [min_even_value, min_even_index]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpoijfoptq.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpoijfoptq.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpoijfoptq.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpoijfoptq.jl:50\ntest set: Error During Test at
    /tmp/tmpoijfoptq.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpoijfoptq.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpoijfoptq.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpoijfoptq.jl:50\ntest set: Error During Test at
    /tmp/tmpoijfoptq.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = [x for\
    \ x in arr if x % 2 == 0]\n    if isempty(even_values)\n        return []\n  \
    \  end\n    min_even_value = minimum(even_values)\n    min_even_index = findfirst(arr,\
    \ min_even_value)\n    return [min_even_value, min_even_index]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpenyxjgu3.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpenyxjgu3.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpenyxjgu3.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpenyxjgu3.jl:50\ntest set: Error During Test at
    /tmp/tmpenyxjgu3.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpenyxjgu3.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpenyxjgu3.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpenyxjgu3.jl:50\ntest set: Error During Test at
    /tmp/tmpenyxjgu3.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    evens = filter(x\
    \ -> x % 2 == 0, arr)\n    if length(evens) == 0\n        return []\n    end\n\
    \    min_even = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpx9srxoqs.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpx9srxoqs.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpx9srxoqs.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpx9srxoqs.jl:50\ntest set: Error During Test at
    /tmp/tmpx9srxoqs.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpx9srxoqs.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpx9srxoqs.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpx9srxoqs.jl:50\ntest set: Error During Test at
    /tmp/tmpx9srxoqs.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = []\n  \
    \  even_indexes = []\n    for (index, value) in enumerate(arr)\n        if value\
    \ % 2 == 0\n            push!(even_values, value)\n            push!(even_indexes,\
    \ index)\n        end\n    end\n    if isempty(even_values)\n        return []\n\
    \    end\n    min_value = minimum(even_values)\n    min_index = even_indexes[findfirst(even_values,\
    \ min_value)]\n    return [min_value, min_index]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpcph8_37d.jl:58\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Any}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpcph8_37d.jl:50\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpcph8_37d.jl:58 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpcph8_37d.jl:57\ntest set: Error During Test at
    /tmp/tmpcph8_37d.jl:59\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Any}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpcph8_37d.jl:50\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpcph8_37d.jl:59 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpcph8_37d.jl:57\ntest set: Error During Test at
    /tmp/tmpcph8_37d.jl:61\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method matching '
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpeti7aw7u.jl:42\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: Cannot
    `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpeti7aw7u.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpeti7aw7u.jl:41\ntest set: Error During Test at
    /tmp/tmpeti7aw7u.jl:43\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: Cannot `convert` an object of type Nothing to an
    object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = [x for x in\
    \ arr if x % 2 == 0]\n    if isempty(even_arr)\n        return []\n    end\n \
    \   min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpksziikfh.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpksziikfh.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpksziikfh.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpksziikfh.jl:50\ntest set: Error During Test at
    /tmp/tmpksziikfh.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpksziikfh.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpksziikfh.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpksziikfh.jl:50\ntest set: Error During Test at
    /tmp/tmpksziikfh.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    evens = [x for x\
    \ in arr if x % 2 == 0]\n    if length(evens) == 0\n        return []\n    end\n\
    \    evens = sort(evens)\n    idx = findfirst(arr, evens[1])\n    return [evens[1],\
    \ idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp7zaibirf.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp7zaibirf.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp7zaibirf.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp7zaibirf.jl:50\ntest set: Error During Test at
    /tmp/tmp7zaibirf.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp7zaibirf.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp7zaibirf.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp7zaibirf.jl:50\ntest set: Error During Test at
    /tmp/tmp7zaibirf.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpeti7aw7u.jl:42\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: Cannot
    `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpeti7aw7u.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpeti7aw7u.jl:41\ntest set: Error During Test at
    /tmp/tmpeti7aw7u.jl:43\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: Cannot `convert` an object of type Nothing to an
    object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = []\n  \
    \  for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(even_values,\
    \ arr[i])\n        end\n    end\n    if isempty(even_values)\n        return []\n\
    \    end\n    min_value = minimum(even_values)\n    for i in 1:length(arr)\n \
    \       if arr[i] == min_value\n            return [min_value, i]\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg92t3ala.jl:56

    '
  stdout: "test set: Test Failed at /tmp/tmpg92t3ala.jl:59\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg92t3ala.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg92t3ala.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpg92t3ala.jl:60\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpg92t3ala.jl:60 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg92t3ala.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpg92t3ala.jl:62\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg92t3ala.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg92t3ala.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpg92t3ala.jl:63\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg92t3ala.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg92t3ala.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpg92t3ala.jl:64\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = [x for\
    \ x in arr if x % 2 == 0]\n    if isempty(even_values)\n        return []\n  \
    \  end\n    smallest_even_value = minimum(even_values)\n    smallest_even_value_index\
    \ = findfirst(arr, smallest_even_value)\n    return [smallest_even_value, smallest_even_value_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpj9clqcfm.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpj9clqcfm.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpj9clqcfm.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpj9clqcfm.jl:50\ntest set: Error During Test at
    /tmp/tmpj9clqcfm.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpj9clqcfm.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpj9clqcfm.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpj9clqcfm.jl:50\ntest set: Error During Test at
    /tmp/tmpj9clqcfm.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_nodes)\n        return []\n    end\n\
    \    min_even_value = minimum(even_nodes)\n    min_even_index = findfirst(arr,\
    \ min_even_value)\n    return [min_even_value, min_even_index]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpoijfoptq.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpoijfoptq.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpoijfoptq.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpoijfoptq.jl:50\ntest set: Error During Test at
    /tmp/tmpoijfoptq.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpoijfoptq.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpoijfoptq.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpoijfoptq.jl:50\ntest set: Error During Test at
    /tmp/tmpoijfoptq.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = [x for x in\
    \ arr if x % 2 == 0]\n    if isempty(even_arr)\n        return []\n    end\n \
    \   min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpksziikfh.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpksziikfh.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpksziikfh.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpksziikfh.jl:50\ntest set: Error During Test at
    /tmp/tmpksziikfh.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpksziikfh.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpksziikfh.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpksziikfh.jl:50\ntest set: Error During Test at
    /tmp/tmpksziikfh.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    evens = [x for x in arr if x % 2 == 0]\n    if length(evens) == 0\n  \
    \      return []\n    else\n        min_even = minimum(evens)\n        return\
    \ [min_even, findfirst(arr, min_even)]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpkufi8wpr.jl:48\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpkufi8wpr.jl:40\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpkufi8wpr.jl:48 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpkufi8wpr.jl:47\ntest set: Error During Test at
    /tmp/tmpkufi8wpr.jl:49\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpkufi8wpr.jl:40\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpkufi8wpr.jl:49 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpkufi8wpr.jl:47\ntest set: Error During Test at
    /tmp/tmpkufi8wpr.jl:51\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = filter(x ->\
    \ x % 2 == 0, arr)\n    if isempty(even_arr)\n        return []\n    end\n   \
    \ min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp8hp3zaru.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # if the array is empty return empty array\n    if isempty(arr)\n    \
    \    return []\n    end\n    # find the smallest even value\n    evens = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n   \
    \ min_even = minimum(evens)\n    # find the index of the smallest even value\n\
    \    index = findfirst(arr, min_even)\n    return [min_even, index]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpo4br0g8y.jl:54\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpo4br0g8y.jl:46\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpo4br0g8y.jl:54 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpo4br0g8y.jl:53\ntest set: Error During Test at
    /tmp/tmpo4br0g8y.jl:55\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpo4br0g8y.jl:46\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpo4br0g8y.jl:55 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpo4br0g8y.jl:53\ntest set: Error During Test at
    /tmp/tmpo4br0g8y.jl:57\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    even_arr = [i for\
    \ i in arr if i % 2 == 0]\n    if length(even_arr) == 0\n        return []\n \
    \   end\n    min_even = minimum(even_arr)\n    min_even_index = findfirst(arr,\
    \ min_even)\n    return [min_even, min_even_index]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpxtgjjip4.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpxtgjjip4.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpxtgjjip4.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpxtgjjip4.jl:50\ntest set: Error During Test at
    /tmp/tmpxtgjjip4.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpxtgjjip4.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpxtgjjip4.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpxtgjjip4.jl:50\ntest set: Error During Test at
    /tmp/tmpxtgjjip4.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    even_nodes = filter(x\
    \ -> x % 2 == 0, arr)\n    if length(even_nodes) == 0\n        return []\n   \
    \ end\n    min_even_node = minimum(even_nodes)\n    min_even_node_index = findfirst(arr,\
    \ min_even_node)\n    return [min_even_node, min_even_node_index]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp77b_zqlq.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp77b_zqlq.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp77b_zqlq.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp77b_zqlq.jl:50\ntest set: Error During Test at
    /tmp/tmp77b_zqlq.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp77b_zqlq.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp77b_zqlq.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp77b_zqlq.jl:50\ntest set: Error During Test at
    /tmp/tmp77b_zqlq.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    smallest_even\
    \ = minimum(evens)\n    smallest_even_index = findfirst(arr, smallest_even)\n\
    \    return [smallest_even, smallest_even_index]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp7wzbrdk8.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp7wzbrdk8.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp7wzbrdk8.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp7wzbrdk8.jl:50\ntest set: Error During Test at
    /tmp/tmp7wzbrdk8.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp7wzbrdk8.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp7wzbrdk8.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp7wzbrdk8.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = [x for x in\
    \ arr if x % 2 == 0]\n    if isempty(even_arr)\n        return []\n    end\n \
    \   min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpksziikfh.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpksziikfh.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpksziikfh.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpksziikfh.jl:50\ntest set: Error During Test at
    /tmp/tmpksziikfh.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpksziikfh.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpksziikfh.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpksziikfh.jl:50\ntest set: Error During Test at
    /tmp/tmpksziikfh.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = []\n   \
    \ for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(even_nodes,\
    \ [arr[i], i])\n        end\n    end\n    if isempty(even_nodes)\n        return\
    \ []\n    end\n    sort!(even_nodes, by = x -> x[1])\n    return even_nodes[1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpin4tdk9q.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmpin4tdk9q.jl:55\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpin4tdk9q.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpin4tdk9q.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpin4tdk9q.jl:56\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpin4tdk9q.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpin4tdk9q.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpin4tdk9q.jl:58\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpin4tdk9q.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpin4tdk9q.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpin4tdk9q.jl:59\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpin4tdk9q.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpin4tdk9q.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpin4tdk9q.jl:60\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = filter(x ->\
    \ x % 2 == 0, arr)\n    if isempty(even_arr)\n        return []\n    end\n   \
    \ min_even = minimum(even_arr)\n    min_even_index = findfirst(arr, min_even)\n\
    \    return [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp8hp3zaru.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8hp3zaru.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8hp3zaru.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8hp3zaru.jl:50\ntest set: Error During Test at
    /tmp/tmp8hp3zaru.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    # find the smallest\
    \ even value\n    evens = [x for x in arr if x % 2 == 0]\n    if length(evens)\
    \ == 0\n        return []\n    end\n    smallest_even = minimum(evens)\n    #\
    \ find the index of the smallest even value\n    smallest_even_index = findfirst(arr,\
    \ smallest_even)\n    return [smallest_even, smallest_even_index]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp431dj0np.jl:53\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp431dj0np.jl:45\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp431dj0np.jl:53 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp431dj0np.jl:52\ntest set: Error During Test at
    /tmp/tmp431dj0np.jl:54\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp431dj0np.jl:45\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp431dj0np.jl:54 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp431dj0np.jl:52\ntest set: Error During Test at
    /tmp/tmp431dj0np.jl:56\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_idx = findall(arr .== min_even)[1]\n    return\
    \ [min_even, min_even_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqpu_t_6o.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpqpu_t_6o.jl:51\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqpu_t_6o.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqpu_t_6o.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpqpu_t_6o.jl:52\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqpu_t_6o.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqpu_t_6o.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpqpu_t_6o.jl:54\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqpu_t_6o.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqpu_t_6o.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpqpu_t_6o.jl:55\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqpu_t_6o.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqpu_t_6o.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpqpu_t_6o.jl:56\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_arr = arr[arr .%\
    \ 2 .== 0]\n    if isempty(even_arr)\n        return []\n    end\n    min_even\
    \ = minimum(even_arr)\n    min_index = findfirst(arr, min_even)\n    return [min_even,\
    \ min_index]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp8fnq8fi8.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8fnq8fi8.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8fnq8fi8.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8fnq8fi8.jl:50\ntest set: Error During Test at
    /tmp/tmp8fnq8fi8.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp8fnq8fi8.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8fnq8fi8.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8fnq8fi8.jl:50\ntest set: Error During Test at
    /tmp/tmp8fnq8fi8.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # if the array is empty, return empty array\n    if isempty(arr)\n   \
    \     return []\n    end\n    \n    # find the smallest even value\n    evens\
    \ = [x for x in arr if x % 2 == 0]\n    if isempty(evens)\n        return []\n\
    \    end\n    smallest_even = minimum(evens)\n    \n    # find the index of the\
    \ smallest even value\n    index = findfirst(arr, smallest_even)\n    \n    #\
    \ return the smallest even value and its index\n    return [smallest_even, index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmprgcrrbv9.jl:55

    '
  stdout: "test set: Error During Test at /tmp/tmprgcrrbv9.jl:58\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method matching\
    \ findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n\
    \   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmprgcrrbv9.jl:48\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprgcrrbv9.jl:58 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprgcrrbv9.jl:57\ntest set:\
    \ Error During Test at /tmp/tmprgcrrbv9.jl:59\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n\
    \   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmprgcrrbv9.jl:48\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprgcrrbv9.jl:59 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprgcrrbv9.jl:57\ntest set:\
    \ Error During Test at /tmp/tmprgcrrbv9.jl:61\n  Test threw exception\n  Expression:\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n  MethodError: no method matching findfirst(::Vector{Int64},\
    \ ::Int64)\n  C"
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    evens = filter(x -> x\
    \ % 2 == 0, arr)\n    if isempty(evens)\n        return []\n    end\n    min_even\
    \ = minimum(evens)\n    min_even_index = findfirst(arr, min_even)\n    return\
    \ [min_even, min_even_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmdv009ej.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:52\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest
    candidates are:\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpmdv009ej.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmdv009ej.jl:52 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmdv009ej.jl:50\ntest set: Error During Test at
    /tmp/tmpmdv009ej.jl:54\n  Test threw exception\n  Expression: candidate([5, 0,
    3, 0, 4, 2]) == [0, 1]\n  MethodError: no method match'
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_values = filter(x\
    \ -> x % 2 == 0, arr)\n    if isempty(even_values)\n        return []\n    end\n\
    \    min_even_value = minimum(even_values)\n    min_even_value_index = findfirst(arr,\
    \ min_even_value)\n    return [min_even_value, min_even_value_index]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp_q64zuwx.jl:51\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)
    at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp_q64zuwx.jl:43\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp_q64zuwx.jl:51 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp_q64zuwx.jl:50\n'''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpeti7aw7u.jl:42\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: Cannot
    `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpeti7aw7u.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpeti7aw7u.jl:41\ntest set: Error During Test at
    /tmp/tmpeti7aw7u.jl:43\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: Cannot `convert` an object of type Nothing to an
    object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpeti7aw7u.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(arr)\n        return []\n    end\n    even_nodes = []\n   \
    \ for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            push!(even_nodes,\
    \ [arr[i], i])\n        end\n    end\n    if isempty(even_nodes)\n        return\
    \ []\n    end\n    even_nodes = sort(even_nodes, by = x -> x[1])\n    return even_nodes[1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdsoc0427.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmpdsoc0427.jl:55\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdsoc0427.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdsoc0427.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpdsoc0427.jl:56\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdsoc0427.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdsoc0427.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpdsoc0427.jl:58\n  Expression: candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdsoc0427.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdsoc0427.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpdsoc0427.jl:59\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 4] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdsoc0427.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdsoc0427.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpdsoc0427.jl:60\n  Expression: candidate([5, 4, 8, 4, 8]) ==\
    \ [4, 1]\n   Evaluated: [4, 2] == [4, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/ce"
