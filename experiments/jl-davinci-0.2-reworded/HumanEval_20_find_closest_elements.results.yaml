name: HumanEval_20_find_closest_elements
language: jl
results:
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"The vector must have\
    \ at least two elements\")\n    end\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff\n                min_diff = diff\n           \
    \     min_pair = (numbers[i], numbers[j])\n            end\n        end\n    end\n\
    \    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpa7259sh7.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7259sh7.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7259sh7.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa7259sh7.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    if length(numbers)\
    \ < 2\n        error(\"Vector must have at least two elements\")\n    end\n  \
    \  min_diff = abs(numbers[1] - numbers[2])\n    min_index = 1\n    for i in 2:length(numbers)-1\n\
    \        if abs(numbers[i] - numbers[i+1]) < min_diff\n            min_diff =\
    \ abs(numbers[i] - numbers[i+1])\n            min_index = i\n        end\n   \
    \ end\n    return (numbers[min_index], numbers[min_index+1])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg240euo1.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg240euo1.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg240euo1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpg240euo1.jl:31\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg240euo1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg240euo1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpg240euo1.jl:32\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg240euo1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg240euo1.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg240euo1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # Initialize the variables\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    # Loop through all the numbers\n\
    \    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n      \
    \      # If the difference is smaller than the current minimum, update the minimum\n\
    \            if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    # Return the minimum pair\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpc8atrqsc.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc8atrqsc.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc8atrqsc.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc8atrqsc.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_diff_index = 1\n    for i in 2:length(numbers)-1\n        if abs(numbers[i]\
    \ - numbers[i+1]) < min_diff\n            min_diff = abs(numbers[i] - numbers[i+1])\n\
    \            min_diff_index = i\n        end\n    end\n    if numbers[min_diff_index]\
    \ < numbers[min_diff_index+1]\n        return (numbers[min_diff_index], numbers[min_diff_index+1])\n\
    \    else\n        return (numbers[min_diff_index+1], numbers[min_diff_index])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp19uv9o13.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19uv9o13.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19uv9o13.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp19uv9o13.jl:31\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19uv9o13.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19uv9o13.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp19uv9o13.jl:32\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19uv9o13.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19uv9o13.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp19uv9o13.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph33i0gaw.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph33i0gaw.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph33i0gaw.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph33i0gaw.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = numbers[2] - numbers[1]\n  \
    \  min_index = 1\n    for i in 2:length(numbers)-1\n        if numbers[i+1] -\
    \ numbers[i] < min_diff\n            min_diff = numbers[i+1] - numbers[i]\n  \
    \          min_index = i\n        end\n    end\n    return (numbers[min_index],\
    \ numbers[min_index+1])\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpvrnf0xuf.jl:25\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (5.0, 2.2) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrnf0xuf.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrnf0xuf.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpvrnf0xuf.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 4.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrnf0xuf.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrnf0xuf.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpvrnf0xuf.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (5.0, 2.2) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrnf0xuf.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrnf0xuf.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpvrnf0xuf.jl:28\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (5.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrnf0xuf.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrnf0xuf.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvrnf0xuf.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaj1v58bb.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaj1v58bb.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaj1v58bb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpaj1v58bb.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaj1v58bb.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaj1v58bb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpaj1v58bb.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaj1v58bb.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaj1v58bb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpaj1v58bb.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaj1v58bb.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaj1v58bb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpaj1v58bb.jl:21\n  Expression: candida"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaj1v58bb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl5s4xk2y.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl5s4xk2y.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl5s4xk2y.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl5s4xk2y.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp16sicf9u.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp16sicf9u.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16sicf9u.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp16sicf9u.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfon5l08i.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfon5l08i.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfon5l08i.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfon5l08i.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnw8nko88.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnw8nko88.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnw8nko88.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnw8nko88.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_nums = (numbers[1], numbers[2])\n    for i in 1:length(numbers)-1\n \
    \       for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_nums = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_nums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbqmsk2t8.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbqmsk2t8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbqmsk2t8.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbqmsk2t8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmpzcb8w9.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmpzcb8w9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmpzcb8w9.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmpzcb8w9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_index = (1, 2)\n    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n\
    \            if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                min_index = (i, j)\n       \
    \     end\n        end\n    end\n    return (numbers[min_index[1]], numbers[min_index[2]])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl42n5gmc.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl42n5gmc.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl42n5gmc.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl42n5gmc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"The vector must have\
    \ at least two elements\")\n    end\n    # Initialize the minimum difference to\
    \ the difference between the first two elements\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    # Initialize the two closest elements to the first two elements\n\
    \    closest_elements = (numbers[1], numbers[2])\n    # Loop over all pairs of\
    \ elements\n    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n\
    \            # If the difference between the two elements is less than the current\
    \ minimum difference\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                # Update the minimum difference\n                min_diff = abs(numbers[i]\
    \ - numbers[j])\n                # Update the two closest elements\n         \
    \       closest_elements = (numbers[i], numbers[j])\n            end\n       \
    \ end\n    end\n    # Return the two closest elements\n    return closest_elements\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcuhomvkn.jl:37\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcuhomvkn.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcuhomvkn.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcuhomvkn.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        throw(ArgumentError(\"The input\
    \ vector must have at least two elements.\"))\n    end\n    if length(numbers)\
    \ == 2\n        return (numbers[1], numbers[2])\n    end\n    # Sort the numbers\n\
    \    sorted_numbers = sort(numbers)\n    # Find the minimum difference\n    min_diff\
    \ = abs(sorted_numbers[1] - sorted_numbers[2])\n    min_diff_index = 1\n    for\
    \ i = 2:length(sorted_numbers)-1\n        if abs(sorted_numbers[i] - sorted_numbers[i+1])\
    \ < min_diff\n            min_diff = abs(sorted_numbers[i] - sorted_numbers[i+1])\n\
    \            min_diff_index = i\n        end\n    end\n    return (sorted_numbers[min_diff_index],\
    \ sorted_numbers[min_diff_index+1])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_diff_elements = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n\
    \        for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_diff_elements = (numbers[i],\
    \ numbers[j])\n                end\n            end\n        end\n    end\n  \
    \  return min_diff_elements\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo70bj71z.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo70bj71z.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo70bj71z.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo70bj71z.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt6c9m0j_.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt6c9m0j_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt6c9m0j_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt6c9m0j_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpudcsz64u.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpudcsz64u.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpudcsz64u.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpudcsz64u.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp7qpzmgnl.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7qpzmgnl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7qpzmgnl.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7qpzmgnl.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_diff_ind = [1, 2]\n    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n\
    \            if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                min_diff_ind = [i, j]\n    \
    \        end\n        end\n    end\n    return (numbers[min_diff_ind[1]], numbers[min_diff_ind[2]])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzyp7h4kk.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzyp7h4kk.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzyp7h4kk.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzyp7h4kk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpra6ii1gr.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpra6ii1gr.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpra6ii1gr.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpra6ii1gr.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i = 1:length(numbers)\n    \
    \    for j = i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe0c149kk.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe0c149kk.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe0c149kk.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe0c149kk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    diff\
    \ = abs(numbers[1] - numbers[2])\n    num1 = numbers[1]\n    num2 = numbers[2]\n\
    \    for i in 1:length(numbers)-1\n        if abs(numbers[i] - numbers[i+1]) <\
    \ diff\n            diff = abs(numbers[i] - numbers[i+1])\n            num1 =\
    \ numbers[i]\n            num2 = numbers[i+1]\n        end\n    end\n    return\
    \ (num1, num2)\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpi9o5vsgv.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9o5vsgv.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9o5vsgv.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpi9o5vsgv.jl:30\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9o5vsgv.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9o5vsgv.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpi9o5vsgv.jl:31\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9o5vsgv.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9o5vsgv.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi9o5vsgv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #print(numbers)\n\
    \    #print(length(numbers))\n    #print(numbers[1])\n    #print(numbers[2])\n\
    \    #print(numbers[3])\n    #print(numbers[4])\n    #print(numbers[5])\n    #print(numbers[6])\n\
    \    #print(numbers[7])\n    #print(numbers[8])\n    #print(numbers[9])\n    #print(numbers[10])\n\
    \    #print(numbers[11])\n    #print(numbers[12])\n    #print(numbers[13])\n \
    \   #print(numbers[14])\n    #print(numbers[15])\n    #print(numbers[16])\n  \
    \  #print(numbers[17])\n    #print(numbers[18])\n    #print(numbers[19])\n   \
    \ #print(numbers[20])\n    #print(numbers[21])\n    #print(numbers[22])\n    #print(numbers[23])\n\
    \    #print(numbers[24])\n    #print(numbers[25])\n    #print(numbers[26])\n \
    \   #print(numbers[27])\n    #print(numbers[28])\n    #print(numbers[29])\n  \
    \  #print(numbers[30])\n    #print(numbers[31])\n    #print(numbers[32])\n   \
    \ #print(numbers[33])\n    #print(numbers[34])\n    #print(numbers[35])\n    #print(numbers[36])\n\
    \    #print(numbers[37])\n    #print(numbers[38])\n    #print(numbers[39])\n \
    \   #print(numbers[40])\n    #print(numbers[41])\n    #print(numbers[42])\n  \
    \  #print(numbers[43])\n    #print(numbers[44])\n    #print(numbers[45])\n   \
    \ #print(numbers[46])\n    #print(numbers[47])\n    #print(numbers[\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf8libyn7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf8libyn7.jl:1\n\
    in expression starting at /tmp/tmpf8libyn7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj9n22470.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj9n22470.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj9n22470.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj9n22470.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3cnxscrq.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cnxscrq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cnxscrq.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3cnxscrq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpextx4wnx.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpextx4wnx.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpextx4wnx.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpextx4wnx.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphhoyuey8.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphhoyuey8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphhoyuey8.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphhoyuey8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"The vector must have\
    \ at least two elements\")\n    end\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_v88mwl7.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_v88mwl7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_v88mwl7.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_v88mwl7.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpffhhm63k.jl:27\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 1.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpffhhm63k.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpffhhm63k.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpffhhm63k.jl:28\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 1.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpffhhm63k.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpffhhm63k.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpffhhm63k.jl:29\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 1.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpffhhm63k.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpffhhm63k.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpffhhm63k.jl:30\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 1.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpffhhm63k.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpffhhm63k.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpffhhm63k.jl:31\n  Expression: candida"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpffhhm63k.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_nums = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_nums\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_nums\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpvzstgvu7.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvzstgvu7.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvzstgvu7.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvzstgvu7.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp27cyunbb.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp27cyunbb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp27cyunbb.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp27cyunbb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv1d8prne.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv1d8prne.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv1d8prne.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv1d8prne.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 2:length(numbers)-1\n \
    \       if abs(numbers[i] - numbers[i+1]) < min_diff\n            min_diff = abs(numbers[i]\
    \ - numbers[i+1])\n            min_pair = (numbers[i], numbers[i+1])\n       \
    \ end\n    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9a4bexb8.jl:26\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9a4bexb8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9a4bexb8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp9a4bexb8.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9a4bexb8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9a4bexb8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp9a4bexb8.jl:28\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9a4bexb8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9a4bexb8.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9a4bexb8.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwbxamoyd.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbxamoyd.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbxamoyd.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwbxamoyd.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    if n < 2\n        error(\"Vector must have at least two elements\")\n   \
    \ end\n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1],\
    \ numbers[2])\n    for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n\
    \                min_pair = (numbers[i], numbers[j])\n            end\n      \
    \  end\n    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeepba6i2.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeepba6i2.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeepba6i2.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeepba6i2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #println(numbers)\n\
    \    #println(length(numbers))\n    #println(length(numbers)-1)\n    #println(numbers[1])\n\
    \    #println(numbers[2])\n    #println(numbers[3])\n    #println(numbers[4])\n\
    \    #println(numbers[5])\n    #println(numbers[6])\n    #println(numbers[7])\n\
    \    #println(numbers[8])\n    #println(numbers[9])\n    #println(numbers[10])\n\
    \    #println(numbers[11])\n    #println(numbers[12])\n    #println(numbers[13])\n\
    \    #println(numbers[14])\n    #println(numbers[15])\n    #println(numbers[16])\n\
    \    #println(numbers[17])\n    #println(numbers[18])\n    #println(numbers[19])\n\
    \    #println(numbers[20])\n    #println(numbers[21])\n    #println(numbers[22])\n\
    \    #println(numbers[23])\n    #println(numbers[24])\n    #println(numbers[25])\n\
    \    #println(numbers[26])\n    #println(numbers[27])\n    #println(numbers[28])\n\
    \    #println(numbers[29])\n    #println(numbers[30])\n    #println(numbers[31])\n\
    \    #println(numbers[32])\n    #println(numbers[33])\n    #println(numbers[34])\n\
    \    #println(numbers[35])\n    #println(numbers[36])\n    #println(numbers[37])\n\
    \    #println(numbers[38])\n    #println(numbers[39])\n    #println(numbers[40])\n\
    \    #println(numbers[41])\n    #println(numbers[42])\n    #println(numbers[43])\n\
    \    #println(numbers[44])\n    #println(numbers[45])\n    #println(numbers[46])\n\
    \    #println(n\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpee6daf3e.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpee6daf3e.jl:1\n\
    in expression starting at /tmp/tmpee6daf3e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1],\
    \ numbers[2])\n    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n\
    \            if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpinyhra1w.jl:27\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpinyhra1w.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpinyhra1w.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpinyhra1w.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl15xg14j.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl15xg14j.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl15xg14j.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl15xg14j.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpatrdn5he.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpatrdn5he.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpatrdn5he.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpatrdn5he.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpatrdn5he.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpatrdn5he.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpatrdn5he.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpatrdn5he.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpatrdn5he.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpatrdn5he.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpatrdn5he.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpatrdn5he.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpatrdn5he.jl:21\n  Expression: candida"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpatrdn5he.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return min_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcyiccowp.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcyiccowp.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcyiccowp.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcyiccowp.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   min1 = numbers[1]\n    min2 = numbers[2]\n    for i in 1:length(numbers)\n\
    \        for j in 1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < diff\n                diff = abs(numbers[i] - numbers[j])\n              \
    \  min1 = numbers[i]\n                min2 = numbers[j]\n            end\n   \
    \     end\n    end\n    return (min1, min2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmrbrm5na.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 1.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrbrm5na.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrbrm5na.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmrbrm5na.jl:30\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 1.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrbrm5na.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrbrm5na.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmrbrm5na.jl:31\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 1.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrbrm5na.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrbrm5na.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmrbrm5na.jl:32\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 1.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrbrm5na.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrbrm5na.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmrbrm5na.jl:33\n  Expression: candida"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmrbrm5na.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    closest_pair = (numbers[1], numbers[2])\n    closest_distance\
    \ = abs(numbers[1] - numbers[2])\n    for i in 1:length(numbers)\n        for\
    \ j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < closest_distance\n                    closest_pair = (numbers[i],\
    \ numbers[j])\n                    closest_distance = abs(numbers[i] - numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return closest_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzks1q541.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzks1q541.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzks1q541.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzks1q541.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_diff_index = (1, 2)\n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_diff_index\
    \ = (i, j)\n            end\n        end\n    end\n    return (numbers[min_diff_index[1]],\
    \ numbers[min_diff_index[2]])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp38gk_1eb.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp38gk_1eb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp38gk_1eb.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp38gk_1eb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff\n                min_diff = diff\n           \
    \     min_pair = (numbers[i], numbers[j])\n            end\n        end\n    end\n\
    \    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpaca508vq.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaca508vq.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaca508vq.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaca508vq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = Inf\n    min_pair = (0.0, 0.0)\n    for i in 1:length(numbers)\n\
    \        for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3ram1bm6.jl:27\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ram1bm6.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ram1bm6.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ram1bm6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_index = (1, 2)\n    for i in 1:length(numbers)-1\n\
    \        for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_index = (i, j)\n            end\n        end\n    end\n    return\
    \ (numbers[min_index[1]], numbers[min_index[2]])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw8rrmhs2.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw8rrmhs2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw8rrmhs2.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw8rrmhs2.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    if n == 2\n  \
    \      return (numbers[1], numbers[2])\n    end\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            diff = abs(numbers[i] - numbers[j])\n   \
    \         if diff < min_diff\n                min_diff = diff\n              \
    \  min_pair = (numbers[i], numbers[j])\n            end\n        end\n    end\n\
    \    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpb9kfhtp3.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9kfhtp3.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9kfhtp3.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb9kfhtp3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptd2dcp9w.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptd2dcp9w.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptd2dcp9w.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptd2dcp9w.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp6ylhm8u.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp6ylhm8u.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp6ylhm8u.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp6ylhm8u.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5gwp3el9.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gwp3el9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gwp3el9.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5gwp3el9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc82rmn7z.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc82rmn7z.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc82rmn7z.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc82rmn7z.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # Initialize the minimum distance to a large number\n    min_distance\
    \ = 1e10\n    # Initialize the closest pair to nothing\n    closest_pair = (0.0,\
    \ 0.0)\n    # Loop over all pairs of numbers\n    for i in 1:length(numbers)-1\n\
    \        for j in i+1:length(numbers)\n            # Compute the distance between\
    \ the two numbers\n            distance = abs(numbers[i] - numbers[j])\n     \
    \       # If this distance is smaller than the current minimum distance,\n   \
    \         # then update the minimum distance and the closest pair\n          \
    \  if distance < min_distance\n                min_distance = distance\n     \
    \           closest_pair = (numbers[i], numbers[j])\n            end\n       \
    \ end\n    end\n    # Return the closest pair\n    return closest_pair\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprbwi3ey7.jl:35\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprbwi3ey7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprbwi3ey7.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprbwi3ey7.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        throw(ArgumentError(\"The vector\
    \ must contain at least two elements\"))\n    end\n    min_distance = abs(numbers[1]\
    \ - numbers[2])\n    min_index = (1, 2)\n    for i in 1:length(numbers)\n    \
    \    for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_distance\n                    min_distance = abs(numbers[i]\
    \ - numbers[j])\n                    min_index = (i, j)\n                end\n\
    \            end\n        end\n    end\n    if numbers[min_index[1]] < numbers[min_index[2]]\n\
    \        return (numbers[min_index[1]], numbers[min_index[2]])\n    else\n   \
    \     return (numbers[min_index[2]], numbers[min_index[1]])\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # Initialize the minimum distance to be the distance between\
    \ the first two elements\n    min_distance = abs(numbers[1] - numbers[2])\n  \
    \  # Initialize the two closest elements to be the first two elements\n    closest_elements\
    \ = (numbers[1], numbers[2])\n    # Loop over all pairs of elements\n    for i\
    \ in 1:length(numbers)\n        for j in 1:length(numbers)\n            # Check\
    \ if the distance between the two elements is smaller than the current minimum\
    \ distance\n            if abs(numbers[i] - numbers[j]) < min_distance\n     \
    \           # If so, update the minimum distance and the two closest elements\n\
    \                min_distance = abs(numbers[i] - numbers[j])\n               \
    \ closest_elements = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    # Return the two closest elements\n    return closest_elements\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprc1qy3q6.jl:32\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 1.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprc1qy3q6.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprc1qy3q6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprc1qy3q6.jl:33\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 1.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprc1qy3q6.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprc1qy3q6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprc1qy3q6.jl:34\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 1.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprc1qy3q6.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprc1qy3q6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprc1qy3q6.jl:35\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 1.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprc1qy3q6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprc1qy3q6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprc1qy3q6.jl:36\n  Expression: candida"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprc1qy3q6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_numbers = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            diff = abs(numbers[i] - numbers[j])\n   \
    \         if diff < min_diff\n                min_diff = diff\n              \
    \  min_numbers = (numbers[i], numbers[j])\n            end\n        end\n    end\n\
    \    return min_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpo0s1zlip.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0s1zlip.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0s1zlip.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo0s1zlip.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"numbers must be of length\
    \ at least 2\")\n    end\n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair\
    \ = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                diff = abs(numbers[i]\
    \ - numbers[j])\n                if diff < min_diff\n                    min_diff\
    \ = diff\n                    min_pair = (numbers[i], numbers[j])\n          \
    \      end\n            end\n        end\n    end\n    return min_pair\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj2xk58xj.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj2xk58xj.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj2xk58xj.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj2xk58xj.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdajps4xq.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdajps4xq.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdajps4xq.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdajps4xq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_diff_index = 1\n    for i in 2:length(numbers)-1\n        if abs(numbers[i]\
    \ - numbers[i+1]) < min_diff\n            min_diff = abs(numbers[i] - numbers[i+1])\n\
    \            min_diff_index = i\n        end\n    end\n    return (numbers[min_diff_index],\
    \ numbers[min_diff_index+1])\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp05t4fk6a.jl:26\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp05t4fk6a.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp05t4fk6a.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp05t4fk6a.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp05t4fk6a.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp05t4fk6a.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp05t4fk6a.jl:28\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp05t4fk6a.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp05t4fk6a.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp05t4fk6a.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_indices = (1, 2)\n    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n\
    \            if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                min_indices = (i, j)\n     \
    \       end\n        end\n    end\n    return (numbers[min_indices[1]], numbers[min_indices[2]])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwocoszq2.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwocoszq2.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwocoszq2.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwocoszq2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk02nwp11.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk02nwp11.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk02nwp11.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk02nwp11.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #print(numbers)\n\
    \    #print(length(numbers))\n    #print(numbers[1])\n    #print(numbers[2])\n\
    \    #print(numbers[3])\n    #print(numbers[4])\n    #print(numbers[5])\n    #print(numbers[6])\n\
    \    #print(numbers[7])\n    #print(numbers[8])\n    #print(numbers[9])\n    #print(numbers[10])\n\
    \    #print(numbers[11])\n    #print(numbers[12])\n    #print(numbers[13])\n \
    \   #print(numbers[14])\n    #print(numbers[15])\n    #print(numbers[16])\n  \
    \  #print(numbers[17])\n    #print(numbers[18])\n    #print(numbers[19])\n   \
    \ #print(numbers[20])\n    #print(numbers[21])\n    #print(numbers[22])\n    #print(numbers[23])\n\
    \    #print(numbers[24])\n    #print(numbers[25])\n    #print(numbers[26])\n \
    \   #print(numbers[27])\n    #print(numbers[28])\n    #print(numbers[29])\n  \
    \  #print(numbers[30])\n    #print(numbers[31])\n    #print(numbers[32])\n   \
    \ #print(numbers[33])\n    #print(numbers[34])\n    #print(numbers[35])\n    #print(numbers[36])\n\
    \    #print(numbers[37])\n    #print(numbers[38])\n    #print(numbers[39])\n \
    \   #print(numbers[40])\n    #print(numbers[41])\n    #print(numbers[42])\n  \
    \  #print(numbers[43])\n    #print(numbers[44])\n    #print(numbers[45])\n   \
    \ #print(numbers[46])\n    #print(numbers[47])\n    #print(numbers[\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp86g90ld5.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp86g90ld5.jl:1\n\
    in expression starting at /tmp/tmp86g90ld5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = sort(numbers)\n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair =\
    \ (numbers[1], numbers[2])\n    for i in 1:length(numbers)-1\n        if abs(numbers[i]\
    \ - numbers[i+1]) < min_diff\n            min_diff = abs(numbers[i] - numbers[i+1])\n\
    \            min_pair = (numbers[i], numbers[i+1])\n        end\n    end\n   \
    \ return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp3cc8yjsm.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cc8yjsm.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cc8yjsm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3cc8yjsm.jl:29\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cc8yjsm.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cc8yjsm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3cc8yjsm.jl:30\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cc8yjsm.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cc8yjsm.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3cc8yjsm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy8mcxtnd.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy8mcxtnd.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy8mcxtnd.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy8mcxtnd.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy8mcxtnd.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy8mcxtnd.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy8mcxtnd.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy8mcxtnd.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy8mcxtnd.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy8mcxtnd.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy8mcxtnd.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy8mcxtnd.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy8mcxtnd.jl:21\n  Expression: candida"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy8mcxtnd.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n\
    \    for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps72v20j_.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps72v20j_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps72v20j_.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps72v20j_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"The vector must have\
    \ at least two elements\")\n    end\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphilww6iv.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphilww6iv.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphilww6iv.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphilww6iv.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            diff = abs(numbers[i] - numbers[j])\n   \
    \         if diff < min_diff\n                min_diff = diff\n              \
    \  min_pair = (numbers[i], numbers[j])\n            end\n        end\n    end\n\
    \    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpwwiusaqi.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwwiusaqi.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwwiusaqi.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwwiusaqi.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_numbers = (numbers[1], numbers[2])\n    for i in 1:length(numbers)-1\n\
    \        for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_numbers = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx2n1ivzc.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx2n1ivzc.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx2n1ivzc.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx2n1ivzc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcc3t8wh8.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcc3t8wh8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcc3t8wh8.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcc3t8wh8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2v01baed.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v01baed.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v01baed.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp2v01baed.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v01baed.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v01baed.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp2v01baed.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v01baed.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v01baed.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp2v01baed.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v01baed.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v01baed.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp2v01baed.jl:21\n  Expression: candida"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2v01baed.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = Inf\n    min_pair = (0.0, 0.0)\n    for i in 1:length(numbers)\n\
    \        for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptzeela4s.jl:27\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptzeela4s.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptzeela4s.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptzeela4s.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return min_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjey_c0bd.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjey_c0bd.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjey_c0bd.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjey_c0bd.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #print(numbers)\n\
    \    #print(length(numbers))\n    #print(numbers[1])\n    #print(numbers[2])\n\
    \    #print(numbers[3])\n    #print(numbers[4])\n    #print(numbers[5])\n    #print(numbers[6])\n\
    \    #print(numbers[7])\n    #print(numbers[8])\n    #print(numbers[9])\n    #print(numbers[10])\n\
    \    #print(numbers[11])\n    #print(numbers[12])\n    #print(numbers[13])\n \
    \   #print(numbers[14])\n    #print(numbers[15])\n    #print(numbers[16])\n  \
    \  #print(numbers[17])\n    #print(numbers[18])\n    #print(numbers[19])\n   \
    \ #print(numbers[20])\n    #print(numbers[21])\n    #print(numbers[22])\n    #print(numbers[23])\n\
    \    #print(numbers[24])\n    #print(numbers[25])\n    #print(numbers[26])\n \
    \   #print(numbers[27])\n    #print(numbers[28])\n    #print(numbers[29])\n  \
    \  #print(numbers[30])\n    #print(numbers[31])\n    #print(numbers[32])\n   \
    \ #print(numbers[33])\n    #print(numbers[34])\n    #print(numbers[35])\n    #print(numbers[36])\n\
    \    #print(numbers[37])\n    #print(numbers[38])\n    #print(numbers[39])\n \
    \   #print(numbers[40])\n    #print(numbers[41])\n    #print(numbers[42])\n  \
    \  #print(numbers[43])\n    #print(numbers[44])\n    #print(numbers[45])\n   \
    \ #print(numbers[46])\n    #print(numbers[47])\n    #print(numbers[\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4rxk8quq.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4rxk8quq.jl:1\n\
    in expression starting at /tmp/tmp4rxk8quq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    error(\"Not implemented yet\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp90mue77m.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  Not\
    \ implemented yet\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] find_closest_elements(numbers::Vector{Float64})\n     @ Main /tmp/tmp90mue77m.jl:10\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp90mue77m.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp90mue77m.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp90mue77m.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp90mue77m.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp90mue77m.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp90mue77m.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp90mue77m.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp90mue77m.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp90mue77m.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp90mue77m.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp90mue77m.jl:20\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp90mue77m.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpajebfbaa.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpajebfbaa.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpajebfbaa.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpajebfbaa.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        throw(ArgumentError(\"numbers\
    \ must have at least two elements\"))\n    end\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_diff_elements = (numbers[1], numbers[2])\n    for i in\
    \ 1:length(numbers)\n        for j in i+1:length(numbers)\n            diff =\
    \ abs(numbers[i] - numbers[j])\n            if diff < min_diff\n             \
    \   min_diff = diff\n                min_diff_elements = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_diff_elements\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpluoctlct.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpluoctlct.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpluoctlct.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpluoctlct.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppmz1s522.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppmz1s522.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppmz1s522.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppmz1s522.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"Vector must have at least\
    \ two elements\")\n    end\n    # Initialize the minimum distance to the maximum\
    \ possible value\n    min_distance = Inf\n    # Initialize the two closest elements\
    \ to the first two elements in the vector\n    closest_elements = (numbers[1],\
    \ numbers[2])\n    # Loop over all pairs of elements in the vector\n    for i\
    \ in 1:length(numbers)\n        for j in i+1:length(numbers)\n            # Compute\
    \ the distance between the two elements\n            distance = abs(numbers[i]\
    \ - numbers[j])\n            # If the distance is smaller than the minimum distance,\
    \ update the minimum distance and the closest elements\n            if distance\
    \ < min_distance\n                min_distance = distance\n                closest_elements\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    # Return\
    \ the closest elements\n    return closest_elements\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6obnhm80.jl:37\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6obnhm80.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6obnhm80.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6obnhm80.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf_yf8k9r.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf_yf8k9r.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf_yf8k9r.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf_yf8k9r.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2_w0ccw7.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_w0ccw7.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_w0ccw7.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_w0ccw7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    if n < 2\n   \
    \     error(\"Vector must have at least two elements\")\n    end\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdbhawor1.jl:32\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdbhawor1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdbhawor1.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdbhawor1.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdobouw3g.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdobouw3g.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdobouw3g.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdobouw3g.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    if length(numbers) < 2\n        error(\"\
    Vector must have at least two elements\")\n    end\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n\
    \        for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5wzt6yam.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5wzt6yam.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5wzt6yam.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5wzt6yam.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsars0q53.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsars0q53.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsars0q53.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsars0q53.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8of9rn9e.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8of9rn9e.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8of9rn9e.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8of9rn9e.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    if n < 2\n        return (0,0)\n    end\n    min_diff = abs(numbers[1] -\
    \ numbers[2])\n    min_index = 1\n    for i = 2:n-1\n        diff = abs(numbers[i]\
    \ - numbers[i+1])\n        if diff < min_diff\n            min_diff = diff\n \
    \           min_index = i\n        end\n    end\n    return (numbers[min_index],\
    \ numbers[min_index+1])\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpldbc4c8b.jl:32\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpldbc4c8b.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpldbc4c8b.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpldbc4c8b.jl:33\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpldbc4c8b.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpldbc4c8b.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpldbc4c8b.jl:34\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpldbc4c8b.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpldbc4c8b.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpldbc4c8b.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_diff_indices = (1, 2)\n    for i in 1:length(numbers)\n        for j\
    \ in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_diff_indices\
    \ = (i, j)\n            end\n        end\n    end\n    if numbers[min_diff_indices[1]]\
    \ < numbers[min_diff_indices[2]]\n        return (numbers[min_diff_indices[1]],\
    \ numbers[min_diff_indices[2]])\n    else\n        return (numbers[min_diff_indices[2]],\
    \ numbers[min_diff_indices[1]])\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i = 1:n-1\n\
    \        for j = i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp_pwpcncr.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_pwpcncr.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_pwpcncr.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_pwpcncr.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    dif = abs(numbers[1] - numbers[2])\n    for i in 1:n-1\n        if abs(numbers[i]\
    \ - numbers[i+1]) < dif\n            dif = abs(numbers[i] - numbers[i+1])\n  \
    \          num1 = numbers[i]\n            num2 = numbers[i+1]\n        end\n \
    \   end\n    return (num1, num2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpldx4zwds.jl:27\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  UndefVarError:\
    \ num1 not defined\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpldx4zwds.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpldx4zwds.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpldx4zwds.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpldx4zwds.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  UndefVarError: num1 not\
    \ defined\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpldx4zwds.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpldx4zwds.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpldx4zwds.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpldx4zwds.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  UndefVarError: num1\
    \ not defined\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpldx4zwds.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpldx4zwds.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpldx4zwds.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpldx4zwds.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n  UndefVarError: num1 "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpldx4zwds.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    error(\"Not implemented yet\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpycncn3j1.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  Not\
    \ implemented yet\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] find_closest_elements(numbers::Vector{Float64})\n     @ Main /tmp/tmpycncn3j1.jl:10\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpycncn3j1.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpycncn3j1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpycncn3j1.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpycncn3j1.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpycncn3j1.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpycncn3j1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpycncn3j1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpycncn3j1.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpycncn3j1.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpycncn3j1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpycncn3j1.jl:20\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpycncn3j1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdyzhz4bs.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdyzhz4bs.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyzhz4bs.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdyzhz4bs.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp03s3ku5v.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp03s3ku5v.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp03s3ku5v.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp03s3ku5v.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq7x37ppy.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq7x37ppy.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq7x37ppy.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq7x37ppy.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return min_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuztijhqe.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuztijhqe.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuztijhqe.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuztijhqe.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    if length(numbers)\
    \ < 2\n        error(\"Vector must have at least two elements\")\n    end\n  \
    \  min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n\
    \    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n        \
    \    if i != j\n                if abs(numbers[i] - numbers[j]) < min_diff\n \
    \                   min_diff = abs(numbers[i] - numbers[j])\n                \
    \    min_pair = (numbers[i], numbers[j])\n                end\n            end\n\
    \        end\n    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjpkk8nvc.jl:34\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjpkk8nvc.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjpkk8nvc.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjpkk8nvc.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = abs(numbers[1] - numbers[2])\n    min_diff_pair =\
    \ (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n\
    \            if i != j\n                diff = abs(numbers[i] - numbers[j])\n\
    \                if diff < min_diff\n                    min_diff = diff\n   \
    \                 min_diff_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_diff_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmcymx3xk.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmcymx3xk.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmcymx3xk.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmcymx3xk.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprwaa4vy3.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprwaa4vy3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprwaa4vy3.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprwaa4vy3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwq9w7_ld.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwq9w7_ld.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwq9w7_ld.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwq9w7_ld.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # Initialize variables\n    min_distance = abs(numbers[1] - numbers[2])\n\
    \    min_index = 1\n    # Loop through all numbers\n    for i in 2:length(numbers)-1\n\
    \        # If the distance between two numbers is smaller than the current minimum,\
    \ update minimum\n        if abs(numbers[i] - numbers[i+1]) < min_distance\n \
    \           min_distance = abs(numbers[i] - numbers[i+1])\n            min_index\
    \ = i\n        end\n    end\n    # Return the two closest numbers\n    return\
    \ (numbers[min_index], numbers[min_index+1])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa5a4amef.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa5a4amef.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa5a4amef.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpa5a4amef.jl:30\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa5a4amef.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa5a4amef.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpa5a4amef.jl:31\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa5a4amef.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa5a4amef.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa5a4amef.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyrz4eqtl.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyrz4eqtl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyrz4eqtl.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyrz4eqtl.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n\
    \    for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3_qdjug3.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3_qdjug3.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3_qdjug3.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3_qdjug3.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   min_diff = diff\n    min_i = 1\n    min_j = 2\n    for i in 1:length(numbers)\n\
    \        for j in i+1:length(numbers)\n            diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff\n                min_diff = diff\n           \
    \     min_i = i\n                min_j = j\n            end\n        end\n   \
    \ end\n    if numbers[min_i] < numbers[min_j]\n        return (numbers[min_i],\
    \ numbers[min_j])\n    else\n        return (numbers[min_j], numbers[min_i])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    if n < 2\n        error(\"Vector must have at least two elements\")\n   \
    \ end\n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1],\
    \ numbers[2])\n    for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n\
    \                min_pair = (numbers[i], numbers[j])\n            end\n      \
    \  end\n    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi2wdk5u1.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi2wdk5u1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi2wdk5u1.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi2wdk5u1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpswqxamke.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpswqxamke.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpswqxamke.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpswqxamke.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_gqjb2m3.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_gqjb2m3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_gqjb2m3.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_gqjb2m3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        throw(ArgumentError(\"The input\
    \ vector must have at least two elements.\"))\n    end\n    if length(numbers)\
    \ == 2\n        return (numbers[1], numbers[2])\n    end\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_diff_indices = (1, 2)\n    for i in 1:length(numbers)-1\n\
    \        for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_diff_indices = (i, j)\n            end\n        end\n    end\n\
    \    if numbers[min_diff_indices[1]] < numbers[min_diff_indices[2]]\n        return\
    \ (numbers[min_diff_indices[1]], numbers[min_diff_indices[2]])\n    else\n   \
    \     return (numbers[min_diff_indices[2]], numbers[min_diff_indices[1]])\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_tuple = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n  \
    \      for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_tuple = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_tuple\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl62bgkdg.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl62bgkdg.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl62bgkdg.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl62bgkdg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"The vector must have\
    \ at least two elements\")\n    end\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_elements = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n\
    \        for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_elements = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_elements\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ymzgg51.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ymzgg51.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ymzgg51.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ymzgg51.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        if abs(numbers[i] - numbers[i+1]) < min_diff\n\
    \            min_diff = abs(numbers[i] - numbers[i+1])\n            min_pair =\
    \ (numbers[i], numbers[i+1])\n        end\n    end\n    return min_pair\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcmiksa7i.jl:27\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmiksa7i.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmiksa7i.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpcmiksa7i.jl:28\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmiksa7i.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmiksa7i.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpcmiksa7i.jl:29\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmiksa7i.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmiksa7i.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcmiksa7i.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphygg86th.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphygg86th.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphygg86th.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphygg86th.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqdq2gv7x.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqdq2gv7x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqdq2gv7x.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqdq2gv7x.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpenkdtliq.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpenkdtliq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpenkdtliq.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpenkdtliq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj53r78zf.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj53r78zf.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj53r78zf.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj53r78zf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprvnp8_nb.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprvnp8_nb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprvnp8_nb.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprvnp8_nb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"Vector must have at least\
    \ two elements\")\n    end\n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair\
    \ = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                diff = abs(numbers[i]\
    \ - numbers[j])\n                if diff < min_diff\n                    min_diff\
    \ = diff\n                    min_pair = (numbers[i], numbers[j])\n          \
    \      end\n            end\n        end\n    end\n    return min_pair\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn6w9uv34.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn6w9uv34.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn6w9uv34.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn6w9uv34.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_diff_index = [1, 2]\n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_diff_index = [i, j]\n                end\n          \
    \  end\n        end\n    end\n    if numbers[min_diff_index[1]] < numbers[min_diff_index[2]]\n\
    \        return (numbers[min_diff_index[1]], numbers[min_diff_index[2]])\n   \
    \ else\n        return (numbers[min_diff_index[2]], numbers[min_diff_index[1]])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n\
    \    for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjcd1o5_1.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjcd1o5_1.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjcd1o5_1.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjcd1o5_1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_diff_index = (1, 2)\n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_diff_index\
    \ = (i, j)\n            end\n        end\n    end\n    return (numbers[min_diff_index[1]],\
    \ numbers[min_diff_index[2]])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmmbrh_ta.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmmbrh_ta.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmmbrh_ta.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmmbrh_ta.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp53s04z8h.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp53s04z8h.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp53s04z8h.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp53s04z8h.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    if length(numbers)\
    \ < 2\n        error(\"Vector must have at least two elements\")\n    end\n  \
    \  min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n\
    \    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n        \
    \    if i != j\n                if abs(numbers[i] - numbers[j]) < min_diff\n \
    \                   min_diff = abs(numbers[i] - numbers[j])\n                \
    \    min_pair = (numbers[i], numbers[j])\n                end\n            end\n\
    \        end\n    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyty6bbg8.jl:34\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyty6bbg8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyty6bbg8.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyty6bbg8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2zs8mng2.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2zs8mng2.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2zs8mng2.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2zs8mng2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return min_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_he_o9cw.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_he_o9cw.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_he_o9cw.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_he_o9cw.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpec7svmd5.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpec7svmd5.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpec7svmd5.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpec7svmd5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #print(numbers)\n\
    \    #print(length(numbers))\n    #print(numbers[1])\n    #print(numbers[2])\n\
    \    #print(numbers[3])\n    #print(numbers[4])\n    #print(numbers[5])\n    #print(numbers[6])\n\
    \    #print(numbers[7])\n    #print(numbers[8])\n    #print(numbers[9])\n    #print(numbers[10])\n\
    \    #print(numbers[11])\n    #print(numbers[12])\n    #print(numbers[13])\n \
    \   #print(numbers[14])\n    #print(numbers[15])\n    #print(numbers[16])\n  \
    \  #print(numbers[17])\n    #print(numbers[18])\n    #print(numbers[19])\n   \
    \ #print(numbers[20])\n    #print(numbers[21])\n    #print(numbers[22])\n    #print(numbers[23])\n\
    \    #print(numbers[24])\n    #print(numbers[25])\n    #print(numbers[26])\n \
    \   #print(numbers[27])\n    #print(numbers[28])\n    #print(numbers[29])\n  \
    \  #print(numbers[30])\n    #print(numbers[31])\n    #print(numbers[32])\n   \
    \ #print(numbers[33])\n    #print(numbers[34])\n    #print(numbers[35])\n    #print(numbers[36])\n\
    \    #print(numbers[37])\n    #print(numbers[38])\n    #print(numbers[39])\n \
    \   #print(numbers[40])\n    #print(numbers[41])\n    #print(numbers[42])\n  \
    \  #print(numbers[43])\n    #print(numbers[44])\n    #print(numbers[45])\n   \
    \ #print(numbers[46])\n    #print(numbers[47])\n    #print(numbers[\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf1nkzme7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf1nkzme7.jl:1\n\
    in expression starting at /tmp/tmpf1nkzme7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpg7h4vxqy.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg7h4vxqy.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg7h4vxqy.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg7h4vxqy.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt7_ao330.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt7_ao330.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt7_ao330.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt7_ao330.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    error(\"Not implemented yet\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt06dbjbc.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  Not\
    \ implemented yet\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] find_closest_elements(numbers::Vector{Float64})\n     @ Main /tmp/tmpt06dbjbc.jl:10\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt06dbjbc.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt06dbjbc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpt06dbjbc.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpt06dbjbc.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt06dbjbc.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt06dbjbc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpt06dbjbc.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpt06dbjbc.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt06dbjbc.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt06dbjbc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpt06dbjbc.jl:20\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt06dbjbc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = abs(numbers[1] - numbers[2])\n    min_index = (1,\
    \ 2)\n    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n \
    \           diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff\n\
    \                min_diff = diff\n                min_index = (i, j)\n       \
    \     end\n        end\n    end\n    return (numbers[min_index[1]], numbers[min_index[2]])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa_ercujx.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa_ercujx.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa_ercujx.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_ercujx.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7kax9pl2.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7kax9pl2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7kax9pl2.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7kax9pl2.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   closest = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n     \
    \   for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < diff\n                    diff = abs(numbers[i] - numbers[j])\n\
    \                    closest = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return closest\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwhhd21fi.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwhhd21fi.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwhhd21fi.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwhhd21fi.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphyhr0_4_.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphyhr0_4_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphyhr0_4_.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphyhr0_4_.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8s9yiehr.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8s9yiehr.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8s9yiehr.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8s9yiehr.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #println(numbers)\n\
    \    #println(length(numbers))\n    #println(numbers[1])\n    #println(numbers[2])\n\
    \    #println(numbers[3])\n    #println(numbers[4])\n    #println(numbers[5])\n\
    \    #println(numbers[6])\n    #println(numbers[7])\n    #println(numbers[8])\n\
    \    #println(numbers[9])\n    #println(numbers[10])\n    #println(numbers[11])\n\
    \    #println(numbers[12])\n    #println(numbers[13])\n    #println(numbers[14])\n\
    \    #println(numbers[15])\n    #println(numbers[16])\n    #println(numbers[17])\n\
    \    #println(numbers[18])\n    #println(numbers[19])\n    #println(numbers[20])\n\
    \    #println(numbers[21])\n    #println(numbers[22])\n    #println(numbers[23])\n\
    \    #println(numbers[24])\n    #println(numbers[25])\n    #println(numbers[26])\n\
    \    #println(numbers[27])\n    #println(numbers[28])\n    #println(numbers[29])\n\
    \    #println(numbers[30])\n    #println(numbers[31])\n    #println(numbers[32])\n\
    \    #println(numbers[33])\n    #println(numbers[34])\n    #println(numbers[35])\n\
    \    #println(numbers[36])\n    #println(numbers[37])\n    #println(numbers[38])\n\
    \    #println(numbers[39])\n    #println(numbers[40])\n    #println(numbers[41])\n\
    \    #println(numbers[42])\n    #println(numbers[43])\n    #println(numbers[44])\n\
    \    #println(numbers[45])\n    #println(numbers[46])\n    #println(numbers[47])\n\
    \    #println(numbers[\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptdkz_mb8.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptdkz_mb8.jl:1\n\
    in expression starting at /tmp/tmptdkz_mb8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    if n < 2\n        error(\"Vector must have at least two elements\")\n   \
    \ end\n    min_diff = abs(numbers[1] - numbers[2])\n    min_index = 1\n    for\
    \ i in 2:n-1\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff <\
    \ min_diff\n            min_diff = diff\n            min_index = i\n        end\n\
    \    end\n    return (numbers[min_index], numbers[min_index+1])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo5c66_yi.jl:32\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo5c66_yi.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo5c66_yi.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpo5c66_yi.jl:33\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo5c66_yi.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo5c66_yi.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpo5c66_yi.jl:34\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo5c66_yi.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo5c66_yi.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo5c66_yi.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"The vector must have\
    \ at least two elements.\")\n    end\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff\n                min_diff = diff\n           \
    \     min_pair = (numbers[i], numbers[j])\n            end\n        end\n    end\n\
    \    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpe8_whj4m.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe8_whj4m.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe8_whj4m.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe8_whj4m.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoun5xmzm.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoun5xmzm.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoun5xmzm.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoun5xmzm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1],\
    \ numbers[2])\n    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n\
    \            if i != j\n                diff = abs(numbers[i] - numbers[j])\n\
    \                if diff < min_diff\n                    min_diff = diff\n   \
    \                 min_pair = (numbers[i], numbers[j])\n                end\n \
    \           end\n        end\n    end\n    return min_pair\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvvxia788.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvvxia788.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvvxia788.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvvxia788.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"numbers must have at\
    \ least two elements\")\n    end\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return min_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpntawr6lh.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpntawr6lh.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpntawr6lh.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpntawr6lh.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    if length(numbers)\
    \ < 2\n        error(\"Vector must have at least two elements\")\n    end\n  \
    \  min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n\
    \    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n        \
    \    if i != j\n                if abs(numbers[i] - numbers[j]) < min_diff\n \
    \                   min_diff = abs(numbers[i] - numbers[j])\n                \
    \    min_pair = (numbers[i], numbers[j])\n                end\n            end\n\
    \        end\n    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ivdom0i.jl:34\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4ivdom0i.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4ivdom0i.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ivdom0i.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt6nla9fp.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt6nla9fp.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt6nla9fp.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt6nla9fp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpocb0qj3i.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpocb0qj3i.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpocb0qj3i.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpocb0qj3i.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_8hsyg_c.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_8hsyg_c.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_8hsyg_c.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_8hsyg_c.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptj7xw628.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptj7xw628.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptj7xw628.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptj7xw628.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzugm3m27.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzugm3m27.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzugm3m27.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzugm3m27.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   result = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n      \
    \  for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) <\
    \ diff\n                diff = abs(numbers[i] - numbers[j])\n                result\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpimr7y0r9.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpimr7y0r9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpimr7y0r9.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpimr7y0r9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxqw4lgr6.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxqw4lgr6.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxqw4lgr6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpxqw4lgr6.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxqw4lgr6.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxqw4lgr6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpxqw4lgr6.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxqw4lgr6.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxqw4lgr6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpxqw4lgr6.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxqw4lgr6.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxqw4lgr6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpxqw4lgr6.jl:21\n  Expression: candida"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxqw4lgr6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = Inf\n    min_diff_pair = (0.0,\
    \ 0.0)\n    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n \
    \           if i != j\n                diff = abs(numbers[i] - numbers[j])\n \
    \               if diff < min_diff\n                    min_diff = diff\n    \
    \                min_diff_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_diff_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvygx6v96.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvygx6v96.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvygx6v96.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvygx6v96.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   for i in 1:length(numbers)\n        for j in 1:length(numbers)\n         \
    \   if i != j\n                if abs(numbers[i] - numbers[j]) < diff\n      \
    \              diff = abs(numbers[i] - numbers[j])\n                    a = numbers[i]\n\
    \                    b = numbers[j]\n                end\n            end\n  \
    \      end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzb4djwdd.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  UndefVarError:\
    \ a not defined\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpzb4djwdd.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzb4djwdd.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzb4djwdd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpzb4djwdd.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  UndefVarError: a not defined\n\
    \  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n     @\
    \ Main /tmp/tmpzb4djwdd.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzb4djwdd.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzb4djwdd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpzb4djwdd.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  UndefVarError: a\
    \ not defined\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpzb4djwdd.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzb4djwdd.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzb4djwdd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpzb4djwdd.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n  UndefVarError: a\
    \ not defined\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzb4djwdd.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpetl4odzb.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpetl4odzb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpetl4odzb.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpetl4odzb.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_difference = abs(numbers[1] - numbers[2])\n    min_difference_index\
    \ = 1\n    for i in 2:length(numbers)-1\n        difference = abs(numbers[i] -\
    \ numbers[i+1])\n        if difference < min_difference\n            min_difference\
    \ = difference\n            min_difference_index = i\n        end\n    end\n \
    \   return (numbers[min_difference_index], numbers[min_difference_index+1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjariksg4.jl:26\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjariksg4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjariksg4.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpjariksg4.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjariksg4.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjariksg4.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpjariksg4.jl:28\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjariksg4.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjariksg4.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjariksg4.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"Vector must have at least\
    \ two elements\")\n    end\n    # Find the smallest difference between any two\
    \ numbers\n    smallest_difference = abs(numbers[1] - numbers[2])\n    closest_elements\
    \ = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                difference = abs(numbers[i]\
    \ - numbers[j])\n                if difference < smallest_difference\n       \
    \             smallest_difference = difference\n                    closest_elements\
    \ = (numbers[i], numbers[j])\n                end\n            end\n        end\n\
    \    end\n    return closest_elements\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3l1gbumu.jl:34\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3l1gbumu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3l1gbumu.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3l1gbumu.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # Initialize the minimum distance to be the distance between\
    \ the first two numbers\n    min_distance = abs(numbers[1] - numbers[2])\n   \
    \ # Initialize the two closest numbers to be the first two numbers\n    closest_numbers\
    \ = (numbers[1], numbers[2])\n    # Iterate over all the numbers in the vector\n\
    \    for i in 1:length(numbers)\n        # Iterate over all the numbers in the\
    \ vector\n        for j in 1:length(numbers)\n            # If the distance between\
    \ the two numbers is less than the minimum distance\n            if abs(numbers[i]\
    \ - numbers[j]) < min_distance\n                # Update the minimum distance\n\
    \                min_distance = abs(numbers[i] - numbers[j])\n               \
    \ # Update the two closest numbers\n                closest_numbers = (numbers[i],\
    \ numbers[j])\n            end\n        end\n    end\n    # Return the two closest\
    \ numbers\n    return closest_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1w3jrdxf.jl:34\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 1.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1w3jrdxf.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1w3jrdxf.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1w3jrdxf.jl:35\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 1.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1w3jrdxf.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1w3jrdxf.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1w3jrdxf.jl:36\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 1.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1w3jrdxf.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1w3jrdxf.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1w3jrdxf.jl:37\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 1.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1w3jrdxf.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1w3jrdxf.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1w3jrdxf.jl:38\n  Expression: candida"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1w3jrdxf.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp1bld_bi4.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1bld_bi4.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1bld_bi4.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1bld_bi4.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    if n < 2\n        error(\"The vector must have at least two elements\")\n\
    \    end\n    min_diff = abs(numbers[1] - numbers[2])\n    min_index = (1, 2)\n\
    \    for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_index = (i, j)\n            end\n        end\n    end\n    if numbers[min_index[1]]\
    \ < numbers[min_index[2]]\n        return (numbers[min_index[1]], numbers[min_index[2]])\n\
    \    else\n        return (numbers[min_index[2]], numbers[min_index[1]])\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        throw(ArgumentError(\"numbers\
    \ must have at least two elements\"))\n    end\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_diff_index = 1\n    for i in 2:length(numbers)-1\n  \
    \      diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff\n   \
    \         min_diff = diff\n            min_diff_index = i\n        end\n    end\n\
    \    return (numbers[min_diff_index], numbers[min_diff_index+1])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf7rhl1v6.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf7rhl1v6.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf7rhl1v6.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpf7rhl1v6.jl:30\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf7rhl1v6.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf7rhl1v6.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpf7rhl1v6.jl:31\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf7rhl1v6.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf7rhl1v6.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf7rhl1v6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp78rrbrg6.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78rrbrg6.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78rrbrg6.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp78rrbrg6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_3r6le6g.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_3r6le6g.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_3r6le6g.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_3r6le6g.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa98kav09.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa98kav09.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa98kav09.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa98kav09.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpopnx9i1g.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpopnx9i1g.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpopnx9i1g.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpopnx9i1g.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n \
    \   #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0,\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk0egrrkh.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk0egrrkh.jl:1\n\
    in expression starting at /tmp/tmpk0egrrkh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdzjl_ana.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdzjl_ana.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdzjl_ana.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdzjl_ana.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    error(\"Not implemented yet\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf6k3nhvs.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  Not\
    \ implemented yet\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] find_closest_elements(numbers::Vector{Float64})\n     @ Main /tmp/tmpf6k3nhvs.jl:10\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf6k3nhvs.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf6k3nhvs.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf6k3nhvs.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpf6k3nhvs.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf6k3nhvs.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf6k3nhvs.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf6k3nhvs.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpf6k3nhvs.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf6k3nhvs.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf6k3nhvs.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf6k3nhvs.jl:20\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf6k3nhvs.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    error(\"Not implemented yet\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_r8g1c7k.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  Not\
    \ implemented yet\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] find_closest_elements(numbers::Vector{Float64})\n     @ Main /tmp/tmp_r8g1c7k.jl:10\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_r8g1c7k.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_r8g1c7k.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp_r8g1c7k.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp_r8g1c7k.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_r8g1c7k.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_r8g1c7k.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp_r8g1c7k.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp_r8g1c7k.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_r8g1c7k.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_r8g1c7k.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp_r8g1c7k.jl:20\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_r8g1c7k.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return min_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp824tm3lt.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp824tm3lt.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp824tm3lt.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp824tm3lt.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    if n < 2\n   \
    \     error(\"numbers must have at least two elements\")\n    end\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:n-1\n        for j in i+1:n\n            diff = abs(numbers[i] -\
    \ numbers[j])\n            if diff < min_diff\n                min_diff = diff\n\
    \                min_pair = (numbers[i], numbers[j])\n            end\n      \
    \  end\n    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnrbenwbe.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrbenwbe.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrbenwbe.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnrbenwbe.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0]\n    #numbers = [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0, 2.0, 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0,\
    \ 2.0, 2.0, 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0,\
    \ 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\
    \ 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8_z44avl.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8_z44avl.jl:1\n\
    in expression starting at /tmp/tmp8_z44avl.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt09udues.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt09udues.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt09udues.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt09udues.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"The vector must have\
    \ at least two elements\")\n    end\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff\n                min_diff = diff\n           \
    \     min_pair = (numbers[i], numbers[j])\n            end\n        end\n    end\n\
    \    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp9zbwzf8n.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9zbwzf8n.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9zbwzf8n.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9zbwzf8n.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   closest = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n     \
    \   for j in 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j])\
    \ < diff\n                diff = abs(numbers[i] - numbers[j])\n              \
    \  closest = (numbers[i], numbers[j])\n            end\n        end\n    end\n\
    \    return closest\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpo4jw6hef.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4jw6hef.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4jw6hef.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo4jw6hef.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmm1u0b7u.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmm1u0b7u.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmm1u0b7u.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmm1u0b7u.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp62687b9b.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp62687b9b.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp62687b9b.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp62687b9b.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        if abs(numbers[i] - numbers[i+1]) < min_diff\n\
    \            min_diff = abs(numbers[i] - numbers[i+1])\n            min_pair =\
    \ (numbers[i], numbers[i+1])\n        end\n    end\n    return min_pair\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbwgr5ydx.jl:27\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbwgr5ydx.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbwgr5ydx.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbwgr5ydx.jl:28\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbwgr5ydx.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbwgr5ydx.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbwgr5ydx.jl:29\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbwgr5ydx.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbwgr5ydx.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbwgr5ydx.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_index = [1, 2]\n    for i in 2:length(numbers)-1\n        if abs(numbers[i]\
    \ - numbers[i+1]) < min_diff\n            min_diff = abs(numbers[i] - numbers[i+1])\n\
    \            min_index = [i, i+1]\n        end\n    end\n    return numbers[min_index[1]],\
    \ numbers[min_index[2]]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzxqnjg6i.jl:26\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzxqnjg6i.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzxqnjg6i.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpzxqnjg6i.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzxqnjg6i.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzxqnjg6i.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpzxqnjg6i.jl:28\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzxqnjg6i.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzxqnjg6i.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzxqnjg6i.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    if n < 2\n        error(\"Vector must have at least two elements\")\n   \
    \ end\n    min_diff = abs(numbers[1] - numbers[2])\n    min_index = 1\n    for\
    \ i in 2:n-1\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff <\
    \ min_diff\n            min_diff = diff\n            min_index = i\n        end\n\
    \    end\n    return (numbers[min_index], numbers[min_index+1])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnrhum6d4.jl:32\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrhum6d4.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrhum6d4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpnrhum6d4.jl:33\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrhum6d4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrhum6d4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpnrhum6d4.jl:34\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrhum6d4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrhum6d4.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnrhum6d4.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_nums = (numbers[1], numbers[2])\n    for i in 1:length(numbers)-1\n \
    \       for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_nums = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_nums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb90e1h8g.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb90e1h8g.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb90e1h8g.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb90e1h8g.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # Initialize the minimum distance to be the distance between\
    \ the first two numbers\n    min_distance = abs(numbers[1] - numbers[2])\n   \
    \ # Initialize the closest pair to be the first two numbers\n    closest_pair\
    \ = (numbers[1], numbers[2])\n    # Loop over all pairs of numbers\n    for i\
    \ in 1:length(numbers)\n        for j in i+1:length(numbers)\n            # If\
    \ the distance between the pair is smaller than the current minimum distance,\n\
    \            # update the minimum distance and closest pair\n            if abs(numbers[i]\
    \ - numbers[j]) < min_distance\n                min_distance = abs(numbers[i]\
    \ - numbers[j])\n                closest_pair = (numbers[i], numbers[j])\n   \
    \         end\n        end\n    end\n    # Return the closest pair\n    return\
    \ closest_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpmi895edo.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmi895edo.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmi895edo.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmi895edo.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    if length(numbers) < 2\n        error(\"\
    Vector must have at least two elements\")\n    end\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_elements = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n\
    \        for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_elements = (numbers[i],\
    \ numbers[j])\n                end\n            end\n        end\n    end\n  \
    \  return min_elements\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp04a_rq0f.jl:34\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp04a_rq0f.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp04a_rq0f.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp04a_rq0f.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppo2ah265.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppo2ah265.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppo2ah265.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppo2ah265.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi76pjga8.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi76pjga8.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi76pjga8.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi76pjga8.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return min_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_k8dah2j.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_k8dah2j.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_k8dah2j.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_k8dah2j.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = Inf\n    min_pair = (0.0, 0.0)\n\
    \    for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n    \
    \        if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8unjw419.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8unjw419.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8unjw419.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8unjw419.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   a = numbers[1]\n    b = numbers[2]\n    for i in 1:length(numbers)\n     \
    \   for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < diff\n                    diff = abs(numbers[i] - numbers[j])\n\
    \                    a = numbers[i]\n                    b = numbers[j]\n    \
    \            end\n            end\n        end\n    end\n    return (a, b)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_ei_9adb.jl:32\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ei_9adb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ei_9adb.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ei_9adb.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    diff = abs(numbers[1]\
    \ - numbers[2])\n    num1 = numbers[1]\n    num2 = numbers[2]\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < diff\n\
    \                diff = abs(numbers[i] - numbers[j])\n                num1 = numbers[i]\n\
    \                num2 = numbers[j]\n            end\n        end\n    end\n  \
    \  return num1, num2\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpm5kdtw_g.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm5kdtw_g.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm5kdtw_g.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm5kdtw_g.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_diff_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n\
    \        for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_diff_pair = (numbers[i], numbers[j])\n            end\n       \
    \ end\n    end\n    return min_diff_pair\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp22tksrl1.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp22tksrl1.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp22tksrl1.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp22tksrl1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfr9tqyj5.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfr9tqyj5.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfr9tqyj5.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfr9tqyj5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgqzo5b96.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgqzo5b96.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgqzo5b96.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgqzo5b96.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz3ybp31h.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3ybp31h.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3ybp31h.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz3ybp31h.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # TODO: Implement this function\n    # Hint: You can use the\
    \ abs function to get the absolute value of a number\n    # Hint: You can use\
    \ the sort function to sort a vector of numbers\n    # Hint: You can use the sortperm\
    \ function to get the permutation vector that would sort a vector of numbers\n\
    \    # Hint: You can use the findfirst function to find the first occurence of\
    \ a value in a vector\n    # Hint: You can use the findlast function to find the\
    \ last occurence of a value in a vector\n    # Hint: You can use the findnext\
    \ function to find the next occurence of a value in a vector\n    # Hint: You\
    \ can use the findprev function to find the previous occurence of a value in a\
    \ vector\n    # Hint: You can use the findall function to find all occurences\
    \ of a value in a vector\n    # Hint: You can use the findnext function to find\
    \ the next occurence of a value in a vector\n    # Hint: You can use the findprev\
    \ function to find the previous occurence of a value in a vector\n    # Hint:\
    \ You can use the findall function to find all occurences of a value in a vector\n\
    \    # Hint: You can use the findnext function to find the next occurence of a\
    \ value in a vector\n    # Hint: You can use the findprev function to find the\
    \ previous occurence of a value in a vector\n    # Hint: You can use the findall\
    \ function to find all occurences of a value in a vector\n    # Hint: You can\
    \ use the findnext function to find the next occurence of a value in a vector\n\
    \    # Hint: You can use the findprev function to find the previous occurence\
    \ of a value in a vector\n    # Hint: You can use the findall function to find\
    \ all occurences of a value in a vector\n    # Hint: You can use the findnext\
    \ function to find the next occurence of a value in a vector\n    # Hint: You\
    \ can use the findprev function to find the previous occurence of a value in a\
    \ vector\n    # Hint: You can use the findall function to find all occurences\
    \ of a value in a vector\n   \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6sao_tde.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6sao_tde.jl:1\n\
    in expression starting at /tmp/tmp6sao_tde.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1],\
    \ numbers[2])\n    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n\
    \            if i != j\n                if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                    min_diff = abs(numbers[i] - numbers[j])\n               \
    \     min_pair = (numbers[i], numbers[j])\n                end\n            end\n\
    \        end\n    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvmihx6ic.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvmihx6ic.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvmihx6ic.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvmihx6ic.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphqx7pbxk.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphqx7pbxk.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphqx7pbxk.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphqx7pbxk.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphqx7pbxk.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphqx7pbxk.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphqx7pbxk.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphqx7pbxk.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphqx7pbxk.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphqx7pbxk.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphqx7pbxk.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphqx7pbxk.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphqx7pbxk.jl:21\n  Expression: candida"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphqx7pbxk.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb8tvq7fv.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8tvq7fv.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8tvq7fv.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb8tvq7fv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    error(\"Not implemented yet\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6298x8rb.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  Not\
    \ implemented yet\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] find_closest_elements(numbers::Vector{Float64})\n     @ Main /tmp/tmp6298x8rb.jl:10\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6298x8rb.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6298x8rb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp6298x8rb.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp6298x8rb.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6298x8rb.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6298x8rb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp6298x8rb.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp6298x8rb.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6298x8rb.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6298x8rb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp6298x8rb.jl:20\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6298x8rb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9gkkrg_6.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9gkkrg_6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9gkkrg_6.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9gkkrg_6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl5gh1so1.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl5gh1so1.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl5gh1so1.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl5gh1so1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_index = (1, 2)\n    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n\
    \            if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                min_index = (i, j)\n       \
    \     end\n        end\n    end\n    return (numbers[min_index[1]], numbers[min_index[2]])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe89xgi07.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe89xgi07.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe89xgi07.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe89xgi07.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpho5rb4v6.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpho5rb4v6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpho5rb4v6.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpho5rb4v6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_nums = (numbers[1], numbers[2])\n    for i in 1:length(numbers)-1\n \
    \       for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_nums = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_nums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph0_fr6tk.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph0_fr6tk.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph0_fr6tk.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph0_fr6tk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_index = (1, 2)\n    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n\
    \            if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                min_index = (i, j)\n       \
    \     end\n        end\n    end\n    return (numbers[min_index[1]], numbers[min_index[2]])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmponrpw3z3.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponrpw3z3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponrpw3z3.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmponrpw3z3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied vector of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_difference = Inf\n    smallest_difference_pair = (0.0,\
    \ 0.0)\n    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n\
    \            difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < smallest_difference\n                smallest_difference = difference\n  \
    \              smallest_difference_pair = (numbers[i], numbers[j])\n         \
    \   end\n        end\n    end\n    return smallest_difference_pair\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5nazfn8s.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5nazfn8s.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5nazfn8s.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5nazfn8s.jl:24\n"
  exit_code: 1
  status: SyntaxError
