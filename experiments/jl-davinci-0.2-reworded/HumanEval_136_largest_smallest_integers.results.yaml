name: HumanEval_136_largest_smallest_integers
language: jl
results:
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg_max = nothing\n    pos_min = nothing\n\
    \    for i in lst\n        if i < 0\n            if neg_max == nothing\n     \
    \           neg_max = i\n            elseif i > neg_max\n                neg_max\
    \ = i\n            end\n        elseif i > 0\n            if pos_min == nothing\n\
    \                pos_min = i\n            elseif i < pos_min\n               \
    \ pos_min = i\n            end\n        end\n    end\n    return neg_max, pos_min\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg = nothing\n    pos = nothing\n  \
    \  for i in lst\n        if i < 0 && (neg == nothing || i > neg)\n           \
    \ neg = i\n        elseif i > 0 && (pos == nothing || i < pos)\n            pos\
    \ = i\n        end\n    end\n    return neg, pos\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # your code here\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # TODO: Your code here\n    return (nothing,\
    \ nothing)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmprz03wekq.jl:24\\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\\n   Evaluated: (nothing, nothing) == (nothing,\
    \ 1)\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmprz03wekq.jl:24 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmprz03wekq.jl:23\\ntest set: Test\
    \ Failed at /tmp/tmprz03wekq.jl:25\\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\\n   Evaluated: (nothing, nothing) == (nothing, 1)\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmprz03wekq.jl:25 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmprz03wekq.jl:23\\ntest set: Test\
    \ Failed at /tmp/tmprz03wekq.jl:26\\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\\n   Evaluated: (nothing, nothing) == (-2, 1)\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmprz03wekq.jl:26 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmprz03wekq.jl:23\\ntest set: Test\
    \ Failed at /tmp/tmprz03wekq.jl:27\\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\\n   Evaluated: (nothing, nothing) == (-7, 2)\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmprz03wekq.jl:27 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmprz03wekq.jl:23\\ntest set: Test\
    \ Failed a"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i > 0\n            if b == nothing\n\
    \                b = i\n            else\n                if i < b\n         \
    \           b = i\n                end\n            end\n        else\n      \
    \      if a == nothing\n                a = i\n            else\n            \
    \    if i > a\n                    a = i\n                end\n            end\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvtn781ic.jl:53\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (0, 1) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvtn781ic.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvtn781ic.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpvtn781ic.jl:60\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (0, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvtn781ic.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvtn781ic.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvtn781ic.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    n = length(lst)\n    if n == 0\n    \
    \    return (nothing, nothing)\n    end\n    a = nothing\n    b = nothing\n  \
    \  for i in 1:n\n        if lst[i] < 0 && (a == nothing || lst[i] > a)\n     \
    \       a = lst[i]\n        end\n        if lst[i] > 0 && (b == nothing || lst[i]\
    \ < b)\n            b = lst[i]\n        end\n    end\n    return (a, b)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0 && b == nothing\n            b = i\n        elseif\
    \ i > 0 && i < b\n            b = i\n        elseif i < 0 && a == nothing\n  \
    \          a = i\n        elseif i < 0 && i > a\n            a = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && a == nothing\n            a = i\n        elseif\
    \ i < 0 && i > a\n            a = i\n        elseif i > 0 && b == nothing\n  \
    \          b = i\n        elseif i > 0 && i < b\n            b = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # your code here\n    return nothing,\
    \ nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpti4213wh.jl:24\\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\\n   Evaluated: (nothing, nothing) == (nothing,\
    \ 1)\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpti4213wh.jl:24 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpti4213wh.jl:23\\ntest set: Test\
    \ Failed at /tmp/tmpti4213wh.jl:25\\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\\n   Evaluated: (nothing, nothing) == (nothing, 1)\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpti4213wh.jl:25 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpti4213wh.jl:23\\ntest set: Test\
    \ Failed at /tmp/tmpti4213wh.jl:26\\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\\n   Evaluated: (nothing, nothing) == (-2, 1)\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpti4213wh.jl:26 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpti4213wh.jl:23\\ntest set: Test\
    \ Failed at /tmp/tmpti4213wh.jl:27\\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\\n   Evaluated: (nothing, nothing) == (-7, 2)\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpti4213wh.jl:27 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpti4213wh.jl:23\\ntest set: Test\
    \ Failed a"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing\n                b =\
    \ i\n            elseif i < b\n                b = i\n            end\n      \
    \  elseif i < 0\n            if a == nothing\n                a = i\n        \
    \    elseif i > a\n                a = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg_max = nothing\n    pos_min = nothing\n\
    \    for i in lst\n        if i < 0 && (neg_max == nothing || i > neg_max)\n \
    \           neg_max = i\n        elseif i > 0 && (pos_min == nothing || i < pos_min)\n\
    \            pos_min = i\n        end\n    end\n    return neg_max, pos_min\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    largest_negative = nothing\n    smallest_positive = nothing\n\
    \    for i in lst\n        if i < 0 && (largest_negative == nothing || i > largest_negative)\n\
    \            largest_negative = i\n        end\n        if i > 0 && (smallest_positive\
    \ == nothing || i < smallest_positive)\n            smallest_positive = i\n  \
    \      end\n    end\n    return (largest_negative, smallest_positive)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing\n                b =\
    \ i\n            elseif i < b\n                b = i\n            end\n      \
    \  elseif i < 0\n            if a == nothing\n                a = i\n        \
    \    elseif i > a\n                a = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg_max = nothing\n    pos_min = nothing\n\
    \    for i in lst\n        if i < 0\n            if neg_max == nothing\n     \
    \           neg_max = i\n            elseif i > neg_max\n                neg_max\
    \ = i\n            end\n        elseif i > 0\n            if pos_min == nothing\n\
    \                pos_min = i\n            elseif i < pos_min\n               \
    \ pos_min = i\n            end\n        end\n    end\n    return neg_max, pos_min\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg_max = nothing\n    pos_min = nothing\n\
    \    for i in lst\n        if i < 0 && neg_max == nothing\n            neg_max\
    \ = i\n        elseif i < 0 && i > neg_max\n            neg_max = i\n        elseif\
    \ i > 0 && pos_min == nothing\n            pos_min = i\n        elseif i > 0 &&\
    \ i < pos_min\n            pos_min = i\n        end\n    end\n    return neg_max,\
    \ pos_min\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # TODO: Your code here\n    a = nothing\n\
    \    b = nothing\n    for i in lst\n        if i < 0 && (a == nothing || i > a)\n\
    \            a = i\n        end\n        if i > 0 && (b == nothing || i < b)\n\
    \            b = i\n        end\n    end\n    return (a, b)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a, b = nothing, nothing\n    for i in\
    \ lst\n        if i < 0\n            if a == nothing\n                a = i\n\
    \            elseif i > a\n                a = i\n            end\n        elseif\
    \ i > 0\n            if b == nothing\n                b = i\n            elseif\
    \ i < b\n                b = i\n            end\n        end\n    end\n    return\
    \ a, b\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b isa nothing\n                b\
    \ = i\n            elseif i < b\n                b = i\n            end\n    \
    \    elseif i < 0\n            if a isa nothing\n                a = i\n     \
    \       elseif i > a\n                a = i\n            end\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsmnm4j4h.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\\n \
    \ TypeError: in isa, expected Type, got a value of type Nothing\\n  Stacktrace:\\\
    n   [1] largest_smallest_integers(lst::Vector{Int64})\\n     @ Main /tmp/tmpsmnm4j4h.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpsmnm4j4h.jl:40 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpsmnm4j4h.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpsmnm4j4h.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n  TypeError: in isa, expected\
    \ Type, got a value of type Nothing\\n  Stacktrace:\\n   [1] largest_smallest_integers(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpsmnm4j4h.jl:20\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpsmnm4j4h.jl:41 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpsmnm4j4h.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpsmnm4j4h.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\\n  TypeError: in isa, expected\
    \ Type, got a value of type Nothing\\n  Stacktrace:\\n   [1] largest_smallest_integers(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpsmnm4j4h.jl:20\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpsmnm4j4h.jl:42 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpsmnm4j4h.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpsmnm4j4h.jl:43\\n  Test"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       elseif i > 0 && (b == nothing || i < b)\n            b = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && a == nothing\n            a = i\n        elseif\
    \ i < 0 && i > a\n            a = i\n        elseif i > 0 && b == nothing\n  \
    \          b = i\n        elseif i > 0 && i < b\n            b = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && a == nothing\n            a = i\n        elseif\
    \ i < 0 && i > a\n            a = i\n        elseif i > 0 && b == nothing\n  \
    \          b = i\n        elseif i > 0 && i < b\n            b = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_max = nothing\n\
    \    pos_min = nothing\n    for i in lst\n        if i < 0\n            if neg_max\
    \ == nothing\n                neg_max = i\n            else\n                if\
    \ i > neg_max\n                    neg_max = i\n                end\n        \
    \    end\n        elseif i > 0\n            if pos_min == nothing\n          \
    \      pos_min = i\n            else\n                if i < pos_min\n       \
    \             pos_min = i\n                end\n            end\n        end\n\
    \    end\n    return (neg_max, pos_min)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && a == nothing\n            a = i\n        elseif\
    \ i < 0 && i > a\n            a = i\n        elseif i > 0 && b == nothing\n  \
    \          b = i\n        elseif i > 0 && i < b\n            b = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg_max = nothing\n    pos_min = nothing\n\
    \    for i in lst\n        if i < 0\n            if neg_max == nothing\n     \
    \           neg_max = i\n            elseif i > neg_max\n                neg_max\
    \ = i\n            end\n        elseif i > 0\n            if pos_min == nothing\n\
    \                pos_min = i\n            elseif i < pos_min\n               \
    \ pos_min = i\n            end\n        end\n    end\n    return neg_max, pos_min\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing\n                b =\
    \ i\n            elseif i < b\n                b = i\n            end\n      \
    \  elseif i < 0\n            if a == nothing\n                a = i\n        \
    \    elseif i > a\n                a = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a, b = nothing, nothing\n    for i in\
    \ lst\n        if i < 0\n            if a == nothing\n                a = i\n\
    \            elseif i > a\n                a = i\n            end\n        elseif\
    \ i > 0\n            if b == nothing\n                b = i\n            elseif\
    \ i < b\n                b = i\n            end\n        end\n    end\n    return\
    \ a, b\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg_max = nothing\n    pos_min = nothing\n\
    \    for i in lst\n        if i < 0\n            if neg_max == nothing\n     \
    \           neg_max = i\n            elseif i > neg_max\n                neg_max\
    \ = i\n            end\n        elseif i > 0\n            if pos_min == nothing\n\
    \                pos_min = i\n            elseif i < pos_min\n               \
    \ pos_min = i\n            end\n        end\n    end\n    return neg_max, pos_min\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && a == nothing\n            a = i\n        elseif\
    \ i < 0 && i > a\n            a = i\n        elseif i > 0 && b == nothing\n  \
    \          b = i\n        elseif i > 0 && i < b\n            b = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a, b = nothing, nothing\n    for i in\
    \ lst\n        if i > 0\n            if b == nothing || i < b\n              \
    \  b = i\n            end\n        elseif i < 0\n            if a == nothing ||\
    \ i > a\n                a = i\n            end\n        end\n    end\n    return\
    \ a, b\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg_max = nothing\n    pos_min = nothing\n\
    \    for i in lst\n        if i < 0\n            if neg_max == nothing\n     \
    \           neg_max = i\n            elseif i > neg_max\n                neg_max\
    \ = i\n            end\n        elseif i > 0\n            if pos_min == nothing\n\
    \                pos_min = i\n            elseif i < pos_min\n               \
    \ pos_min = i\n            end\n        end\n    end\n    return neg_max, pos_min\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg_max = nothing\n    pos_min = nothing\n\
    \    for i in lst\n        if i < 0\n            if neg_max == nothing\n     \
    \           neg_max = i\n            elseif i > neg_max\n                neg_max\
    \ = i\n            end\n        elseif i > 0\n            if pos_min == nothing\n\
    \                pos_min = i\n            elseif i < pos_min\n               \
    \ pos_min = i\n            end\n        end\n    end\n    return neg_max, pos_min\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || a < i)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || b > i)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing\n                b =\
    \ i\n            elseif i < b\n                b = i\n            end\n      \
    \  elseif i < 0\n            if a == nothing\n                a = i\n        \
    \    elseif i > a\n                a = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg = nothing\n    pos = nothing\n  \
    \  for i in lst\n        if i < 0\n            if neg == nothing\n           \
    \     neg = i\n            elseif i > neg\n                neg = i\n         \
    \   end\n        elseif i > 0\n            if pos == nothing\n               \
    \ pos = i\n            elseif i < pos\n                pos = i\n            end\n\
    \        end\n    end\n    return neg, pos\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing\n                b =\
    \ i\n            elseif i < b\n                b = i\n            end\n      \
    \  elseif i < 0\n            if a == nothing\n                a = i\n        \
    \    elseif i > a\n                a = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && a == nothing\n            a = i\n        elseif\
    \ i < 0 && i > a\n            a = i\n        elseif i > 0 && b == nothing\n  \
    \          b = i\n        elseif i > 0 && i < b\n            b = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg_max = nothing\n    pos_min = nothing\n\
    \    for x in lst\n        if x < 0\n            if neg_max == nothing || x >\
    \ neg_max\n                neg_max = x\n            end\n        elseif x > 0\n\
    \            if pos_min == nothing || x < pos_min\n                pos_min = x\n\
    \            end\n        end\n    end\n    return neg_max, pos_min\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # Your code here\n    a = nothing\n \
    \   b = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            elseif i > a\n                a = i\n    \
    \        end\n        elseif i > 0\n            if b == nothing\n            \
    \    b = i\n            elseif i < b\n                b = i\n            end\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg_max = nothing\n    pos_min = nothing\n\
    \    for i in lst\n        if i < 0\n            if neg_max == nothing\n     \
    \           neg_max = i\n            elseif i > neg_max\n                neg_max\
    \ = i\n            end\n        elseif i > 0\n            if pos_min == nothing\n\
    \                pos_min = i\n            elseif i < pos_min\n               \
    \ pos_min = i\n            end\n        end\n    end\n    return neg_max, pos_min\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && a == nothing\n            a = i\n        elseif\
    \ i < 0 && i > a\n            a = i\n        elseif i > 0 && b == nothing\n  \
    \          b = i\n        elseif i > 0 && i < b\n            b = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg_max = nothing\n    pos_min = nothing\n\
    \    for i in lst\n        if i < 0\n            if neg_max == nothing\n     \
    \           neg_max = i\n            elseif i > neg_max\n                neg_max\
    \ = i\n            end\n        elseif i > 0\n            if pos_min == nothing\n\
    \                pos_min = i\n            elseif i < pos_min\n               \
    \ pos_min = i\n            end\n        end\n    end\n    return neg_max, pos_min\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    negatives = filter(x -> x < 0, lst)\n    positives =\
    \ filter(x -> x > 0, lst)\n    if length(negatives) == 0\n        return (nothing,\
    \ minimum(positives))\n    elseif length(positives) == 0\n        return (maximum(negatives),\
    \ nothing)\n    else\n        return (maximum(negatives), minimum(positives))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpa2nizlo0.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([0]) == (nothing, nothing)\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] largest_smallest_integers(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpa2nizlo0.jl:22\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpa2nizlo0.jl:40 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpa2nizlo0.jl:33\\nTest\
    \ Summary: | Pass  Error  Total\\ntest set      |   10      1     11\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing\n                b =\
    \ i\n            elseif i < b\n                b = i\n            end\n      \
    \  elseif i < 0\n            if a == nothing\n                a = i\n        \
    \    elseif i > a\n                a = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # TODO: implement this function\n   \
    \ return nothing, nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1vvvkwco.jl:24\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1vvvkwco.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1vvvkwco.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1vvvkwco.jl:25\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1vvvkwco.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1vvvkwco.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1vvvkwco.jl:26\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, nothing) == (-2, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1vvvkwco.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1vvvkwco.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1vvvkwco.jl:27\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, nothing) == (-7, 2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1vvvkwco.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1vvvkwco.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1vvvkwco.jl:28\n  Expression: candidate(["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1vvvkwco.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # TODO: Write your code here\n    return\
    \ (nothing, nothing)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnnvew4wh.jl:24\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnnvew4wh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnnvew4wh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnnvew4wh.jl:25\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnnvew4wh.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnnvew4wh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnnvew4wh.jl:26\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, nothing) == (-2, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnnvew4wh.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnnvew4wh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnnvew4wh.jl:27\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, nothing) == (-7, 2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnnvew4wh.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnnvew4wh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnnvew4wh.jl:28\n  Expression: candidate(["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnnvew4wh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg_max = nothing\n    pos_min = nothing\n\
    \    for i in lst\n        if i < 0\n            if neg_max == nothing\n     \
    \           neg_max = i\n            elseif i > neg_max\n                neg_max\
    \ = i\n            end\n        elseif i > 0\n            if pos_min == nothing\n\
    \                pos_min = i\n            elseif i < pos_min\n               \
    \ pos_min = i\n            end\n        end\n    end\n    return neg_max, pos_min\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       elseif i > 0 && (b == nothing || i < b)\n            b = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing\n                b =\
    \ i\n            elseif i < b\n                b = i\n            end\n      \
    \  elseif i < 0\n            if a == nothing\n                a = i\n        \
    \    elseif i > a\n                a = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && a == nothing\n            a = i\n        elseif\
    \ i < 0 && i > a\n            a = i\n        elseif i > 0 && b == nothing\n  \
    \          b = i\n        elseif i > 0 && i < b\n            b = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && a == nothing\n            a = i\n        elseif\
    \ i < 0 && i > a\n            a = i\n        elseif i > 0 && b == nothing\n  \
    \          b = i\n        elseif i > 0 && i < b\n            b = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif a < i\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif b > i\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                if lst[1] < lst[2]\n         \
    \           return (nothing, lst[1])\n                end\n                if\
    \ lst[1] > lst[2]\n                    return (nothing, lst[2])\n            \
    \    end\n            end\n        end\n    end\n    if length(lst) > 1\n    \
    \    if lst[1] < 0\n            if lst[2] < 0\n                if lst[1] > lst[2]\n\
    \                    return (lst[1], nothing)\n                end\n         \
    \       if lst[1] < lst[2]\n                    return (lst[2], nothing)\n   \
    \             end\n            end\n        end\n    end\n    if length(lst) >\
    \ 1\n        if lst[1] > 0\n            if lst[2] < 0\n                return\
    \ (lst[2], lst[1])\n            end\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            if lst[2] > 0\n                return\
    \ (lst[1], lst[2])\n            end\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] > 0\n            if lst[2] > 0\n                if lst[3]\
    \ > 0\n                    if lst[1] < lst[2]\n                        if lst[1]\
    \ < lst[3]\n                            return (nothing, lst[1])\n           \
    \             end\n                        if l\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzen_c66m.jl:1\nin expression starting at /tmp/tmpzen_c66m.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing\n                b =\
    \ i\n            elseif i < b\n                b = i\n            end\n      \
    \  elseif i < 0\n            if a == nothing\n                a = i\n        \
    \    elseif i > a\n                a = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing\n                b =\
    \ i\n            elseif i < b\n                b = i\n            end\n      \
    \  elseif i < 0\n            if a == nothing\n                a = i\n        \
    \    elseif i > a\n                a = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing\n                b =\
    \ i\n            elseif i < b\n                b = i\n            end\n      \
    \  elseif i < 0\n            if a == nothing\n                a = i\n        \
    \    elseif i > a\n                a = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negs = filter(x -> x < 0, lst)\n    pos\
    \ = filter(x -> x > 0, lst)\n    if isempty(negs)\n        a = nothing\n    else\n\
    \        a = maximum(negs)\n    end\n    if isempty(pos)\n        b = nothing\n\
    \    else\n        b = minimum(pos)\n    end\n    return (a, b)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing\n                b =\
    \ i\n            elseif i < b\n                b = i\n            end\n      \
    \  elseif i < 0\n            if a == nothing\n                a = i\n        \
    \    elseif i > a\n                a = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif a < i\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif b > i\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif a < i\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif b > i\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a vector.\n    If there is no negative or positive integers, return\
    \ them as nothing.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
