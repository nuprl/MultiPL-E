name: HumanEval_146_specialFilter
language: jl
results:
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplz7zec04.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplz7zec04.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplz7zec04.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplz7zec04.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplz7zec04.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplz7zec04.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplz7zec04.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplz7zec04.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplz7zec04.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplz7zec04.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyrrqcs8z.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyrrqcs8z.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyrrqcs8z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyrrqcs8z.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyrrqcs8z.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyrrqcs8z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyrrqcs8z.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyrrqcs8z.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyrrqcs8z.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyrrqcs8z.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(num) && isodd(num\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6wdacb5d.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6wdacb5d.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6wdacb5d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6wdacb5d.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6wdacb5d.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6wdacb5d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6wdacb5d.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6wdacb5d.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6wdacb5d.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6wdacb5d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0tpvv31e.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0tpvv31e.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0tpvv31e.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0tpvv31e.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0tpvv31e.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0tpvv31e.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0tpvv31e.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0tpvv31e.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0tpvv31e.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0tpvv31e.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(last(digits(i)))\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && num % 2 != 0 &&\
    \ num % 10 != 0\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq4gleqdw.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq4gleqdw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq4gleqdw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq4gleqdw.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq4gleqdw.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq4gleqdw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq4gleqdw.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq4gleqdw.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq4gleqdw.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq4gleqdw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if (i > 10) && (i % 2 != 0) && (i\
    \ % 10 != 0)\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr29lm90b.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr29lm90b.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr29lm90b.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpr29lm90b.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr29lm90b.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr29lm90b.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpr29lm90b.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr29lm90b.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr29lm90b.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr29lm90b.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(first(digits(num)))\
    \ && isodd(last(digits(num)))\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeomg3hl8.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeomg3hl8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeomg3hl8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeomg3hl8.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeomg3hl8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeomg3hl8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeomg3hl8.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpeomg3hl8.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeomg3hl8.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeomg3hl8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm8fi5tme.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm8fi5tme.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8fi5tme.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm8fi5tme.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm8fi5tme.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8fi5tme.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm8fi5tme.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm8fi5tme.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8fi5tme.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm8fi5tme.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && num % 2 != 0 &&\
    \ num % 10 != 0\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprnreb6ez.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprnreb6ez.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprnreb6ez.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprnreb6ez.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprnreb6ez.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprnreb6ez.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprnreb6ez.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprnreb6ez.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprnreb6ez.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprnreb6ez.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpurqjshpl.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurqjshpl.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurqjshpl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpurqjshpl.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurqjshpl.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurqjshpl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpurqjshpl.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpurqjshpl.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurqjshpl.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpurqjshpl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppoh_4y66.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppoh_4y66.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppoh_4y66.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppoh_4y66.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppoh_4y66.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppoh_4y66.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppoh_4y66.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppoh_4y66.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppoh_4y66.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppoh_4y66.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(num) && isodd(num\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm9s9lk70.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm9s9lk70.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm9s9lk70.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm9s9lk70.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm9s9lk70.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm9s9lk70.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm9s9lk70.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm9s9lk70.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm9s9lk70.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm9s9lk70.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps1e12mnv.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps1e12mnv.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps1e12mnv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps1e12mnv.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps1e12mnv.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps1e12mnv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps1e12mnv.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps1e12mnv.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps1e12mnv.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps1e12mnv.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10^(floor(log10(i))\
    \ + 1) == 1 || i % 10^(floor(log10(i)) + 1) == 3 || i % 10^(floor(log10(i)) +\
    \ 1) == 5 || i % 10^(floor(log10(i)) + 1) == 7 || i % 10^(floor(log10(i)) + 1)\
    \ == 9)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0q2r_jyp.jl:25\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q2r_jyp.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q2r_jyp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0q2r_jyp.jl:26\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q2r_jyp.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q2r_jyp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0q2r_jyp.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q2r_jyp.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q2r_jyp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0q2r_jyp.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0q2r_jyp.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q2r_jyp.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0q2r_jyp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(last(digits(i)))\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvblbpt0f.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvblbpt0f.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvblbpt0f.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvblbpt0f.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvblbpt0f.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvblbpt0f.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvblbpt0f.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvblbpt0f.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvblbpt0f.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvblbpt0f.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10^(floor(log10(i))\
    \ + 1) == 1 || i % 10^(floor(log10(i)) + 1) == 3 || i % 10^(floor(log10(i)) +\
    \ 1) == 5 || i % 10^(floor(log10(i)) + 1) == 7 || i % 10^(floor(log10(i)) + 1)\
    \ == 9)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk5qrzark.jl:25\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk5qrzark.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk5qrzark.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk5qrzark.jl:26\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk5qrzark.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk5qrzark.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk5qrzark.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk5qrzark.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk5qrzark.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk5qrzark.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk5qrzark.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk5qrzark.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk5qrzark.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && div(i,\
    \ 10) % 2 != 0\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbxh6svr1.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxh6svr1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxh6svr1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbxh6svr1.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxh6svr1.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxh6svr1.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbxh6svr1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && (i %\
    \ 10) % 2 != 0\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7a37an7x.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7a37an7x.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7a37an7x.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7a37an7x.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7a37an7x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7a37an7x.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7a37an7x.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7a37an7x.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7a37an7x.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7a37an7x.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5pmd_lfp.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5pmd_lfp.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5pmd_lfp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5pmd_lfp.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5pmd_lfp.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5pmd_lfp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5pmd_lfp.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5pmd_lfp.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5pmd_lfp.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5pmd_lfp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp3sltgjg.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp3sltgjg.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp3sltgjg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp3sltgjg.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp3sltgjg.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp3sltgjg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp3sltgjg.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpp3sltgjg.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp3sltgjg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp3sltgjg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjxi7rqmx.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjxi7rqmx.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjxi7rqmx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjxi7rqmx.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjxi7rqmx.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjxi7rqmx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjxi7rqmx.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjxi7rqmx.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjxi7rqmx.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjxi7rqmx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6r0f2nvj.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6r0f2nvj.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6r0f2nvj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6r0f2nvj.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6r0f2nvj.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6r0f2nvj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6r0f2nvj.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6r0f2nvj.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6r0f2nvj.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6r0f2nvj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(first(digits(num)))\
    \ && isodd(last(digits(num)))\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb5srjvph.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb5srjvph.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb5srjvph.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb5srjvph.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb5srjvph.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb5srjvph.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb5srjvph.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb5srjvph.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb5srjvph.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb5srjvph.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr2xm1jw6.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr2xm1jw6.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr2xm1jw6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpr2xm1jw6.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr2xm1jw6.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr2xm1jw6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpr2xm1jw6.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr2xm1jw6.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr2xm1jw6.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr2xm1jw6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4tyv8dc4.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4tyv8dc4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4tyv8dc4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4tyv8dc4.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4tyv8dc4.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4tyv8dc4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4tyv8dc4.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4tyv8dc4.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4tyv8dc4.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4tyv8dc4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(first(digits(num)))\
    \ && isodd(last(digits(num)))\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph2c5nrwf.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph2c5nrwf.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph2c5nrwf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph2c5nrwf.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph2c5nrwf.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph2c5nrwf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph2c5nrwf.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph2c5nrwf.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph2c5nrwf.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph2c5nrwf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvmaoxa23.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvmaoxa23.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvmaoxa23.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvmaoxa23.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvmaoxa23.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvmaoxa23.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvmaoxa23.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvmaoxa23.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvmaoxa23.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvmaoxa23.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(firstDigit(i))\
    \ && isodd(lastDigit(i))\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq4s9m4fc.jl:25\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: firstDigit\
    \ not defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n    \
    \ @ Main /tmp/tmpq4s9m4fc.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq4s9m4fc.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq4s9m4fc.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpq4s9m4fc.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: firstDigit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpq4s9m4fc.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq4s9m4fc.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq4s9m4fc.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpq4s9m4fc.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: firstDigit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq4s9m4fc.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq4s9m4fc.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq4s9m4fc.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpq4s9m4fc.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: firstDigit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq4s9m4fc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp09g8hmcp.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp09g8hmcp.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp09g8hmcp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp09g8hmcp.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp09g8hmcp.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp09g8hmcp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp09g8hmcp.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp09g8hmcp.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp09g8hmcp.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp09g8hmcp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi_eglvpj.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi_eglvpj.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_eglvpj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi_eglvpj.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi_eglvpj.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_eglvpj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi_eglvpj.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi_eglvpj.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_eglvpj.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi_eglvpj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfnd65bu1.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfnd65bu1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfnd65bu1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfnd65bu1.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfnd65bu1.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfnd65bu1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfnd65bu1.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfnd65bu1.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfnd65bu1.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfnd65bu1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10^(floor(log10(i))\
    \ + 1) == 1 || i % 10^(floor(log10(i)) + 1) == 3 || i % 10^(floor(log10(i)) +\
    \ 1) == 5 || i % 10^(floor(log10(i)) + 1) == 7 || i % 10^(floor(log10(i)) + 1)\
    \ == 9)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwoz41y4l.jl:25\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwoz41y4l.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwoz41y4l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwoz41y4l.jl:26\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwoz41y4l.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwoz41y4l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwoz41y4l.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwoz41y4l.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwoz41y4l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwoz41y4l.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwoz41y4l.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwoz41y4l.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwoz41y4l.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps6ahh1al.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps6ahh1al.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps6ahh1al.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps6ahh1al.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps6ahh1al.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps6ahh1al.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps6ahh1al.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps6ahh1al.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps6ahh1al.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps6ahh1al.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(num) && isodd(first(num))\
    \ && isodd(last(num))\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfoxn382t.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfoxn382t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfoxn382t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfoxn382t.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfoxn382t.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfoxn382t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfoxn382t.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfoxn382t.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfoxn382t.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfoxn382t.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk4wckhp0.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4wckhp0.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4wckhp0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk4wckhp0.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4wckhp0.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4wckhp0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk4wckhp0.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk4wckhp0.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4wckhp0.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk4wckhp0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa48muo68.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa48muo68.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa48muo68.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa48muo68.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa48muo68.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa48muo68.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa48muo68.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa48muo68.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa48muo68.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa48muo68.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_whav7tj.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_whav7tj.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_whav7tj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_whav7tj.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_whav7tj.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_whav7tj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_whav7tj.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_whav7tj.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_whav7tj.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_whav7tj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6f8ags2s.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6f8ags2s.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6f8ags2s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6f8ags2s.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6f8ags2s.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6f8ags2s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6f8ags2s.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6f8ags2s.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6f8ags2s.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6f8ags2s.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdc32lz9q.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdc32lz9q.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdc32lz9q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdc32lz9q.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdc32lz9q.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdc32lz9q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdc32lz9q.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdc32lz9q.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdc32lz9q.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdc32lz9q.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i = 1:length(nums)\n        if nums[i] > 10 && isodd(nums[i]\
    \ % 10) && isodd(nums[i] % 100)\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5p39rsdk.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5p39rsdk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5p39rsdk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5p39rsdk.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5p39rsdk.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5p39rsdk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5p39rsdk.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5p39rsdk.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5p39rsdk.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5p39rsdk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10^(floor(log10(i))\
    \ + 1) == 1 || i % 10^(floor(log10(i)) + 1) == 3 || i % 10^(floor(log10(i)) +\
    \ 1) == 5 || i % 10^(floor(log10(i)) + 1) == 7 || i % 10^(floor(log10(i)) + 1)\
    \ == 9)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplxu__xjt.jl:25\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplxu__xjt.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplxu__xjt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplxu__xjt.jl:26\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplxu__xjt.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplxu__xjt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplxu__xjt.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplxu__xjt.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplxu__xjt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplxu__xjt.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplxu__xjt.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplxu__xjt.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplxu__xjt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu1q02lh9.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu1q02lh9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu1q02lh9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu1q02lh9.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu1q02lh9.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu1q02lh9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu1q02lh9.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpu1q02lh9.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu1q02lh9.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu1q02lh9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq9d80gyl.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq9d80gyl.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq9d80gyl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq9d80gyl.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq9d80gyl.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq9d80gyl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq9d80gyl.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq9d80gyl.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq9d80gyl.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq9d80gyl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && num % 2 != 0 &&\
    \ num % 10 != 0\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfbqlzkw2.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfbqlzkw2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfbqlzkw2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfbqlzkw2.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfbqlzkw2.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfbqlzkw2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfbqlzkw2.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfbqlzkw2.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfbqlzkw2.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfbqlzkw2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeiwadt33.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeiwadt33.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeiwadt33.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeiwadt33.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeiwadt33.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeiwadt33.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeiwadt33.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpeiwadt33.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeiwadt33.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeiwadt33.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(first(digits(num)))\
    \ && isodd(last(digits(num)))\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && first_digit(i) % 2\
    \ != 0 && last_digit(i) % 2 != 0\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp510s0qe4.jl:25\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: first_digit\
    \ not defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n    \
    \ @ Main /tmp/tmp510s0qe4.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp510s0qe4.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp510s0qe4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp510s0qe4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: first_digit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp510s0qe4.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp510s0qe4.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp510s0qe4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp510s0qe4.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: first_digit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp510s0qe4.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp510s0qe4.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp510s0qe4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp510s0qe4.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: first_digit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64}"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp510s0qe4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(first(num))\
    \ && isodd(last(num))\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmputgxcpzm.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputgxcpzm.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputgxcpzm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmputgxcpzm.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputgxcpzm.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputgxcpzm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmputgxcpzm.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmputgxcpzm.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputgxcpzm.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmputgxcpzm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb43h5_og.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb43h5_og.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb43h5_og.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb43h5_og.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb43h5_og.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb43h5_og.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb43h5_og.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb43h5_og.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb43h5_og.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb43h5_og.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3ir01c55.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ir01c55.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ir01c55.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3ir01c55.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ir01c55.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ir01c55.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3ir01c55.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3ir01c55.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ir01c55.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ir01c55.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe3jbx9f5.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe3jbx9f5.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe3jbx9f5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe3jbx9f5.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe3jbx9f5.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe3jbx9f5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe3jbx9f5.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe3jbx9f5.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe3jbx9f5.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe3jbx9f5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj813hbx8.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj813hbx8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj813hbx8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj813hbx8.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj813hbx8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj813hbx8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj813hbx8.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj813hbx8.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj813hbx8.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj813hbx8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnpreh20z.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnpreh20z.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnpreh20z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnpreh20z.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnpreh20z.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnpreh20z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnpreh20z.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnpreh20z.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnpreh20z.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnpreh20z.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(first(digits(num)))\
    \ && isodd(last(digits(num)))\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpggcctwes.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpggcctwes.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpggcctwes.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpggcctwes.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpggcctwes.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpggcctwes.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpggcctwes.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpggcctwes.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpggcctwes.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpggcctwes.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6e11vm2u.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6e11vm2u.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6e11vm2u.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6e11vm2u.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6e11vm2u.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6e11vm2u.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6e11vm2u.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6e11vm2u.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6e11vm2u.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6e11vm2u.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcy21k0vk.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcy21k0vk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcy21k0vk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcy21k0vk.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcy21k0vk.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcy21k0vk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcy21k0vk.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcy21k0vk.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcy21k0vk.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcy21k0vk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpijj42rp8.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpijj42rp8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpijj42rp8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpijj42rp8.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpijj42rp8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpijj42rp8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpijj42rp8.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpijj42rp8.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpijj42rp8.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpijj42rp8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpibv7e_gh.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpibv7e_gh.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpibv7e_gh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpibv7e_gh.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpibv7e_gh.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpibv7e_gh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpibv7e_gh.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpibv7e_gh.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpibv7e_gh.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpibv7e_gh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && (i %\
    \ 10) % 2 != 0\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkf47iktu.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkf47iktu.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkf47iktu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkf47iktu.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkf47iktu.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkf47iktu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkf47iktu.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkf47iktu.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkf47iktu.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkf47iktu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1xl_fsww.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1xl_fsww.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xl_fsww.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1xl_fsww.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1xl_fsww.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xl_fsww.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1xl_fsww.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1xl_fsww.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xl_fsww.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1xl_fsww.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0o3wo3m7.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0o3wo3m7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0o3wo3m7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0o3wo3m7.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0o3wo3m7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0o3wo3m7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0o3wo3m7.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0o3wo3m7.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0o3wo3m7.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0o3wo3m7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(first(digits(num)))\
    \ && isodd(last(digits(num)))\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwft9owjc.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwft9owjc.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwft9owjc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwft9owjc.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwft9owjc.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwft9owjc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwft9owjc.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwft9owjc.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwft9owjc.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwft9owjc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && (i %\
    \ 10) % 2 != 0\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_10el7l9.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_10el7l9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_10el7l9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_10el7l9.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_10el7l9.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_10el7l9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_10el7l9.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_10el7l9.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_10el7l9.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_10el7l9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && (i %\
    \ 10) % 2 != 0\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptf104iyo.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptf104iyo.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptf104iyo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptf104iyo.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptf104iyo.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptf104iyo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptf104iyo.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptf104iyo.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptf104iyo.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptf104iyo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_0w01zdr.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_0w01zdr.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_0w01zdr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_0w01zdr.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_0w01zdr.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_0w01zdr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_0w01zdr.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_0w01zdr.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_0w01zdr.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_0w01zdr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(first(digits(num)))\
    \ && isodd(last(digits(num)))\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjhtwq81d.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjhtwq81d.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjhtwq81d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjhtwq81d.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjhtwq81d.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjhtwq81d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjhtwq81d.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjhtwq81d.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjhtwq81d.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjhtwq81d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5vfdafre.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5vfdafre.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5vfdafre.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5vfdafre.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5vfdafre.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5vfdafre.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5vfdafre.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5vfdafre.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5vfdafre.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5vfdafre.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && (i %\
    \ 10) % 2 != 0\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpknzyg4aq.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpknzyg4aq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpknzyg4aq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpknzyg4aq.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpknzyg4aq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpknzyg4aq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpknzyg4aq.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpknzyg4aq.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpknzyg4aq.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpknzyg4aq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4hw9vnh3.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hw9vnh3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hw9vnh3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4hw9vnh3.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hw9vnh3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hw9vnh3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4hw9vnh3.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4hw9vnh3.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hw9vnh3.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4hw9vnh3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp05r9smds.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp05r9smds.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp05r9smds.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp05r9smds.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp05r9smds.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp05r9smds.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp05r9smds.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp05r9smds.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp05r9smds.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp05r9smds.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(last(digits(i)))\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsmpu4x6k.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsmpu4x6k.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsmpu4x6k.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsmpu4x6k.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsmpu4x6k.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsmpu4x6k.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsmpu4x6k.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsmpu4x6k.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsmpu4x6k.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsmpu4x6k.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(first(digits(num)))\
    \ && isodd(last(digits(num)))\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(first(num))\
    \ && isodd(last(num))\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdj7jw0_t.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdj7jw0_t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdj7jw0_t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdj7jw0_t.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdj7jw0_t.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdj7jw0_t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdj7jw0_t.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdj7jw0_t.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdj7jw0_t.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdj7jw0_t.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ml032pg.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ml032pg.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ml032pg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8ml032pg.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ml032pg.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ml032pg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8ml032pg.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8ml032pg.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ml032pg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ml032pg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpex_yzn0o.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpex_yzn0o.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpex_yzn0o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpex_yzn0o.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpex_yzn0o.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpex_yzn0o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpex_yzn0o.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpex_yzn0o.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpex_yzn0o.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpex_yzn0o.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5qxehm1_.jl:18\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp5qxehm1_.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5qxehm1_.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5qxehm1_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp5qxehm1_.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp5qxehm1_.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5qxehm1_.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5qxehm1_.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgo2pgwi8.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgo2pgwi8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgo2pgwi8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgo2pgwi8.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgo2pgwi8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgo2pgwi8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgo2pgwi8.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgo2pgwi8.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgo2pgwi8.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgo2pgwi8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyo1vwirs.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyo1vwirs.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyo1vwirs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyo1vwirs.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyo1vwirs.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyo1vwirs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyo1vwirs.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyo1vwirs.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyo1vwirs.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyo1vwirs.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf3y5jydp.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3y5jydp.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3y5jydp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf3y5jydp.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3y5jydp.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3y5jydp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf3y5jydp.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf3y5jydp.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3y5jydp.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf3y5jydp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkd5bmuam.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkd5bmuam.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkd5bmuam.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkd5bmuam.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkd5bmuam.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkd5bmuam.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkd5bmuam.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkd5bmuam.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkd5bmuam.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkd5bmuam.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf50vtj_g.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf50vtj_g.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf50vtj_g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf50vtj_g.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf50vtj_g.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf50vtj_g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf50vtj_g.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf50vtj_g.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf50vtj_g.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf50vtj_g.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(num) && isodd(num\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7qz5dk91.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7qz5dk91.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7qz5dk91.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7qz5dk91.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7qz5dk91.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7qz5dk91.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7qz5dk91.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7qz5dk91.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7qz5dk91.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7qz5dk91.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8esvd0xe.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8esvd0xe.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8esvd0xe.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8esvd0xe.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8esvd0xe.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8esvd0xe.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8esvd0xe.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8esvd0xe.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8esvd0xe.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8esvd0xe.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(last(digits(i)))\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz9ivd20f.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz9ivd20f.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz9ivd20f.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz9ivd20f.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz9ivd20f.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz9ivd20f.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz9ivd20f.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpz9ivd20f.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz9ivd20f.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz9ivd20f.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp02nppa8d.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp02nppa8d.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp02nppa8d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp02nppa8d.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp02nppa8d.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp02nppa8d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp02nppa8d.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp02nppa8d.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp02nppa8d.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp02nppa8d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp69728900.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69728900.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69728900.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp69728900.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69728900.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69728900.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp69728900.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp69728900.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69728900.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp69728900.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(num) && isodd(num\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk59e_0b7.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk59e_0b7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk59e_0b7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk59e_0b7.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk59e_0b7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk59e_0b7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk59e_0b7.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk59e_0b7.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk59e_0b7.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk59e_0b7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(num) && isodd(first(num))\
    \ && isodd(last(num))\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0l40d102.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0l40d102.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0l40d102.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0l40d102.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0l40d102.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0l40d102.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0l40d102.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0l40d102.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0l40d102.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0l40d102.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    num_special = 0\n    for num in nums\n        if num > 10 && isodd(first(digits(num)))\
    \ && isodd(last(digits(num)))\n            num_special += 1\n        end\n   \
    \ end\n    return num_special\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe8s7xijn.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe8s7xijn.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe8s7xijn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe8s7xijn.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe8s7xijn.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe8s7xijn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe8s7xijn.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe8s7xijn.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe8s7xijn.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe8s7xijn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(num) && isodd(num\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqi92rl9l.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqi92rl9l.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqi92rl9l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqi92rl9l.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqi92rl9l.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqi92rl9l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqi92rl9l.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqi92rl9l.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqi92rl9l.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqi92rl9l.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi28tb5cs.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi28tb5cs.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi28tb5cs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi28tb5cs.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi28tb5cs.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi28tb5cs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi28tb5cs.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi28tb5cs.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi28tb5cs.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi28tb5cs.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbno513ey.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbno513ey.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbno513ey.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbno513ey.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbno513ey.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbno513ey.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbno513ey.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbno513ey.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbno513ey.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbno513ey.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(num) && isodd(num\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_tm2pbol.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_tm2pbol.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_tm2pbol.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_tm2pbol.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_tm2pbol.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_tm2pbol.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_tm2pbol.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_tm2pbol.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_tm2pbol.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_tm2pbol.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk9mqq65q.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk9mqq65q.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk9mqq65q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk9mqq65q.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk9mqq65q.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk9mqq65q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk9mqq65q.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk9mqq65q.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk9mqq65q.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk9mqq65q.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if (i > 10) && (i % 2 != 0) && (i\
    \ % 10 != 0)\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprqagwrjy.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqagwrjy.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqagwrjy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprqagwrjy.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqagwrjy.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqagwrjy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprqagwrjy.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprqagwrjy.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqagwrjy.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprqagwrjy.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc9a25pr3.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc9a25pr3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc9a25pr3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc9a25pr3.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc9a25pr3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc9a25pr3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc9a25pr3.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc9a25pr3.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc9a25pr3.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc9a25pr3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpthqyff9y.jl:18\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpthqyff9y.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpthqyff9y.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpthqyff9y.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpthqyff9y.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpthqyff9y.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpthqyff9y.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpthqyff9y.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpogstakq1.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpogstakq1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpogstakq1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpogstakq1.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpogstakq1.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpogstakq1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpogstakq1.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpogstakq1.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpogstakq1.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpogstakq1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpybm16307.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybm16307.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybm16307.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpybm16307.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybm16307.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybm16307.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpybm16307.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpybm16307.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybm16307.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpybm16307.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ypijzrx.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ypijzrx.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ypijzrx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9ypijzrx.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ypijzrx.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ypijzrx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9ypijzrx.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9ypijzrx.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ypijzrx.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ypijzrx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(firstdigit(i))\
    \ && isodd(lastdigit(i))\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyjkorg2g.jl:25\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: firstdigit\
    \ not defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n    \
    \ @ Main /tmp/tmpyjkorg2g.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyjkorg2g.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyjkorg2g.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpyjkorg2g.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: firstdigit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpyjkorg2g.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyjkorg2g.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyjkorg2g.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpyjkorg2g.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: firstdigit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpyjkorg2g.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyjkorg2g.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyjkorg2g.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpyjkorg2g.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: firstdigit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyjkorg2g.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcad4vqau.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcad4vqau.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcad4vqau.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcad4vqau.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcad4vqau.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcad4vqau.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcad4vqau.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcad4vqau.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcad4vqau.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcad4vqau.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprhoi1wbz.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprhoi1wbz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprhoi1wbz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprhoi1wbz.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprhoi1wbz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprhoi1wbz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprhoi1wbz.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprhoi1wbz.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprhoi1wbz.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprhoi1wbz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzb1gltyl.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzb1gltyl.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzb1gltyl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzb1gltyl.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzb1gltyl.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzb1gltyl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzb1gltyl.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzb1gltyl.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzb1gltyl.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzb1gltyl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2g7iejc7.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g7iejc7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g7iejc7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2g7iejc7.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g7iejc7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g7iejc7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2g7iejc7.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2g7iejc7.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g7iejc7.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2g7iejc7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(num) && isodd(num\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcn0926hq.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcn0926hq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcn0926hq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcn0926hq.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcn0926hq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcn0926hq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcn0926hq.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcn0926hq.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcn0926hq.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcn0926hq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(first(digits(num)))\
    \ && isodd(last(digits(num)))\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(num) && isodd(num\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps8n7n45r.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps8n7n45r.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8n7n45r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps8n7n45r.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps8n7n45r.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8n7n45r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps8n7n45r.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps8n7n45r.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8n7n45r.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps8n7n45r.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm1ai5_qj.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm1ai5_qj.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm1ai5_qj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm1ai5_qj.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm1ai5_qj.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm1ai5_qj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm1ai5_qj.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm1ai5_qj.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm1ai5_qj.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm1ai5_qj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10^(floor(log10(i))\
    \ + 1) == 1 || i % 10^(floor(log10(i)) + 1) == 3 || i % 10^(floor(log10(i)) +\
    \ 1) == 5 || i % 10^(floor(log10(i)) + 1) == 7 || i % 10^(floor(log10(i)) + 1)\
    \ == 9)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzt9l3ek3.jl:25\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzt9l3ek3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzt9l3ek3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzt9l3ek3.jl:26\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzt9l3ek3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzt9l3ek3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzt9l3ek3.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzt9l3ek3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzt9l3ek3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzt9l3ek3.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzt9l3ek3.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzt9l3ek3.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzt9l3ek3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(first(num))\
    \ && isodd(last(num))\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3gznevcc.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3gznevcc.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3gznevcc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3gznevcc.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3gznevcc.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3gznevcc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3gznevcc.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3gznevcc.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3gznevcc.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3gznevcc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(i))\
    \ && isodd(last(i))\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxfczxnxm.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxfczxnxm.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxfczxnxm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxfczxnxm.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxfczxnxm.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxfczxnxm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxfczxnxm.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxfczxnxm.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxfczxnxm.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxfczxnxm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10^(floor(log10(i))\
    \ + 1) == 1 || i % 10^(floor(log10(i)) + 1) == 3 || i % 10^(floor(log10(i)) +\
    \ 1) == 5 || i % 10^(floor(log10(i)) + 1) == 7 || i % 10^(floor(log10(i)) + 1)\
    \ == 9)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw6xe78jx.jl:25\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw6xe78jx.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw6xe78jx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw6xe78jx.jl:26\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw6xe78jx.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw6xe78jx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw6xe78jx.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw6xe78jx.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw6xe78jx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw6xe78jx.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw6xe78jx.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw6xe78jx.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw6xe78jx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && num % 2 != 0 &&\
    \ num % 10 != 0\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7h7igq4s.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7h7igq4s.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7h7igq4s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7h7igq4s.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7h7igq4s.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7h7igq4s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7h7igq4s.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7h7igq4s.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7h7igq4s.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7h7igq4s.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    cnt = 0\n    for num in nums\n        if num > 10 && (num % 10 == 1 ||\
    \ num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9) && (num %\
    \ 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9)\n\
    \            cnt += 1\n        end\n    end\n    return cnt\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr6on1942.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr6on1942.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr6on1942.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpr6on1942.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr6on1942.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr6on1942.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpr6on1942.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr6on1942.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr6on1942.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr6on1942.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd84xejrn.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd84xejrn.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd84xejrn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpd84xejrn.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd84xejrn.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd84xejrn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpd84xejrn.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd84xejrn.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd84xejrn.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd84xejrn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6kpup9ta.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6kpup9ta.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6kpup9ta.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6kpup9ta.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6kpup9ta.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6kpup9ta.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6kpup9ta.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6kpup9ta.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6kpup9ta.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6kpup9ta.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdstxtuaw.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdstxtuaw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdstxtuaw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdstxtuaw.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdstxtuaw.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdstxtuaw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdstxtuaw.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdstxtuaw.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdstxtuaw.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdstxtuaw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(first(digits(num)))\
    \ && isodd(last(digits(num)))\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10^(floor(log10(i))\
    \ + 1) == 1 || i % 10^(floor(log10(i)) + 1) == 3 || i % 10^(floor(log10(i)) +\
    \ 1) == 5 || i % 10^(floor(log10(i)) + 1) == 7 || i % 10^(floor(log10(i)) + 1)\
    \ == 9)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz_n2gge7.jl:25\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz_n2gge7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz_n2gge7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz_n2gge7.jl:26\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz_n2gge7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz_n2gge7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz_n2gge7.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz_n2gge7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz_n2gge7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz_n2gge7.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpz_n2gge7.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz_n2gge7.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz_n2gge7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(first(digits(num)))\
    \ && isodd(last(digits(num)))\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && isodd(num) && isodd(num\
    \ % 10)\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp239rnk57.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp239rnk57.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp239rnk57.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp239rnk57.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp239rnk57.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp239rnk57.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp239rnk57.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp239rnk57.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp239rnk57.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp239rnk57.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i % 10 == 1 || i %\
    \ 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu25torub.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu25torub.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu25torub.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu25torub.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu25torub.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu25torub.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu25torub.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpu25torub.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu25torub.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu25torub.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
