name: HumanEval_7_filter_by_substring
language: jl
results:
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4wfbf_fs.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp4wfbf_fs.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp4wfbf_fs.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp4wfbf_fs.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp4wfbf_fs.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp4wfbf_fs.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp4wfbf_fs.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4wfbf_fs.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp41npcw25.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp41npcw25.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp41npcw25.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp41npcw25.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp41npcw25.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp41npcw25.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp41npcw25"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp41npcw25.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphu68nu8w.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmphu68nu8w.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmphu68nu8w.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmphu68nu8w.jl:14\ntest set:\
    \ Error During Test at /tmp/tmphu68nu8w.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmphu68nu8w.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmphu68nu8w.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphu68nu8w.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpep4na8lg.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpep4na8lg.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpep4na8lg.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpep4na8lg.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpep4na8lg.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpep4na8lg.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpep4na8lg.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpep4na8lg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk_iaju21.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpk_iaju21.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpk_iaju21.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpk_iaju21.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpk_iaju21.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpk_iaju21.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpk_iaju21.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk_iaju21.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_2b4rqck.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_2b4rqck.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp_2b4rqck.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp_2b4rqck.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_2b4rqck.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp_2b4rqck.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp_2b4rqck"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_2b4rqck.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphatvfbd0.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmphatvfbd0.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmphatvfbd0.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmphatvfbd0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmphatvfbd0.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmphatvfbd0.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmphatvfbd0.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphatvfbd0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp58b2cgib.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp58b2cgib.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp58b2cgib.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp58b2cgib.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp58b2cgib.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp58b2cgib.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp58b2cgib.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp58b2cgib.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz1i7hgg5.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpz1i7hgg5.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpz1i7hgg5.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpz1i7hgg5.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpz1i7hgg5.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpz1i7hgg5.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpz1i7hgg5.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz1i7hgg5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv02ok5ja.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpv02ok5ja.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpv02ok5ja.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpv02ok5ja.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpv02ok5ja.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpv02ok5ja.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpv02ok5ja.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv02ok5ja.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8_iq4c3l.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp8_iq4c3l.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp8_iq4c3l.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp8_iq4c3l.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp8_iq4c3l.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp8_iq4c3l.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp8_iq4c3l"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8_iq4c3l.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjbq86guq.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpjbq86guq.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpjbq86guq.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpjbq86guq.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpjbq86guq.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpjbq86guq.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpjbq86guq.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjbq86guq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp82y0xcq2.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp82y0xcq2.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp82y0xcq2.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp82y0xcq2.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp82y0xcq2.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp82y0xcq2.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp82y0xcq2.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp82y0xcq2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4zw0ueby.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp4zw0ueby.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp4zw0ueby.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp4zw0ueby.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp4zw0ueby.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp4zw0ueby.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp4zw0ueby.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4zw0ueby.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpglqvtpo0.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpglqvtpo0.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpglqvtpo0.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpglqvtpo0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpglqvtpo0.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpglqvtpo0.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpglqvtpo0.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpglqvtpo0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7nd7x8km.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp7nd7x8km.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp7nd7x8km.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp7nd7x8km.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp7nd7x8km.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp7nd7x8km.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp7nd7x8km.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7nd7x8km.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp94errxwh.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp94errxwh.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp94errxwh.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp94errxwh.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp94errxwh.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp94errxwh.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp94errxwh.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp94errxwh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvkqj9fqr.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvkqj9fqr.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpvkqj9fqr.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpvkqj9fqr.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpvkqj9fqr.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvkqj9fqr.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpvkqj9fqr.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvkqj9fqr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjr713tam.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpjr713tam.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpjr713tam.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpjr713tam.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpjr713tam.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpjr713tam.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpjr713tam.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjr713tam.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0u2in1aw.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp0u2in1aw.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp0u2in1aw.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp0u2in1aw.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp0u2in1aw.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp0u2in1aw.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp0u2in1aw.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0u2in1aw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2kcdsuwt.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp2kcdsuwt.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp2kcdsuwt.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp2kcdsuwt.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2kcdsuwt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp2kcdsuwt.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp2kcdsuwt.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2kcdsuwt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjau03bpt.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpjau03bpt.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpjau03bpt.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpjau03bpt.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpjau03bpt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpjau03bpt.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpjau03bpt.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjau03bpt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwxejqwme.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpwxejqwme.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpwxejqwme.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpwxejqwme.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpwxejqwme.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpwxejqwme.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpwxejqwme.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwxejqwme.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplsbsxmzg.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmplsbsxmzg.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmplsbsxmzg.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmplsbsxmzg.jl:14\ntest set:\
    \ Error During Test at /tmp/tmplsbsxmzg.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmplsbsxmzg.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmplsbsxmzg.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplsbsxmzg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpokvm_hyl.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpokvm_hyl.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpokvm_hyl.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpokvm_hyl.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpokvm_hyl.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpokvm_hyl.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpokvm_hyl"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpokvm_hyl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw58zsx_z.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpw58zsx_z.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpw58zsx_z.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpw58zsx_z.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpw58zsx_z.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpw58zsx_z.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpw58zsx_z.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw58zsx_z.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptd1ojg6b.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmptd1ojg6b.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmptd1ojg6b.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmptd1ojg6b.jl:14\ntest set:\
    \ Error During Test at /tmp/tmptd1ojg6b.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmptd1ojg6b.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmptd1ojg6b.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptd1ojg6b.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4es0its1.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp4es0its1.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp4es0its1.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp4es0its1.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp4es0its1.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp4es0its1.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp4es0its1.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4es0its1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp462gv_pz.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp462gv_pz.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp462gv_pz.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp462gv_pz.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp462gv_pz.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp462gv_pz.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp462gv_pz.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp462gv_pz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz3lbka4b.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpz3lbka4b.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpz3lbka4b.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpz3lbka4b.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpz3lbka4b.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpz3lbka4b.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpz3lbka4b.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz3lbka4b.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprojh0g8r.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmprojh0g8r.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmprojh0g8r.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmprojh0g8r.jl:14\ntest set:\
    \ Error During Test at /tmp/tmprojh0g8r.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmprojh0g8r.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmprojh0g8r.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprojh0g8r.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl5o4rnh8.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpl5o4rnh8.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpl5o4rnh8.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpl5o4rnh8.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpl5o4rnh8.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpl5o4rnh8.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpl5o4rnh8"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl5o4rnh8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoo6wqqxb.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpoo6wqqxb.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpoo6wqqxb.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpoo6wqqxb.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpoo6wqqxb.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpoo6wqqxb.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpoo6wqqxb.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoo6wqqxb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4azg0al1.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp4azg0al1.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp4azg0al1.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp4azg0al1.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp4azg0al1.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp4azg0al1.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp4azg0al1.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4azg0al1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjm_lwhcd.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpjm_lwhcd.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpjm_lwhcd.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpjm_lwhcd.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpjm_lwhcd.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpjm_lwhcd.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpjm_lwhcd.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjm_lwhcd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplal02oil.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmplal02oil.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmplal02oil.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmplal02oil.jl:14\ntest set:\
    \ Error During Test at /tmp/tmplal02oil.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmplal02oil.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmplal02oil.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplal02oil.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiwsdzl09.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpiwsdzl09.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpiwsdzl09.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpiwsdzl09.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpiwsdzl09.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpiwsdzl09.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpiwsdzl09.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiwsdzl09.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_1vv5hjt.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_1vv5hjt.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp_1vv5hjt.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp_1vv5hjt.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_1vv5hjt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_1vv5hjt.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp_1vv5hjt.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_1vv5hjt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu303foed.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpu303foed.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpu303foed.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpu303foed.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpu303foed.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpu303foed.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpu303foed.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu303foed.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz_nq01gk.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpz_nq01gk.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpz_nq01gk.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpz_nq01gk.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpz_nq01gk.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpz_nq01gk.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpz_nq01gk.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz_nq01gk.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz_kcxvmp.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpz_kcxvmp.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpz_kcxvmp.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpz_kcxvmp.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpz_kcxvmp.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpz_kcxvmp.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpz_kcxvmp.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz_kcxvmp.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxxn4nl2l.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpxxn4nl2l.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpxxn4nl2l.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpxxn4nl2l.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpxxn4nl2l.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpxxn4nl2l.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpxxn4nl2l.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxxn4nl2l.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpatb2w0yw.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpatb2w0yw.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpatb2w0yw.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpatb2w0yw.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpatb2w0yw.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpatb2w0yw.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpatb2w0yw"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpatb2w0yw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppdwfpgbq.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmppdwfpgbq.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmppdwfpgbq.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmppdwfpgbq.jl:14\ntest set:\
    \ Error During Test at /tmp/tmppdwfpgbq.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmppdwfpgbq.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmppdwfpgbq.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppdwfpgbq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptt0fly03.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmptt0fly03.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmptt0fly03.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmptt0fly03.jl:14\ntest set:\
    \ Error During Test at /tmp/tmptt0fly03.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmptt0fly03.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmptt0fly03.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptt0fly03.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg8ivlbcb.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpg8ivlbcb.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpg8ivlbcb.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpg8ivlbcb.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpg8ivlbcb.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpg8ivlbcb.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpg8ivlbcb.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg8ivlbcb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoj_a600h.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpoj_a600h.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpoj_a600h.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpoj_a600h.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpoj_a600h.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpoj_a600h.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpoj_a600h.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoj_a600h.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpha7yh0bu.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpha7yh0bu.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpha7yh0bu.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpha7yh0bu.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpha7yh0bu.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpha7yh0bu.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpha7yh0bu.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpha7yh0bu.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwjb9sj89.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpwjb9sj89.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpwjb9sj89.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpwjb9sj89.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpwjb9sj89.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpwjb9sj89.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpwjb9sj89.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwjb9sj89.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcps3dk6_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpcps3dk6_.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpcps3dk6_.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpcps3dk6_.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpcps3dk6_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpcps3dk6_.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpcps3dk6_.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcps3dk6_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwdqxaq75.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpwdqxaq75.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpwdqxaq75.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpwdqxaq75.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpwdqxaq75.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpwdqxaq75.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpwdqxaq75"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwdqxaq75.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1ifro92c.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp1ifro92c.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp1ifro92c.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp1ifro92c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1ifro92c.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp1ifro92c.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp1ifro92c.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ifro92c.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3a4wo62a.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp3a4wo62a.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp3a4wo62a.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp3a4wo62a.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp3a4wo62a.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp3a4wo62a.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp3a4wo62a.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3a4wo62a.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7nbij3gm.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp7nbij3gm.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp7nbij3gm.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp7nbij3gm.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp7nbij3gm.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp7nbij3gm.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp7nbij3gm.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7nbij3gm.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfo6ya9sw.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpfo6ya9sw.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpfo6ya9sw.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpfo6ya9sw.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo6ya9sw.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpfo6ya9sw.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpfo6ya9sw"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfo6ya9sw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp06luli0b.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp06luli0b.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp06luli0b.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp06luli0b.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp06luli0b.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp06luli0b.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp06luli0b.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp06luli0b.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplsq97pgb.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmplsq97pgb.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmplsq97pgb.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmplsq97pgb.jl:14\ntest set:\
    \ Error During Test at /tmp/tmplsq97pgb.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmplsq97pgb.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmplsq97pgb.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplsq97pgb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzlag9m56.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpzlag9m56.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpzlag9m56.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpzlag9m56.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpzlag9m56.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpzlag9m56.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpzlag9m56.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzlag9m56.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps2z1uds3.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmps2z1uds3.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmps2z1uds3.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmps2z1uds3.jl:14\ntest set:\
    \ Error During Test at /tmp/tmps2z1uds3.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmps2z1uds3.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmps2z1uds3.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps2z1uds3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpepvqjzyv.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpepvqjzyv.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpepvqjzyv.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpepvqjzyv.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpepvqjzyv.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpepvqjzyv.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpepvqjzyv"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpepvqjzyv.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpayt3rac5.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpayt3rac5.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpayt3rac5.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpayt3rac5.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpayt3rac5.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpayt3rac5.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpayt3rac5.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpayt3rac5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsypbv54r.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsypbv54r.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpsypbv54r.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpsypbv54r.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpsypbv54r.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsypbv54r.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpsypbv54r.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsypbv54r.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjjq2zti2.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpjjq2zti2.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpjjq2zti2.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpjjq2zti2.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpjjq2zti2.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpjjq2zti2.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpjjq2zti2.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjjq2zti2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp81tw763z.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp81tw763z.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp81tw763z.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp81tw763z.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp81tw763z.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp81tw763z.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp81tw763z"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp81tw763z.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcc71ekix.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpcc71ekix.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpcc71ekix.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpcc71ekix.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpcc71ekix.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpcc71ekix.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpcc71ekix.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcc71ekix.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8gupd73q.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp8gupd73q.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp8gupd73q.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp8gupd73q.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp8gupd73q.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp8gupd73q.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp8gupd73q.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8gupd73q.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvurmrwxe.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvurmrwxe.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpvurmrwxe.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpvurmrwxe.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpvurmrwxe.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvurmrwxe.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpvurmrwxe.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvurmrwxe.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphxruuwt1.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmphxruuwt1.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmphxruuwt1.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmphxruuwt1.jl:14\ntest set:\
    \ Error During Test at /tmp/tmphxruuwt1.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmphxruuwt1.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmphxruuwt1.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphxruuwt1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6eo7e7e3.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp6eo7e7e3.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp6eo7e7e3.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp6eo7e7e3.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp6eo7e7e3.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp6eo7e7e3.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp6eo7e7e3.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6eo7e7e3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy_gp5qye.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpy_gp5qye.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpy_gp5qye.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpy_gp5qye.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpy_gp5qye.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpy_gp5qye.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpy_gp5qye"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy_gp5qye.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6bbn_1z_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp6bbn_1z_.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp6bbn_1z_.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp6bbn_1z_.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp6bbn_1z_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp6bbn_1z_.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp6bbn_1z_.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6bbn_1z_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2dl0ed0j.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp2dl0ed0j.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp2dl0ed0j.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp2dl0ed0j.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2dl0ed0j.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp2dl0ed0j.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp2dl0ed0j"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2dl0ed0j.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6ded2qha.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp6ded2qha.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp6ded2qha.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp6ded2qha.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp6ded2qha.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp6ded2qha.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp6ded2qha.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ded2qha.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp36etaw3z.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp36etaw3z.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp36etaw3z.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp36etaw3z.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp36etaw3z.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp36etaw3z.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp36etaw3z.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp36etaw3z.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpldzzvsyr.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpldzzvsyr.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpldzzvsyr.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpldzzvsyr.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpldzzvsyr.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpldzzvsyr.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpldzzvsyr.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpldzzvsyr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpljp3rq3l.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpljp3rq3l.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpljp3rq3l.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpljp3rq3l.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpljp3rq3l.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpljp3rq3l.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpljp3rq3l.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpljp3rq3l.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk18q496p.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpk18q496p.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpk18q496p.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpk18q496p.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpk18q496p.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpk18q496p.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpk18q496p.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk18q496p.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp__kkykg9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp__kkykg9.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp__kkykg9.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp__kkykg9.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp__kkykg9.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp__kkykg9.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp__kkykg9.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp__kkykg9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp99d029l8.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp99d029l8.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp99d029l8.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp99d029l8.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp99d029l8.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp99d029l8.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp99d029l8.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp99d029l8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg77km86d.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpg77km86d.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpg77km86d.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpg77km86d.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpg77km86d.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpg77km86d.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpg77km86d.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg77km86d.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxcrarr7e.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpxcrarr7e.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpxcrarr7e.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpxcrarr7e.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpxcrarr7e.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpxcrarr7e.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpxcrarr7e.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxcrarr7e.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq4qfzovg.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpq4qfzovg.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpq4qfzovg.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpq4qfzovg.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpq4qfzovg.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpq4qfzovg.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpq4qfzovg.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq4qfzovg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbf_hmw0v.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpbf_hmw0v.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpbf_hmw0v.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpbf_hmw0v.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpbf_hmw0v.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpbf_hmw0v.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpbf_hmw0v.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbf_hmw0v.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmfj06hm4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpmfj06hm4.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpmfj06hm4.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpmfj06hm4.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpmfj06hm4.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpmfj06hm4.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpmfj06hm4.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmfj06hm4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(s -> contains(s, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq_84e2o3.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpq_84e2o3.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpq_84e2o3.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpq_84e2o3.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpq_84e2o3.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpq_84e2o3.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpq_84e2o3.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq_84e2o3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7dcegiee.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp7dcegiee.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp7dcegiee.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp7dcegiee.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp7dcegiee.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp7dcegiee.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp7dcegiee.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7dcegiee.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzqnlxibq.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpzqnlxibq.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpzqnlxibq.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpzqnlxibq.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpzqnlxibq.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpzqnlxibq.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpzqnlxibq.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzqnlxibq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnwu1al8g.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpnwu1al8g.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpnwu1al8g.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpnwu1al8g.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpnwu1al8g.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpnwu1al8g.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpnwu1al8g.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnwu1al8g.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4ekm6vzo.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp4ekm6vzo.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp4ekm6vzo.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp4ekm6vzo.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp4ekm6vzo.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp4ekm6vzo.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp4ekm6vzo.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ekm6vzo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpus_3o1x6.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpus_3o1x6.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpus_3o1x6.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpus_3o1x6.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpus_3o1x6.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpus_3o1x6.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpus_3o1x6.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpus_3o1x6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_qkz_t58.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_qkz_t58.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp_qkz_t58.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp_qkz_t58.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_qkz_t58.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_qkz_t58.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp_qkz_t58.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_qkz_t58.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp91msqdyz.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp91msqdyz.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp91msqdyz.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp91msqdyz.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp91msqdyz.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp91msqdyz.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp91msqdyz"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp91msqdyz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_im6scw1.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_im6scw1.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp_im6scw1.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp_im6scw1.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_im6scw1.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_im6scw1.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp_im6scw1.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_im6scw1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgmmpgxaf.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgmmpgxaf.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgmmpgxaf.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpgmmpgxaf.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgmmpgxaf.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgmmpgxaf.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgmmpgxaf.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgmmpgxaf.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6qjmztcy.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp6qjmztcy.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp6qjmztcy.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp6qjmztcy.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp6qjmztcy.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp6qjmztcy.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp6qjmztcy.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6qjmztcy.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvovtiv6_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvovtiv6_.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpvovtiv6_.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpvovtiv6_.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpvovtiv6_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvovtiv6_.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpvovtiv6_.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvovtiv6_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb4923z39.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpb4923z39.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpb4923z39.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpb4923z39.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpb4923z39.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpb4923z39.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpb4923z39.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb4923z39.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpudiyrnym.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpudiyrnym.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpudiyrnym.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpudiyrnym.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpudiyrnym.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpudiyrnym.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpudiyrnym.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpudiyrnym.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxtj57kjw.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpxtj57kjw.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpxtj57kjw.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpxtj57kjw.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpxtj57kjw.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpxtj57kjw.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpxtj57kjw.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxtj57kjw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxxqt7o7n.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpxxqt7o7n.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpxxqt7o7n.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpxxqt7o7n.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpxxqt7o7n.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpxxqt7o7n.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpxxqt7o7n.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxxqt7o7n.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe671y1v7.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpe671y1v7.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpe671y1v7.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpe671y1v7.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpe671y1v7.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpe671y1v7.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpe671y1v7.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe671y1v7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf4g76oty.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpf4g76oty.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpf4g76oty.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpf4g76oty.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpf4g76oty.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpf4g76oty.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpf4g76oty"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf4g76oty.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnitelrks.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpnitelrks.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpnitelrks.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpnitelrks.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpnitelrks.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpnitelrks.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpnitelrks.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnitelrks.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0kaw730i.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp0kaw730i.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp0kaw730i.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp0kaw730i.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp0kaw730i.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp0kaw730i.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp0kaw730i"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0kaw730i.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2gs1w35q.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp2gs1w35q.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp2gs1w35q.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp2gs1w35q.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2gs1w35q.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp2gs1w35q.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp2gs1w35q"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2gs1w35q.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptt5d4b_s.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmptt5d4b_s.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmptt5d4b_s.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmptt5d4b_s.jl:14\ntest set:\
    \ Error During Test at /tmp/tmptt5d4b_s.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmptt5d4b_s.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmptt5d4b_s.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptt5d4b_s.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3f68wbi5.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp3f68wbi5.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp3f68wbi5.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp3f68wbi5.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp3f68wbi5.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp3f68wbi5.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp3f68wbi5.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3f68wbi5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1f3fw029.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp1f3fw029.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp1f3fw029.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp1f3fw029.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1f3fw029.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp1f3fw029.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp1f3fw029.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1f3fw029.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0txxoyxl.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp0txxoyxl.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp0txxoyxl.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp0txxoyxl.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp0txxoyxl.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp0txxoyxl.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp0txxoyxl"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0txxoyxl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw3kdulpd.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpw3kdulpd.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpw3kdulpd.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpw3kdulpd.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpw3kdulpd.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpw3kdulpd.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpw3kdulpd.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw3kdulpd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpskuvd922.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpskuvd922.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpskuvd922.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpskuvd922.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpskuvd922.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpskuvd922.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpskuvd922.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpskuvd922.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa8_7an4b.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpa8_7an4b.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpa8_7an4b.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpa8_7an4b.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpa8_7an4b.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpa8_7an4b.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpa8_7an4b.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa8_7an4b.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgbrqynx6.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgbrqynx6.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgbrqynx6.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpgbrqynx6.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgbrqynx6.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgbrqynx6.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgbrqynx6.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgbrqynx6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_yevq7p2.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_yevq7p2.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp_yevq7p2.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp_yevq7p2.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_yevq7p2.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_yevq7p2.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp_yevq7p2.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_yevq7p2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkxdo66kq.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpkxdo66kq.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpkxdo66kq.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpkxdo66kq.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpkxdo66kq.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpkxdo66kq.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpkxdo66kq"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkxdo66kq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa0ivmr4v.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpa0ivmr4v.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpa0ivmr4v.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpa0ivmr4v.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpa0ivmr4v.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpa0ivmr4v.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpa0ivmr4v.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa0ivmr4v.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvategzjt.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvategzjt.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpvategzjt.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpvategzjt.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpvategzjt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvategzjt.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpvategzjt.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvategzjt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdiiirdve.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpdiiirdve.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpdiiirdve.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpdiiirdve.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpdiiirdve.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpdiiirdve.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpdiiirdve"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdiiirdve.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7mqgb1_x.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp7mqgb1_x.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp7mqgb1_x.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp7mqgb1_x.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp7mqgb1_x.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp7mqgb1_x.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp7mqgb1_x.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7mqgb1_x.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp19mk3k2r.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp19mk3k2r.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp19mk3k2r.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp19mk3k2r.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp19mk3k2r.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp19mk3k2r.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp19mk3k2r.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp19mk3k2r.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa4mcawtt.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpa4mcawtt.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpa4mcawtt.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpa4mcawtt.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpa4mcawtt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpa4mcawtt.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpa4mcawtt.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa4mcawtt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz5t9bkrn.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpz5t9bkrn.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpz5t9bkrn.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpz5t9bkrn.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpz5t9bkrn.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpz5t9bkrn.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpz5t9bkrn.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz5t9bkrn.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf7uva5jx.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpf7uva5jx.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpf7uva5jx.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpf7uva5jx.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpf7uva5jx.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpf7uva5jx.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpf7uva5jx.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf7uva5jx.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0wx9uqm1.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp0wx9uqm1.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp0wx9uqm1.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp0wx9uqm1.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp0wx9uqm1.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp0wx9uqm1.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp0wx9uqm1.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0wx9uqm1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo5hcaxo0.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpo5hcaxo0.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpo5hcaxo0.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpo5hcaxo0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpo5hcaxo0.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpo5hcaxo0.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpo5hcaxo0.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo5hcaxo0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpako1si1i.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpako1si1i.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpako1si1i.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpako1si1i.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpako1si1i.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpako1si1i.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpako1si1i.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpako1si1i.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7llv9i6j.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp7llv9i6j.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp7llv9i6j.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp7llv9i6j.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp7llv9i6j.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp7llv9i6j.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp7llv9i6j.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7llv9i6j.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1z90aw8h.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp1z90aw8h.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp1z90aw8h.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp1z90aw8h.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1z90aw8h.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp1z90aw8h.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp1z90aw8h.jl:17 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1z90aw8h.jl:12\n"
  exit_code: 1
  status: SyntaxError
